
HC05_Config.elf:     file format elf32-littlenios2
HC05_Config.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00013500 memsz 0x00013500 flags r-x
    LOAD off    0x00014520 vaddr 0x00033520 paddr 0x00035108 align 2**12
         filesz 0x00001be8 memsz 0x00001be8 flags rw-
    LOAD off    0x00016cf0 vaddr 0x00036cf0 paddr 0x00036cf0 align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012d18  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005c4  00032f5c  00032f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be8  00033520  00035108  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  00036cf0  00036cf0  00016cf0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00036e6c  00036e6c  00016108  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00016108  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001448  00000000  00000000  00016130  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002fb1b  00000000  00000000  00017578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000cedc  00000000  00000000  00047093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000fc8f  00000000  00000000  00053f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000031d0  00000000  00000000  00063c00  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00006d46  00000000  00000000  00066dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001b9f7  00000000  00000000  0006db16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00089510  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001fd0  00000000  00000000  00089570  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00090622  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00090625  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00090631  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00090632  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00090633  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0009063e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00090649  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  00090654  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000051  00000000  00000000  00090658  2**0
                  CONTENTS, READONLY
 26 .jdi          00003d2a  00000000  00000000  000906a9  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f32a  00000000  00000000  000943d3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00032f5c l    d  .rodata	00000000 .rodata
00033520 l    d  .rwdata	00000000 .rwdata
00036cf0 l    d  .bss	00000000 .bss
00036e6c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HC05_Config_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 CUart.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00020ad8 l     F .text	000000a4 _ZL21size_of_encoded_valueh
00020b7c l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
00020d88 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00020ddc l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
00020e68 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00020f9c l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
00021024 l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
000211e4 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00036cf0 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 eh_alloc.cc
00021dac l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00036d34 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00021e64 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
00022014 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00022370 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00022a34 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00036cf8 l     O .bss	00000004 fc_static
00022b4c l     F .text	000000c0 _Unwind_RaiseException_Phase2
00022c0c l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00033256 l     O .rodata	00000010 zeroes.4404
000260e8 l     F .text	000000bc __sbprintf
00033266 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000262f8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00027e28 l     F .text	00000008 __fp_unlock
00027e3c l     F .text	0000019c __sinit.part.1
00027fd8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00033928 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00033d6c l     O .rwdata	00000020 lc_ctype_charset
00033d4c l     O .rwdata	00000020 lc_message_charset
00033d8c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00033298 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002a970 l     F .text	000000fc __sprint_r.part.0
000333cc l     O .rodata	00000010 blanks.4348
000333bc l     O .rodata	00000010 zeroes.4349
0002befc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002fa04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002fb10 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
0002fb70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_fstat.c
0002fccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002fdd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0002feb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00030024 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00030110 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
000302e4 l     F .text	0000003c alt_get_errno
00030320 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00030538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000350f8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00030958 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00030a8c l     F .text	00000034 alt_dev_reg
00033f6c l     O .rwdata	00001060 jtag_uart_0
00034fcc l     O .rwdata	000000c4 hc_05_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00030d9c l     F .text	0000020c altera_avalon_jtag_uart_irq
00030fa8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000315e0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00031890 l     F .text	0000009c altera_avalon_uart_irq
0003192c l     F .text	000000e4 altera_avalon_uart_rxirq
00031a10 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00031bac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00031dc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00032278 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00032928 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00036d30 g     O .bss	00000004 alt_instruction_exception_handler
00021f6c g     F .text	00000028 __cxa_free_exception
000227e8 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0002a0e4 g     F .text	00000074 _mprec_log10
00021d34 g     F .text	00000018 _ZSt10unexpectedv
0002a1d0 g     F .text	0000008c __any_on
0002c498 g     F .text	00000054 _isatty_r
000332a4 g     O .rodata	00000028 __mprec_tinytens
00030220 g     F .text	0000007c alt_main
00023934 g     F .text	000000c0 _puts_r
00036d6c g     O .bss	00000100 alt_irq
00022360 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
0002c4ec g     F .text	00000060 _lseek_r
00022cc8 g     F .text	00000020 .hidden _Unwind_GetIPInfo
00035108 g       *ABS*	00000000 __flash_rwdata_start
0002e530 g     F .text	00000088 .hidden __eqdf2
00022444 g     F .text	00000084 __cxa_rethrow
00022c54 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00021d70 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00022cb8 g     F .text	00000010 .hidden _Unwind_GetIP
00036e6c g       *ABS*	00000000 __alt_heap_start
00023d00 g     F .text	0000005c _kill_r
000238f8 g     F .text	0000003c printf
0002c704 g     F .text	0000009c _wcrtomb_r
00023ac8 g     F .text	00000084 _signal_r
0002a90c g     F .text	0000005c __sseek
00028178 g     F .text	00000010 __sinit
0002c5ac g     F .text	00000140 __swbuf_r
00021fe8 g     F .text	0000002c __cxa_free_dependent_exception
00022520 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00028c40 g     F .text	0000007c _setlocale_r
00033144  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
00027fe0 g     F .text	00000068 __sfmoreglue
000302c0 g     F .text	00000024 __malloc_unlock
00022360 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00021c2c g     F .text	00000020 _ZSt18uncaught_exceptionv
00022860 g     F .text	00000020 __cxa_deleted_virtual
00029104 g     F .text	0000015c memmove
00022338 g     F .text	00000004 _ZNSt9exceptionD2Ev
00028160 g     F .text	00000018 _cleanup
00029260 g     F .text	000000a8 _Balloc
000202cc g     F .text	00000048 _ZN5CUartD2Ev
0002034c g     F .text	00000048 _ZN5CUart4OpenEPc
0002e5b8 g     F .text	000000dc .hidden __gtdf2
00033108  w    O .rodata	00000014 _ZTVSt13bad_exception
00032a68 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00022d04 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002c43c g     F .text	0000005c _fstat_r
00036d08 g     O .bss	00000004 errno
0002a888 g     F .text	00000008 __seofread
00022ee0 g     F .text	00000074 .hidden _Unwind_Backtrace
00036d1c g     O .bss	00000004 alt_argv
0003d090 g       *ABS*	00000000 _gp
00030928 g     F .text	00000030 usleep
0002fdb8 g     F .text	00000020 getpid
0002188c g     F .text	00000230 __cxa_call_unexpected
00021abc g     F .text	00000008 __cxa_get_exception_ptr
00033dec g     O .rwdata	00000180 alt_fd_list
00022df4 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00022c84 g     F .text	00000018 .hidden _Unwind_GetCFA
00021d4c g     F .text	00000014 _ZSt13set_terminatePFvvE
00032418 g     F .text	00000090 alt_find_dev
00028fbc g     F .text	00000148 memcpy
00021f94 g     F .text	00000054 __cxa_allocate_dependent_exception
00027e30 g     F .text	0000000c _cleanup_r
000220e8 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0002f81c g     F .text	000000dc .hidden __floatsidf
000329ec g     F .text	0000007c alt_io_redirect
0002e694 g     F .text	000000f4 .hidden __ltdf2
00032f5c g       *ABS*	00000000 __DTOR_END__
00022100 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
000239f4 g     F .text	00000014 puts
00032b1c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0002a7c0 g     F .text	00000074 __fpclassifyd
0002a040 g     F .text	000000a4 __ratio
0002bee0 g     F .text	0000001c __vfiprintf_internal
000311a0 g     F .text	0000021c altera_avalon_jtag_uart_read
00022f6c g     F .text	00000014 malloc
000238c8 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00022978 g     F .text	00000064 .hidden __udivsi3
0002fe14 g     F .text	000000a4 isatty
00023b4c g     F .text	000000bc _raise_r
000332f4 g     O .rodata	000000c8 __mprec_tens
00028cbc g     F .text	0000000c __locale_charset
00032a8c g     F .text	00000090 alt_icache_flush
00036d04 g     O .bss	00000004 __malloc_top_pad
00023d5c g     F .text	00000004 _getpid_r
000350d8 g     O .rwdata	00000004 __mb_cur_max
00028cec g     F .text	0000000c _localeconv_r
0002966c g     F .text	0000003c __i2b
000285fc g     F .text	000004bc __sfvwrite_r
00022280 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00023c08 g     F .text	000000a8 __sigtramp_r
00023a08 g     F .text	00000054 _sbrk_r
000331b4  w    O .rodata	00000020 _ZTVSt9type_info
0002c54c g     F .text	00000060 _read_r
00022340 g     F .text	0000000c _ZNKSt9exception4whatEv
00020460 g     F .text	00000098 _ZN5CUart5WriteEPci
000350f0 g     O .rwdata	00000004 alt_max_fd
0002c130 g     F .text	000000f0 _fclose_r
00027df8 g     F .text	00000030 fflush
00020290 g     F .text	0000003c _ZN5CUartC1Ev
00036d00 g     O .bss	00000004 __malloc_max_sbrked_mem
000205bc g     F .text	00000108 _ZN5CUart15ReadWithTimeoutEPhtPtm
0002d39c g     F .text	000008ac .hidden __adddf3
00033178  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00029de8 g     F .text	0000010c __b2d
0002ce64 g     F .text	00000538 .hidden __umoddi3
0003014c g     F .text	000000d4 lseek
00022144 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00020ad4 g     F .text	00000004 _ZdlPv
000350d0 g     O .rwdata	00000004 _global_impure_ptr
0002a25c g     F .text	00000564 _realloc_r
00036e6c g       *ABS*	00000000 __bss_end
00032838 g     F .text	000000f0 alt_iic_isr_register
00030820 g     F .text	00000108 alt_tick
00022c3c g     F .text	00000018 .hidden _Unwind_SjLj_Register
0002c8ec g     F .text	00000578 .hidden __udivdi3
0002c398 g     F .text	00000024 _fputwc_r
000332cc g     O .rodata	00000028 __mprec_bigtens
00029450 g     F .text	00000104 __s2b
00022f54 g     F .text	00000018 abort
0002f8f8 g     F .text	000000a8 .hidden __floatunsidf
00029b28 g     F .text	00000060 __mcmp
000317e4 g     F .text	000000ac altera_avalon_uart_init
00021b78 g     F .text	000000b4 __cxa_end_catch
00028198 g     F .text	00000018 __fp_lock_all
000327ec g     F .text	0000004c alt_ic_irq_enabled
0002233c g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
00030784 g     F .text	0000009c alt_alarm_stop
00020314 g     F .text	00000038 _ZN5CUartD0Ev
00036d2c g     O .bss	00000004 alt_irq_active
00021d0c g     F .text	00000018 _ZSt9terminatev
000200fc g     F .exceptions	000000d4 alt_irq_handler
00033dc4 g     O .rwdata	00000028 alt_dev_null
00022368 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00033000  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00032230 g     F .text	00000048 alt_dcache_flush_all
00029554 g     F .text	00000068 __hi0bits
000350a0  w    O .rwdata	00000008 _ZTISt9exception
0002f79c g     F .text	00000080 .hidden __fixdfsi
00035108 g       *ABS*	00000000 __ram_rwdata_end
000206c4 g     F .text	000001a8 _Z11CommandReadR5CUartPciPi
000227e4 g     F .text	00000004 _ZNSt9type_infoD1Ev
000350e8 g     O .rwdata	00000008 alt_dev_list
00022368 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00030994 g     F .text	000000f8 write
000227f8 g     F .text	00000004 _ZNSt9type_infoD0Ev
00033520 g       *ABS*	00000000 __ram_rodata_end
0002fd08 g     F .text	000000b0 fstat
0002fef4 g     F .text	00000130 kill
0002e694 g     F .text	000000f4 .hidden __ledf2
000298a0 g     F .text	00000140 __pow5mult
0002aa84 g     F .text	0000145c ___vfiprintf_internal_r
00036d14 g     O .bss	00000004 __nlocale_changed
000229dc g     F .text	00000058 .hidden __umodsi3
000227f0 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00021d60 g     F .text	00000010 _ZSt13get_terminatev
00036e6c g       *ABS*	00000000 end
00031e00 g     F .text	000001ac altera_avalon_uart_write
00022ec8 g     F .text	00000018 .hidden _Unwind_DeleteException
00030cdc g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000221b0 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00032f55 g       *ABS*	00000000 __CTOR_LIST__
000386a0 g       *ABS*	00000000 __alt_stack_pointer
00031658 g     F .text	0000007c alt_avalon_timer_sc_init
00031734 g     F .text	00000060 altera_avalon_uart_write_fd
0002f9a0 g     F .text	00000064 .hidden __clzsi2
00031794 g     F .text	00000050 altera_avalon_uart_close_fd
00022070 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
000313bc g     F .text	00000224 altera_avalon_jtag_uart_write
00028188 g     F .text	00000004 __sfp_lock_acquire
00033090  w    O .rodata	00000012 _ZTSSt13bad_exception
00028ed8 g     F .text	000000e4 memchr
00023ed4 g     F .text	000021f8 ___vfprintf_internal_r
00020290 g     F .text	0000003c _ZN5CUartC2Ev
000282ec g     F .text	00000310 _free_r
00028cc8 g     F .text	00000010 __locale_mb_cur_max
00032d98 g     F .text	00000180 __call_exitprocs
00036d10 g     O .bss	00000004 __mlocale_changed
000350c8 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
00036d24 g     O .bss	00000004 _alt_tick_rate
000331a4  w    O .rodata	0000000d _ZTSSt9type_info
00022840 g     F .text	00000020 __cxa_pure_virtual
000299e0 g     F .text	00000148 __lshift
00036d28 g     O .bss	00000004 _alt_nticks
00023cc4 g     F .text	00000018 signal
00030574 g     F .text	000000fc read
00030af8 g     F .text	00000080 alt_sys_init
00032c80 g     F .text	00000118 __register_exitproc
00022564 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000296a8 g     F .text	000001f8 __multiply
00031048 g     F .text	00000068 altera_avalon_jtag_uart_close
00033520 g       *ABS*	00000000 __ram_rwdata_start
00022d24 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00032f5c g       *ABS*	00000000 __ram_rodata_start
00036d44 g     O .bss	00000028 __malloc_current_mallinfo
00022e38 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00029ef4 g     F .text	0000014c __d2b
00033130  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
000227e4 g     F .text	00000004 _ZNSt9type_infoD2Ev
0002236c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
00022760 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
00030b78 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000325b0 g     F .text	000000a4 alt_get_fd
000320d8 g     F .text	00000158 alt_busy_sleep
000350b0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0002c018 g     F .text	00000054 _close_r
00035098  w    O .rwdata	00000007 _ZTS5CUart
00032c04 g     F .text	0000007c memcmp
00030c38 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00036e6c g       *ABS*	00000000 __alt_stack_base
00030c88 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022520 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
000261a4 g     F .text	00000154 __swsetup_r
00022e7c g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0002dc48 g     F .text	000008e8 .hidden __divdf3
00028048 g     F .text	00000118 __sfp
0002a158 g     F .text	00000078 __copybits
000227e8 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00033520 g     O .rwdata	00000408 __malloc_av_
00028194 g     F .text	00000004 __sinit_lock_release
0002e788 g     F .text	00000718 .hidden __muldf3
0002a834 g     F .text	00000054 __sread
000330f4  w    O .rodata	00000014 _ZTVSt9exception
00022364 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
000324a8 g     F .text	00000108 alt_find_file
000322b4 g     F .text	000000a4 alt_dev_llist_insert
0003029c g     F .text	00000024 __malloc_lock
000306d4 g     F .text	000000b0 sbrk
00033030  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
000223b4 g     F .text	00000090 __cxa_throw
00027d9c g     F .text	0000005c _fflush_r
00022ce8 g     F .text	00000010 .hidden _Unwind_SetIP
0002c06c g     F .text	000000c4 _calloc_r
00036cf0 g       *ABS*	00000000 __bss_start
000237a0 g     F .text	00000128 memset
0002086c g     F .text	00000268 main
00036d20 g     O .bss	00000004 alt_envp
00036cfc g     O .bss	00000004 __malloc_max_total_mem
00030bd8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002c6ec g     F .text	00000018 __swbuf
00021d94 g     F .text	0000000c __cxa_get_globals_fast
0002a968 g     F .text	00000008 __sclose
000386a0 g       *ABS*	00000000 __alt_heap_limit
0002c220 g     F .text	00000014 fclose
000264f8 g     F .text	00001688 _dtoa_r
00022f94 g     F .text	0000080c _malloc_r
0002c860 g     F .text	00000030 __ascii_wctomb
0002234c g     F .text	0000000c _ZNKSt13bad_exception4whatEv
000350f4 g     O .rwdata	00000004 alt_errno
00023cdc g     F .text	00000010 _init_signal
00033024  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00028ab8 g     F .text	000000c4 _fwalk
0002233c g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00022880 g     F .text	00000084 .hidden __divsi3
000281c8 g     F .text	00000124 _malloc_trim_r
00032f5c g       *ABS*	00000000 __CTOR_END__
00023d60 g     F .text	000000dc strcmp
0002053c g     F .text	00000080 _ZN5CUart16NoneBlockingReadEPciPi
00032f5c g       *ABS*	00000000 __flash_rodata_start
0003311c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00032f5c g       *ABS*	00000000 __DTOR_LIST__
0002e530 g     F .text	00000088 .hidden __nedf2
00030ac0 g     F .text	00000038 alt_irq_init
00030670 g     F .text	00000064 alt_release_fd
00022530 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
000202cc g     F .text	00000048 _ZN5CUartD1Ev
000333dc g     O .rodata	00000100 .hidden __clz_tab
00036d0c g     O .bss	00000004 _PathLocale
00020394 g     F .text	00000048 _ZN5CUart5CloseEv
00032bb8 g     F .text	00000014 atexit
0002bfb8 g     F .text	00000060 _write_r
00028cf8 g     F .text	00000018 setlocale
00022d1c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
000224c8 g     F .text	00000058 __cxa_call_terminate
000350d4 g     O .rwdata	00000004 _impure_ptr
000350a8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00036d18 g     O .bss	00000004 alt_argc
00027b80 g     F .text	0000021c __sflush_r
000323b8 g     F .text	00000060 _do_dtors
00028ce4 g     F .text	00000008 __locale_cjk_lang
00035090  w    O .rwdata	00000008 _ZTI5CUart
00021d84 g     F .text	00000010 _ZSt14get_unexpectedv
00020020 g       .exceptions	00000000 alt_irq_entry
00029d84 g     F .text	00000064 __ulp
00022d0c g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
000281b0 g     F .text	00000018 __fp_unlock_all
000350e0 g     O .rwdata	00000008 alt_fs_list
000330d0  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
00022cf8 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00021ac4 g     F .text	000000b4 __cxa_begin_catch
00022100 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00021d24 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00020020 g       *ABS*	00000000 __ram_exceptions_start
00028d10 g     F .text	0000000c localeconv
0002235c g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
000350c0 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000204f8 g     F .text	00000044 _ZN5CUart11WriteStringEPc
00032688 g     F .text	00000050 alt_ic_isr_register
00021f0c g     F .text	00000060 __cxa_allocate_exception
0003316c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00035108 g       *ABS*	00000000 _edata
000316d4 g     F .text	00000060 altera_avalon_uart_read_fd
00036e6c g       *ABS*	00000000 _end
0002128c g     F .text	00000600 __gxx_personality_sj0
0002c234 g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
000310b0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000203dc g     F .text	00000084 _ZN5CUart4ReadEPciPi
00022338 g     F .text	00000004 _ZNSt9exceptionD1Ev
00032760 g     F .text	0000008c alt_ic_irq_disable
0002a890 g     F .text	0000007c __swrite
000350cc g     O .rwdata	00000004 __malloc_trim_threshold
00028cd8 g     F .text	0000000c __locale_msgcharset
00032bcc g     F .text	00000038 exit
00022c9c g     F .text	0000001c .hidden _Unwind_SetGR
00028b7c g     F .text	000000c4 _fwalk_reent
000226c4 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00029b88 g     F .text	000001fc __mdiff
00021c4c g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
00022904 g     F .text	00000074 .hidden __modsi3
000386a0 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002818c g     F .text	00000004 __sfp_lock_release
000330a4  w    O .rodata	0000000c _ZTISt13bad_exception
00031b58 g     F .text	00000054 altera_avalon_uart_close
0002fb3c g     F .text	00000034 _exit
00031fac g     F .text	0000012c alt_alarm_start
00022c68 g     F .text	0000001c .hidden _Unwind_GetGR
00021da0 g     F .text	0000000c __cxa_get_globals
00028d1c g     F .text	000001bc __smakebuf_r
000350c4 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00023e3c g     F .text	00000098 strlen
00023a5c g     F .text	0000006c _init_signal_r
000350b8  w    O .rwdata	00000008 _ZTISt9type_info
000303e4 g     F .text	00000154 open
0002e5b8 g     F .text	000000dc .hidden __gedf2
00033080  w    O .rodata	0000000d _ZTSSt9exception
000350dc g     O .rwdata	00000004 __wctomb
00022358 g     F .text	00000004 _ZNSt9exceptionD0Ev
0002aa6c g     F .text	00000018 __sprint_r
00032654 g     F .text	00000034 alt_icache_flush_all
00032f5c  w    O .rodata	00000010 _ZTV5CUart
00022d14 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00035104 g     O .rwdata	00000004 alt_priority_mask
000326d8 g     F .text	00000088 alt_ic_irq_enable
000260cc g     F .text	0000001c __vfprintf_internal
00031be8 g     F .text	000001dc altera_avalon_uart_read
0002c890 g     F .text	0000005c _wctomb_r
0002eea0 g     F .text	000008fc .hidden __subdf3
0002fbac g     F .text	00000120 fcntl
000295bc g     F .text	000000b0 __lo0bits
000350fc g     O .rwdata	00000008 alt_alarm_list
00032358 g     F .text	00000060 _do_ctors
00023cec g     F .text	00000014 __sigtramp
0002c7a0 g     F .text	000000c0 wcrtomb
0002fa40 g     F .text	000000d0 close
000330b0  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0003008c g     F .text	00000084 alt_load
000227fc g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0002c3bc g     F .text	00000080 fputwc
00023cb0 g     F .text	00000014 raise
00022f80 g     F .text	00000014 free
00028190 g     F .text	00000004 __sinit_lock_acquire
00029330 g     F .text	00000120 __multadd
00022110 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00029308 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <_gp+0xfffe2f74>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	109b5b04 	addi	r2,r2,28012
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	109b5b04 	addi	r2,r2,28012
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <_gp+0xfffe309c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <_gp+0xfffe3090>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a72817 	ldw	r2,-25440(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a72817 	ldw	r2,-25440(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <_gp+0xfffe31b8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6b42414 	ori	gp,gp,53392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	109b3c14 	ori	r2,r2,27888

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18db9b14 	ori	r3,r3,28268

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <_gp+0xfffe31e8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	003008c0 	call	3008c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	00302200 	call	30220 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <_gp+0xfffe31fc>

00020290 <_ZN5CUartC1Ev>:
 */
#include "CUart.h"
#include "sys/alt_dev.h"
#include "altera_avalon_uart.h"

CUart::CUart():
   20290:	defffe04 	addi	sp,sp,-8
   20294:	df000115 	stw	fp,4(sp)
   20298:	df000104 	addi	fp,sp,4
   2029c:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	UartHandle(0)
   202a0:	008000f4 	movhi	r2,3
   202a4:	108bd904 	addi	r2,r2,12132
   202a8:	e0ffff17 	ldw	r3,-4(fp)
   202ac:	18800015 	stw	r2,0(r3)
   202b0:	e0bfff17 	ldw	r2,-4(fp)
   202b4:	10000115 	stw	zero,4(r2)
{

}
   202b8:	0001883a 	nop
   202bc:	e037883a 	mov	sp,fp
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00104 	addi	sp,sp,4
   202c8:	f800283a 	ret

000202cc <_ZN5CUartD1Ev>:

CUart::~CUart() {
   202cc:	defffd04 	addi	sp,sp,-12
   202d0:	dfc00215 	stw	ra,8(sp)
   202d4:	df000115 	stw	fp,4(sp)
   202d8:	df000104 	addi	fp,sp,4
   202dc:	e13fff15 	stw	r4,-4(fp)
   202e0:	008000f4 	movhi	r2,3
   202e4:	108bd904 	addi	r2,r2,12132
   202e8:	e0ffff17 	ldw	r3,-4(fp)
   202ec:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub


}
   202f0:	0005883a 	mov	r2,zero
   202f4:	10000226 	beq	r2,zero,20300 <_ZN5CUartD1Ev+0x34>
   202f8:	e13fff17 	ldw	r4,-4(fp)
   202fc:	0020ad40 	call	20ad4 <_ZdlPv>
   20300:	e037883a 	mov	sp,fp
   20304:	dfc00117 	ldw	ra,4(sp)
   20308:	df000017 	ldw	fp,0(sp)
   2030c:	dec00204 	addi	sp,sp,8
   20310:	f800283a 	ret

00020314 <_ZN5CUartD0Ev>:
	UartHandle(0)
{

}

CUart::~CUart() {
   20314:	defffd04 	addi	sp,sp,-12
   20318:	dfc00215 	stw	ra,8(sp)
   2031c:	df000115 	stw	fp,4(sp)
   20320:	df000104 	addi	fp,sp,4
   20324:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub


}
   20328:	e13fff17 	ldw	r4,-4(fp)
   2032c:	00202cc0 	call	202cc <_ZN5CUartD1Ev>
   20330:	e13fff17 	ldw	r4,-4(fp)
   20334:	0020ad40 	call	20ad4 <_ZdlPv>
   20338:	e037883a 	mov	sp,fp
   2033c:	dfc00117 	ldw	ra,4(sp)
   20340:	df000017 	ldw	fp,0(sp)
   20344:	dec00204 	addi	sp,sp,8
   20348:	f800283a 	ret

0002034c <_ZN5CUart4OpenEPc>:

void CUart::Open(char *pDeviceName)
{
   2034c:	defffc04 	addi	sp,sp,-16
   20350:	dfc00315 	stw	ra,12(sp)
   20354:	df000215 	stw	fp,8(sp)
   20358:	df000204 	addi	fp,sp,8
   2035c:	e13ffe15 	stw	r4,-8(fp)
   20360:	e17fff15 	stw	r5,-4(fp)
	UartHandle = open(pDeviceName, O_ACCMODE); // open file for reading and writing
   20364:	014000c4 	movi	r5,3
   20368:	e13fff17 	ldw	r4,-4(fp)
   2036c:	00303e40 	call	303e4 <open>
   20370:	1007883a 	mov	r3,r2
   20374:	e0bffe17 	ldw	r2,-8(fp)
   20378:	10c00115 	stw	r3,4(r2)
}
   2037c:	0001883a 	nop
   20380:	e037883a 	mov	sp,fp
   20384:	dfc00117 	ldw	ra,4(sp)
   20388:	df000017 	ldw	fp,0(sp)
   2038c:	dec00204 	addi	sp,sp,8
   20390:	f800283a 	ret

00020394 <_ZN5CUart5CloseEv>:

void  CUart::Close()
{
   20394:	defffd04 	addi	sp,sp,-12
   20398:	dfc00215 	stw	ra,8(sp)
   2039c:	df000115 	stw	fp,4(sp)
   203a0:	df000104 	addi	fp,sp,4
   203a4:	e13fff15 	stw	r4,-4(fp)
    if (UartHandle)
   203a8:	e0bfff17 	ldw	r2,-4(fp)
   203ac:	10800117 	ldw	r2,4(r2)
   203b0:	10000426 	beq	r2,zero,203c4 <_ZN5CUart5CloseEv+0x30>
      close(UartHandle);
   203b4:	e0bfff17 	ldw	r2,-4(fp)
   203b8:	10800117 	ldw	r2,4(r2)
   203bc:	1009883a 	mov	r4,r2
   203c0:	002fa400 	call	2fa40 <close>
}
   203c4:	0001883a 	nop
   203c8:	e037883a 	mov	sp,fp
   203cc:	dfc00117 	ldw	ra,4(sp)
   203d0:	df000017 	ldw	fp,0(sp)
   203d4:	dec00204 	addi	sp,sp,8
   203d8:	f800283a 	ret

000203dc <_ZN5CUart4ReadEPciPi>:

bool CUart::Read(char *pBuffer, int nBufferSize, int *prx_len){
   203dc:	defff804 	addi	sp,sp,-32
   203e0:	dfc00715 	stw	ra,28(sp)
   203e4:	df000615 	stw	fp,24(sp)
   203e8:	df000604 	addi	fp,sp,24
   203ec:	e13ffc15 	stw	r4,-16(fp)
   203f0:	e17ffd15 	stw	r5,-12(fp)
   203f4:	e1bffe15 	stw	r6,-8(fp)
   203f8:	e1ffff15 	stw	r7,-4(fp)
	int nResult;
    bool bSuccess = FALSE;
   203fc:	e03ffa05 	stb	zero,-24(fp)
    if (UartHandle){
   20400:	e0bffc17 	ldw	r2,-16(fp)
   20404:	10800117 	ldw	r2,4(r2)
   20408:	10000f26 	beq	r2,zero,20448 <_ZN5CUart4ReadEPciPi+0x6c>
        nResult = read(UartHandle, pBuffer, nBufferSize);
   2040c:	e0bffc17 	ldw	r2,-16(fp)
   20410:	10800117 	ldw	r2,4(r2)
   20414:	e0fffe17 	ldw	r3,-8(fp)
   20418:	180d883a 	mov	r6,r3
   2041c:	e17ffd17 	ldw	r5,-12(fp)
   20420:	1009883a 	mov	r4,r2
   20424:	00305740 	call	30574 <read>
   20428:	e0bffb15 	stw	r2,-20(fp)
        if (nResult >= 0){
   2042c:	e0bffb17 	ldw	r2,-20(fp)
   20430:	10000516 	blt	r2,zero,20448 <_ZN5CUart4ReadEPciPi+0x6c>
            *prx_len = nResult;
   20434:	e0bfff17 	ldw	r2,-4(fp)
   20438:	e0fffb17 	ldw	r3,-20(fp)
   2043c:	10c00015 	stw	r3,0(r2)
            bSuccess = TRUE;
   20440:	00800044 	movi	r2,1
   20444:	e0bffa05 	stb	r2,-24(fp)
            //if (*prx_len == nBufferSize)
            //    bSuccess = TRUE;
        }
    }
    return bSuccess;
   20448:	e0bffa03 	ldbu	r2,-24(fp)
}
   2044c:	e037883a 	mov	sp,fp
   20450:	dfc00117 	ldw	ra,4(sp)
   20454:	df000017 	ldw	fp,0(sp)
   20458:	dec00204 	addi	sp,sp,8
   2045c:	f800283a 	ret

00020460 <_ZN5CUart5WriteEPci>:




bool  CUart::Write(char *pData, int nDataSize)
{
   20460:	defffa04 	addi	sp,sp,-24
   20464:	dfc00515 	stw	ra,20(sp)
   20468:	df000415 	stw	fp,16(sp)
   2046c:	df000404 	addi	fp,sp,16
   20470:	e13ffd15 	stw	r4,-12(fp)
   20474:	e17ffe15 	stw	r5,-8(fp)
   20478:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = FALSE;
   2047c:	e03ffc05 	stb	zero,-16(fp)
    if (UartHandle){
   20480:	e0bffd17 	ldw	r2,-12(fp)
   20484:	10800117 	ldw	r2,4(r2)
   20488:	10001526 	beq	r2,zero,204e0 <_ZN5CUart5WriteEPci+0x80>
    	write(UartHandle, pData, nDataSize);
   2048c:	e0bffd17 	ldw	r2,-12(fp)
   20490:	10800117 	ldw	r2,4(r2)
   20494:	e0ffff17 	ldw	r3,-4(fp)
   20498:	180d883a 	mov	r6,r3
   2049c:	e17ffe17 	ldw	r5,-8(fp)
   204a0:	1009883a 	mov	r4,r2
   204a4:	00309940 	call	30994 <write>
        if (write(UartHandle, pData, nDataSize) == nDataSize)
   204a8:	e0bffd17 	ldw	r2,-12(fp)
   204ac:	10800117 	ldw	r2,4(r2)
   204b0:	e0ffff17 	ldw	r3,-4(fp)
   204b4:	180d883a 	mov	r6,r3
   204b8:	e17ffe17 	ldw	r5,-8(fp)
   204bc:	1009883a 	mov	r4,r2
   204c0:	00309940 	call	30994 <write>
   204c4:	1007883a 	mov	r3,r2
   204c8:	e0bfff17 	ldw	r2,-4(fp)
   204cc:	1885003a 	cmpeq	r2,r3,r2
   204d0:	10803fcc 	andi	r2,r2,255
   204d4:	10000226 	beq	r2,zero,204e0 <_ZN5CUart5WriteEPci+0x80>
            bSuccess = TRUE;
   204d8:	00800044 	movi	r2,1
   204dc:	e0bffc05 	stb	r2,-16(fp)
    }
    return bSuccess;
   204e0:	e0bffc03 	ldbu	r2,-16(fp)
}
   204e4:	e037883a 	mov	sp,fp
   204e8:	dfc00117 	ldw	ra,4(sp)
   204ec:	df000017 	ldw	fp,0(sp)
   204f0:	dec00204 	addi	sp,sp,8
   204f4:	f800283a 	ret

000204f8 <_ZN5CUart11WriteStringEPc>:


bool CUart::WriteString(char *pString)
{
   204f8:	defffc04 	addi	sp,sp,-16
   204fc:	dfc00315 	stw	ra,12(sp)
   20500:	df000215 	stw	fp,8(sp)
   20504:	df000204 	addi	fp,sp,8
   20508:	e13ffe15 	stw	r4,-8(fp)
   2050c:	e17fff15 	stw	r5,-4(fp)
	return CUart::Write(pString, strlen(pString));
   20510:	e13fff17 	ldw	r4,-4(fp)
   20514:	0023e3c0 	call	23e3c <strlen>
   20518:	100d883a 	mov	r6,r2
   2051c:	e17fff17 	ldw	r5,-4(fp)
   20520:	e13ffe17 	ldw	r4,-8(fp)
   20524:	00204600 	call	20460 <_ZN5CUart5WriteEPci>
}
   20528:	e037883a 	mov	sp,fp
   2052c:	dfc00117 	ldw	ra,4(sp)
   20530:	df000017 	ldw	fp,0(sp)
   20534:	dec00204 	addi	sp,sp,8
   20538:	f800283a 	ret

0002053c <_ZN5CUart16NoneBlockingReadEPciPi>:

bool CUart::NoneBlockingRead(char *pBuffer, int nBufferSize, int *prx_len){
   2053c:	defff904 	addi	sp,sp,-28
   20540:	dfc00615 	stw	ra,24(sp)
   20544:	df000515 	stw	fp,20(sp)
   20548:	df000504 	addi	fp,sp,20
   2054c:	e13ffc15 	stw	r4,-16(fp)
   20550:	e17ffd15 	stw	r5,-12(fp)
   20554:	e1bffe15 	stw	r6,-8(fp)
   20558:	e1ffff15 	stw	r7,-4(fp)
    bool bSuccess;
    fcntl(UartHandle, F_SETFL, O_ACCMODE | O_NONBLOCK);
   2055c:	e0bffc17 	ldw	r2,-16(fp)
   20560:	10800117 	ldw	r2,4(r2)
   20564:	019000c4 	movi	r6,16387
   20568:	01400104 	movi	r5,4
   2056c:	1009883a 	mov	r4,r2
   20570:	002fbac0 	call	2fbac <fcntl>
    bSuccess = CUart::Read(pBuffer, nBufferSize, prx_len);
   20574:	e1ffff17 	ldw	r7,-4(fp)
   20578:	e1bffe17 	ldw	r6,-8(fp)
   2057c:	e17ffd17 	ldw	r5,-12(fp)
   20580:	e13ffc17 	ldw	r4,-16(fp)
   20584:	00203dc0 	call	203dc <_ZN5CUart4ReadEPciPi>
   20588:	e0bffb05 	stb	r2,-20(fp)
    fcntl(UartHandle, F_SETFL, O_ACCMODE);
   2058c:	e0bffc17 	ldw	r2,-16(fp)
   20590:	10800117 	ldw	r2,4(r2)
   20594:	018000c4 	movi	r6,3
   20598:	01400104 	movi	r5,4
   2059c:	1009883a 	mov	r4,r2
   205a0:	002fbac0 	call	2fbac <fcntl>
    return bSuccess;
   205a4:	e0bffb03 	ldbu	r2,-20(fp)
}
   205a8:	e037883a 	mov	sp,fp
   205ac:	dfc00117 	ldw	ra,4(sp)
   205b0:	df000017 	ldw	fp,0(sp)
   205b4:	dec00204 	addi	sp,sp,8
   205b8:	f800283a 	ret

000205bc <_ZN5CUart15ReadWithTimeoutEPhtPtm>:


bool CUart::ReadWithTimeout(alt_u8 *pBuffer, alt_u16 nBufferSize, alt_u16 *prx_len, alt_u32 timeout){
   205bc:	defff504 	addi	sp,sp,-44
   205c0:	dfc00a15 	stw	ra,40(sp)
   205c4:	df000915 	stw	fp,36(sp)
   205c8:	df000904 	addi	fp,sp,36
   205cc:	e13ffc15 	stw	r4,-16(fp)
   205d0:	e17ffd15 	stw	r5,-12(fp)
   205d4:	3005883a 	mov	r2,r6
   205d8:	e1ffff15 	stw	r7,-4(fp)
   205dc:	e0bffe0d 	sth	r2,-8(fp)
    bool bSuccess = FALSE;
   205e0:	e03ff705 	stb	zero,-36(fp)
    if (UartHandle){
   205e4:	e0bffc17 	ldw	r2,-16(fp)
   205e8:	10800117 	ldw	r2,4(r2)
   205ec:	10002f26 	beq	r2,zero,206ac <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xf0>
        int rx_total_cnt = 0, rx_cnt;
   205f0:	e03ff815 	stw	zero,-32(fp)
        alt_u32 time_start;
        bool bTimeout = FALSE;
   205f4:	e03ff905 	stb	zero,-28(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   205f8:	d0a72617 	ldw	r2,-25448(gp)
        time_start = alt_nticks();
   205fc:	e0bffa15 	stw	r2,-24(fp)
        while(!bSuccess && !bTimeout){
   20600:	e0bff703 	ldbu	r2,-36(fp)
   20604:	1000251e 	bne	r2,zero,2069c <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xe0>
   20608:	e0bff903 	ldbu	r2,-28(fp)
   2060c:	1000231e 	bne	r2,zero,2069c <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xe0>
        	NoneBlockingRead((char *)pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt, &rx_cnt);
   20610:	e0bff817 	ldw	r2,-32(fp)
   20614:	e0fffd17 	ldw	r3,-12(fp)
   20618:	1889883a 	add	r4,r3,r2
   2061c:	e0fffe0b 	ldhu	r3,-8(fp)
   20620:	e0bff817 	ldw	r2,-32(fp)
   20624:	1885c83a 	sub	r2,r3,r2
   20628:	e0fffb04 	addi	r3,fp,-20
   2062c:	180f883a 	mov	r7,r3
   20630:	100d883a 	mov	r6,r2
   20634:	200b883a 	mov	r5,r4
   20638:	e13ffc17 	ldw	r4,-16(fp)
   2063c:	002053c0 	call	2053c <_ZN5CUart16NoneBlockingReadEPciPi>
            //rx_cnt = read(pUart, pBuffer+rx_total_cnt, nBufferSize-rx_total_cnt);
            rx_total_cnt += rx_cnt;
   20640:	e0bffb17 	ldw	r2,-20(fp)
   20644:	e0fff817 	ldw	r3,-32(fp)
   20648:	1885883a 	add	r2,r3,r2
   2064c:	e0bff815 	stw	r2,-32(fp)
            if (rx_total_cnt == nBufferSize)
   20650:	e0fffe0b 	ldhu	r3,-8(fp)
   20654:	e0bff817 	ldw	r2,-32(fp)
   20658:	1880031e 	bne	r3,r2,20668 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xac>
                bSuccess = TRUE;
   2065c:	00800044 	movi	r2,1
   20660:	e0bff705 	stb	r2,-36(fp)
   20664:	003fe606 	br	20600 <_gp+0xfffe3570>
   20668:	d0e72617 	ldw	r3,-25448(gp)
            else if ((alt_nticks() - time_start) > timeout)
   2066c:	e0bffa17 	ldw	r2,-24(fp)
   20670:	1885c83a 	sub	r2,r3,r2
   20674:	e0c00217 	ldw	r3,8(fp)
   20678:	1885803a 	cmpltu	r2,r3,r2
   2067c:	10803fcc 	andi	r2,r2,255
   20680:	10000326 	beq	r2,zero,20690 <_ZN5CUart15ReadWithTimeoutEPhtPtm+0xd4>
                bTimeout = TRUE;
   20684:	00800044 	movi	r2,1
   20688:	e0bff905 	stb	r2,-28(fp)
   2068c:	003fdc06 	br	20600 <_gp+0xfffe3570>
            else
                usleep(1);
   20690:	01000044 	movi	r4,1
   20694:	00309280 	call	30928 <usleep>
    if (UartHandle){
        int rx_total_cnt = 0, rx_cnt;
        alt_u32 time_start;
        bool bTimeout = FALSE;
        time_start = alt_nticks();
        while(!bSuccess && !bTimeout){
   20698:	003fd906 	br	20600 <_gp+0xfffe3570>
            else if ((alt_nticks() - time_start) > timeout)
                bTimeout = TRUE;
            else
                usleep(1);
        }
        *prx_len = rx_total_cnt;
   2069c:	e0bff817 	ldw	r2,-32(fp)
   206a0:	1007883a 	mov	r3,r2
   206a4:	e0bfff17 	ldw	r2,-4(fp)
   206a8:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;
   206ac:	e0bff703 	ldbu	r2,-36(fp)
}
   206b0:	e037883a 	mov	sp,fp
   206b4:	dfc00117 	ldw	ra,4(sp)
   206b8:	df000017 	ldw	fp,0(sp)
   206bc:	dec00204 	addi	sp,sp,8
   206c0:	f800283a 	ret

000206c4 <_Z11CommandReadR5CUartPciPi>:
#include "terasic_includes.h"
#include "CUart.h"



bool CommandRead(CUart   &Uart, char *pBuffer, int nBufferSize, int *prx_lenmand){
   206c4:	defff404 	addi	sp,sp,-48
   206c8:	dfc00b15 	stw	ra,44(sp)
   206cc:	df000a15 	stw	fp,40(sp)
   206d0:	dc000915 	stw	r16,36(sp)
   206d4:	df000a04 	addi	fp,sp,40
   206d8:	e13ffb15 	stw	r4,-20(fp)
   206dc:	e17ffc15 	stw	r5,-16(fp)
   206e0:	e1bffd15 	stw	r6,-12(fp)
   206e4:	e1fffe15 	stw	r7,-8(fp)
	int RxLen;
	char Data;
	bool bDone = false;
   206e8:	e03ff605 	stb	zero,-40(fp)
	int Len = 0;
   206ec:	e03ff715 	stw	zero,-36(fp)
	alt_u32 timeout;

	if (!Uart.Read((char *)&Data, sizeof(Data), &RxLen) || RxLen == 0)
   206f0:	00c00044 	movi	r3,1
   206f4:	e13ff904 	addi	r4,fp,-28
   206f8:	e0bffa04 	addi	r2,fp,-24
   206fc:	200f883a 	mov	r7,r4
   20700:	180d883a 	mov	r6,r3
   20704:	100b883a 	mov	r5,r2
   20708:	e13ffb17 	ldw	r4,-20(fp)
   2070c:	00203dc0 	call	203dc <_ZN5CUart4ReadEPciPi>
   20710:	1080005c 	xori	r2,r2,1
   20714:	10803fcc 	andi	r2,r2,255
   20718:	1000021e 	bne	r2,zero,20724 <_Z11CommandReadR5CUartPciPi+0x60>
   2071c:	e0bff917 	ldw	r2,-28(fp)
   20720:	1000021e 	bne	r2,zero,2072c <_Z11CommandReadR5CUartPciPi+0x68>
   20724:	00800044 	movi	r2,1
   20728:	00000106 	br	20730 <_Z11CommandReadR5CUartPciPi+0x6c>
   2072c:	0005883a 	mov	r2,zero
   20730:	10803fcc 	andi	r2,r2,255
   20734:	10000226 	beq	r2,zero,20740 <_Z11CommandReadR5CUartPciPi+0x7c>
			return false;
   20738:	0005883a 	mov	r2,zero
   2073c:	00004506 	br	20854 <_Z11CommandReadR5CUartPciPi+0x190>

	*(pBuffer + 0) = Data;
   20740:	e0fffa03 	ldbu	r3,-24(fp)
   20744:	e0bffc17 	ldw	r2,-16(fp)
   20748:	10c00005 	stb	r3,0(r2)
   2074c:	d4272617 	ldw	r16,-25448(gp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20750:	d0a72517 	ldw	r2,-25452(gp)

	// read until find '\r'
	timeout = alt_nticks() + alt_ticks_per_second()/1000;
   20754:	0140fa04 	movi	r5,1000
   20758:	1009883a 	mov	r4,r2
   2075c:	00229780 	call	22978 <__udivsi3>
   20760:	8085883a 	add	r2,r16,r2
   20764:	e0bff815 	stw	r2,-32(fp)
	Len = 1;
   20768:	00800044 	movi	r2,1
   2076c:	e0bff715 	stw	r2,-36(fp)
	while(!bDone){
   20770:	e0bff603 	ldbu	r2,-40(fp)
   20774:	1000331e 	bne	r2,zero,20844 <_Z11CommandReadR5CUartPciPi+0x180>
		if (Uart.Read((char *)&Data, sizeof(Data), &RxLen) && RxLen == sizeof(Data)){
   20778:	00c00044 	movi	r3,1
   2077c:	e13ff904 	addi	r4,fp,-28
   20780:	e0bffa04 	addi	r2,fp,-24
   20784:	200f883a 	mov	r7,r4
   20788:	180d883a 	mov	r6,r3
   2078c:	100b883a 	mov	r5,r2
   20790:	e13ffb17 	ldw	r4,-20(fp)
   20794:	00203dc0 	call	203dc <_ZN5CUart4ReadEPciPi>
   20798:	10803fcc 	andi	r2,r2,255
   2079c:	10000526 	beq	r2,zero,207b4 <_Z11CommandReadR5CUartPciPi+0xf0>
   207a0:	e0bff917 	ldw	r2,-28(fp)
   207a4:	10800058 	cmpnei	r2,r2,1
   207a8:	1000021e 	bne	r2,zero,207b4 <_Z11CommandReadR5CUartPciPi+0xf0>
   207ac:	00800044 	movi	r2,1
   207b0:	00000106 	br	207b8 <_Z11CommandReadR5CUartPciPi+0xf4>
   207b4:	0005883a 	mov	r2,zero
   207b8:	10803fcc 	andi	r2,r2,255
   207bc:	10001126 	beq	r2,zero,20804 <_Z11CommandReadR5CUartPciPi+0x140>
			*(pBuffer + Len) = Data;
   207c0:	e0bff717 	ldw	r2,-36(fp)
   207c4:	e0fffc17 	ldw	r3,-16(fp)
   207c8:	1885883a 	add	r2,r3,r2
   207cc:	e0fffa03 	ldbu	r3,-24(fp)
   207d0:	10c00005 	stb	r3,0(r2)
			Len++;
   207d4:	e0bff717 	ldw	r2,-36(fp)
   207d8:	10800044 	addi	r2,r2,1
   207dc:	e0bff715 	stw	r2,-36(fp)
			if (Data == '\n')
   207e0:	e0bffa03 	ldbu	r2,-24(fp)
   207e4:	10803fcc 	andi	r2,r2,255
   207e8:	1080201c 	xori	r2,r2,128
   207ec:	10bfe004 	addi	r2,r2,-128
   207f0:	10800298 	cmpnei	r2,r2,10
   207f4:	1000101e 	bne	r2,zero,20838 <_Z11CommandReadR5CUartPciPi+0x174>
				bDone = true;
   207f8:	00800044 	movi	r2,1
   207fc:	e0bff605 	stb	r2,-40(fp)
   20800:	00000d06 	br	20838 <_Z11CommandReadR5CUartPciPi+0x174>
		}else if (Len >= nBufferSize){
   20804:	e0fff717 	ldw	r3,-36(fp)
   20808:	e0bffd17 	ldw	r2,-12(fp)
   2080c:	18800316 	blt	r3,r2,2081c <_Z11CommandReadR5CUartPciPi+0x158>
			// buffer full
			bDone = true;
   20810:	00800044 	movi	r2,1
   20814:	e0bff605 	stb	r2,-40(fp)
   20818:	00000706 	br	20838 <_Z11CommandReadR5CUartPciPi+0x174>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2081c:	d0a72617 	ldw	r2,-25448(gp)
		}else if (alt_nticks() > timeout){
   20820:	e0fff817 	ldw	r3,-32(fp)
   20824:	1885803a 	cmpltu	r2,r3,r2
   20828:	10803fcc 	andi	r2,r2,255
   2082c:	10000226 	beq	r2,zero,20838 <_Z11CommandReadR5CUartPciPi+0x174>
			// timeout
			bDone = true;
   20830:	00800044 	movi	r2,1
   20834:	e0bff605 	stb	r2,-40(fp)
		}else{
		}
		usleep(10);
   20838:	01000284 	movi	r4,10
   2083c:	00309280 	call	30928 <usleep>
	*(pBuffer + 0) = Data;

	// read until find '\r'
	timeout = alt_nticks() + alt_ticks_per_second()/1000;
	Len = 1;
	while(!bDone){
   20840:	003fcb06 	br	20770 <_gp+0xfffe36e0>
		}else{
		}
		usleep(10);

	}
	*prx_lenmand = Len;
   20844:	e0bffe17 	ldw	r2,-8(fp)
   20848:	e0fff717 	ldw	r3,-36(fp)
   2084c:	10c00015 	stw	r3,0(r2)
	return true;
   20850:	00800044 	movi	r2,1
}
   20854:	e6ffff04 	addi	sp,fp,-4
   20858:	dfc00217 	ldw	ra,8(sp)
   2085c:	df000117 	ldw	fp,4(sp)
   20860:	dc000017 	ldw	r16,0(sp)
   20864:	dec00304 	addi	sp,sp,12
   20868:	f800283a 	ret

0002086c <main>:


int main()
{
   2086c:	deffdd04 	addi	sp,sp,-140
   20870:	dfc02215 	stw	ra,136(sp)
   20874:	df002115 	stw	fp,132(sp)
   20878:	ddc02015 	stw	r23,128(sp)
   2087c:	dd801f15 	stw	r22,124(sp)
   20880:	dd401e15 	stw	r21,120(sp)
   20884:	dd001d15 	stw	r20,116(sp)
   20888:	dcc01c15 	stw	r19,112(sp)
   2088c:	dc801b15 	stw	r18,108(sp)
   20890:	dc401a15 	stw	r17,104(sp)
   20894:	dc001915 	stw	r16,100(sp)
   20898:	df002104 	addi	fp,sp,132
   2089c:	008000b4 	movhi	r2,2
   208a0:	1084a304 	addi	r2,r2,4748
   208a4:	e0bff015 	stw	r2,-64(fp)
   208a8:	008000f4 	movhi	r2,3
   208ac:	108bc604 	addi	r2,r2,12056
   208b0:	e0bff115 	stw	r2,-60(fp)
   208b4:	e0bff204 	addi	r2,fp,-56
   208b8:	e0ffdf04 	addi	r3,fp,-132
   208bc:	10c00015 	stw	r3,0(r2)
   208c0:	00c000b4 	movhi	r3,2
   208c4:	18c2aa04 	addi	r3,r3,2728
   208c8:	10c00115 	stw	r3,4(r2)
   208cc:	16c00215 	stw	sp,8(r2)
   208d0:	e0bfea04 	addi	r2,fp,-88
   208d4:	1009883a 	mov	r4,r2
   208d8:	0022c3c0 	call	22c3c <_Unwind_SjLj_Register>
  CUart Uart;
   208dc:	00bfffc4 	movi	r2,-1
   208e0:	e0bfeb15 	stw	r2,-84(fp)
   208e4:	e13fdf04 	addi	r4,fp,-132
   208e8:	00202900 	call	20290 <_ZN5CUartC1Ev>
  Uart.Open(HC_05_UART_NAME);
   208ec:	014000f4 	movhi	r5,3
   208f0:	00800044 	movi	r2,1
   208f4:	e0bfeb15 	stw	r2,-84(fp)
   208f8:	294bdb04 	addi	r5,r5,12140
   208fc:	e13fdf04 	addi	r4,fp,-132
   20900:	002034c0 	call	2034c <_ZN5CUart4OpenEPc>
  int nReadLen;
  int Command, Param;
  char szData[30];
  printf("Press KEY1 to Config HC-05\r\n");
   20904:	010000f4 	movhi	r4,3
   20908:	210bdf04 	addi	r4,r4,12156
   2090c:	00239f40 	call	239f4 <puts>

  while(1)
  {
	 if(!IORD(PIO_KEY_BASE,0))
   20910:	00800134 	movhi	r2,4
   20914:	10841004 	addi	r2,r2,4160
   20918:	10800037 	ldwio	r2,0(r2)
   2091c:	1005003a 	cmpeq	r2,r2,zero
   20920:	10803fcc 	andi	r2,r2,255
   20924:	103ffa26 	beq	r2,zero,20910 <_gp+0xfffe3880>
	 {
       Uart.WriteString("AT\r\n");
   20928:	014000f4 	movhi	r5,3
   2092c:	00800044 	movi	r2,1
   20930:	e0bfeb15 	stw	r2,-84(fp)
   20934:	294be604 	addi	r5,r5,12184
   20938:	e13fdf04 	addi	r4,fp,-132
   2093c:	00204f80 	call	204f8 <_ZN5CUart11WriteStringEPc>
       if(CommandRead(Uart, szData, sizeof(szData), &nReadLen))
   20940:	00c00784 	movi	r3,30
   20944:	e13fe104 	addi	r4,fp,-124
   20948:	e0bfe204 	addi	r2,fp,-120
   2094c:	200f883a 	mov	r7,r4
   20950:	180d883a 	mov	r6,r3
   20954:	100b883a 	mov	r5,r2
   20958:	e13fdf04 	addi	r4,fp,-132
   2095c:	00206c40 	call	206c4 <_Z11CommandReadR5CUartPciPi>
   20960:	10803fcc 	andi	r2,r2,255
   20964:	10000c26 	beq	r2,zero,20998 <main+0x12c>
       {
	      szData[nReadLen] = 0;
   20968:	e0bfe117 	ldw	r2,-124(fp)
   2096c:	e0ffe204 	addi	r3,fp,-120
   20970:	1885883a 	add	r2,r3,r2
   20974:	10000005 	stb	zero,0(r2)
	      printf("AT Command \n");
   20978:	010000f4 	movhi	r4,3
   2097c:	210be804 	addi	r4,r4,12192
   20980:	00239f40 	call	239f4 <puts>
	      printf("HC05 Response:%s\r\n",szData);
   20984:	e0bfe204 	addi	r2,fp,-120
   20988:	100b883a 	mov	r5,r2
   2098c:	010000f4 	movhi	r4,3
   20990:	210beb04 	addi	r4,r4,12204
   20994:	00238f80 	call	238f8 <printf>
       }
       usleep(1000000);
   20998:	010003f4 	movhi	r4,15
   2099c:	00800044 	movi	r2,1
   209a0:	e0bfeb15 	stw	r2,-84(fp)
   209a4:	21109004 	addi	r4,r4,16960
   209a8:	00309280 	call	30928 <usleep>

       Uart.WriteString("AT+ORGL\r\n");
   209ac:	014000f4 	movhi	r5,3
   209b0:	294bf004 	addi	r5,r5,12224
   209b4:	e13fdf04 	addi	r4,fp,-132
   209b8:	00204f80 	call	204f8 <_ZN5CUart11WriteStringEPc>
       if(CommandRead(Uart, szData, sizeof(szData), &nReadLen))
   209bc:	00c00784 	movi	r3,30
   209c0:	e13fe104 	addi	r4,fp,-124
   209c4:	e0bfe204 	addi	r2,fp,-120
   209c8:	200f883a 	mov	r7,r4
   209cc:	180d883a 	mov	r6,r3
   209d0:	100b883a 	mov	r5,r2
   209d4:	e13fdf04 	addi	r4,fp,-132
   209d8:	00206c40 	call	206c4 <_Z11CommandReadR5CUartPciPi>
   209dc:	10803fcc 	andi	r2,r2,255
   209e0:	10000c26 	beq	r2,zero,20a14 <main+0x1a8>
       {
	      szData[nReadLen] = 0;
   209e4:	e0bfe117 	ldw	r2,-124(fp)
   209e8:	e0ffe204 	addi	r3,fp,-120
   209ec:	1885883a 	add	r2,r3,r2
   209f0:	10000005 	stb	zero,0(r2)
	      printf("Set ORGL \n");
   209f4:	010000f4 	movhi	r4,3
   209f8:	210bf304 	addi	r4,r4,12236
   209fc:	00239f40 	call	239f4 <puts>
	      printf("HC05 Response:%s\r\n",szData);
   20a00:	e0bfe204 	addi	r2,fp,-120
   20a04:	100b883a 	mov	r5,r2
   20a08:	010000f4 	movhi	r4,3
   20a0c:	210beb04 	addi	r4,r4,12204
   20a10:	00238f80 	call	238f8 <printf>
       }
       usleep(1000000);
   20a14:	010003f4 	movhi	r4,15
   20a18:	00800044 	movi	r2,1
   20a1c:	e0bfeb15 	stw	r2,-84(fp)
   20a20:	21109004 	addi	r4,r4,16960
   20a24:	00309280 	call	30928 <usleep>

       Uart.WriteString("AT+UART=115200,0,0\r\n");
   20a28:	014000f4 	movhi	r5,3
   20a2c:	294bf604 	addi	r5,r5,12248
   20a30:	e13fdf04 	addi	r4,fp,-132
   20a34:	00204f80 	call	204f8 <_ZN5CUart11WriteStringEPc>

       if(CommandRead(Uart, szData, sizeof(szData), &nReadLen))
   20a38:	00c00784 	movi	r3,30
   20a3c:	e13fe104 	addi	r4,fp,-124
   20a40:	e0bfe204 	addi	r2,fp,-120
   20a44:	200f883a 	mov	r7,r4
   20a48:	180d883a 	mov	r6,r3
   20a4c:	100b883a 	mov	r5,r2
   20a50:	e13fdf04 	addi	r4,fp,-132
   20a54:	00206c40 	call	206c4 <_Z11CommandReadR5CUartPciPi>
   20a58:	10803fcc 	andi	r2,r2,255
   20a5c:	10000c26 	beq	r2,zero,20a90 <main+0x224>
       {
	      szData[nReadLen] = 0;
   20a60:	e0bfe117 	ldw	r2,-124(fp)
   20a64:	e0ffe204 	addi	r3,fp,-120
   20a68:	1885883a 	add	r2,r3,r2
   20a6c:	10000005 	stb	zero,0(r2)
	      printf("Set Baut Rate \n");
   20a70:	010000f4 	movhi	r4,3
   20a74:	210bfc04 	addi	r4,r4,12272
   20a78:	00239f40 	call	239f4 <puts>
	      printf("HC05 Response:%s\r\n",szData);
   20a7c:	e0bfe204 	addi	r2,fp,-120
   20a80:	100b883a 	mov	r5,r2
   20a84:	010000f4 	movhi	r4,3
   20a88:	210beb04 	addi	r4,r4,12204
   20a8c:	00238f80 	call	238f8 <printf>
       }
       usleep(1000000);
   20a90:	010003f4 	movhi	r4,15
   20a94:	00800044 	movi	r2,1
   20a98:	e0bfeb15 	stw	r2,-84(fp)
   20a9c:	21109004 	addi	r4,r4,16960
   20aa0:	00309280 	call	30928 <usleep>
  int nReadLen;
  int Command, Param;
  char szData[30];
  printf("Press KEY1 to Config HC-05\r\n");

  while(1)
   20aa4:	003f9a06 	br	20910 <_gp+0xfffe3880>
   20aa8:	e7002104 	addi	fp,fp,132
   20aac:	e0bfec17 	ldw	r2,-80(fp)
   20ab0:	e0bff715 	stw	r2,-36(fp)
}


int main()
{
  CUart Uart;
   20ab4:	e03feb15 	stw	zero,-84(fp)
   20ab8:	e13fdf04 	addi	r4,fp,-132
   20abc:	00202cc0 	call	202cc <_ZN5CUartD1Ev>
   20ac0:	e0fff717 	ldw	r3,-36(fp)
   20ac4:	00bfffc4 	movi	r2,-1
   20ac8:	e0bfeb15 	stw	r2,-84(fp)
   20acc:	1809883a 	mov	r4,r3
   20ad0:	0022e380 	call	22e38 <_Unwind_SjLj_Resume>

00020ad4 <_ZdlPv>:
   20ad4:	0022f801 	jmpi	22f80 <free>

00020ad8 <_ZL21size_of_encoded_valueh>:
   20ad8:	deffff04 	addi	sp,sp,-4
   20adc:	dfc00015 	stw	ra,0(sp)
   20ae0:	20c03fcc 	andi	r3,r4,255
   20ae4:	00803fc4 	movi	r2,255
   20ae8:	18802026 	beq	r3,r2,20b6c <_ZL21size_of_encoded_valueh+0x94>
   20aec:	210001cc 	andi	r4,r4,7
   20af0:	00800144 	movi	r2,5
   20af4:	11001c36 	bltu	r2,r4,20b68 <_ZL21size_of_encoded_valueh+0x90>
   20af8:	200890ba 	slli	r4,r4,2
   20afc:	008000b4 	movhi	r2,2
   20b00:	1082c404 	addi	r2,r2,2832
   20b04:	2089883a 	add	r4,r4,r2
   20b08:	20800017 	ldw	r2,0(r4)
   20b0c:	1000683a 	jmp	r2
   20b10:	00020b28 	cmpgeui	zero,zero,2092
   20b14:	00020b68 	cmpgeui	zero,zero,2093
   20b18:	00020b38 	rdprs	zero,zero,2092
   20b1c:	00020b28 	cmpgeui	zero,zero,2092
   20b20:	00020b58 	cmpnei	zero,zero,2093
   20b24:	00020b48 	cmpgei	zero,zero,2093
   20b28:	00800104 	movi	r2,4
   20b2c:	dfc00017 	ldw	ra,0(sp)
   20b30:	dec00104 	addi	sp,sp,4
   20b34:	f800283a 	ret
   20b38:	00800084 	movi	r2,2
   20b3c:	dfc00017 	ldw	ra,0(sp)
   20b40:	dec00104 	addi	sp,sp,4
   20b44:	f800283a 	ret
   20b48:	00800044 	movi	r2,1
   20b4c:	dfc00017 	ldw	ra,0(sp)
   20b50:	dec00104 	addi	sp,sp,4
   20b54:	f800283a 	ret
   20b58:	00800204 	movi	r2,8
   20b5c:	dfc00017 	ldw	ra,0(sp)
   20b60:	dec00104 	addi	sp,sp,4
   20b64:	f800283a 	ret
   20b68:	0022f540 	call	22f54 <abort>
   20b6c:	0005883a 	mov	r2,zero
   20b70:	dfc00017 	ldw	ra,0(sp)
   20b74:	dec00104 	addi	sp,sp,4
   20b78:	f800283a 	ret

00020b7c <_ZL28read_encoded_value_with_basehjPKhPj>:
   20b7c:	deffff04 	addi	sp,sp,-4
   20b80:	dfc00015 	stw	ra,0(sp)
   20b84:	20c03fcc 	andi	r3,r4,255
   20b88:	00801404 	movi	r2,80
   20b8c:	18807326 	beq	r3,r2,20d5c <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
   20b90:	20c003cc 	andi	r3,r4,15
   20b94:	00800304 	movi	r2,12
   20b98:	10c06f36 	bltu	r2,r3,20d58 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
   20b9c:	180690ba 	slli	r3,r3,2
   20ba0:	020000b4 	movhi	r8,2
   20ba4:	4202ed04 	addi	r8,r8,2996
   20ba8:	1a07883a 	add	r3,r3,r8
   20bac:	18800017 	ldw	r2,0(r3)
   20bb0:	1000683a 	jmp	r2
   20bb4:	00020be8 	cmpgeui	zero,zero,2095
   20bb8:	00020d04 	movi	zero,2100
   20bbc:	00020d40 	call	20d4 <__reset-0x1df2c>
   20bc0:	00020be8 	cmpgeui	zero,zero,2095
   20bc4:	00020c4c 	andi	zero,zero,2097
   20bc8:	00020ca0 	cmpeqi	zero,zero,2098
   20bcc:	00020d58 	cmpnei	zero,zero,2101
   20bd0:	00020d58 	cmpnei	zero,zero,2101
   20bd4:	00020d58 	cmpnei	zero,zero,2101
   20bd8:	00020cac 	andhi	zero,zero,2098
   20bdc:	00020c7c 	xorhi	zero,zero,2097
   20be0:	00020be8 	cmpgeui	zero,zero,2095
   20be4:	00020c4c 	andi	zero,zero,2097
   20be8:	30800043 	ldbu	r2,1(r6)
   20bec:	30c00083 	ldbu	r3,2(r6)
   20bf0:	324000c3 	ldbu	r9,3(r6)
   20bf4:	32000003 	ldbu	r8,0(r6)
   20bf8:	1004923a 	slli	r2,r2,8
   20bfc:	1806943a 	slli	r3,r3,16
   20c00:	4812963a 	slli	r9,r9,24
   20c04:	1204b03a 	or	r2,r2,r8
   20c08:	1884b03a 	or	r2,r3,r2
   20c0c:	4886b03a 	or	r3,r9,r2
   20c10:	30800104 	addi	r2,r6,4
   20c14:	18000926 	beq	r3,zero,20c3c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
   20c18:	22001c0c 	andi	r8,r4,112
   20c1c:	02400404 	movi	r9,16
   20c20:	42405726 	beq	r8,r9,20d80 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
   20c24:	21003fcc 	andi	r4,r4,255
   20c28:	2100201c 	xori	r4,r4,128
   20c2c:	213fe004 	addi	r4,r4,-128
   20c30:	1947883a 	add	r3,r3,r5
   20c34:	2000010e 	bge	r4,zero,20c3c <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
   20c38:	18c00017 	ldw	r3,0(r3)
   20c3c:	38c00015 	stw	r3,0(r7)
   20c40:	dfc00017 	ldw	ra,0(sp)
   20c44:	dec00104 	addi	sp,sp,4
   20c48:	f800283a 	ret
   20c4c:	30800043 	ldbu	r2,1(r6)
   20c50:	30c00083 	ldbu	r3,2(r6)
   20c54:	324000c3 	ldbu	r9,3(r6)
   20c58:	32000003 	ldbu	r8,0(r6)
   20c5c:	1004923a 	slli	r2,r2,8
   20c60:	1806943a 	slli	r3,r3,16
   20c64:	4812963a 	slli	r9,r9,24
   20c68:	1204b03a 	or	r2,r2,r8
   20c6c:	1884b03a 	or	r2,r3,r2
   20c70:	4886b03a 	or	r3,r9,r2
   20c74:	30800204 	addi	r2,r6,8
   20c78:	003fe606 	br	20c14 <_gp+0xfffe3b84>
   20c7c:	30c00043 	ldbu	r3,1(r6)
   20c80:	32000003 	ldbu	r8,0(r6)
   20c84:	30800084 	addi	r2,r6,2
   20c88:	1806923a 	slli	r3,r3,8
   20c8c:	1a06b03a 	or	r3,r3,r8
   20c90:	18ffffcc 	andi	r3,r3,65535
   20c94:	18e0001c 	xori	r3,r3,32768
   20c98:	18e00004 	addi	r3,r3,-32768
   20c9c:	003fdd06 	br	20c14 <_gp+0xfffe3b84>
   20ca0:	30c00003 	ldbu	r3,0(r6)
   20ca4:	30800044 	addi	r2,r6,1
   20ca8:	003fda06 	br	20c14 <_gp+0xfffe3b84>
   20cac:	3017883a 	mov	r11,r6
   20cb0:	0007883a 	mov	r3,zero
   20cb4:	0013883a 	mov	r9,zero
   20cb8:	5a800003 	ldbu	r10,0(r11)
   20cbc:	58800044 	addi	r2,r11,1
   20cc0:	1017883a 	mov	r11,r2
   20cc4:	52001fcc 	andi	r8,r10,127
   20cc8:	4250983a 	sll	r8,r8,r9
   20ccc:	53003fcc 	andi	r12,r10,255
   20cd0:	6300201c 	xori	r12,r12,128
   20cd4:	633fe004 	addi	r12,r12,-128
   20cd8:	1a06b03a 	or	r3,r3,r8
   20cdc:	4a4001c4 	addi	r9,r9,7
   20ce0:	603ff516 	blt	r12,zero,20cb8 <_gp+0xfffe3c28>
   20ce4:	020007c4 	movi	r8,31
   20ce8:	427fca36 	bltu	r8,r9,20c14 <_gp+0xfffe3b84>
   20cec:	5280100c 	andi	r10,r10,64
   20cf0:	503fc826 	beq	r10,zero,20c14 <_gp+0xfffe3b84>
   20cf4:	023fffc4 	movi	r8,-1
   20cf8:	4252983a 	sll	r9,r8,r9
   20cfc:	1a46b03a 	or	r3,r3,r9
   20d00:	003fc506 	br	20c18 <_gp+0xfffe3b88>
   20d04:	3017883a 	mov	r11,r6
   20d08:	0007883a 	mov	r3,zero
   20d0c:	0015883a 	mov	r10,zero
   20d10:	5a000003 	ldbu	r8,0(r11)
   20d14:	58800044 	addi	r2,r11,1
   20d18:	1017883a 	mov	r11,r2
   20d1c:	42401fcc 	andi	r9,r8,127
   20d20:	4a92983a 	sll	r9,r9,r10
   20d24:	42003fcc 	andi	r8,r8,255
   20d28:	4200201c 	xori	r8,r8,128
   20d2c:	423fe004 	addi	r8,r8,-128
   20d30:	1a46b03a 	or	r3,r3,r9
   20d34:	528001c4 	addi	r10,r10,7
   20d38:	403ff516 	blt	r8,zero,20d10 <_gp+0xfffe3c80>
   20d3c:	003fb506 	br	20c14 <_gp+0xfffe3b84>
   20d40:	30c00043 	ldbu	r3,1(r6)
   20d44:	32000003 	ldbu	r8,0(r6)
   20d48:	30800084 	addi	r2,r6,2
   20d4c:	1806923a 	slli	r3,r3,8
   20d50:	1a06b03a 	or	r3,r3,r8
   20d54:	003faf06 	br	20c14 <_gp+0xfffe3b84>
   20d58:	0022f540 	call	22f54 <abort>
   20d5c:	308000c4 	addi	r2,r6,3
   20d60:	00ffff04 	movi	r3,-4
   20d64:	10c4703a 	and	r2,r2,r3
   20d68:	10c00017 	ldw	r3,0(r2)
   20d6c:	10800104 	addi	r2,r2,4
   20d70:	38c00015 	stw	r3,0(r7)
   20d74:	dfc00017 	ldw	ra,0(sp)
   20d78:	dec00104 	addi	sp,sp,4
   20d7c:	f800283a 	ret
   20d80:	300b883a 	mov	r5,r6
   20d84:	003fa706 	br	20c24 <_gp+0xfffe3b94>

00020d88 <_ZL15get_ttype_entryP16lsda_header_infom>:
   20d88:	defffc04 	addi	sp,sp,-16
   20d8c:	dfc00315 	stw	ra,12(sp)
   20d90:	dc400215 	stw	r17,8(sp)
   20d94:	dc000115 	stw	r16,4(sp)
   20d98:	2021883a 	mov	r16,r4
   20d9c:	21000503 	ldbu	r4,20(r4)
   20da0:	2823883a 	mov	r17,r5
   20da4:	0020ad80 	call	20ad8 <_ZL21size_of_encoded_valueh>
   20da8:	1445383a 	mul	r2,r2,r17
   20dac:	81800317 	ldw	r6,12(r16)
   20db0:	81400217 	ldw	r5,8(r16)
   20db4:	81000503 	ldbu	r4,20(r16)
   20db8:	d80f883a 	mov	r7,sp
   20dbc:	308dc83a 	sub	r6,r6,r2
   20dc0:	0020b7c0 	call	20b7c <_ZL28read_encoded_value_with_basehjPKhPj>
   20dc4:	d8800017 	ldw	r2,0(sp)
   20dc8:	dfc00317 	ldw	ra,12(sp)
   20dcc:	dc400217 	ldw	r17,8(sp)
   20dd0:	dc000117 	ldw	r16,4(sp)
   20dd4:	dec00404 	addi	sp,sp,16
   20dd8:	f800283a 	ret

00020ddc <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   20ddc:	deffff04 	addi	sp,sp,-4
   20de0:	dfc00015 	stw	ra,0(sp)
   20de4:	20c03fcc 	andi	r3,r4,255
   20de8:	00803fc4 	movi	r2,255
   20dec:	18800e26 	beq	r3,r2,20e28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
   20df0:	20801c0c 	andi	r2,r4,112
   20df4:	00c00804 	movi	r3,32
   20df8:	10c01726 	beq	r2,r3,20e58 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
   20dfc:	18800e2e 	bgeu	r3,r2,20e38 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
   20e00:	00c01004 	movi	r3,64
   20e04:	10c01026 	beq	r2,r3,20e48 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
   20e08:	00c01404 	movi	r3,80
   20e0c:	10c00626 	beq	r2,r3,20e28 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
   20e10:	00c00c04 	movi	r3,48
   20e14:	10c00b1e 	bne	r2,r3,20e44 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
   20e18:	2809883a 	mov	r4,r5
   20e1c:	dfc00017 	ldw	ra,0(sp)
   20e20:	dec00104 	addi	sp,sp,4
   20e24:	0022d141 	jmpi	22d14 <_Unwind_GetDataRelBase>
   20e28:	0005883a 	mov	r2,zero
   20e2c:	dfc00017 	ldw	ra,0(sp)
   20e30:	dec00104 	addi	sp,sp,4
   20e34:	f800283a 	ret
   20e38:	103ffb26 	beq	r2,zero,20e28 <_gp+0xfffe3d98>
   20e3c:	00c00404 	movi	r3,16
   20e40:	10fff926 	beq	r2,r3,20e28 <_gp+0xfffe3d98>
   20e44:	0022f540 	call	22f54 <abort>
   20e48:	2809883a 	mov	r4,r5
   20e4c:	dfc00017 	ldw	ra,0(sp)
   20e50:	dec00104 	addi	sp,sp,4
   20e54:	0022d041 	jmpi	22d04 <_Unwind_GetRegionStart>
   20e58:	2809883a 	mov	r4,r5
   20e5c:	dfc00017 	ldw	ra,0(sp)
   20e60:	dec00104 	addi	sp,sp,4
   20e64:	0022d1c1 	jmpi	22d1c <_Unwind_GetTextRelBase>

00020e68 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   20e68:	defffb04 	addi	sp,sp,-20
   20e6c:	dcc00315 	stw	r19,12(sp)
   20e70:	dc400115 	stw	r17,4(sp)
   20e74:	dc000015 	stw	r16,0(sp)
   20e78:	dfc00415 	stw	ra,16(sp)
   20e7c:	dc800215 	stw	r18,8(sp)
   20e80:	2027883a 	mov	r19,r4
   20e84:	2821883a 	mov	r16,r5
   20e88:	3023883a 	mov	r17,r6
   20e8c:	20003f26 	beq	r4,zero,20f8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
   20e90:	0022d040 	call	22d04 <_Unwind_GetRegionStart>
   20e94:	88800015 	stw	r2,0(r17)
   20e98:	84800003 	ldbu	r18,0(r16)
   20e9c:	00c03fc4 	movi	r3,255
   20ea0:	84000044 	addi	r16,r16,1
   20ea4:	90c03726 	beq	r18,r3,20f84 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
   20ea8:	980b883a 	mov	r5,r19
   20eac:	9009883a 	mov	r4,r18
   20eb0:	0020ddc0 	call	20ddc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   20eb4:	800d883a 	mov	r6,r16
   20eb8:	89c00104 	addi	r7,r17,4
   20ebc:	100b883a 	mov	r5,r2
   20ec0:	9009883a 	mov	r4,r18
   20ec4:	0020b7c0 	call	20b7c <_ZL28read_encoded_value_with_basehjPKhPj>
   20ec8:	1021883a 	mov	r16,r2
   20ecc:	80c00003 	ldbu	r3,0(r16)
   20ed0:	01003fc4 	movi	r4,255
   20ed4:	80800044 	addi	r2,r16,1
   20ed8:	88c00505 	stb	r3,20(r17)
   20edc:	18c03fcc 	andi	r3,r3,255
   20ee0:	19002c26 	beq	r3,r4,20f94 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
   20ee4:	100f883a 	mov	r7,r2
   20ee8:	000d883a 	mov	r6,zero
   20eec:	000b883a 	mov	r5,zero
   20ef0:	38c00003 	ldbu	r3,0(r7)
   20ef4:	10800044 	addi	r2,r2,1
   20ef8:	100f883a 	mov	r7,r2
   20efc:	19001fcc 	andi	r4,r3,127
   20f00:	2148983a 	sll	r4,r4,r5
   20f04:	18c03fcc 	andi	r3,r3,255
   20f08:	18c0201c 	xori	r3,r3,128
   20f0c:	18ffe004 	addi	r3,r3,-128
   20f10:	310cb03a 	or	r6,r6,r4
   20f14:	294001c4 	addi	r5,r5,7
   20f18:	183ff516 	blt	r3,zero,20ef0 <_gp+0xfffe3e60>
   20f1c:	118d883a 	add	r6,r2,r6
   20f20:	89800315 	stw	r6,12(r17)
   20f24:	10c00003 	ldbu	r3,0(r2)
   20f28:	000d883a 	mov	r6,zero
   20f2c:	10800044 	addi	r2,r2,1
   20f30:	88c00545 	stb	r3,21(r17)
   20f34:	000b883a 	mov	r5,zero
   20f38:	10c00003 	ldbu	r3,0(r2)
   20f3c:	10800044 	addi	r2,r2,1
   20f40:	19001fcc 	andi	r4,r3,127
   20f44:	2148983a 	sll	r4,r4,r5
   20f48:	18c03fcc 	andi	r3,r3,255
   20f4c:	18c0201c 	xori	r3,r3,128
   20f50:	18ffe004 	addi	r3,r3,-128
   20f54:	310cb03a 	or	r6,r6,r4
   20f58:	294001c4 	addi	r5,r5,7
   20f5c:	183ff616 	blt	r3,zero,20f38 <_gp+0xfffe3ea8>
   20f60:	118d883a 	add	r6,r2,r6
   20f64:	89800415 	stw	r6,16(r17)
   20f68:	dfc00417 	ldw	ra,16(sp)
   20f6c:	dcc00317 	ldw	r19,12(sp)
   20f70:	dc800217 	ldw	r18,8(sp)
   20f74:	dc400117 	ldw	r17,4(sp)
   20f78:	dc000017 	ldw	r16,0(sp)
   20f7c:	dec00504 	addi	sp,sp,20
   20f80:	f800283a 	ret
   20f84:	88800115 	stw	r2,4(r17)
   20f88:	003fd006 	br	20ecc <_gp+0xfffe3e3c>
   20f8c:	0005883a 	mov	r2,zero
   20f90:	003fc006 	br	20e94 <_gp+0xfffe3e04>
   20f94:	88000315 	stw	zero,12(r17)
   20f98:	003fe206 	br	20f24 <_gp+0xfffe3e94>

00020f9c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
   20f9c:	28800017 	ldw	r2,0(r5)
   20fa0:	30c00017 	ldw	r3,0(r6)
   20fa4:	defffb04 	addi	sp,sp,-20
   20fa8:	10800217 	ldw	r2,8(r2)
   20fac:	dc400315 	stw	r17,12(sp)
   20fb0:	dc000215 	stw	r16,8(sp)
   20fb4:	d9400115 	stw	r5,4(sp)
   20fb8:	dfc00415 	stw	ra,16(sp)
   20fbc:	2021883a 	mov	r16,r4
   20fc0:	d8c00015 	stw	r3,0(sp)
   20fc4:	2809883a 	mov	r4,r5
   20fc8:	3023883a 	mov	r17,r6
   20fcc:	103ee83a 	callr	r2
   20fd0:	10803fcc 	andi	r2,r2,255
   20fd4:	d9400117 	ldw	r5,4(sp)
   20fd8:	10000326 	beq	r2,zero,20fe8 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
   20fdc:	d8800017 	ldw	r2,0(sp)
   20fe0:	10800017 	ldw	r2,0(r2)
   20fe4:	d8800015 	stw	r2,0(sp)
   20fe8:	80800017 	ldw	r2,0(r16)
   20fec:	01c00044 	movi	r7,1
   20ff0:	d80d883a 	mov	r6,sp
   20ff4:	10800417 	ldw	r2,16(r2)
   20ff8:	8009883a 	mov	r4,r16
   20ffc:	103ee83a 	callr	r2
   21000:	10c03fcc 	andi	r3,r2,255
   21004:	18000226 	beq	r3,zero,21010 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
   21008:	d8c00017 	ldw	r3,0(sp)
   2100c:	88c00015 	stw	r3,0(r17)
   21010:	dfc00417 	ldw	ra,16(sp)
   21014:	dc400317 	ldw	r17,12(sp)
   21018:	dc000217 	ldw	r16,8(sp)
   2101c:	dec00504 	addi	sp,sp,20
   21020:	f800283a 	ret

00021024 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
   21024:	defff604 	addi	sp,sp,-40
   21028:	dc000415 	stw	r16,16(sp)
   2102c:	3821d23a 	srai	r16,r7,8
   21030:	dc800615 	stw	r18,24(sp)
   21034:	dc400515 	stw	r17,20(sp)
   21038:	dfc00915 	stw	ra,36(sp)
   2103c:	dd000815 	stw	r20,32(sp)
   21040:	dcc00715 	stw	r19,28(sp)
   21044:	d9400215 	stw	r5,8(sp)
   21048:	3825883a 	mov	r18,r7
   2104c:	2023883a 	mov	r17,r4
   21050:	8000010e 	bge	r16,zero,21058 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
   21054:	0421c83a 	sub	r16,zero,r16
   21058:	000b883a 	mov	r5,zero
   2105c:	01000144 	movi	r4,5
   21060:	d9800315 	stw	r6,12(sp)
   21064:	0020ddc0 	call	20ddc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21068:	d9800317 	ldw	r6,12(sp)
   2106c:	d9c00104 	addi	r7,sp,4
   21070:	100b883a 	mov	r5,r2
   21074:	01000144 	movi	r4,5
   21078:	0020b7c0 	call	20b7c <_ZL28read_encoded_value_with_basehjPKhPj>
   2107c:	11fffe64 	muli	r7,r2,-7
   21080:	0007883a 	mov	r3,zero
   21084:	11400003 	ldbu	r5,0(r2)
   21088:	110001e4 	muli	r4,r2,7
   2108c:	10800044 	addi	r2,r2,1
   21090:	29801fcc 	andi	r6,r5,127
   21094:	21c9883a 	add	r4,r4,r7
   21098:	3108983a 	sll	r4,r6,r4
   2109c:	29403fcc 	andi	r5,r5,255
   210a0:	2940201c 	xori	r5,r5,128
   210a4:	297fe004 	addi	r5,r5,-128
   210a8:	1906b03a 	or	r3,r3,r4
   210ac:	283ff516 	blt	r5,zero,21084 <_gp+0xfffe3ff4>
   210b0:	10c5883a 	add	r2,r2,r3
   210b4:	11fffe64 	muli	r7,r2,-7
   210b8:	0009883a 	mov	r4,zero
   210bc:	11400003 	ldbu	r5,0(r2)
   210c0:	10c001e4 	muli	r3,r2,7
   210c4:	10800044 	addi	r2,r2,1
   210c8:	29801fcc 	andi	r6,r5,127
   210cc:	19c7883a 	add	r3,r3,r7
   210d0:	30c6983a 	sll	r3,r6,r3
   210d4:	29403fcc 	andi	r5,r5,255
   210d8:	2940201c 	xori	r5,r5,128
   210dc:	297fe004 	addi	r5,r5,-128
   210e0:	20c8b03a 	or	r4,r4,r3
   210e4:	283ff516 	blt	r5,zero,210bc <_gp+0xfffe402c>
   210e8:	80c03fcc 	andi	r3,r16,255
   210ec:	18ffffc4 	addi	r3,r3,-1
   210f0:	10c7883a 	add	r3,r2,r3
   210f4:	210000c4 	addi	r4,r4,3
   210f8:	197ffe64 	muli	r5,r3,-7
   210fc:	2085883a 	add	r2,r4,r2
   21100:	04ffff04 	movi	r19,-4
   21104:	14e6703a 	and	r19,r2,r19
   21108:	0021883a 	mov	r16,zero
   2110c:	18800003 	ldbu	r2,0(r3)
   21110:	190001e4 	muli	r4,r3,7
   21114:	1d000044 	addi	r20,r3,1
   21118:	10c01fcc 	andi	r3,r2,127
   2111c:	2149883a 	add	r4,r4,r5
   21120:	1908983a 	sll	r4,r3,r4
   21124:	10803fcc 	andi	r2,r2,255
   21128:	1080201c 	xori	r2,r2,128
   2112c:	10bfe004 	addi	r2,r2,-128
   21130:	a007883a 	mov	r3,r20
   21134:	8120b03a 	or	r16,r16,r4
   21138:	103ff416 	blt	r2,zero,2110c <_gp+0xfffe407c>
   2113c:	94803fcc 	andi	r18,r18,255
   21140:	80001f26 	beq	r16,zero,211c0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
   21144:	9009883a 	mov	r4,r18
   21148:	0020ad80 	call	20ad8 <_ZL21size_of_encoded_valueh>
   2114c:	81bfffc4 	addi	r6,r16,-1
   21150:	308d383a 	mul	r6,r6,r2
   21154:	d9400a17 	ldw	r5,40(sp)
   21158:	d80f883a 	mov	r7,sp
   2115c:	9009883a 	mov	r4,r18
   21160:	34cd883a 	add	r6,r6,r19
   21164:	0020b7c0 	call	20b7c <_ZL28read_encoded_value_with_basehjPKhPj>
   21168:	d9000017 	ldw	r4,0(sp)
   2116c:	d9800204 	addi	r6,sp,8
   21170:	880b883a 	mov	r5,r17
   21174:	0020f9c0 	call	20f9c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   21178:	10c03fcc 	andi	r3,r2,255
   2117c:	1800111e 	bne	r3,zero,211c4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
   21180:	a17ffe64 	muli	r5,r20,-7
   21184:	a007883a 	mov	r3,r20
   21188:	0021883a 	mov	r16,zero
   2118c:	19000003 	ldbu	r4,0(r3)
   21190:	18c001e4 	muli	r3,r3,7
   21194:	a5000044 	addi	r20,r20,1
   21198:	20801fcc 	andi	r2,r4,127
   2119c:	1947883a 	add	r3,r3,r5
   211a0:	10c4983a 	sll	r2,r2,r3
   211a4:	21003fcc 	andi	r4,r4,255
   211a8:	2100201c 	xori	r4,r4,128
   211ac:	213fe004 	addi	r4,r4,-128
   211b0:	a007883a 	mov	r3,r20
   211b4:	80a0b03a 	or	r16,r16,r2
   211b8:	203ff416 	blt	r4,zero,2118c <_gp+0xfffe40fc>
   211bc:	003fe006 	br	21140 <_gp+0xfffe40b0>
   211c0:	0005883a 	mov	r2,zero
   211c4:	dfc00917 	ldw	ra,36(sp)
   211c8:	dd000817 	ldw	r20,32(sp)
   211cc:	dcc00717 	ldw	r19,28(sp)
   211d0:	dc800617 	ldw	r18,24(sp)
   211d4:	dc400517 	ldw	r17,20(sp)
   211d8:	dc000417 	ldw	r16,16(sp)
   211dc:	dec00a04 	addi	sp,sp,40
   211e0:	f800283a 	ret

000211e4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
   211e4:	defffb04 	addi	sp,sp,-20
   211e8:	dc000115 	stw	r16,4(sp)
   211ec:	24000317 	ldw	r16,12(r4)
   211f0:	01ce303a 	nor	r7,zero,r7
   211f4:	dc800315 	stw	r18,12(sp)
   211f8:	dc400215 	stw	r17,8(sp)
   211fc:	dfc00415 	stw	ra,16(sp)
   21200:	2023883a 	mov	r17,r4
   21204:	2825883a 	mov	r18,r5
   21208:	d9800015 	stw	r6,0(sp)
   2120c:	81e1883a 	add	r16,r16,r7
   21210:	800d883a 	mov	r6,r16
   21214:	000b883a 	mov	r5,zero
   21218:	0009883a 	mov	r4,zero
   2121c:	30800003 	ldbu	r2,0(r6)
   21220:	84000044 	addi	r16,r16,1
   21224:	800d883a 	mov	r6,r16
   21228:	10c01fcc 	andi	r3,r2,127
   2122c:	1906983a 	sll	r3,r3,r4
   21230:	10803fcc 	andi	r2,r2,255
   21234:	1080201c 	xori	r2,r2,128
   21238:	10bfe004 	addi	r2,r2,-128
   2123c:	28cab03a 	or	r5,r5,r3
   21240:	210001c4 	addi	r4,r4,7
   21244:	103ff516 	blt	r2,zero,2121c <_gp+0xfffe418c>
   21248:	28000e26 	beq	r5,zero,21284 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
   2124c:	8809883a 	mov	r4,r17
   21250:	0020d880 	call	20d88 <_ZL15get_ttype_entryP16lsda_header_infom>
   21254:	d80d883a 	mov	r6,sp
   21258:	900b883a 	mov	r5,r18
   2125c:	1009883a 	mov	r4,r2
   21260:	0020f9c0 	call	20f9c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   21264:	10c03fcc 	andi	r3,r2,255
   21268:	183fe926 	beq	r3,zero,21210 <_gp+0xfffe4180>
   2126c:	dfc00417 	ldw	ra,16(sp)
   21270:	dc800317 	ldw	r18,12(sp)
   21274:	dc400217 	ldw	r17,8(sp)
   21278:	dc000117 	ldw	r16,4(sp)
   2127c:	dec00504 	addi	sp,sp,20
   21280:	f800283a 	ret
   21284:	0005883a 	mov	r2,zero
   21288:	003ff806 	br	2126c <_gp+0xfffe41dc>

0002128c <__gxx_personality_sj0>:
   2128c:	008000b4 	movhi	r2,2
   21290:	deffdd04 	addi	sp,sp,-140
   21294:	1084a304 	addi	r2,r2,4748
   21298:	d8800e15 	stw	r2,56(sp)
   2129c:	008000f4 	movhi	r2,3
   212a0:	108bc804 	addi	r2,r2,12064
   212a4:	d8800f15 	stw	r2,60(sp)
   212a8:	008000b4 	movhi	r2,2
   212ac:	10861904 	addi	r2,r2,6244
   212b0:	d9001515 	stw	r4,84(sp)
   212b4:	d9000804 	addi	r4,sp,32
   212b8:	d8801115 	stw	r2,68(sp)
   212bc:	dfc02215 	stw	ra,136(sp)
   212c0:	df002115 	stw	fp,132(sp)
   212c4:	dec01015 	stw	sp,64(sp)
   212c8:	dec01215 	stw	sp,72(sp)
   212cc:	d9401915 	stw	r5,100(sp)
   212d0:	d9801615 	stw	r6,88(sp)
   212d4:	d9c01715 	stw	r7,92(sp)
   212d8:	0022c3c0 	call	22c3c <_Unwind_SjLj_Register>
   212dc:	d8c01517 	ldw	r3,84(sp)
   212e0:	d8000715 	stw	zero,28(sp)
   212e4:	d8000615 	stw	zero,24(sp)
   212e8:	00800044 	movi	r2,1
   212ec:	18800926 	beq	r3,r2,21314 <__gxx_personality_sj0+0x88>
   212f0:	01c000c4 	movi	r7,3
   212f4:	d9c01515 	stw	r7,84(sp)
   212f8:	d9000804 	addi	r4,sp,32
   212fc:	0022c540 	call	22c54 <_Unwind_SjLj_Unregister>
   21300:	d8801517 	ldw	r2,84(sp)
   21304:	dfc02217 	ldw	ra,136(sp)
   21308:	df002117 	ldw	fp,132(sp)
   2130c:	dec02304 	addi	sp,sp,140
   21310:	f800283a 	ret
   21314:	d9001617 	ldw	r4,88(sp)
   21318:	00af3574 	movhi	r2,48341
   2131c:	d9c01717 	ldw	r7,92(sp)
   21320:	10b54004 	addi	r2,r2,-11008
   21324:	00ee2cb4 	movhi	r3,47282
   21328:	2085883a 	add	r2,r4,r2
   2132c:	18eaaf04 	addi	r3,r3,-21828
   21330:	d8801b15 	stw	r2,108(sp)
   21334:	38c7883a 	add	r3,r7,r3
   21338:	1105803a 	cmpltu	r2,r2,r4
   2133c:	10c7883a 	add	r3,r2,r3
   21340:	d8c01c15 	stw	r3,112(sp)
   21344:	d8c01917 	ldw	r3,100(sp)
   21348:	00800184 	movi	r2,6
   2134c:	18805426 	beq	r3,r2,214a0 <__gxx_personality_sj0+0x214>
   21350:	d9002417 	ldw	r4,144(sp)
   21354:	00bfffc4 	movi	r2,-1
   21358:	d8800915 	stw	r2,36(sp)
   2135c:	0022cf80 	call	22cf8 <_Unwind_GetLanguageSpecificData>
   21360:	d8801a15 	stw	r2,104(sp)
   21364:	1000c926 	beq	r2,zero,2168c <__gxx_personality_sj0+0x400>
   21368:	d9002417 	ldw	r4,144(sp)
   2136c:	d80d883a 	mov	r6,sp
   21370:	100b883a 	mov	r5,r2
   21374:	0020e680 	call	20e68 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   21378:	d9402417 	ldw	r5,144(sp)
   2137c:	d9000503 	ldbu	r4,20(sp)
   21380:	d8801515 	stw	r2,84(sp)
   21384:	0020ddc0 	call	20ddc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21388:	d9002417 	ldw	r4,144(sp)
   2138c:	d9400604 	addi	r5,sp,24
   21390:	d8800215 	stw	r2,8(sp)
   21394:	0022cc80 	call	22cc8 <_Unwind_GetIPInfo>
   21398:	d8c00617 	ldw	r3,24(sp)
   2139c:	18006126 	beq	r3,zero,21524 <__gxx_personality_sj0+0x298>
   213a0:	1000ba16 	blt	r2,zero,2168c <__gxx_personality_sj0+0x400>
   213a4:	10002f1e 	bne	r2,zero,21464 <__gxx_personality_sj0+0x1d8>
   213a8:	d8001515 	stw	zero,84(sp)
   213ac:	d8001f15 	stw	zero,124(sp)
   213b0:	d8001815 	stw	zero,96(sp)
   213b4:	00c00044 	movi	r3,1
   213b8:	d9001917 	ldw	r4,100(sp)
   213bc:	2080004c 	andi	r2,r4,1
   213c0:	1000b51e 	bne	r2,zero,21698 <__gxx_personality_sj0+0x40c>
   213c4:	d9001917 	ldw	r4,100(sp)
   213c8:	2080020c 	andi	r2,r4,8
   213cc:	1000b71e 	bne	r2,zero,216ac <__gxx_personality_sj0+0x420>
   213d0:	d9c01c17 	ldw	r7,112(sp)
   213d4:	3800b826 	beq	r7,zero,216b8 <__gxx_personality_sj0+0x42c>
   213d8:	00800044 	movi	r2,1
   213dc:	1880b526 	beq	r3,r2,216b4 <__gxx_personality_sj0+0x428>
   213e0:	d9c01517 	ldw	r7,84(sp)
   213e4:	3800f516 	blt	r7,zero,217bc <__gxx_personality_sj0+0x530>
   213e8:	d9002417 	ldw	r4,144(sp)
   213ec:	d9802317 	ldw	r6,140(sp)
   213f0:	00bfffc4 	movi	r2,-1
   213f4:	000b883a 	mov	r5,zero
   213f8:	d8800915 	stw	r2,36(sp)
   213fc:	0022c9c0 	call	22c9c <_Unwind_SetGR>
   21400:	d9801517 	ldw	r6,84(sp)
   21404:	d9002417 	ldw	r4,144(sp)
   21408:	01400044 	movi	r5,1
   2140c:	0022c9c0 	call	22c9c <_Unwind_SetGR>
   21410:	d9002417 	ldw	r4,144(sp)
   21414:	d9401f17 	ldw	r5,124(sp)
   21418:	0022ce80 	call	22ce8 <_Unwind_SetIP>
   2141c:	010001c4 	movi	r4,7
   21420:	d9001515 	stw	r4,84(sp)
   21424:	003fb406 	br	212f8 <_gp+0xfffe4268>
   21428:	000f883a 	mov	r7,zero
   2142c:	000d883a 	mov	r6,zero
   21430:	19000003 	ldbu	r4,0(r3)
   21434:	18c00044 	addi	r3,r3,1
   21438:	d8c01515 	stw	r3,84(sp)
   2143c:	21401fcc 	andi	r5,r4,127
   21440:	298a983a 	sll	r5,r5,r6
   21444:	21003fcc 	andi	r4,r4,255
   21448:	2100201c 	xori	r4,r4,128
   2144c:	213fe004 	addi	r4,r4,-128
   21450:	394eb03a 	or	r7,r7,r5
   21454:	318001c4 	addi	r6,r6,7
   21458:	203ff516 	blt	r4,zero,21430 <_gp+0xfffe43a0>
   2145c:	10bfffc4 	addi	r2,r2,-1
   21460:	10003226 	beq	r2,zero,2152c <__gxx_personality_sj0+0x2a0>
   21464:	d9c01517 	ldw	r7,84(sp)
   21468:	0011883a 	mov	r8,zero
   2146c:	000d883a 	mov	r6,zero
   21470:	39000003 	ldbu	r4,0(r7)
   21474:	38c00044 	addi	r3,r7,1
   21478:	180f883a 	mov	r7,r3
   2147c:	21401fcc 	andi	r5,r4,127
   21480:	298a983a 	sll	r5,r5,r6
   21484:	21003fcc 	andi	r4,r4,255
   21488:	2100201c 	xori	r4,r4,128
   2148c:	213fe004 	addi	r4,r4,-128
   21490:	4150b03a 	or	r8,r8,r5
   21494:	318001c4 	addi	r6,r6,7
   21498:	203ff516 	blt	r4,zero,21470 <_gp+0xfffe43e0>
   2149c:	003fe206 	br	21428 <_gp+0xfffe4398>
   214a0:	d9001c17 	ldw	r4,112(sp)
   214a4:	203faa1e 	bne	r4,zero,21350 <_gp+0xfffe42c0>
   214a8:	d9c01517 	ldw	r7,84(sp)
   214ac:	d8801b17 	ldw	r2,108(sp)
   214b0:	38bfa736 	bltu	r7,r2,21350 <_gp+0xfffe42c0>
   214b4:	d8c02317 	ldw	r3,140(sp)
   214b8:	18fffe17 	ldw	r3,-8(r3)
   214bc:	d8c01f15 	stw	r3,124(sp)
   214c0:	18008226 	beq	r3,zero,216cc <__gxx_personality_sj0+0x440>
   214c4:	d9002317 	ldw	r4,140(sp)
   214c8:	d9c02317 	ldw	r7,140(sp)
   214cc:	213ffb17 	ldw	r4,-20(r4)
   214d0:	39fffd17 	ldw	r7,-12(r7)
   214d4:	d9001515 	stw	r4,84(sp)
   214d8:	d9c01a15 	stw	r7,104(sp)
   214dc:	d8801517 	ldw	r2,84(sp)
   214e0:	103fc10e 	bge	r2,zero,213e8 <_gp+0xfffe4358>
   214e4:	d9002417 	ldw	r4,144(sp)
   214e8:	d9401a17 	ldw	r5,104(sp)
   214ec:	d80d883a 	mov	r6,sp
   214f0:	00bfffc4 	movi	r2,-1
   214f4:	d8800915 	stw	r2,36(sp)
   214f8:	0020e680 	call	20e68 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   214fc:	d9402417 	ldw	r5,144(sp)
   21500:	d9000503 	ldbu	r4,20(sp)
   21504:	0020ddc0 	call	20ddc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21508:	d9000503 	ldbu	r4,20(sp)
   2150c:	d9402417 	ldw	r5,144(sp)
   21510:	d8800215 	stw	r2,8(sp)
   21514:	0020ddc0 	call	20ddc <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   21518:	d8c02317 	ldw	r3,140(sp)
   2151c:	18bffe15 	stw	r2,-8(r3)
   21520:	003fb106 	br	213e8 <_gp+0xfffe4358>
   21524:	10bfffc4 	addi	r2,r2,-1
   21528:	003f9d06 	br	213a0 <_gp+0xfffe4310>
   2152c:	42000044 	addi	r8,r8,1
   21530:	da001f15 	stw	r8,124(sp)
   21534:	38005326 	beq	r7,zero,21684 <__gxx_personality_sj0+0x3f8>
   21538:	d8800417 	ldw	r2,16(sp)
   2153c:	39ffffc4 	addi	r7,r7,-1
   21540:	11c5883a 	add	r2,r2,r7
   21544:	d8801815 	stw	r2,96(sp)
   21548:	40005026 	beq	r8,zero,2168c <__gxx_personality_sj0+0x400>
   2154c:	10007426 	beq	r2,zero,21720 <__gxx_personality_sj0+0x494>
   21550:	d8801917 	ldw	r2,100(sp)
   21554:	1080020c 	andi	r2,r2,8
   21558:	d8802015 	stw	r2,128(sp)
   2155c:	1000a21e 	bne	r2,zero,217e8 <__gxx_personality_sj0+0x55c>
   21560:	d8c01c17 	ldw	r3,112(sp)
   21564:	1800b026 	beq	r3,zero,21828 <__gxx_personality_sj0+0x59c>
   21568:	01c000f4 	movhi	r7,3
   2156c:	39d42c04 	addi	r7,r7,20656
   21570:	d9c01e15 	stw	r7,120(sp)
   21574:	d8001d05 	stb	zero,116(sp)
   21578:	d8c01817 	ldw	r3,96(sp)
   2157c:	d8001515 	stw	zero,84(sp)
   21580:	0009883a 	mov	r4,zero
   21584:	19400003 	ldbu	r5,0(r3)
   21588:	18800044 	addi	r2,r3,1
   2158c:	d9c01517 	ldw	r7,84(sp)
   21590:	28c01fcc 	andi	r3,r5,127
   21594:	1906983a 	sll	r3,r3,r4
   21598:	29803fcc 	andi	r6,r5,255
   2159c:	3180201c 	xori	r6,r6,128
   215a0:	38ceb03a 	or	r7,r7,r3
   215a4:	d8801715 	stw	r2,92(sp)
   215a8:	31bfe004 	addi	r6,r6,-128
   215ac:	d9c01515 	stw	r7,84(sp)
   215b0:	210001c4 	addi	r4,r4,7
   215b4:	1007883a 	mov	r3,r2
   215b8:	303ff216 	blt	r6,zero,21584 <_gp+0xfffe44f4>
   215bc:	00c007c4 	movi	r3,31
   215c0:	19000836 	bltu	r3,r4,215e4 <__gxx_personality_sj0+0x358>
   215c4:	2940100c 	andi	r5,r5,64
   215c8:	28000626 	beq	r5,zero,215e4 <__gxx_personality_sj0+0x358>
   215cc:	01c00044 	movi	r7,1
   215d0:	3908983a 	sll	r4,r7,r4
   215d4:	d8c01517 	ldw	r3,84(sp)
   215d8:	0109c83a 	sub	r4,zero,r4
   215dc:	1906b03a 	or	r3,r3,r4
   215e0:	d8c01515 	stw	r3,84(sp)
   215e4:	d8001615 	stw	zero,88(sp)
   215e8:	0009883a 	mov	r4,zero
   215ec:	11400003 	ldbu	r5,0(r2)
   215f0:	d9c01617 	ldw	r7,88(sp)
   215f4:	10800044 	addi	r2,r2,1
   215f8:	28c01fcc 	andi	r3,r5,127
   215fc:	1906983a 	sll	r3,r3,r4
   21600:	29803fcc 	andi	r6,r5,255
   21604:	3180201c 	xori	r6,r6,128
   21608:	38ceb03a 	or	r7,r7,r3
   2160c:	31bfe004 	addi	r6,r6,-128
   21610:	d9c01615 	stw	r7,88(sp)
   21614:	210001c4 	addi	r4,r4,7
   21618:	303ff416 	blt	r6,zero,215ec <_gp+0xfffe455c>
   2161c:	008007c4 	movi	r2,31
   21620:	11000736 	bltu	r2,r4,21640 <__gxx_personality_sj0+0x3b4>
   21624:	2940100c 	andi	r5,r5,64
   21628:	28000526 	beq	r5,zero,21640 <__gxx_personality_sj0+0x3b4>
   2162c:	00c00044 	movi	r3,1
   21630:	1908983a 	sll	r4,r3,r4
   21634:	0109c83a 	sub	r4,zero,r4
   21638:	390eb03a 	or	r7,r7,r4
   2163c:	d9c01615 	stw	r7,88(sp)
   21640:	d9001517 	ldw	r4,84(sp)
   21644:	20003c26 	beq	r4,zero,21738 <__gxx_personality_sj0+0x4ac>
   21648:	01003e0e 	bge	zero,r4,21744 <__gxx_personality_sj0+0x4b8>
   2164c:	01ffffc4 	movi	r7,-1
   21650:	200b883a 	mov	r5,r4
   21654:	d809883a 	mov	r4,sp
   21658:	d9c00915 	stw	r7,36(sp)
   2165c:	0020d880 	call	20d88 <_ZL15get_ttype_entryP16lsda_header_infom>
   21660:	10005f26 	beq	r2,zero,217e0 <__gxx_personality_sj0+0x554>
   21664:	d8c01e17 	ldw	r3,120(sp)
   21668:	1800571e 	bne	r3,zero,217c8 <__gxx_personality_sj0+0x53c>
   2166c:	d9001617 	ldw	r4,88(sp)
   21670:	20002926 	beq	r4,zero,21718 <__gxx_personality_sj0+0x48c>
   21674:	d9c01717 	ldw	r7,92(sp)
   21678:	390f883a 	add	r7,r7,r4
   2167c:	d9c01815 	stw	r7,96(sp)
   21680:	003fbd06 	br	21578 <_gp+0xfffe44e8>
   21684:	d8c01f17 	ldw	r3,124(sp)
   21688:	1800251e 	bne	r3,zero,21720 <__gxx_personality_sj0+0x494>
   2168c:	01000204 	movi	r4,8
   21690:	d9001515 	stw	r4,84(sp)
   21694:	003f1806 	br	212f8 <_gp+0xfffe4268>
   21698:	d8801c17 	ldw	r2,112(sp)
   2169c:	10000d26 	beq	r2,zero,216d4 <__gxx_personality_sj0+0x448>
   216a0:	00800184 	movi	r2,6
   216a4:	d8801515 	stw	r2,84(sp)
   216a8:	003f1306 	br	212f8 <_gp+0xfffe4268>
   216ac:	00800044 	movi	r2,1
   216b0:	18bf4d1e 	bne	r3,r2,213e8 <_gp+0xfffe4358>
   216b4:	0021d0c0 	call	21d0c <_ZSt9terminatev>
   216b8:	d9001b17 	ldw	r4,108(sp)
   216bc:	00800044 	movi	r2,1
   216c0:	113f4536 	bltu	r2,r4,213d8 <_gp+0xfffe4348>
   216c4:	00800044 	movi	r2,1
   216c8:	18bf841e 	bne	r3,r2,214dc <_gp+0xfffe444c>
   216cc:	d9002317 	ldw	r4,140(sp)
   216d0:	00224c80 	call	224c8 <__cxa_call_terminate>
   216d4:	d8c01b17 	ldw	r3,108(sp)
   216d8:	00800044 	movi	r2,1
   216dc:	10fff036 	bltu	r2,r3,216a0 <_gp+0xfffe4610>
   216e0:	d9002317 	ldw	r4,140(sp)
   216e4:	d8801817 	ldw	r2,96(sp)
   216e8:	d9c01517 	ldw	r7,84(sp)
   216ec:	d8c01a17 	ldw	r3,104(sp)
   216f0:	20bffc15 	stw	r2,-16(r4)
   216f4:	d8800717 	ldw	r2,28(sp)
   216f8:	21fffb15 	stw	r7,-20(r4)
   216fc:	d9c01f17 	ldw	r7,124(sp)
   21700:	20bfff15 	stw	r2,-4(r4)
   21704:	00800184 	movi	r2,6
   21708:	20fffd15 	stw	r3,-12(r4)
   2170c:	21fffe15 	stw	r7,-8(r4)
   21710:	d8801515 	stw	r2,84(sp)
   21714:	003ef806 	br	212f8 <_gp+0xfffe4268>
   21718:	d8801d03 	ldbu	r2,116(sp)
   2171c:	103fdb26 	beq	r2,zero,2168c <_gp+0xfffe45fc>
   21720:	d8c01917 	ldw	r3,100(sp)
   21724:	1880004c 	andi	r2,r3,1
   21728:	103fd81e 	bne	r2,zero,2168c <_gp+0xfffe45fc>
   2172c:	d8001515 	stw	zero,84(sp)
   21730:	00c00084 	movi	r3,2
   21734:	003f2306 	br	213c4 <_gp+0xfffe4334>
   21738:	00c00044 	movi	r3,1
   2173c:	d8c01d05 	stb	r3,116(sp)
   21740:	003fca06 	br	2166c <_gp+0xfffe45dc>
   21744:	d9001e17 	ldw	r4,120(sp)
   21748:	20000426 	beq	r4,zero,2175c <__gxx_personality_sj0+0x4d0>
   2174c:	d9c02017 	ldw	r7,128(sp)
   21750:	3800021e 	bne	r7,zero,2175c <__gxx_personality_sj0+0x4d0>
   21754:	d8801c17 	ldw	r2,112(sp)
   21758:	10002726 	beq	r2,zero,217f8 <__gxx_personality_sj0+0x56c>
   2175c:	d8801517 	ldw	r2,84(sp)
   21760:	000d883a 	mov	r6,zero
   21764:	000b883a 	mov	r5,zero
   21768:	0088303a 	nor	r4,zero,r2
   2176c:	d8800317 	ldw	r2,12(sp)
   21770:	1109883a 	add	r4,r2,r4
   21774:	20800003 	ldbu	r2,0(r4)
   21778:	21000044 	addi	r4,r4,1
   2177c:	10c01fcc 	andi	r3,r2,127
   21780:	1946983a 	sll	r3,r3,r5
   21784:	10803fcc 	andi	r2,r2,255
   21788:	1080201c 	xori	r2,r2,128
   2178c:	10bfe004 	addi	r2,r2,-128
   21790:	30ccb03a 	or	r6,r6,r3
   21794:	294001c4 	addi	r5,r5,7
   21798:	103ff616 	blt	r2,zero,21774 <_gp+0xfffe46e4>
   2179c:	3005003a 	cmpeq	r2,r6,zero
   217a0:	10803fcc 	andi	r2,r2,255
   217a4:	103fb126 	beq	r2,zero,2166c <_gp+0xfffe45dc>
   217a8:	d9c01917 	ldw	r7,100(sp)
   217ac:	3880004c 	andi	r2,r7,1
   217b0:	103fb91e 	bne	r2,zero,21698 <_gp+0xfffe4608>
   217b4:	d8802017 	ldw	r2,128(sp)
   217b8:	10002d26 	beq	r2,zero,21870 <__gxx_personality_sj0+0x5e4>
   217bc:	00800044 	movi	r2,1
   217c0:	d8800915 	stw	r2,36(sp)
   217c4:	0021d340 	call	21d34 <_ZSt10unexpectedv>
   217c8:	d9800704 	addi	r6,sp,28
   217cc:	180b883a 	mov	r5,r3
   217d0:	1009883a 	mov	r4,r2
   217d4:	0020f9c0 	call	20f9c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
   217d8:	10803fcc 	andi	r2,r2,255
   217dc:	103fa326 	beq	r2,zero,2166c <_gp+0xfffe45dc>
   217e0:	00c000c4 	movi	r3,3
   217e4:	003ef406 	br	213b8 <_gp+0xfffe4328>
   217e8:	010000f4 	movhi	r4,3
   217ec:	21142a04 	addi	r4,r4,20648
   217f0:	d9001e15 	stw	r4,120(sp)
   217f4:	003f5f06 	br	21574 <_gp+0xfffe44e4>
   217f8:	d9001b17 	ldw	r4,108(sp)
   217fc:	00c00044 	movi	r3,1
   21800:	193fd636 	bltu	r3,r4,2175c <_gp+0xfffe46cc>
   21804:	01ffffc4 	movi	r7,-1
   21808:	d9c00915 	stw	r7,36(sp)
   2180c:	d9800717 	ldw	r6,28(sp)
   21810:	d9c01517 	ldw	r7,84(sp)
   21814:	d9401e17 	ldw	r5,120(sp)
   21818:	d809883a 	mov	r4,sp
   2181c:	00211e40 	call	211e4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21820:	1080005c 	xori	r2,r2,1
   21824:	003fde06 	br	217a0 <_gp+0xfffe4710>
   21828:	d9001b17 	ldw	r4,108(sp)
   2182c:	00800044 	movi	r2,1
   21830:	113f4d36 	bltu	r2,r4,21568 <_gp+0xfffe44d8>
   21834:	d9c02317 	ldw	r7,140(sp)
   21838:	38800017 	ldw	r2,0(r7)
   2183c:	1080004c 	andi	r2,r2,1
   21840:	1000061e 	bne	r2,zero,2185c <__gxx_personality_sj0+0x5d0>
   21844:	d8c02317 	ldw	r3,140(sp)
   21848:	18800504 	addi	r2,r3,20
   2184c:	d8800715 	stw	r2,28(sp)
   21850:	10bff017 	ldw	r2,-64(r2)
   21854:	d8801e15 	stw	r2,120(sp)
   21858:	003f4606 	br	21574 <_gp+0xfffe44e4>
   2185c:	38bff517 	ldw	r2,-44(r7)
   21860:	003ffa06 	br	2184c <_gp+0xfffe47bc>
   21864:	d9000a17 	ldw	r4,40(sp)
   21868:	0021ac40 	call	21ac4 <__cxa_begin_catch>
   2186c:	003f9106 	br	216b4 <_gp+0xfffe4624>
   21870:	d9c01c17 	ldw	r7,112(sp)
   21874:	383eda1e 	bne	r7,zero,213e0 <_gp+0xfffe4350>
   21878:	d8c01b17 	ldw	r3,108(sp)
   2187c:	00800044 	movi	r2,1
   21880:	10fed736 	bltu	r2,r3,213e0 <_gp+0xfffe4350>
   21884:	00c000c4 	movi	r3,3
   21888:	003f8e06 	br	216c4 <_gp+0xfffe4634>

0002188c <__cxa_call_unexpected>:
   2188c:	008000b4 	movhi	r2,2
   21890:	deffe604 	addi	sp,sp,-104
   21894:	1084a304 	addi	r2,r2,4748
   21898:	d8800d15 	stw	r2,52(sp)
   2189c:	008000f4 	movhi	r2,3
   218a0:	108bcc04 	addi	r2,r2,12080
   218a4:	d8800e15 	stw	r2,56(sp)
   218a8:	d8800104 	addi	r2,sp,4
   218ac:	d8800f15 	stw	r2,60(sp)
   218b0:	008000b4 	movhi	r2,2
   218b4:	10864604 	addi	r2,r2,6424
   218b8:	d9001415 	stw	r4,80(sp)
   218bc:	d9000704 	addi	r4,sp,28
   218c0:	dfc01915 	stw	ra,100(sp)
   218c4:	d8801015 	stw	r2,64(sp)
   218c8:	df001815 	stw	fp,96(sp)
   218cc:	dec01115 	stw	sp,68(sp)
   218d0:	0022c3c0 	call	22c3c <_Unwind_SjLj_Register>
   218d4:	d9001417 	ldw	r4,80(sp)
   218d8:	0021ac40 	call	21ac4 <__cxa_begin_catch>
   218dc:	d8c01417 	ldw	r3,80(sp)
   218e0:	18bffe17 	ldw	r2,-8(r3)
   218e4:	193ff717 	ldw	r4,-36(r3)
   218e8:	18fffd17 	ldw	r3,-12(r3)
   218ec:	d8800315 	stw	r2,12(sp)
   218f0:	d8c01615 	stw	r3,88(sp)
   218f4:	d8c01417 	ldw	r3,80(sp)
   218f8:	18fffb17 	ldw	r3,-20(r3)
   218fc:	d8c01515 	stw	r3,84(sp)
   21900:	d8c01417 	ldw	r3,80(sp)
   21904:	18fff817 	ldw	r3,-32(r3)
   21908:	d8c01415 	stw	r3,80(sp)
   2190c:	00c00044 	movi	r3,1
   21910:	d8c00815 	stw	r3,32(sp)
   21914:	0021d240 	call	21d24 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   21918:	d8c00917 	ldw	r3,36(sp)
   2191c:	d8800817 	ldw	r2,32(sp)
   21920:	d8c01715 	stw	r3,92(sp)
   21924:	10000a26 	beq	r2,zero,21950 <__cxa_call_unexpected+0xc4>
   21928:	10bfffc4 	addi	r2,r2,-1
   2192c:	10000126 	beq	r2,zero,21934 <__cxa_call_unexpected+0xa8>
   21930:	003b68fa 	trap	3
   21934:	d8000815 	stw	zero,32(sp)
   21938:	0021b780 	call	21b78 <__cxa_end_catch>
   2193c:	0021b780 	call	21b78 <__cxa_end_catch>
   21940:	d9001717 	ldw	r4,92(sp)
   21944:	00bfffc4 	movi	r2,-1
   21948:	d8800815 	stw	r2,32(sp)
   2194c:	0022e380 	call	22e38 <_Unwind_SjLj_Resume>
   21950:	d9001717 	ldw	r4,92(sp)
   21954:	0021ac40 	call	21ac4 <__cxa_begin_catch>
   21958:	0021d940 	call	21d94 <__cxa_get_globals_fast>
   2195c:	10800017 	ldw	r2,0(r2)
   21960:	10c00b17 	ldw	r3,44(r2)
   21964:	18c0004c 	andi	r3,r3,1
   21968:	18001e26 	beq	r3,zero,219e4 <__cxa_call_unexpected+0x158>
   2196c:	10800017 	ldw	r2,0(r2)
   21970:	d8801715 	stw	r2,92(sp)
   21974:	d8801517 	ldw	r2,84(sp)
   21978:	00802b0e 	bge	zero,r2,21a28 <__cxa_call_unexpected+0x19c>
   2197c:	d8c01717 	ldw	r3,92(sp)
   21980:	d8800317 	ldw	r2,12(sp)
   21984:	d9c01517 	ldw	r7,84(sp)
   21988:	193ff017 	ldw	r4,-64(r3)
   2198c:	d9801617 	ldw	r6,88(sp)
   21990:	d8800015 	stw	r2,0(sp)
   21994:	180b883a 	mov	r5,r3
   21998:	00800084 	movi	r2,2
   2199c:	d8800815 	stw	r2,32(sp)
   219a0:	00210240 	call	21024 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   219a4:	10803fcc 	andi	r2,r2,255
   219a8:	10001e1e 	bne	r2,zero,21a24 <__cxa_call_unexpected+0x198>
   219ac:	d8800317 	ldw	r2,12(sp)
   219b0:	d9c01517 	ldw	r7,84(sp)
   219b4:	d9801617 	ldw	r6,88(sp)
   219b8:	010000f4 	movhi	r4,3
   219bc:	d8800015 	stw	r2,0(sp)
   219c0:	210c2904 	addi	r4,r4,12452
   219c4:	00800084 	movi	r2,2
   219c8:	000b883a 	mov	r5,zero
   219cc:	d8800815 	stw	r2,32(sp)
   219d0:	00210240 	call	21024 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
   219d4:	10803fcc 	andi	r2,r2,255
   219d8:	1000051e 	bne	r2,zero,219f0 <__cxa_call_unexpected+0x164>
   219dc:	d9001417 	ldw	r4,80(sp)
   219e0:	0021c4c0 	call	21c4c <_ZN10__cxxabiv111__terminateEPFvvE>
   219e4:	10801004 	addi	r2,r2,64
   219e8:	d8801715 	stw	r2,92(sp)
   219ec:	003fe106 	br	21974 <_gp+0xfffe48e4>
   219f0:	01000104 	movi	r4,4
   219f4:	0021f0c0 	call	21f0c <__cxa_allocate_exception>
   219f8:	00c000f4 	movhi	r3,3
   219fc:	18cc4404 	addi	r3,r3,12560
   21a00:	018000b4 	movhi	r6,2
   21a04:	014000f4 	movhi	r5,3
   21a08:	10c00015 	stw	r3,0(r2)
   21a0c:	3188cf04 	addi	r6,r6,9020
   21a10:	00c00084 	movi	r3,2
   21a14:	294c2904 	addi	r5,r5,12452
   21a18:	1009883a 	mov	r4,r2
   21a1c:	d8c00815 	stw	r3,32(sp)
   21a20:	00223b40 	call	223b4 <__cxa_throw>
   21a24:	00224440 	call	22444 <__cxa_rethrow>
   21a28:	d9401617 	ldw	r5,88(sp)
   21a2c:	00800084 	movi	r2,2
   21a30:	d9800104 	addi	r6,sp,4
   21a34:	0009883a 	mov	r4,zero
   21a38:	d8800815 	stw	r2,32(sp)
   21a3c:	0020e680 	call	20e68 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   21a40:	d9801717 	ldw	r6,92(sp)
   21a44:	d9c01517 	ldw	r7,84(sp)
   21a48:	d9000104 	addi	r4,sp,4
   21a4c:	317ff017 	ldw	r5,-64(r6)
   21a50:	00211e40 	call	211e4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21a54:	10803fcc 	andi	r2,r2,255
   21a58:	1000171e 	bne	r2,zero,21ab8 <__cxa_call_unexpected+0x22c>
   21a5c:	d9c01517 	ldw	r7,84(sp)
   21a60:	014000f4 	movhi	r5,3
   21a64:	00800084 	movi	r2,2
   21a68:	294c2904 	addi	r5,r5,12452
   21a6c:	000d883a 	mov	r6,zero
   21a70:	d9000104 	addi	r4,sp,4
   21a74:	d8800815 	stw	r2,32(sp)
   21a78:	00211e40 	call	211e4 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
   21a7c:	10803fcc 	andi	r2,r2,255
   21a80:	103fd626 	beq	r2,zero,219dc <_gp+0xfffe494c>
   21a84:	01000104 	movi	r4,4
   21a88:	0021f0c0 	call	21f0c <__cxa_allocate_exception>
   21a8c:	00c000f4 	movhi	r3,3
   21a90:	18cc4404 	addi	r3,r3,12560
   21a94:	018000b4 	movhi	r6,2
   21a98:	014000f4 	movhi	r5,3
   21a9c:	10c00015 	stw	r3,0(r2)
   21aa0:	3188cf04 	addi	r6,r6,9020
   21aa4:	00c00084 	movi	r3,2
   21aa8:	294c2904 	addi	r5,r5,12452
   21aac:	1009883a 	mov	r4,r2
   21ab0:	d8c00815 	stw	r3,32(sp)
   21ab4:	00223b40 	call	223b4 <__cxa_throw>
   21ab8:	00224440 	call	22444 <__cxa_rethrow>

00021abc <__cxa_get_exception_ptr>:
   21abc:	20bfff17 	ldw	r2,-4(r4)
   21ac0:	f800283a 	ret

00021ac4 <__cxa_begin_catch>:
   21ac4:	defffe04 	addi	sp,sp,-8
   21ac8:	dc000015 	stw	r16,0(sp)
   21acc:	dfc00115 	stw	ra,4(sp)
   21ad0:	2021883a 	mov	r16,r4
   21ad4:	0021da00 	call	21da0 <__cxa_get_globals>
   21ad8:	81000017 	ldw	r4,0(r16)
   21adc:	80c00117 	ldw	r3,4(r16)
   21ae0:	01af3574 	movhi	r6,48341
   21ae4:	31b54004 	addi	r6,r6,-11008
   21ae8:	016e2cb4 	movhi	r5,47282
   21aec:	296aaf04 	addi	r5,r5,-21828
   21af0:	218d883a 	add	r6,r4,r6
   21af4:	3109803a 	cmpltu	r4,r6,r4
   21af8:	1947883a 	add	r3,r3,r5
   21afc:	20c7883a 	add	r3,r4,r3
   21b00:	817ff504 	addi	r5,r16,-44
   21b04:	11000017 	ldw	r4,0(r2)
   21b08:	18000726 	beq	r3,zero,21b28 <__cxa_begin_catch+0x64>
   21b0c:	2000191e 	bne	r4,zero,21b74 <__cxa_begin_catch+0xb0>
   21b10:	11400015 	stw	r5,0(r2)
   21b14:	0005883a 	mov	r2,zero
   21b18:	dfc00117 	ldw	ra,4(sp)
   21b1c:	dc000017 	ldw	r16,0(sp)
   21b20:	dec00204 	addi	sp,sp,8
   21b24:	f800283a 	ret
   21b28:	01c00044 	movi	r7,1
   21b2c:	39bff736 	bltu	r7,r6,21b0c <_gp+0xfffe4a7c>
   21b30:	80fffa17 	ldw	r3,-24(r16)
   21b34:	18000d16 	blt	r3,zero,21b6c <__cxa_begin_catch+0xa8>
   21b38:	18c00044 	addi	r3,r3,1
   21b3c:	11800117 	ldw	r6,4(r2)
   21b40:	80fffa15 	stw	r3,-24(r16)
   21b44:	30ffffc4 	addi	r3,r6,-1
   21b48:	10c00115 	stw	r3,4(r2)
   21b4c:	21400226 	beq	r4,r5,21b58 <__cxa_begin_catch+0x94>
   21b50:	813ff915 	stw	r4,-28(r16)
   21b54:	11400015 	stw	r5,0(r2)
   21b58:	80bfff17 	ldw	r2,-4(r16)
   21b5c:	dfc00117 	ldw	ra,4(sp)
   21b60:	dc000017 	ldw	r16,0(sp)
   21b64:	dec00204 	addi	sp,sp,8
   21b68:	f800283a 	ret
   21b6c:	38c7c83a 	sub	r3,r7,r3
   21b70:	003ff206 	br	21b3c <_gp+0xfffe4aac>
   21b74:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00021b78 <__cxa_end_catch>:
   21b78:	deffff04 	addi	sp,sp,-4
   21b7c:	dfc00015 	stw	ra,0(sp)
   21b80:	0021d940 	call	21d94 <__cxa_get_globals_fast>
   21b84:	11000017 	ldw	r4,0(r2)
   21b88:	20001426 	beq	r4,zero,21bdc <__cxa_end_catch+0x64>
   21b8c:	21400b17 	ldw	r5,44(r4)
   21b90:	01ef3574 	movhi	r7,48341
   21b94:	39f54004 	addi	r7,r7,-11008
   21b98:	29cf883a 	add	r7,r5,r7
   21b9c:	20c00c17 	ldw	r3,48(r4)
   21ba0:	394d803a 	cmpltu	r6,r7,r5
   21ba4:	016e2cb4 	movhi	r5,47282
   21ba8:	296aaf04 	addi	r5,r5,-21828
   21bac:	1947883a 	add	r3,r3,r5
   21bb0:	30c7883a 	add	r3,r6,r3
   21bb4:	18000c1e 	bne	r3,zero,21be8 <__cxa_end_catch+0x70>
   21bb8:	00c00044 	movi	r3,1
   21bbc:	19c00a36 	bltu	r3,r7,21be8 <__cxa_end_catch+0x70>
   21bc0:	20c00517 	ldw	r3,20(r4)
   21bc4:	18000d16 	blt	r3,zero,21bfc <__cxa_end_catch+0x84>
   21bc8:	18ffffc4 	addi	r3,r3,-1
   21bcc:	18001026 	beq	r3,zero,21c10 <__cxa_end_catch+0x98>
   21bd0:	00bfffc4 	movi	r2,-1
   21bd4:	18801426 	beq	r3,r2,21c28 <__cxa_end_catch+0xb0>
   21bd8:	20c00515 	stw	r3,20(r4)
   21bdc:	dfc00017 	ldw	ra,0(sp)
   21be0:	dec00104 	addi	sp,sp,4
   21be4:	f800283a 	ret
   21be8:	21000b04 	addi	r4,r4,44
   21bec:	10000015 	stw	zero,0(r2)
   21bf0:	dfc00017 	ldw	ra,0(sp)
   21bf4:	dec00104 	addi	sp,sp,4
   21bf8:	0022ec81 	jmpi	22ec8 <_Unwind_DeleteException>
   21bfc:	18c00044 	addi	r3,r3,1
   21c00:	183ff51e 	bne	r3,zero,21bd8 <_gp+0xfffe4b48>
   21c04:	21400417 	ldw	r5,16(r4)
   21c08:	11400015 	stw	r5,0(r2)
   21c0c:	003ff206 	br	21bd8 <_gp+0xfffe4b48>
   21c10:	20c00417 	ldw	r3,16(r4)
   21c14:	21000b04 	addi	r4,r4,44
   21c18:	10c00015 	stw	r3,0(r2)
   21c1c:	dfc00017 	ldw	ra,0(sp)
   21c20:	dec00104 	addi	sp,sp,4
   21c24:	0022ec81 	jmpi	22ec8 <_Unwind_DeleteException>
   21c28:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00021c2c <_ZSt18uncaught_exceptionv>:
   21c2c:	deffff04 	addi	sp,sp,-4
   21c30:	dfc00015 	stw	ra,0(sp)
   21c34:	0021da00 	call	21da0 <__cxa_get_globals>
   21c38:	10800117 	ldw	r2,4(r2)
   21c3c:	1004c03a 	cmpne	r2,r2,zero
   21c40:	dfc00017 	ldw	ra,0(sp)
   21c44:	dec00104 	addi	sp,sp,4
   21c48:	f800283a 	ret

00021c4c <_ZN10__cxxabiv111__terminateEPFvvE>:
   21c4c:	008000b4 	movhi	r2,2
   21c50:	deffef04 	addi	sp,sp,-68
   21c54:	1084a304 	addi	r2,r2,4748
   21c58:	d8800615 	stw	r2,24(sp)
   21c5c:	008000f4 	movhi	r2,3
   21c60:	108bd004 	addi	r2,r2,12096
   21c64:	d8800715 	stw	r2,28(sp)
   21c68:	008000b4 	movhi	r2,2
   21c6c:	10872904 	addi	r2,r2,7332
   21c70:	d9000d15 	stw	r4,52(sp)
   21c74:	d809883a 	mov	r4,sp
   21c78:	d8800915 	stw	r2,36(sp)
   21c7c:	dfc01015 	stw	ra,64(sp)
   21c80:	df000f15 	stw	fp,60(sp)
   21c84:	dec00815 	stw	sp,32(sp)
   21c88:	dec00a15 	stw	sp,40(sp)
   21c8c:	0022c3c0 	call	22c3c <_Unwind_SjLj_Register>
   21c90:	00800044 	movi	r2,1
   21c94:	d8800115 	stw	r2,4(sp)
   21c98:	d8800d17 	ldw	r2,52(sp)
   21c9c:	103ee83a 	callr	r2
   21ca0:	0022f540 	call	22f54 <abort>
   21ca4:	d8c00217 	ldw	r3,8(sp)
   21ca8:	d8800117 	ldw	r2,4(sp)
   21cac:	d8c00d15 	stw	r3,52(sp)
   21cb0:	d8c00317 	ldw	r3,12(sp)
   21cb4:	d8c00e15 	stw	r3,56(sp)
   21cb8:	10000b26 	beq	r2,zero,21ce8 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
   21cbc:	10bfffc4 	addi	r2,r2,-1
   21cc0:	10000126 	beq	r2,zero,21cc8 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
   21cc4:	003b68fa 	trap	3
   21cc8:	d8000115 	stw	zero,4(sp)
   21ccc:	0021b780 	call	21b78 <__cxa_end_catch>
   21cd0:	d8c00e17 	ldw	r3,56(sp)
   21cd4:	00bfffc4 	movi	r2,-1
   21cd8:	18800826 	beq	r3,r2,21cfc <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
   21cdc:	d9000d17 	ldw	r4,52(sp)
   21ce0:	d8800115 	stw	r2,4(sp)
   21ce4:	0022e380 	call	22e38 <_Unwind_SjLj_Resume>
   21ce8:	d9000d17 	ldw	r4,52(sp)
   21cec:	0021ac40 	call	21ac4 <__cxa_begin_catch>
   21cf0:	00800084 	movi	r2,2
   21cf4:	d8800115 	stw	r2,4(sp)
   21cf8:	0022f540 	call	22f54 <abort>
   21cfc:	d8800e17 	ldw	r2,56(sp)
   21d00:	d9000d17 	ldw	r4,52(sp)
   21d04:	d8800115 	stw	r2,4(sp)
   21d08:	002188c0 	call	2188c <__cxa_call_unexpected>

00021d0c <_ZSt9terminatev>:
   21d0c:	008000f4 	movhi	r2,3
   21d10:	10943004 	addi	r2,r2,20672
   21d14:	11000017 	ldw	r4,0(r2)
   21d18:	deffff04 	addi	sp,sp,-4
   21d1c:	dfc00015 	stw	ra,0(sp)
   21d20:	0021c4c0 	call	21c4c <_ZN10__cxxabiv111__terminateEPFvvE>

00021d24 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   21d24:	deffff04 	addi	sp,sp,-4
   21d28:	dfc00015 	stw	ra,0(sp)
   21d2c:	203ee83a 	callr	r4
   21d30:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00021d34 <_ZSt10unexpectedv>:
   21d34:	008000f4 	movhi	r2,3
   21d38:	10943104 	addi	r2,r2,20676
   21d3c:	11000017 	ldw	r4,0(r2)
   21d40:	deffff04 	addi	sp,sp,-4
   21d44:	dfc00015 	stw	ra,0(sp)
   21d48:	0021d240 	call	21d24 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00021d4c <_ZSt13set_terminatePFvvE>:
   21d4c:	00c000f4 	movhi	r3,3
   21d50:	18d43004 	addi	r3,r3,20672
   21d54:	18800017 	ldw	r2,0(r3)
   21d58:	19000015 	stw	r4,0(r3)
   21d5c:	f800283a 	ret

00021d60 <_ZSt13get_terminatev>:
   21d60:	008000f4 	movhi	r2,3
   21d64:	10943004 	addi	r2,r2,20672
   21d68:	10800017 	ldw	r2,0(r2)
   21d6c:	f800283a 	ret

00021d70 <_ZSt14set_unexpectedPFvvE>:
   21d70:	00c000f4 	movhi	r3,3
   21d74:	18d43104 	addi	r3,r3,20676
   21d78:	18800017 	ldw	r2,0(r3)
   21d7c:	19000015 	stw	r4,0(r3)
   21d80:	f800283a 	ret

00021d84 <_ZSt14get_unexpectedv>:
   21d84:	008000f4 	movhi	r2,3
   21d88:	10943104 	addi	r2,r2,20676
   21d8c:	10800017 	ldw	r2,0(r2)
   21d90:	f800283a 	ret

00021d94 <__cxa_get_globals_fast>:
   21d94:	008000f4 	movhi	r2,3
   21d98:	109b3c04 	addi	r2,r2,27888
   21d9c:	f800283a 	ret

00021da0 <__cxa_get_globals>:
   21da0:	008000f4 	movhi	r2,3
   21da4:	109b3c04 	addi	r2,r2,27888
   21da8:	f800283a 	ret

00021dac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
   21dac:	018000f4 	movhi	r6,3
   21db0:	319b4d04 	addi	r6,r6,27956
   21db4:	31400117 	ldw	r5,4(r6)
   21db8:	223fff04 	addi	r8,r4,-4
   21dbc:	227fff17 	ldw	r9,-4(r4)
   21dc0:	28001326 	beq	r5,zero,21e10 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
   21dc4:	424f883a 	add	r7,r8,r9
   21dc8:	29c01426 	beq	r5,r7,21e1c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
   21dcc:	28c00117 	ldw	r3,4(r5)
   21dd0:	18001c26 	beq	r3,zero,21e44 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
   21dd4:	38c00336 	bltu	r7,r3,21de4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
   21dd8:	00001e06 	br	21e54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
   21ddc:	3880052e 	bgeu	r7,r2,21df4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
   21de0:	1007883a 	mov	r3,r2
   21de4:	18800117 	ldw	r2,4(r3)
   21de8:	29800104 	addi	r6,r5,4
   21dec:	180b883a 	mov	r5,r3
   21df0:	103ffa1e 	bne	r2,zero,21ddc <_gp+0xfffe4d4c>
   21df4:	19400017 	ldw	r5,0(r3)
   21df8:	194f883a 	add	r7,r3,r5
   21dfc:	41c00e26 	beq	r8,r7,21e38 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
   21e00:	20800015 	stw	r2,0(r4)
   21e04:	30800017 	ldw	r2,0(r6)
   21e08:	12000115 	stw	r8,4(r2)
   21e0c:	f800283a 	ret
   21e10:	20000015 	stw	zero,0(r4)
   21e14:	32000115 	stw	r8,4(r6)
   21e18:	f800283a 	ret
   21e1c:	28c00017 	ldw	r3,0(r5)
   21e20:	28800117 	ldw	r2,4(r5)
   21e24:	1a53883a 	add	r9,r3,r9
   21e28:	227fff15 	stw	r9,-4(r4)
   21e2c:	20800015 	stw	r2,0(r4)
   21e30:	32000115 	stw	r8,4(r6)
   21e34:	f800283a 	ret
   21e38:	494b883a 	add	r5,r9,r5
   21e3c:	19400015 	stw	r5,0(r3)
   21e40:	f800283a 	ret
   21e44:	0005883a 	mov	r2,zero
   21e48:	2807883a 	mov	r3,r5
   21e4c:	31800104 	addi	r6,r6,4
   21e50:	003fe806 	br	21df4 <_gp+0xfffe4d64>
   21e54:	1805883a 	mov	r2,r3
   21e58:	31800104 	addi	r6,r6,4
   21e5c:	2807883a 	mov	r3,r5
   21e60:	003fe406 	br	21df4 <_gp+0xfffe4d64>

00021e64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
   21e64:	20800104 	addi	r2,r4,4
   21e68:	00c001c4 	movi	r3,7
   21e6c:	1880112e 	bgeu	r3,r2,21eb4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
   21e70:	20c9883a 	add	r4,r4,r3
   21e74:	00bfff04 	movi	r2,-4
   21e78:	208a703a 	and	r5,r4,r2
   21e7c:	018000f4 	movhi	r6,3
   21e80:	319b4d04 	addi	r6,r6,27956
   21e84:	30c00117 	ldw	r3,4(r6)
   21e88:	18000826 	beq	r3,zero,21eac <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
   21e8c:	19000017 	ldw	r4,0(r3)
   21e90:	21400436 	bltu	r4,r5,21ea4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
   21e94:	00001a06 	br	21f00 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
   21e98:	11000017 	ldw	r4,0(r2)
   21e9c:	2140072e 	bgeu	r4,r5,21ebc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
   21ea0:	1007883a 	mov	r3,r2
   21ea4:	18800117 	ldw	r2,4(r3)
   21ea8:	103ffb1e 	bne	r2,zero,21e98 <_gp+0xfffe4e08>
   21eac:	0005883a 	mov	r2,zero
   21eb0:	f800283a 	ret
   21eb4:	01400204 	movi	r5,8
   21eb8:	003ff006 	br	21e7c <_gp+0xfffe4dec>
   21ebc:	18c00104 	addi	r3,r3,4
   21ec0:	2149c83a 	sub	r4,r4,r5
   21ec4:	018001c4 	movi	r6,7
   21ec8:	3100092e 	bgeu	r6,r4,21ef0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
   21ecc:	11c00117 	ldw	r7,4(r2)
   21ed0:	114d883a 	add	r6,r2,r5
   21ed4:	31000015 	stw	r4,0(r6)
   21ed8:	31c00115 	stw	r7,4(r6)
   21edc:	18800017 	ldw	r2,0(r3)
   21ee0:	11400015 	stw	r5,0(r2)
   21ee4:	19800015 	stw	r6,0(r3)
   21ee8:	10800104 	addi	r2,r2,4
   21eec:	f800283a 	ret
   21ef0:	11000117 	ldw	r4,4(r2)
   21ef4:	10800104 	addi	r2,r2,4
   21ef8:	19000015 	stw	r4,0(r3)
   21efc:	f800283a 	ret
   21f00:	1805883a 	mov	r2,r3
   21f04:	30c00104 	addi	r3,r6,4
   21f08:	003fed06 	br	21ec0 <_gp+0xfffe4e30>

00021f0c <__cxa_allocate_exception>:
   21f0c:	defffd04 	addi	sp,sp,-12
   21f10:	dc400115 	stw	r17,4(sp)
   21f14:	24401104 	addi	r17,r4,68
   21f18:	8809883a 	mov	r4,r17
   21f1c:	dc000015 	stw	r16,0(sp)
   21f20:	dfc00215 	stw	ra,8(sp)
   21f24:	0022f6c0 	call	22f6c <malloc>
   21f28:	1021883a 	mov	r16,r2
   21f2c:	10000a26 	beq	r2,zero,21f58 <__cxa_allocate_exception+0x4c>
   21f30:	01801104 	movi	r6,68
   21f34:	000b883a 	mov	r5,zero
   21f38:	8009883a 	mov	r4,r16
   21f3c:	00237a00 	call	237a0 <memset>
   21f40:	80801104 	addi	r2,r16,68
   21f44:	dfc00217 	ldw	ra,8(sp)
   21f48:	dc400117 	ldw	r17,4(sp)
   21f4c:	dc000017 	ldw	r16,0(sp)
   21f50:	dec00304 	addi	sp,sp,12
   21f54:	f800283a 	ret
   21f58:	8809883a 	mov	r4,r17
   21f5c:	0021e640 	call	21e64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   21f60:	1021883a 	mov	r16,r2
   21f64:	103ff21e 	bne	r2,zero,21f30 <_gp+0xfffe4ea0>
   21f68:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00021f6c <__cxa_free_exception>:
   21f6c:	00c000f4 	movhi	r3,3
   21f70:	18db4d04 	addi	r3,r3,27956
   21f74:	18800217 	ldw	r2,8(r3)
   21f78:	213fef04 	addi	r4,r4,-68
   21f7c:	1100042e 	bgeu	r2,r4,21f90 <__cxa_free_exception+0x24>
   21f80:	18c00317 	ldw	r3,12(r3)
   21f84:	10c5883a 	add	r2,r2,r3
   21f88:	2080012e 	bgeu	r4,r2,21f90 <__cxa_free_exception+0x24>
   21f8c:	0021dac1 	jmpi	21dac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   21f90:	0022f801 	jmpi	22f80 <free>

00021f94 <__cxa_allocate_dependent_exception>:
   21f94:	defffe04 	addi	sp,sp,-8
   21f98:	01001004 	movi	r4,64
   21f9c:	dc000015 	stw	r16,0(sp)
   21fa0:	dfc00115 	stw	ra,4(sp)
   21fa4:	0022f6c0 	call	22f6c <malloc>
   21fa8:	1021883a 	mov	r16,r2
   21fac:	10000926 	beq	r2,zero,21fd4 <__cxa_allocate_dependent_exception+0x40>
   21fb0:	01801004 	movi	r6,64
   21fb4:	000b883a 	mov	r5,zero
   21fb8:	8009883a 	mov	r4,r16
   21fbc:	00237a00 	call	237a0 <memset>
   21fc0:	8005883a 	mov	r2,r16
   21fc4:	dfc00117 	ldw	ra,4(sp)
   21fc8:	dc000017 	ldw	r16,0(sp)
   21fcc:	dec00204 	addi	sp,sp,8
   21fd0:	f800283a 	ret
   21fd4:	01001004 	movi	r4,64
   21fd8:	0021e640 	call	21e64 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
   21fdc:	1021883a 	mov	r16,r2
   21fe0:	103ff31e 	bne	r2,zero,21fb0 <_gp+0xfffe4f20>
   21fe4:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00021fe8 <__cxa_free_dependent_exception>:
   21fe8:	014000f4 	movhi	r5,3
   21fec:	295b4d04 	addi	r5,r5,27956
   21ff0:	28c00217 	ldw	r3,8(r5)
   21ff4:	2005883a 	mov	r2,r4
   21ff8:	1900042e 	bgeu	r3,r4,2200c <__cxa_free_dependent_exception+0x24>
   21ffc:	29400317 	ldw	r5,12(r5)
   22000:	1947883a 	add	r3,r3,r5
   22004:	20c0012e 	bgeu	r4,r3,2200c <__cxa_free_dependent_exception+0x24>
   22008:	0021dac1 	jmpi	21dac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
   2200c:	1009883a 	mov	r4,r2
   22010:	0022f801 	jmpi	22f80 <free>

00022014 <_GLOBAL__sub_I___cxa_allocate_exception>:
   22014:	defffd04 	addi	sp,sp,-12
   22018:	dc400115 	stw	r17,4(sp)
   2201c:	dc000015 	stw	r16,0(sp)
   22020:	04424004 	movi	r17,2304
   22024:	040000f4 	movhi	r16,3
   22028:	841b4d04 	addi	r16,r16,27956
   2202c:	8809883a 	mov	r4,r17
   22030:	dfc00215 	stw	ra,8(sp)
   22034:	84400315 	stw	r17,12(r16)
   22038:	0022f6c0 	call	22f6c <malloc>
   2203c:	80800215 	stw	r2,8(r16)
   22040:	10000826 	beq	r2,zero,22064 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
   22044:	80800115 	stw	r2,4(r16)
   22048:	14400015 	stw	r17,0(r2)
   2204c:	10000115 	stw	zero,4(r2)
   22050:	dfc00217 	ldw	ra,8(sp)
   22054:	dc400117 	ldw	r17,4(sp)
   22058:	dc000017 	ldw	r16,0(sp)
   2205c:	dec00304 	addi	sp,sp,12
   22060:	f800283a 	ret
   22064:	80000315 	stw	zero,12(r16)
   22068:	80000115 	stw	zero,4(r16)
   2206c:	003ff806 	br	22050 <_gp+0xfffe4fc0>

00022070 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   22070:	20800017 	ldw	r2,0(r4)
   22074:	defffa04 	addi	sp,sp,-24
   22078:	dc000415 	stw	r16,16(sp)
   2207c:	10800617 	ldw	r2,24(r2)
   22080:	3021883a 	mov	r16,r6
   22084:	31800017 	ldw	r6,0(r6)
   22088:	00c00404 	movi	r3,16
   2208c:	d8c00215 	stw	r3,8(sp)
   22090:	dfc00515 	stw	ra,20(sp)
   22094:	d8000015 	stw	zero,0(sp)
   22098:	d8000115 	stw	zero,4(sp)
   2209c:	d8000315 	stw	zero,12(sp)
   220a0:	d80f883a 	mov	r7,sp
   220a4:	103ee83a 	callr	r2
   220a8:	d8800117 	ldw	r2,4(sp)
   220ac:	00c00184 	movi	r3,6
   220b0:	1080018c 	andi	r2,r2,6
   220b4:	10c00526 	beq	r2,r3,220cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
   220b8:	0005883a 	mov	r2,zero
   220bc:	dfc00517 	ldw	ra,20(sp)
   220c0:	dc000417 	ldw	r16,16(sp)
   220c4:	dec00604 	addi	sp,sp,24
   220c8:	f800283a 	ret
   220cc:	d8c00017 	ldw	r3,0(sp)
   220d0:	00800044 	movi	r2,1
   220d4:	80c00015 	stw	r3,0(r16)
   220d8:	dfc00517 	ldw	ra,20(sp)
   220dc:	dc000417 	ldw	r16,16(sp)
   220e0:	dec00604 	addi	sp,sp,24
   220e4:	f800283a 	ret

000220e8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   220e8:	d8800017 	ldw	r2,0(sp)
   220ec:	11800226 	beq	r2,r6,220f8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
   220f0:	00800044 	movi	r2,1
   220f4:	f800283a 	ret
   220f8:	00800184 	movi	r2,6
   220fc:	f800283a 	ret

00022100 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   22100:	008000f4 	movhi	r2,3
   22104:	108c0e04 	addi	r2,r2,12344
   22108:	20800015 	stw	r2,0(r4)
   2210c:	00227e41 	jmpi	227e4 <_ZNSt9type_infoD1Ev>

00022110 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   22110:	defffe04 	addi	sp,sp,-8
   22114:	008000f4 	movhi	r2,3
   22118:	dc000015 	stw	r16,0(sp)
   2211c:	dfc00115 	stw	ra,4(sp)
   22120:	108c0e04 	addi	r2,r2,12344
   22124:	20800015 	stw	r2,0(r4)
   22128:	2021883a 	mov	r16,r4
   2212c:	00227e40 	call	227e4 <_ZNSt9type_infoD1Ev>
   22130:	8009883a 	mov	r4,r16
   22134:	dfc00117 	ldw	ra,4(sp)
   22138:	dc000017 	ldw	r16,0(sp)
   2213c:	dec00204 	addi	sp,sp,8
   22140:	0020ad41 	jmpi	20ad4 <_ZdlPv>

00022144 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   22144:	21000117 	ldw	r4,4(r4)
   22148:	29400117 	ldw	r5,4(r5)
   2214c:	defffd04 	addi	sp,sp,-12
   22150:	dc400115 	stw	r17,4(sp)
   22154:	dc000015 	stw	r16,0(sp)
   22158:	dfc00215 	stw	ra,8(sp)
   2215c:	3023883a 	mov	r17,r6
   22160:	3821883a 	mov	r16,r7
   22164:	21400526 	beq	r4,r5,2217c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
   22168:	20c00007 	ldb	r3,0(r4)
   2216c:	00800a84 	movi	r2,42
   22170:	18800d26 	beq	r3,r2,221a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   22174:	0023d600 	call	23d60 <strcmp>
   22178:	10000b1e 	bne	r2,zero,221a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
   2217c:	00800204 	movi	r2,8
   22180:	80800315 	stw	r2,12(r16)
   22184:	00800184 	movi	r2,6
   22188:	80800115 	stw	r2,4(r16)
   2218c:	84400015 	stw	r17,0(r16)
   22190:	00800044 	movi	r2,1
   22194:	dfc00217 	ldw	ra,8(sp)
   22198:	dc400117 	ldw	r17,4(sp)
   2219c:	dc000017 	ldw	r16,0(sp)
   221a0:	dec00304 	addi	sp,sp,12
   221a4:	f800283a 	ret
   221a8:	0005883a 	mov	r2,zero
   221ac:	003ff906 	br	22194 <_gp+0xfffe5104>

000221b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   221b0:	defffa04 	addi	sp,sp,-24
   221b4:	dc800415 	stw	r18,16(sp)
   221b8:	d8800817 	ldw	r2,32(sp)
   221bc:	dc800617 	ldw	r18,24(sp)
   221c0:	dc400315 	stw	r17,12(sp)
   221c4:	dc000215 	stw	r16,8(sp)
   221c8:	dfc00515 	stw	ra,20(sp)
   221cc:	dc400917 	ldw	r17,36(sp)
   221d0:	24000117 	ldw	r16,4(r4)
   221d4:	90801526 	beq	r18,r2,2222c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
   221d8:	39400117 	ldw	r5,4(r7)
   221dc:	2c000826 	beq	r5,r16,22200 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
   221e0:	80c00007 	ldb	r3,0(r16)
   221e4:	00800a84 	movi	r2,42
   221e8:	18800926 	beq	r3,r2,22210 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   221ec:	8009883a 	mov	r4,r16
   221f0:	d9800115 	stw	r6,4(sp)
   221f4:	0023d600 	call	23d60 <strcmp>
   221f8:	d9800117 	ldw	r6,4(sp)
   221fc:	1000041e 	bne	r2,zero,22210 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
   22200:	00800044 	movi	r2,1
   22204:	8c800015 	stw	r18,0(r17)
   22208:	89800115 	stw	r6,4(r17)
   2220c:	88800315 	stw	r2,12(r17)
   22210:	0005883a 	mov	r2,zero
   22214:	dfc00517 	ldw	ra,20(sp)
   22218:	dc800417 	ldw	r18,16(sp)
   2221c:	dc400317 	ldw	r17,12(sp)
   22220:	dc000217 	ldw	r16,8(sp)
   22224:	dec00604 	addi	sp,sp,24
   22228:	f800283a 	ret
   2222c:	d8800717 	ldw	r2,28(sp)
   22230:	11400117 	ldw	r5,4(r2)
   22234:	81400a26 	beq	r16,r5,22260 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
   22238:	80c00007 	ldb	r3,0(r16)
   2223c:	00800a84 	movi	r2,42
   22240:	18800c26 	beq	r3,r2,22274 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
   22244:	8009883a 	mov	r4,r16
   22248:	d9800115 	stw	r6,4(sp)
   2224c:	d9c00015 	stw	r7,0(sp)
   22250:	0023d600 	call	23d60 <strcmp>
   22254:	d9800117 	ldw	r6,4(sp)
   22258:	d9c00017 	ldw	r7,0(sp)
   2225c:	1000021e 	bne	r2,zero,22268 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
   22260:	89800215 	stw	r6,8(r17)
   22264:	003fea06 	br	22210 <_gp+0xfffe5180>
   22268:	39400117 	ldw	r5,4(r7)
   2226c:	817fdf1e 	bne	r16,r5,221ec <_gp+0xfffe515c>
   22270:	003fe306 	br	22200 <_gp+0xfffe5170>
   22274:	38800117 	ldw	r2,4(r7)
   22278:	80bfe51e 	bne	r16,r2,22210 <_gp+0xfffe5180>
   2227c:	003fe006 	br	22200 <_gp+0xfffe5170>

00022280 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   22280:	20800117 	ldw	r2,4(r4)
   22284:	28c00117 	ldw	r3,4(r5)
   22288:	10c02926 	beq	r2,r3,22330 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
   2228c:	defffb04 	addi	sp,sp,-20
   22290:	dcc00315 	stw	r19,12(sp)
   22294:	dc800215 	stw	r18,8(sp)
   22298:	dc400115 	stw	r17,4(sp)
   2229c:	dc000015 	stw	r16,0(sp)
   222a0:	dfc00415 	stw	ra,16(sp)
   222a4:	2821883a 	mov	r16,r5
   222a8:	11400007 	ldb	r5,0(r2)
   222ac:	2025883a 	mov	r18,r4
   222b0:	01000a84 	movi	r4,42
   222b4:	3823883a 	mov	r17,r7
   222b8:	3027883a 	mov	r19,r6
   222bc:	29000626 	beq	r5,r4,222d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   222c0:	180b883a 	mov	r5,r3
   222c4:	1009883a 	mov	r4,r2
   222c8:	0023d600 	call	23d60 <strcmp>
   222cc:	1000021e 	bne	r2,zero,222d8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
   222d0:	00800044 	movi	r2,1
   222d4:	00000306 	br	222e4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
   222d8:	008000c4 	movi	r2,3
   222dc:	1440082e 	bgeu	r2,r17,22300 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
   222e0:	0005883a 	mov	r2,zero
   222e4:	dfc00417 	ldw	ra,16(sp)
   222e8:	dcc00317 	ldw	r19,12(sp)
   222ec:	dc800217 	ldw	r18,8(sp)
   222f0:	dc400117 	ldw	r17,4(sp)
   222f4:	dc000017 	ldw	r16,0(sp)
   222f8:	dec00504 	addi	sp,sp,20
   222fc:	f800283a 	ret
   22300:	80800017 	ldw	r2,0(r16)
   22304:	980d883a 	mov	r6,r19
   22308:	900b883a 	mov	r5,r18
   2230c:	10800517 	ldw	r2,20(r2)
   22310:	8009883a 	mov	r4,r16
   22314:	dfc00417 	ldw	ra,16(sp)
   22318:	dcc00317 	ldw	r19,12(sp)
   2231c:	dc800217 	ldw	r18,8(sp)
   22320:	dc400117 	ldw	r17,4(sp)
   22324:	dc000017 	ldw	r16,0(sp)
   22328:	dec00504 	addi	sp,sp,20
   2232c:	1000683a 	jmp	r2
   22330:	00800044 	movi	r2,1
   22334:	f800283a 	ret

00022338 <_ZNSt9exceptionD1Ev>:
   22338:	f800283a 	ret

0002233c <_ZNSt13bad_exceptionD1Ev>:
   2233c:	f800283a 	ret

00022340 <_ZNKSt9exception4whatEv>:
   22340:	008000f4 	movhi	r2,3
   22344:	108c1704 	addi	r2,r2,12380
   22348:	f800283a 	ret

0002234c <_ZNKSt13bad_exception4whatEv>:
   2234c:	008000f4 	movhi	r2,3
   22350:	108c1b04 	addi	r2,r2,12396
   22354:	f800283a 	ret

00022358 <_ZNSt9exceptionD0Ev>:
   22358:	0020ad41 	jmpi	20ad4 <_ZdlPv>

0002235c <_ZNSt13bad_exceptionD0Ev>:
   2235c:	0020ad41 	jmpi	20ad4 <_ZdlPv>

00022360 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
   22360:	f800283a 	ret

00022364 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
   22364:	0020ad41 	jmpi	20ad4 <_ZdlPv>

00022368 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
   22368:	f800283a 	ret

0002236c <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
   2236c:	0020ad41 	jmpi	20ad4 <_ZdlPv>

00022370 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
   22370:	defffe04 	addi	sp,sp,-8
   22374:	dfc00115 	stw	ra,4(sp)
   22378:	dc000015 	stw	r16,0(sp)
   2237c:	00800044 	movi	r2,1
   22380:	11000a36 	bltu	r2,r4,223ac <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
   22384:	28bff617 	ldw	r2,-40(r5)
   22388:	2c000504 	addi	r16,r5,20
   2238c:	10000226 	beq	r2,zero,22398 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
   22390:	8009883a 	mov	r4,r16
   22394:	103ee83a 	callr	r2
   22398:	8009883a 	mov	r4,r16
   2239c:	dfc00117 	ldw	ra,4(sp)
   223a0:	dc000017 	ldw	r16,0(sp)
   223a4:	dec00204 	addi	sp,sp,8
   223a8:	0021f6c1 	jmpi	21f6c <__cxa_free_exception>
   223ac:	293ff817 	ldw	r4,-32(r5)
   223b0:	0021c4c0 	call	21c4c <_ZN10__cxxabiv111__terminateEPFvvE>

000223b4 <__cxa_throw>:
   223b4:	defffb04 	addi	sp,sp,-20
   223b8:	dfc00415 	stw	ra,16(sp)
   223bc:	dcc00315 	stw	r19,12(sp)
   223c0:	dc800215 	stw	r18,8(sp)
   223c4:	2827883a 	mov	r19,r5
   223c8:	3025883a 	mov	r18,r6
   223cc:	dc400115 	stw	r17,4(sp)
   223d0:	dc000015 	stw	r16,0(sp)
   223d4:	2021883a 	mov	r16,r4
   223d8:	0021da00 	call	21da0 <__cxa_get_globals>
   223dc:	10c00117 	ldw	r3,4(r2)
   223e0:	847ffb04 	addi	r17,r16,-20
   223e4:	18c00044 	addi	r3,r3,1
   223e8:	10c00115 	stw	r3,4(r2)
   223ec:	00800044 	movi	r2,1
   223f0:	80bfef15 	stw	r2,-68(r16)
   223f4:	84fff015 	stw	r19,-64(r16)
   223f8:	84bff115 	stw	r18,-60(r16)
   223fc:	0021d840 	call	21d84 <_ZSt14get_unexpectedv>
   22400:	80bff215 	stw	r2,-56(r16)
   22404:	0021d600 	call	21d60 <_ZSt13get_terminatev>
   22408:	80bff315 	stw	r2,-52(r16)
   2240c:	0090caf4 	movhi	r2,17195
   22410:	108ac004 	addi	r2,r2,11008
   22414:	80bffb15 	stw	r2,-20(r16)
   22418:	0091d3b4 	movhi	r2,18254
   2241c:	109550c4 	addi	r2,r2,21827
   22420:	80bffc15 	stw	r2,-16(r16)
   22424:	008000b4 	movhi	r2,2
   22428:	1088dc04 	addi	r2,r2,9072
   2242c:	8809883a 	mov	r4,r17
   22430:	80bffd15 	stw	r2,-12(r16)
   22434:	0022d240 	call	22d24 <_Unwind_SjLj_RaiseException>
   22438:	8809883a 	mov	r4,r17
   2243c:	0021ac40 	call	21ac4 <__cxa_begin_catch>
   22440:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00022444 <__cxa_rethrow>:
   22444:	defffe04 	addi	sp,sp,-8
   22448:	dfc00115 	stw	ra,4(sp)
   2244c:	dc000015 	stw	r16,0(sp)
   22450:	0021da00 	call	21da0 <__cxa_get_globals>
   22454:	10c00117 	ldw	r3,4(r2)
   22458:	11000017 	ldw	r4,0(r2)
   2245c:	18c00044 	addi	r3,r3,1
   22460:	10c00115 	stw	r3,4(r2)
   22464:	20001126 	beq	r4,zero,224ac <__cxa_rethrow+0x68>
   22468:	21400b17 	ldw	r5,44(r4)
   2246c:	01ef3574 	movhi	r7,48341
   22470:	39f54004 	addi	r7,r7,-11008
   22474:	29cf883a 	add	r7,r5,r7
   22478:	20c00c17 	ldw	r3,48(r4)
   2247c:	394d803a 	cmpltu	r6,r7,r5
   22480:	016e2cb4 	movhi	r5,47282
   22484:	296aaf04 	addi	r5,r5,-21828
   22488:	1947883a 	add	r3,r3,r5
   2248c:	30c7883a 	add	r3,r6,r3
   22490:	18000726 	beq	r3,zero,224b0 <__cxa_rethrow+0x6c>
   22494:	10000015 	stw	zero,0(r2)
   22498:	24000b04 	addi	r16,r4,44
   2249c:	8009883a 	mov	r4,r16
   224a0:	0022e7c0 	call	22e7c <_Unwind_SjLj_Resume_or_Rethrow>
   224a4:	8009883a 	mov	r4,r16
   224a8:	0021ac40 	call	21ac4 <__cxa_begin_catch>
   224ac:	0021d0c0 	call	21d0c <_ZSt9terminatev>
   224b0:	00c00044 	movi	r3,1
   224b4:	19fff736 	bltu	r3,r7,22494 <_gp+0xfffe5404>
   224b8:	20800517 	ldw	r2,20(r4)
   224bc:	0085c83a 	sub	r2,zero,r2
   224c0:	20800515 	stw	r2,20(r4)
   224c4:	003ff406 	br	22498 <_gp+0xfffe5408>

000224c8 <__cxa_call_terminate>:
   224c8:	defffe04 	addi	sp,sp,-8
   224cc:	dfc00115 	stw	ra,4(sp)
   224d0:	dc000015 	stw	r16,0(sp)
   224d4:	20000d26 	beq	r4,zero,2250c <__cxa_call_terminate+0x44>
   224d8:	2021883a 	mov	r16,r4
   224dc:	0021ac40 	call	21ac4 <__cxa_begin_catch>
   224e0:	80c00017 	ldw	r3,0(r16)
   224e4:	016f3574 	movhi	r5,48341
   224e8:	29754004 	addi	r5,r5,-11008
   224ec:	194b883a 	add	r5,r3,r5
   224f0:	80800117 	ldw	r2,4(r16)
   224f4:	28c9803a 	cmpltu	r4,r5,r3
   224f8:	00ee2cb4 	movhi	r3,47282
   224fc:	18eaaf04 	addi	r3,r3,-21828
   22500:	10c5883a 	add	r2,r2,r3
   22504:	2085883a 	add	r2,r4,r2
   22508:	10000126 	beq	r2,zero,22510 <__cxa_call_terminate+0x48>
   2250c:	0021d0c0 	call	21d0c <_ZSt9terminatev>
   22510:	00800044 	movi	r2,1
   22514:	117ffd36 	bltu	r2,r5,2250c <_gp+0xfffe547c>
   22518:	813ff817 	ldw	r4,-32(r16)
   2251c:	0021c4c0 	call	21c4c <_ZN10__cxxabiv111__terminateEPFvvE>

00022520 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   22520:	008000f4 	movhi	r2,3
   22524:	108c6004 	addi	r2,r2,12672
   22528:	20800015 	stw	r2,0(r4)
   2252c:	00221001 	jmpi	22100 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00022530 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   22530:	defffe04 	addi	sp,sp,-8
   22534:	008000f4 	movhi	r2,3
   22538:	dc000015 	stw	r16,0(sp)
   2253c:	dfc00115 	stw	ra,4(sp)
   22540:	108c6004 	addi	r2,r2,12672
   22544:	20800015 	stw	r2,0(r4)
   22548:	2021883a 	mov	r16,r4
   2254c:	00221000 	call	22100 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   22550:	8009883a 	mov	r4,r16
   22554:	dfc00117 	ldw	ra,4(sp)
   22558:	dc000017 	ldw	r16,0(sp)
   2255c:	dec00204 	addi	sp,sp,8
   22560:	0020ad41 	jmpi	20ad4 <_ZdlPv>

00022564 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   22564:	defff504 	addi	sp,sp,-44
   22568:	dc000115 	stw	r16,4(sp)
   2256c:	38800117 	ldw	r2,4(r7)
   22570:	24000117 	ldw	r16,4(r4)
   22574:	df000915 	stw	fp,36(sp)
   22578:	ddc00815 	stw	r23,32(sp)
   2257c:	dd800715 	stw	r22,28(sp)
   22580:	dcc00415 	stw	r19,16(sp)
   22584:	dc800315 	stw	r18,12(sp)
   22588:	dc400215 	stw	r17,8(sp)
   2258c:	dfc00a15 	stw	ra,40(sp)
   22590:	dd400615 	stw	r21,24(sp)
   22594:	dd000515 	stw	r20,20(sp)
   22598:	2823883a 	mov	r17,r5
   2259c:	3039883a 	mov	fp,r6
   225a0:	dcc00b17 	ldw	r19,44(sp)
   225a4:	ddc00c17 	ldw	r23,48(sp)
   225a8:	dd800d17 	ldw	r22,52(sp)
   225ac:	dc800e17 	ldw	r18,56(sp)
   225b0:	80800b26 	beq	r16,r2,225e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
   225b4:	80c00007 	ldb	r3,0(r16)
   225b8:	2029883a 	mov	r20,r4
   225bc:	01000a84 	movi	r4,42
   225c0:	382b883a 	mov	r21,r7
   225c4:	19001a26 	beq	r3,r4,22630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   225c8:	100b883a 	mov	r5,r2
   225cc:	8009883a 	mov	r4,r16
   225d0:	d8c00015 	stw	r3,0(sp)
   225d4:	0023d600 	call	23d60 <strcmp>
   225d8:	d8c00017 	ldw	r3,0(sp)
   225dc:	1000141e 	bne	r2,zero,22630 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
   225e0:	94c00015 	stw	r19,0(r18)
   225e4:	97000115 	stw	fp,4(r18)
   225e8:	88002816 	blt	r17,zero,2268c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
   225ec:	9c63883a 	add	r17,r19,r17
   225f0:	b4403226 	beq	r22,r17,226bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
   225f4:	00800044 	movi	r2,1
   225f8:	90800315 	stw	r2,12(r18)
   225fc:	0005883a 	mov	r2,zero
   22600:	dfc00a17 	ldw	ra,40(sp)
   22604:	df000917 	ldw	fp,36(sp)
   22608:	ddc00817 	ldw	r23,32(sp)
   2260c:	dd800717 	ldw	r22,28(sp)
   22610:	dd400617 	ldw	r21,24(sp)
   22614:	dd000517 	ldw	r20,20(sp)
   22618:	dcc00417 	ldw	r19,16(sp)
   2261c:	dc800317 	ldw	r18,12(sp)
   22620:	dc400217 	ldw	r17,8(sp)
   22624:	dc000117 	ldw	r16,4(sp)
   22628:	dec00b04 	addi	sp,sp,44
   2262c:	f800283a 	ret
   22630:	9d801926 	beq	r19,r22,22698 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
   22634:	a1000217 	ldw	r4,8(r20)
   22638:	a80f883a 	mov	r7,r21
   2263c:	e00d883a 	mov	r6,fp
   22640:	20800017 	ldw	r2,0(r4)
   22644:	dc800e15 	stw	r18,56(sp)
   22648:	dd800d15 	stw	r22,52(sp)
   2264c:	ddc00c15 	stw	r23,48(sp)
   22650:	dcc00b15 	stw	r19,44(sp)
   22654:	10800717 	ldw	r2,28(r2)
   22658:	880b883a 	mov	r5,r17
   2265c:	dfc00a17 	ldw	ra,40(sp)
   22660:	df000917 	ldw	fp,36(sp)
   22664:	ddc00817 	ldw	r23,32(sp)
   22668:	dd800717 	ldw	r22,28(sp)
   2266c:	dd400617 	ldw	r21,24(sp)
   22670:	dd000517 	ldw	r20,20(sp)
   22674:	dcc00417 	ldw	r19,16(sp)
   22678:	dc800317 	ldw	r18,12(sp)
   2267c:	dc400217 	ldw	r17,8(sp)
   22680:	dc000117 	ldw	r16,4(sp)
   22684:	dec00b04 	addi	sp,sp,44
   22688:	1000683a 	jmp	r2
   2268c:	00bfff84 	movi	r2,-2
   22690:	88bfda1e 	bne	r17,r2,225fc <_gp+0xfffe556c>
   22694:	003fd706 	br	225f4 <_gp+0xfffe5564>
   22698:	b9400117 	ldw	r5,4(r23)
   2269c:	81400526 	beq	r16,r5,226b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
   226a0:	00800a84 	movi	r2,42
   226a4:	18bfe326 	beq	r3,r2,22634 <_gp+0xfffe55a4>
   226a8:	8009883a 	mov	r4,r16
   226ac:	0023d600 	call	23d60 <strcmp>
   226b0:	103fe01e 	bne	r2,zero,22634 <_gp+0xfffe55a4>
   226b4:	97000215 	stw	fp,8(r18)
   226b8:	003fd006 	br	225fc <_gp+0xfffe556c>
   226bc:	00800184 	movi	r2,6
   226c0:	003fcd06 	br	225f8 <_gp+0xfffe5568>

000226c4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   226c4:	defffa04 	addi	sp,sp,-24
   226c8:	dc000215 	stw	r16,8(sp)
   226cc:	dc000617 	ldw	r16,24(sp)
   226d0:	dc800415 	stw	r18,16(sp)
   226d4:	dc400315 	stw	r17,12(sp)
   226d8:	dfc00515 	stw	ra,20(sp)
   226dc:	2023883a 	mov	r17,r4
   226e0:	2825883a 	mov	r18,r5
   226e4:	81800b26 	beq	r16,r6,22714 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
   226e8:	89000217 	ldw	r4,8(r17)
   226ec:	900b883a 	mov	r5,r18
   226f0:	20800017 	ldw	r2,0(r4)
   226f4:	dc000615 	stw	r16,24(sp)
   226f8:	10800817 	ldw	r2,32(r2)
   226fc:	dfc00517 	ldw	ra,20(sp)
   22700:	dc800417 	ldw	r18,16(sp)
   22704:	dc400317 	ldw	r17,12(sp)
   22708:	dc000217 	ldw	r16,8(sp)
   2270c:	dec00604 	addi	sp,sp,24
   22710:	1000683a 	jmp	r2
   22714:	21000117 	ldw	r4,4(r4)
   22718:	39400117 	ldw	r5,4(r7)
   2271c:	21400926 	beq	r4,r5,22744 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
   22720:	20c00007 	ldb	r3,0(r4)
   22724:	00800a84 	movi	r2,42
   22728:	18bfef26 	beq	r3,r2,226e8 <_gp+0xfffe5658>
   2272c:	d9800015 	stw	r6,0(sp)
   22730:	d9c00115 	stw	r7,4(sp)
   22734:	0023d600 	call	23d60 <strcmp>
   22738:	d9800017 	ldw	r6,0(sp)
   2273c:	d9c00117 	ldw	r7,4(sp)
   22740:	103fe91e 	bne	r2,zero,226e8 <_gp+0xfffe5658>
   22744:	00800184 	movi	r2,6
   22748:	dfc00517 	ldw	ra,20(sp)
   2274c:	dc800417 	ldw	r18,16(sp)
   22750:	dc400317 	ldw	r17,12(sp)
   22754:	dc000217 	ldw	r16,8(sp)
   22758:	dec00604 	addi	sp,sp,24
   2275c:	f800283a 	ret

00022760 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   22760:	defffb04 	addi	sp,sp,-20
   22764:	dcc00315 	stw	r19,12(sp)
   22768:	dc800215 	stw	r18,8(sp)
   2276c:	dc400115 	stw	r17,4(sp)
   22770:	dc000015 	stw	r16,0(sp)
   22774:	dfc00415 	stw	ra,16(sp)
   22778:	2027883a 	mov	r19,r4
   2277c:	2821883a 	mov	r16,r5
   22780:	3023883a 	mov	r17,r6
   22784:	3825883a 	mov	r18,r7
   22788:	00221440 	call	22144 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   2278c:	10c03fcc 	andi	r3,r2,255
   22790:	18000726 	beq	r3,zero,227b0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
   22794:	dfc00417 	ldw	ra,16(sp)
   22798:	dcc00317 	ldw	r19,12(sp)
   2279c:	dc800217 	ldw	r18,8(sp)
   227a0:	dc400117 	ldw	r17,4(sp)
   227a4:	dc000017 	ldw	r16,0(sp)
   227a8:	dec00504 	addi	sp,sp,20
   227ac:	f800283a 	ret
   227b0:	99000217 	ldw	r4,8(r19)
   227b4:	900f883a 	mov	r7,r18
   227b8:	880d883a 	mov	r6,r17
   227bc:	20800017 	ldw	r2,0(r4)
   227c0:	800b883a 	mov	r5,r16
   227c4:	10800617 	ldw	r2,24(r2)
   227c8:	dfc00417 	ldw	ra,16(sp)
   227cc:	dcc00317 	ldw	r19,12(sp)
   227d0:	dc800217 	ldw	r18,8(sp)
   227d4:	dc400117 	ldw	r17,4(sp)
   227d8:	dc000017 	ldw	r16,0(sp)
   227dc:	dec00504 	addi	sp,sp,20
   227e0:	1000683a 	jmp	r2

000227e4 <_ZNSt9type_infoD1Ev>:
   227e4:	f800283a 	ret

000227e8 <_ZNKSt9type_info14__is_pointer_pEv>:
   227e8:	0005883a 	mov	r2,zero
   227ec:	f800283a 	ret

000227f0 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
   227f0:	0005883a 	mov	r2,zero
   227f4:	f800283a 	ret

000227f8 <_ZNSt9type_infoD0Ev>:
   227f8:	0020ad41 	jmpi	20ad4 <_ZdlPv>

000227fc <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
   227fc:	21000117 	ldw	r4,4(r4)
   22800:	29400117 	ldw	r5,4(r5)
   22804:	21400c26 	beq	r4,r5,22838 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
   22808:	20c00007 	ldb	r3,0(r4)
   2280c:	00800a84 	movi	r2,42
   22810:	18800726 	beq	r3,r2,22830 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
   22814:	deffff04 	addi	sp,sp,-4
   22818:	dfc00015 	stw	ra,0(sp)
   2281c:	0023d600 	call	23d60 <strcmp>
   22820:	1005003a 	cmpeq	r2,r2,zero
   22824:	dfc00017 	ldw	ra,0(sp)
   22828:	dec00104 	addi	sp,sp,4
   2282c:	f800283a 	ret
   22830:	0005883a 	mov	r2,zero
   22834:	f800283a 	ret
   22838:	00800044 	movi	r2,1
   2283c:	f800283a 	ret

00022840 <__cxa_pure_virtual>:
   22840:	014000f4 	movhi	r5,3
   22844:	deffff04 	addi	sp,sp,-4
   22848:	294c7504 	addi	r5,r5,12756
   2284c:	018006c4 	movi	r6,27
   22850:	01000084 	movi	r4,2
   22854:	dfc00015 	stw	ra,0(sp)
   22858:	00309940 	call	30994 <write>
   2285c:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00022860 <__cxa_deleted_virtual>:
   22860:	014000f4 	movhi	r5,3
   22864:	deffff04 	addi	sp,sp,-4
   22868:	294c7c04 	addi	r5,r5,12784
   2286c:	01800784 	movi	r6,30
   22870:	01000084 	movi	r4,2
   22874:	dfc00015 	stw	ra,0(sp)
   22878:	00309940 	call	30994 <write>
   2287c:	0021d0c0 	call	21d0c <_ZSt9terminatev>

00022880 <__divsi3>:
   22880:	20001b16 	blt	r4,zero,228f0 <__divsi3+0x70>
   22884:	000f883a 	mov	r7,zero
   22888:	28001616 	blt	r5,zero,228e4 <__divsi3+0x64>
   2288c:	200d883a 	mov	r6,r4
   22890:	29001a2e 	bgeu	r5,r4,228fc <__divsi3+0x7c>
   22894:	00800804 	movi	r2,32
   22898:	00c00044 	movi	r3,1
   2289c:	00000106 	br	228a4 <__divsi3+0x24>
   228a0:	10000d26 	beq	r2,zero,228d8 <__divsi3+0x58>
   228a4:	294b883a 	add	r5,r5,r5
   228a8:	10bfffc4 	addi	r2,r2,-1
   228ac:	18c7883a 	add	r3,r3,r3
   228b0:	293ffb36 	bltu	r5,r4,228a0 <_gp+0xfffe5810>
   228b4:	0005883a 	mov	r2,zero
   228b8:	18000726 	beq	r3,zero,228d8 <__divsi3+0x58>
   228bc:	0005883a 	mov	r2,zero
   228c0:	31400236 	bltu	r6,r5,228cc <__divsi3+0x4c>
   228c4:	314dc83a 	sub	r6,r6,r5
   228c8:	10c4b03a 	or	r2,r2,r3
   228cc:	1806d07a 	srli	r3,r3,1
   228d0:	280ad07a 	srli	r5,r5,1
   228d4:	183ffa1e 	bne	r3,zero,228c0 <_gp+0xfffe5830>
   228d8:	38000126 	beq	r7,zero,228e0 <__divsi3+0x60>
   228dc:	0085c83a 	sub	r2,zero,r2
   228e0:	f800283a 	ret
   228e4:	014bc83a 	sub	r5,zero,r5
   228e8:	39c0005c 	xori	r7,r7,1
   228ec:	003fe706 	br	2288c <_gp+0xfffe57fc>
   228f0:	0109c83a 	sub	r4,zero,r4
   228f4:	01c00044 	movi	r7,1
   228f8:	003fe306 	br	22888 <_gp+0xfffe57f8>
   228fc:	00c00044 	movi	r3,1
   22900:	003fee06 	br	228bc <_gp+0xfffe582c>

00022904 <__modsi3>:
   22904:	20001716 	blt	r4,zero,22964 <__modsi3+0x60>
   22908:	000f883a 	mov	r7,zero
   2290c:	2005883a 	mov	r2,r4
   22910:	28001216 	blt	r5,zero,2295c <__modsi3+0x58>
   22914:	2900162e 	bgeu	r5,r4,22970 <__modsi3+0x6c>
   22918:	01800804 	movi	r6,32
   2291c:	00c00044 	movi	r3,1
   22920:	00000106 	br	22928 <__modsi3+0x24>
   22924:	30000a26 	beq	r6,zero,22950 <__modsi3+0x4c>
   22928:	294b883a 	add	r5,r5,r5
   2292c:	31bfffc4 	addi	r6,r6,-1
   22930:	18c7883a 	add	r3,r3,r3
   22934:	293ffb36 	bltu	r5,r4,22924 <_gp+0xfffe5894>
   22938:	18000526 	beq	r3,zero,22950 <__modsi3+0x4c>
   2293c:	1806d07a 	srli	r3,r3,1
   22940:	11400136 	bltu	r2,r5,22948 <__modsi3+0x44>
   22944:	1145c83a 	sub	r2,r2,r5
   22948:	280ad07a 	srli	r5,r5,1
   2294c:	183ffb1e 	bne	r3,zero,2293c <_gp+0xfffe58ac>
   22950:	38000126 	beq	r7,zero,22958 <__modsi3+0x54>
   22954:	0085c83a 	sub	r2,zero,r2
   22958:	f800283a 	ret
   2295c:	014bc83a 	sub	r5,zero,r5
   22960:	003fec06 	br	22914 <_gp+0xfffe5884>
   22964:	0109c83a 	sub	r4,zero,r4
   22968:	01c00044 	movi	r7,1
   2296c:	003fe706 	br	2290c <_gp+0xfffe587c>
   22970:	00c00044 	movi	r3,1
   22974:	003ff106 	br	2293c <_gp+0xfffe58ac>

00022978 <__udivsi3>:
   22978:	200d883a 	mov	r6,r4
   2297c:	2900152e 	bgeu	r5,r4,229d4 <__udivsi3+0x5c>
   22980:	28001416 	blt	r5,zero,229d4 <__udivsi3+0x5c>
   22984:	00800804 	movi	r2,32
   22988:	00c00044 	movi	r3,1
   2298c:	00000206 	br	22998 <__udivsi3+0x20>
   22990:	10000e26 	beq	r2,zero,229cc <__udivsi3+0x54>
   22994:	28000516 	blt	r5,zero,229ac <__udivsi3+0x34>
   22998:	294b883a 	add	r5,r5,r5
   2299c:	10bfffc4 	addi	r2,r2,-1
   229a0:	18c7883a 	add	r3,r3,r3
   229a4:	293ffa36 	bltu	r5,r4,22990 <_gp+0xfffe5900>
   229a8:	18000826 	beq	r3,zero,229cc <__udivsi3+0x54>
   229ac:	0005883a 	mov	r2,zero
   229b0:	31400236 	bltu	r6,r5,229bc <__udivsi3+0x44>
   229b4:	314dc83a 	sub	r6,r6,r5
   229b8:	10c4b03a 	or	r2,r2,r3
   229bc:	1806d07a 	srli	r3,r3,1
   229c0:	280ad07a 	srli	r5,r5,1
   229c4:	183ffa1e 	bne	r3,zero,229b0 <_gp+0xfffe5920>
   229c8:	f800283a 	ret
   229cc:	0005883a 	mov	r2,zero
   229d0:	f800283a 	ret
   229d4:	00c00044 	movi	r3,1
   229d8:	003ff406 	br	229ac <_gp+0xfffe591c>

000229dc <__umodsi3>:
   229dc:	2005883a 	mov	r2,r4
   229e0:	2900122e 	bgeu	r5,r4,22a2c <__umodsi3+0x50>
   229e4:	28001116 	blt	r5,zero,22a2c <__umodsi3+0x50>
   229e8:	01800804 	movi	r6,32
   229ec:	00c00044 	movi	r3,1
   229f0:	00000206 	br	229fc <__umodsi3+0x20>
   229f4:	30000c26 	beq	r6,zero,22a28 <__umodsi3+0x4c>
   229f8:	28000516 	blt	r5,zero,22a10 <__umodsi3+0x34>
   229fc:	294b883a 	add	r5,r5,r5
   22a00:	31bfffc4 	addi	r6,r6,-1
   22a04:	18c7883a 	add	r3,r3,r3
   22a08:	293ffa36 	bltu	r5,r4,229f4 <_gp+0xfffe5964>
   22a0c:	18000626 	beq	r3,zero,22a28 <__umodsi3+0x4c>
   22a10:	1806d07a 	srli	r3,r3,1
   22a14:	11400136 	bltu	r2,r5,22a1c <__umodsi3+0x40>
   22a18:	1145c83a 	sub	r2,r2,r5
   22a1c:	280ad07a 	srli	r5,r5,1
   22a20:	183ffb1e 	bne	r3,zero,22a10 <_gp+0xfffe5980>
   22a24:	f800283a 	ret
   22a28:	f800283a 	ret
   22a2c:	00c00044 	movi	r3,1
   22a30:	003ff706 	br	22a10 <_gp+0xfffe5980>

00022a34 <_Unwind_ForcedUnwind_Phase2>:
   22a34:	defff404 	addi	sp,sp,-48
   22a38:	dd800915 	stw	r22,36(sp)
   22a3c:	058000f4 	movhi	r22,3
   22a40:	ddc00a15 	stw	r23,40(sp)
   22a44:	dd400815 	stw	r21,32(sp)
   22a48:	dd000715 	stw	r20,28(sp)
   22a4c:	dcc00615 	stw	r19,24(sp)
   22a50:	dc400415 	stw	r17,16(sp)
   22a54:	dc000315 	stw	r16,12(sp)
   22a58:	dfc00b15 	stw	ra,44(sp)
   22a5c:	dc800515 	stw	r18,20(sp)
   22a60:	2021883a 	mov	r16,r4
   22a64:	2823883a 	mov	r17,r5
   22a68:	24c00317 	ldw	r19,12(r4)
   22a6c:	25000417 	ldw	r20,16(r4)
   22a70:	28c00017 	ldw	r3,0(r5)
   22a74:	b59b3e04 	addi	r22,r22,27896
   22a78:	054001c4 	movi	r21,7
   22a7c:	05c00204 	movi	r23,8
   22a80:	00001606 	br	22adc <_Unwind_ForcedUnwind_Phase2+0xa8>
   22a84:	81800017 	ldw	r6,0(r16)
   22a88:	81c00117 	ldw	r7,4(r16)
   22a8c:	1c800617 	ldw	r18,24(r3)
   22a90:	dd000215 	stw	r20,8(sp)
   22a94:	dc400115 	stw	r17,4(sp)
   22a98:	dc000015 	stw	r16,0(sp)
   22a9c:	983ee83a 	callr	r19
   22aa0:	01400284 	movi	r5,10
   22aa4:	01000044 	movi	r4,1
   22aa8:	1000241e 	bne	r2,zero,22b3c <_Unwind_ForcedUnwind_Phase2+0x108>
   22aac:	90000726 	beq	r18,zero,22acc <_Unwind_ForcedUnwind_Phase2+0x98>
   22ab0:	81800017 	ldw	r6,0(r16)
   22ab4:	81c00117 	ldw	r7,4(r16)
   22ab8:	dc400115 	stw	r17,4(sp)
   22abc:	dc000015 	stw	r16,0(sp)
   22ac0:	903ee83a 	callr	r18
   22ac4:	15401f26 	beq	r2,r21,22b44 <_Unwind_ForcedUnwind_Phase2+0x110>
   22ac8:	15c01c1e 	bne	r2,r23,22b3c <_Unwind_ForcedUnwind_Phase2+0x108>
   22acc:	88800017 	ldw	r2,0(r17)
   22ad0:	10c00017 	ldw	r3,0(r2)
   22ad4:	b0c00015 	stw	r3,0(r22)
   22ad8:	88c00015 	stw	r3,0(r17)
   22adc:	01400284 	movi	r5,10
   22ae0:	01000044 	movi	r4,1
   22ae4:	183fe71e 	bne	r3,zero,22a84 <_gp+0xfffe59f4>
   22ae8:	81800017 	ldw	r6,0(r16)
   22aec:	81c00117 	ldw	r7,4(r16)
   22af0:	01400684 	movi	r5,26
   22af4:	dd000215 	stw	r20,8(sp)
   22af8:	dc400115 	stw	r17,4(sp)
   22afc:	dc000015 	stw	r16,0(sp)
   22b00:	01000044 	movi	r4,1
   22b04:	983ee83a 	callr	r19
   22b08:	10000c1e 	bne	r2,zero,22b3c <_Unwind_ForcedUnwind_Phase2+0x108>
   22b0c:	00800144 	movi	r2,5
   22b10:	dfc00b17 	ldw	ra,44(sp)
   22b14:	ddc00a17 	ldw	r23,40(sp)
   22b18:	dd800917 	ldw	r22,36(sp)
   22b1c:	dd400817 	ldw	r21,32(sp)
   22b20:	dd000717 	ldw	r20,28(sp)
   22b24:	dcc00617 	ldw	r19,24(sp)
   22b28:	dc800517 	ldw	r18,20(sp)
   22b2c:	dc400417 	ldw	r17,16(sp)
   22b30:	dc000317 	ldw	r16,12(sp)
   22b34:	dec00c04 	addi	sp,sp,48
   22b38:	f800283a 	ret
   22b3c:	00800084 	movi	r2,2
   22b40:	003ff306 	br	22b10 <_gp+0xfffe5a80>
   22b44:	a805883a 	mov	r2,r21
   22b48:	003ff106 	br	22b10 <_gp+0xfffe5a80>

00022b4c <_Unwind_RaiseException_Phase2>:
   22b4c:	28c00017 	ldw	r3,0(r5)
   22b50:	defff804 	addi	sp,sp,-32
   22b54:	dcc00515 	stw	r19,20(sp)
   22b58:	dc800415 	stw	r18,16(sp)
   22b5c:	dc400315 	stw	r17,12(sp)
   22b60:	dc000215 	stw	r16,8(sp)
   22b64:	dfc00715 	stw	ra,28(sp)
   22b68:	dd000615 	stw	r20,24(sp)
   22b6c:	2823883a 	mov	r17,r5
   22b70:	2021883a 	mov	r16,r4
   22b74:	048001c4 	movi	r18,7
   22b78:	04c00204 	movi	r19,8
   22b7c:	18001326 	beq	r3,zero,22bcc <_Unwind_RaiseException_Phase2+0x80>
   22b80:	81000417 	ldw	r4,16(r16)
   22b84:	1a000617 	ldw	r8,24(r3)
   22b88:	19001926 	beq	r3,r4,22bf0 <_Unwind_RaiseException_Phase2+0xa4>
   22b8c:	40000c26 	beq	r8,zero,22bc0 <_Unwind_RaiseException_Phase2+0x74>
   22b90:	01400084 	movi	r5,2
   22b94:	0029883a 	mov	r20,zero
   22b98:	81800017 	ldw	r6,0(r16)
   22b9c:	81c00117 	ldw	r7,4(r16)
   22ba0:	01000044 	movi	r4,1
   22ba4:	dc400115 	stw	r17,4(sp)
   22ba8:	dc000015 	stw	r16,0(sp)
   22bac:	403ee83a 	callr	r8
   22bb0:	14801326 	beq	r2,r18,22c00 <_Unwind_RaiseException_Phase2+0xb4>
   22bb4:	14c0051e 	bne	r2,r19,22bcc <_Unwind_RaiseException_Phase2+0x80>
   22bb8:	a000131e 	bne	r20,zero,22c08 <_Unwind_RaiseException_Phase2+0xbc>
   22bbc:	88c00017 	ldw	r3,0(r17)
   22bc0:	18c00017 	ldw	r3,0(r3)
   22bc4:	88c00015 	stw	r3,0(r17)
   22bc8:	183fed1e 	bne	r3,zero,22b80 <_gp+0xfffe5af0>
   22bcc:	00800084 	movi	r2,2
   22bd0:	dfc00717 	ldw	ra,28(sp)
   22bd4:	dd000617 	ldw	r20,24(sp)
   22bd8:	dcc00517 	ldw	r19,20(sp)
   22bdc:	dc800417 	ldw	r18,16(sp)
   22be0:	dc400317 	ldw	r17,12(sp)
   22be4:	dc000217 	ldw	r16,8(sp)
   22be8:	dec00804 	addi	sp,sp,32
   22bec:	f800283a 	ret
   22bf0:	40000526 	beq	r8,zero,22c08 <_Unwind_RaiseException_Phase2+0xbc>
   22bf4:	01400184 	movi	r5,6
   22bf8:	05000104 	movi	r20,4
   22bfc:	003fe606 	br	22b98 <_gp+0xfffe5b08>
   22c00:	9005883a 	mov	r2,r18
   22c04:	003ff206 	br	22bd0 <_gp+0xfffe5b40>
   22c08:	0022f540 	call	22f54 <abort>

00022c0c <uw_install_context.isra.1>:
   22c0c:	20c00017 	ldw	r3,0(r4)
   22c10:	deffff04 	addi	sp,sp,-4
   22c14:	014000f4 	movhi	r5,3
   22c18:	19000917 	ldw	r4,36(r3)
   22c1c:	df000015 	stw	fp,0(sp)
   22c20:	18800804 	addi	r2,r3,32
   22c24:	d839883a 	mov	fp,sp
   22c28:	295b3e04 	addi	r5,r5,27896
   22c2c:	28c00015 	stw	r3,0(r5)
   22c30:	17000017 	ldw	fp,0(r2)
   22c34:	1ec00a17 	ldw	sp,40(r3)
   22c38:	2000683a 	jmp	r4

00022c3c <_Unwind_SjLj_Register>:
   22c3c:	008000f4 	movhi	r2,3
   22c40:	109b3e04 	addi	r2,r2,27896
   22c44:	10c00017 	ldw	r3,0(r2)
   22c48:	11000015 	stw	r4,0(r2)
   22c4c:	20c00015 	stw	r3,0(r4)
   22c50:	f800283a 	ret

00022c54 <_Unwind_SjLj_Unregister>:
   22c54:	20c00017 	ldw	r3,0(r4)
   22c58:	008000f4 	movhi	r2,3
   22c5c:	109b3e04 	addi	r2,r2,27896
   22c60:	10c00015 	stw	r3,0(r2)
   22c64:	f800283a 	ret

00022c68 <_Unwind_GetGR>:
   22c68:	20800017 	ldw	r2,0(r4)
   22c6c:	29400084 	addi	r5,r5,2
   22c70:	294b883a 	add	r5,r5,r5
   22c74:	294b883a 	add	r5,r5,r5
   22c78:	114b883a 	add	r5,r2,r5
   22c7c:	28800017 	ldw	r2,0(r5)
   22c80:	f800283a 	ret

00022c84 <_Unwind_GetCFA>:
   22c84:	20800017 	ldw	r2,0(r4)
   22c88:	10000226 	beq	r2,zero,22c94 <_Unwind_GetCFA+0x10>
   22c8c:	10800a17 	ldw	r2,40(r2)
   22c90:	f800283a 	ret
   22c94:	0005883a 	mov	r2,zero
   22c98:	f800283a 	ret

00022c9c <_Unwind_SetGR>:
   22c9c:	20800017 	ldw	r2,0(r4)
   22ca0:	29400084 	addi	r5,r5,2
   22ca4:	294b883a 	add	r5,r5,r5
   22ca8:	294b883a 	add	r5,r5,r5
   22cac:	114b883a 	add	r5,r2,r5
   22cb0:	29800015 	stw	r6,0(r5)
   22cb4:	f800283a 	ret

00022cb8 <_Unwind_GetIP>:
   22cb8:	20800017 	ldw	r2,0(r4)
   22cbc:	10800117 	ldw	r2,4(r2)
   22cc0:	10800044 	addi	r2,r2,1
   22cc4:	f800283a 	ret

00022cc8 <_Unwind_GetIPInfo>:
   22cc8:	20800017 	ldw	r2,0(r4)
   22ccc:	28000015 	stw	zero,0(r5)
   22cd0:	10000326 	beq	r2,zero,22ce0 <_Unwind_GetIPInfo+0x18>
   22cd4:	10800117 	ldw	r2,4(r2)
   22cd8:	10800044 	addi	r2,r2,1
   22cdc:	f800283a 	ret
   22ce0:	0005883a 	mov	r2,zero
   22ce4:	f800283a 	ret

00022ce8 <_Unwind_SetIP>:
   22ce8:	20800017 	ldw	r2,0(r4)
   22cec:	297fffc4 	addi	r5,r5,-1
   22cf0:	11400115 	stw	r5,4(r2)
   22cf4:	f800283a 	ret

00022cf8 <_Unwind_GetLanguageSpecificData>:
   22cf8:	20800017 	ldw	r2,0(r4)
   22cfc:	10800717 	ldw	r2,28(r2)
   22d00:	f800283a 	ret

00022d04 <_Unwind_GetRegionStart>:
   22d04:	0005883a 	mov	r2,zero
   22d08:	f800283a 	ret

00022d0c <_Unwind_FindEnclosingFunction>:
   22d0c:	0005883a 	mov	r2,zero
   22d10:	f800283a 	ret

00022d14 <_Unwind_GetDataRelBase>:
   22d14:	0005883a 	mov	r2,zero
   22d18:	f800283a 	ret

00022d1c <_Unwind_GetTextRelBase>:
   22d1c:	0005883a 	mov	r2,zero
   22d20:	f800283a 	ret

00022d24 <_Unwind_SjLj_RaiseException>:
   22d24:	008000f4 	movhi	r2,3
   22d28:	defff804 	addi	sp,sp,-32
   22d2c:	109b3e04 	addi	r2,r2,27896
   22d30:	dc800515 	stw	r18,20(sp)
   22d34:	14800017 	ldw	r18,0(r2)
   22d38:	dfc00715 	stw	ra,28(sp)
   22d3c:	dcc00615 	stw	r19,24(sp)
   22d40:	dc400415 	stw	r17,16(sp)
   22d44:	dc000315 	stw	r16,12(sp)
   22d48:	dc800215 	stw	r18,8(sp)
   22d4c:	90001426 	beq	r18,zero,22da0 <_Unwind_SjLj_RaiseException+0x7c>
   22d50:	2021883a 	mov	r16,r4
   22d54:	9005883a 	mov	r2,r18
   22d58:	04400184 	movi	r17,6
   22d5c:	04c00204 	movi	r19,8
   22d60:	10800617 	ldw	r2,24(r2)
   22d64:	10000a26 	beq	r2,zero,22d90 <_Unwind_SjLj_RaiseException+0x6c>
   22d68:	81800017 	ldw	r6,0(r16)
   22d6c:	81c00117 	ldw	r7,4(r16)
   22d70:	01400044 	movi	r5,1
   22d74:	d8c00204 	addi	r3,sp,8
   22d78:	d8c00115 	stw	r3,4(sp)
   22d7c:	dc000015 	stw	r16,0(sp)
   22d80:	2809883a 	mov	r4,r5
   22d84:	103ee83a 	callr	r2
   22d88:	14400d26 	beq	r2,r17,22dc0 <_Unwind_SjLj_RaiseException+0x9c>
   22d8c:	14c0171e 	bne	r2,r19,22dec <_Unwind_SjLj_RaiseException+0xc8>
   22d90:	d8800217 	ldw	r2,8(sp)
   22d94:	10800017 	ldw	r2,0(r2)
   22d98:	d8800215 	stw	r2,8(sp)
   22d9c:	103ff01e 	bne	r2,zero,22d60 <_gp+0xfffe5cd0>
   22da0:	00800144 	movi	r2,5
   22da4:	dfc00717 	ldw	ra,28(sp)
   22da8:	dcc00617 	ldw	r19,24(sp)
   22dac:	dc800517 	ldw	r18,20(sp)
   22db0:	dc400417 	ldw	r17,16(sp)
   22db4:	dc000317 	ldw	r16,12(sp)
   22db8:	dec00804 	addi	sp,sp,32
   22dbc:	f800283a 	ret
   22dc0:	d8800217 	ldw	r2,8(sp)
   22dc4:	80000315 	stw	zero,12(r16)
   22dc8:	d9400204 	addi	r5,sp,8
   22dcc:	80800415 	stw	r2,16(r16)
   22dd0:	8009883a 	mov	r4,r16
   22dd4:	dc800215 	stw	r18,8(sp)
   22dd8:	0022b4c0 	call	22b4c <_Unwind_RaiseException_Phase2>
   22ddc:	00c001c4 	movi	r3,7
   22de0:	10fff01e 	bne	r2,r3,22da4 <_gp+0xfffe5d14>
   22de4:	d9000204 	addi	r4,sp,8
   22de8:	0022c0c0 	call	22c0c <uw_install_context.isra.1>
   22dec:	008000c4 	movi	r2,3
   22df0:	003fec06 	br	22da4 <_gp+0xfffe5d14>

00022df4 <_Unwind_SjLj_ForcedUnwind>:
   22df4:	00c000f4 	movhi	r3,3
   22df8:	18db3e04 	addi	r3,r3,27896
   22dfc:	defffe04 	addi	sp,sp,-8
   22e00:	18c00017 	ldw	r3,0(r3)
   22e04:	dfc00115 	stw	ra,4(sp)
   22e08:	21400315 	stw	r5,12(r4)
   22e0c:	21800415 	stw	r6,16(r4)
   22e10:	d80b883a 	mov	r5,sp
   22e14:	d8c00015 	stw	r3,0(sp)
   22e18:	0022a340 	call	22a34 <_Unwind_ForcedUnwind_Phase2>
   22e1c:	00c001c4 	movi	r3,7
   22e20:	10c00326 	beq	r2,r3,22e30 <_Unwind_SjLj_ForcedUnwind+0x3c>
   22e24:	dfc00117 	ldw	ra,4(sp)
   22e28:	dec00204 	addi	sp,sp,8
   22e2c:	f800283a 	ret
   22e30:	d809883a 	mov	r4,sp
   22e34:	0022c0c0 	call	22c0c <uw_install_context.isra.1>

00022e38 <_Unwind_SjLj_Resume>:
   22e38:	00c000f4 	movhi	r3,3
   22e3c:	18db3e04 	addi	r3,r3,27896
   22e40:	18c00017 	ldw	r3,0(r3)
   22e44:	20800317 	ldw	r2,12(r4)
   22e48:	defffe04 	addi	sp,sp,-8
   22e4c:	dfc00115 	stw	ra,4(sp)
   22e50:	d8c00015 	stw	r3,0(sp)
   22e54:	d80b883a 	mov	r5,sp
   22e58:	1000041e 	bne	r2,zero,22e6c <_Unwind_SjLj_Resume+0x34>
   22e5c:	0022b4c0 	call	22b4c <_Unwind_RaiseException_Phase2>
   22e60:	00c001c4 	movi	r3,7
   22e64:	10c00326 	beq	r2,r3,22e74 <_Unwind_SjLj_Resume+0x3c>
   22e68:	0022f540 	call	22f54 <abort>
   22e6c:	0022a340 	call	22a34 <_Unwind_ForcedUnwind_Phase2>
   22e70:	003ffb06 	br	22e60 <_gp+0xfffe5dd0>
   22e74:	d809883a 	mov	r4,sp
   22e78:	0022c0c0 	call	22c0c <uw_install_context.isra.1>

00022e7c <_Unwind_SjLj_Resume_or_Rethrow>:
   22e7c:	20800317 	ldw	r2,12(r4)
   22e80:	defffe04 	addi	sp,sp,-8
   22e84:	dfc00115 	stw	ra,4(sp)
   22e88:	1000041e 	bne	r2,zero,22e9c <_Unwind_SjLj_Resume_or_Rethrow+0x20>
   22e8c:	0022d240 	call	22d24 <_Unwind_SjLj_RaiseException>
   22e90:	dfc00117 	ldw	ra,4(sp)
   22e94:	dec00204 	addi	sp,sp,8
   22e98:	f800283a 	ret
   22e9c:	008000f4 	movhi	r2,3
   22ea0:	109b3e04 	addi	r2,r2,27896
   22ea4:	10800017 	ldw	r2,0(r2)
   22ea8:	d80b883a 	mov	r5,sp
   22eac:	d8800015 	stw	r2,0(sp)
   22eb0:	0022a340 	call	22a34 <_Unwind_ForcedUnwind_Phase2>
   22eb4:	00c001c4 	movi	r3,7
   22eb8:	10c00126 	beq	r2,r3,22ec0 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
   22ebc:	0022f540 	call	22f54 <abort>
   22ec0:	d809883a 	mov	r4,sp
   22ec4:	0022c0c0 	call	22c0c <uw_install_context.isra.1>

00022ec8 <_Unwind_DeleteException>:
   22ec8:	20800217 	ldw	r2,8(r4)
   22ecc:	10000326 	beq	r2,zero,22edc <_Unwind_DeleteException+0x14>
   22ed0:	200b883a 	mov	r5,r4
   22ed4:	01000044 	movi	r4,1
   22ed8:	1000683a 	jmp	r2
   22edc:	f800283a 	ret

00022ee0 <_Unwind_Backtrace>:
   22ee0:	008000f4 	movhi	r2,3
   22ee4:	109b3e04 	addi	r2,r2,27896
   22ee8:	10800017 	ldw	r2,0(r2)
   22eec:	defffc04 	addi	sp,sp,-16
   22ef0:	dc400215 	stw	r17,8(sp)
   22ef4:	dc000115 	stw	r16,4(sp)
   22ef8:	dfc00315 	stw	ra,12(sp)
   22efc:	2023883a 	mov	r17,r4
   22f00:	2821883a 	mov	r16,r5
   22f04:	d8800015 	stw	r2,0(sp)
   22f08:	00000506 	br	22f20 <_Unwind_Backtrace+0x40>
   22f0c:	883ee83a 	callr	r17
   22f10:	10000e1e 	bne	r2,zero,22f4c <_Unwind_Backtrace+0x6c>
   22f14:	d8800017 	ldw	r2,0(sp)
   22f18:	10800017 	ldw	r2,0(r2)
   22f1c:	d8800015 	stw	r2,0(sp)
   22f20:	800b883a 	mov	r5,r16
   22f24:	d809883a 	mov	r4,sp
   22f28:	103ff81e 	bne	r2,zero,22f0c <_gp+0xfffe5e7c>
   22f2c:	883ee83a 	callr	r17
   22f30:	1000061e 	bne	r2,zero,22f4c <_Unwind_Backtrace+0x6c>
   22f34:	00800144 	movi	r2,5
   22f38:	dfc00317 	ldw	ra,12(sp)
   22f3c:	dc400217 	ldw	r17,8(sp)
   22f40:	dc000117 	ldw	r16,4(sp)
   22f44:	dec00404 	addi	sp,sp,16
   22f48:	f800283a 	ret
   22f4c:	008000c4 	movi	r2,3
   22f50:	003ff906 	br	22f38 <_gp+0xfffe5ea8>

00022f54 <abort>:
   22f54:	deffff04 	addi	sp,sp,-4
   22f58:	01000184 	movi	r4,6
   22f5c:	dfc00015 	stw	ra,0(sp)
   22f60:	0023cb00 	call	23cb0 <raise>
   22f64:	01000044 	movi	r4,1
   22f68:	002fb3c0 	call	2fb3c <_exit>

00022f6c <malloc>:
   22f6c:	008000f4 	movhi	r2,3
   22f70:	10943504 	addi	r2,r2,20692
   22f74:	200b883a 	mov	r5,r4
   22f78:	11000017 	ldw	r4,0(r2)
   22f7c:	0022f941 	jmpi	22f94 <_malloc_r>

00022f80 <free>:
   22f80:	008000f4 	movhi	r2,3
   22f84:	10943504 	addi	r2,r2,20692
   22f88:	200b883a 	mov	r5,r4
   22f8c:	11000017 	ldw	r4,0(r2)
   22f90:	00282ec1 	jmpi	282ec <_free_r>

00022f94 <_malloc_r>:
   22f94:	defff504 	addi	sp,sp,-44
   22f98:	dc800315 	stw	r18,12(sp)
   22f9c:	dfc00a15 	stw	ra,40(sp)
   22fa0:	df000915 	stw	fp,36(sp)
   22fa4:	ddc00815 	stw	r23,32(sp)
   22fa8:	dd800715 	stw	r22,28(sp)
   22fac:	dd400615 	stw	r21,24(sp)
   22fb0:	dd000515 	stw	r20,20(sp)
   22fb4:	dcc00415 	stw	r19,16(sp)
   22fb8:	dc400215 	stw	r17,8(sp)
   22fbc:	dc000115 	stw	r16,4(sp)
   22fc0:	288002c4 	addi	r2,r5,11
   22fc4:	00c00584 	movi	r3,22
   22fc8:	2025883a 	mov	r18,r4
   22fcc:	18807f2e 	bgeu	r3,r2,231cc <_malloc_r+0x238>
   22fd0:	047ffe04 	movi	r17,-8
   22fd4:	1462703a 	and	r17,r2,r17
   22fd8:	8800a316 	blt	r17,zero,23268 <_malloc_r+0x2d4>
   22fdc:	8940a236 	bltu	r17,r5,23268 <_malloc_r+0x2d4>
   22fe0:	003029c0 	call	3029c <__malloc_lock>
   22fe4:	00807dc4 	movi	r2,503
   22fe8:	1441e92e 	bgeu	r2,r17,23790 <_malloc_r+0x7fc>
   22fec:	8804d27a 	srli	r2,r17,9
   22ff0:	1000a126 	beq	r2,zero,23278 <_malloc_r+0x2e4>
   22ff4:	00c00104 	movi	r3,4
   22ff8:	18811e36 	bltu	r3,r2,23474 <_malloc_r+0x4e0>
   22ffc:	8804d1ba 	srli	r2,r17,6
   23000:	12000e44 	addi	r8,r2,57
   23004:	11c00e04 	addi	r7,r2,56
   23008:	4209883a 	add	r4,r8,r8
   2300c:	04c000f4 	movhi	r19,3
   23010:	2109883a 	add	r4,r4,r4
   23014:	9ccd4804 	addi	r19,r19,13600
   23018:	2109883a 	add	r4,r4,r4
   2301c:	9909883a 	add	r4,r19,r4
   23020:	24000117 	ldw	r16,4(r4)
   23024:	213ffe04 	addi	r4,r4,-8
   23028:	24009726 	beq	r4,r16,23288 <_malloc_r+0x2f4>
   2302c:	80800117 	ldw	r2,4(r16)
   23030:	01bfff04 	movi	r6,-4
   23034:	014003c4 	movi	r5,15
   23038:	1184703a 	and	r2,r2,r6
   2303c:	1447c83a 	sub	r3,r2,r17
   23040:	28c00716 	blt	r5,r3,23060 <_malloc_r+0xcc>
   23044:	1800920e 	bge	r3,zero,23290 <_malloc_r+0x2fc>
   23048:	84000317 	ldw	r16,12(r16)
   2304c:	24008e26 	beq	r4,r16,23288 <_malloc_r+0x2f4>
   23050:	80800117 	ldw	r2,4(r16)
   23054:	1184703a 	and	r2,r2,r6
   23058:	1447c83a 	sub	r3,r2,r17
   2305c:	28fff90e 	bge	r5,r3,23044 <_gp+0xfffe5fb4>
   23060:	3809883a 	mov	r4,r7
   23064:	018000f4 	movhi	r6,3
   23068:	9c000417 	ldw	r16,16(r19)
   2306c:	318d4804 	addi	r6,r6,13600
   23070:	32000204 	addi	r8,r6,8
   23074:	82013426 	beq	r16,r8,23548 <_malloc_r+0x5b4>
   23078:	80c00117 	ldw	r3,4(r16)
   2307c:	00bfff04 	movi	r2,-4
   23080:	188e703a 	and	r7,r3,r2
   23084:	3c45c83a 	sub	r2,r7,r17
   23088:	00c003c4 	movi	r3,15
   2308c:	18811f16 	blt	r3,r2,2350c <_malloc_r+0x578>
   23090:	32000515 	stw	r8,20(r6)
   23094:	32000415 	stw	r8,16(r6)
   23098:	10007f0e 	bge	r2,zero,23298 <_malloc_r+0x304>
   2309c:	00807fc4 	movi	r2,511
   230a0:	11c0fd36 	bltu	r2,r7,23498 <_malloc_r+0x504>
   230a4:	3806d0fa 	srli	r3,r7,3
   230a8:	01c00044 	movi	r7,1
   230ac:	30800117 	ldw	r2,4(r6)
   230b0:	19400044 	addi	r5,r3,1
   230b4:	294b883a 	add	r5,r5,r5
   230b8:	1807d0ba 	srai	r3,r3,2
   230bc:	294b883a 	add	r5,r5,r5
   230c0:	294b883a 	add	r5,r5,r5
   230c4:	298b883a 	add	r5,r5,r6
   230c8:	38c6983a 	sll	r3,r7,r3
   230cc:	29c00017 	ldw	r7,0(r5)
   230d0:	2a7ffe04 	addi	r9,r5,-8
   230d4:	1886b03a 	or	r3,r3,r2
   230d8:	82400315 	stw	r9,12(r16)
   230dc:	81c00215 	stw	r7,8(r16)
   230e0:	30c00115 	stw	r3,4(r6)
   230e4:	2c000015 	stw	r16,0(r5)
   230e8:	3c000315 	stw	r16,12(r7)
   230ec:	2005d0ba 	srai	r2,r4,2
   230f0:	01400044 	movi	r5,1
   230f4:	288a983a 	sll	r5,r5,r2
   230f8:	19406f36 	bltu	r3,r5,232b8 <_malloc_r+0x324>
   230fc:	28c4703a 	and	r2,r5,r3
   23100:	10000a1e 	bne	r2,zero,2312c <_malloc_r+0x198>
   23104:	00bfff04 	movi	r2,-4
   23108:	294b883a 	add	r5,r5,r5
   2310c:	2088703a 	and	r4,r4,r2
   23110:	28c4703a 	and	r2,r5,r3
   23114:	21000104 	addi	r4,r4,4
   23118:	1000041e 	bne	r2,zero,2312c <_malloc_r+0x198>
   2311c:	294b883a 	add	r5,r5,r5
   23120:	28c4703a 	and	r2,r5,r3
   23124:	21000104 	addi	r4,r4,4
   23128:	103ffc26 	beq	r2,zero,2311c <_gp+0xfffe608c>
   2312c:	02bfff04 	movi	r10,-4
   23130:	024003c4 	movi	r9,15
   23134:	21800044 	addi	r6,r4,1
   23138:	318d883a 	add	r6,r6,r6
   2313c:	318d883a 	add	r6,r6,r6
   23140:	318d883a 	add	r6,r6,r6
   23144:	998d883a 	add	r6,r19,r6
   23148:	333ffe04 	addi	r12,r6,-8
   2314c:	2017883a 	mov	r11,r4
   23150:	31800104 	addi	r6,r6,4
   23154:	34000017 	ldw	r16,0(r6)
   23158:	31fffd04 	addi	r7,r6,-12
   2315c:	81c0041e 	bne	r16,r7,23170 <_malloc_r+0x1dc>
   23160:	0000fb06 	br	23550 <_malloc_r+0x5bc>
   23164:	1801030e 	bge	r3,zero,23574 <_malloc_r+0x5e0>
   23168:	84000317 	ldw	r16,12(r16)
   2316c:	81c0f826 	beq	r16,r7,23550 <_malloc_r+0x5bc>
   23170:	80800117 	ldw	r2,4(r16)
   23174:	1284703a 	and	r2,r2,r10
   23178:	1447c83a 	sub	r3,r2,r17
   2317c:	48fff90e 	bge	r9,r3,23164 <_gp+0xfffe60d4>
   23180:	80800317 	ldw	r2,12(r16)
   23184:	81000217 	ldw	r4,8(r16)
   23188:	89400054 	ori	r5,r17,1
   2318c:	81400115 	stw	r5,4(r16)
   23190:	20800315 	stw	r2,12(r4)
   23194:	11000215 	stw	r4,8(r2)
   23198:	8463883a 	add	r17,r16,r17
   2319c:	9c400515 	stw	r17,20(r19)
   231a0:	9c400415 	stw	r17,16(r19)
   231a4:	18800054 	ori	r2,r3,1
   231a8:	88800115 	stw	r2,4(r17)
   231ac:	8a000315 	stw	r8,12(r17)
   231b0:	8a000215 	stw	r8,8(r17)
   231b4:	88e3883a 	add	r17,r17,r3
   231b8:	88c00015 	stw	r3,0(r17)
   231bc:	9009883a 	mov	r4,r18
   231c0:	00302c00 	call	302c0 <__malloc_unlock>
   231c4:	80800204 	addi	r2,r16,8
   231c8:	00001b06 	br	23238 <_malloc_r+0x2a4>
   231cc:	04400404 	movi	r17,16
   231d0:	89402536 	bltu	r17,r5,23268 <_malloc_r+0x2d4>
   231d4:	003029c0 	call	3029c <__malloc_lock>
   231d8:	00800184 	movi	r2,6
   231dc:	01000084 	movi	r4,2
   231e0:	04c000f4 	movhi	r19,3
   231e4:	1085883a 	add	r2,r2,r2
   231e8:	9ccd4804 	addi	r19,r19,13600
   231ec:	1085883a 	add	r2,r2,r2
   231f0:	9885883a 	add	r2,r19,r2
   231f4:	14000117 	ldw	r16,4(r2)
   231f8:	10fffe04 	addi	r3,r2,-8
   231fc:	80c0d926 	beq	r16,r3,23564 <_malloc_r+0x5d0>
   23200:	80c00117 	ldw	r3,4(r16)
   23204:	81000317 	ldw	r4,12(r16)
   23208:	00bfff04 	movi	r2,-4
   2320c:	1884703a 	and	r2,r3,r2
   23210:	81400217 	ldw	r5,8(r16)
   23214:	8085883a 	add	r2,r16,r2
   23218:	10c00117 	ldw	r3,4(r2)
   2321c:	29000315 	stw	r4,12(r5)
   23220:	21400215 	stw	r5,8(r4)
   23224:	18c00054 	ori	r3,r3,1
   23228:	10c00115 	stw	r3,4(r2)
   2322c:	9009883a 	mov	r4,r18
   23230:	00302c00 	call	302c0 <__malloc_unlock>
   23234:	80800204 	addi	r2,r16,8
   23238:	dfc00a17 	ldw	ra,40(sp)
   2323c:	df000917 	ldw	fp,36(sp)
   23240:	ddc00817 	ldw	r23,32(sp)
   23244:	dd800717 	ldw	r22,28(sp)
   23248:	dd400617 	ldw	r21,24(sp)
   2324c:	dd000517 	ldw	r20,20(sp)
   23250:	dcc00417 	ldw	r19,16(sp)
   23254:	dc800317 	ldw	r18,12(sp)
   23258:	dc400217 	ldw	r17,8(sp)
   2325c:	dc000117 	ldw	r16,4(sp)
   23260:	dec00b04 	addi	sp,sp,44
   23264:	f800283a 	ret
   23268:	00800304 	movi	r2,12
   2326c:	90800015 	stw	r2,0(r18)
   23270:	0005883a 	mov	r2,zero
   23274:	003ff006 	br	23238 <_gp+0xfffe61a8>
   23278:	01002004 	movi	r4,128
   2327c:	02001004 	movi	r8,64
   23280:	01c00fc4 	movi	r7,63
   23284:	003f6106 	br	2300c <_gp+0xfffe5f7c>
   23288:	4009883a 	mov	r4,r8
   2328c:	003f7506 	br	23064 <_gp+0xfffe5fd4>
   23290:	81000317 	ldw	r4,12(r16)
   23294:	003fde06 	br	23210 <_gp+0xfffe6180>
   23298:	81c5883a 	add	r2,r16,r7
   2329c:	11400117 	ldw	r5,4(r2)
   232a0:	9009883a 	mov	r4,r18
   232a4:	29400054 	ori	r5,r5,1
   232a8:	11400115 	stw	r5,4(r2)
   232ac:	00302c00 	call	302c0 <__malloc_unlock>
   232b0:	80800204 	addi	r2,r16,8
   232b4:	003fe006 	br	23238 <_gp+0xfffe61a8>
   232b8:	9c000217 	ldw	r16,8(r19)
   232bc:	00bfff04 	movi	r2,-4
   232c0:	85800117 	ldw	r22,4(r16)
   232c4:	b0ac703a 	and	r22,r22,r2
   232c8:	b4400336 	bltu	r22,r17,232d8 <_malloc_r+0x344>
   232cc:	b445c83a 	sub	r2,r22,r17
   232d0:	00c003c4 	movi	r3,15
   232d4:	18805d16 	blt	r3,r2,2344c <_malloc_r+0x4b8>
   232d8:	05c000f4 	movhi	r23,3
   232dc:	008000f4 	movhi	r2,3
   232e0:	109b4104 	addi	r2,r2,27908
   232e4:	bdd43204 	addi	r23,r23,20680
   232e8:	15400017 	ldw	r21,0(r2)
   232ec:	b8c00017 	ldw	r3,0(r23)
   232f0:	00bfffc4 	movi	r2,-1
   232f4:	858d883a 	add	r6,r16,r22
   232f8:	8d6b883a 	add	r21,r17,r21
   232fc:	1880ea26 	beq	r3,r2,236a8 <_malloc_r+0x714>
   23300:	ad4403c4 	addi	r21,r21,4111
   23304:	00bc0004 	movi	r2,-4096
   23308:	a8aa703a 	and	r21,r21,r2
   2330c:	a80b883a 	mov	r5,r21
   23310:	9009883a 	mov	r4,r18
   23314:	d9800015 	stw	r6,0(sp)
   23318:	0023a080 	call	23a08 <_sbrk_r>
   2331c:	1029883a 	mov	r20,r2
   23320:	00bfffc4 	movi	r2,-1
   23324:	d9800017 	ldw	r6,0(sp)
   23328:	a080e826 	beq	r20,r2,236cc <_malloc_r+0x738>
   2332c:	a180a636 	bltu	r20,r6,235c8 <_malloc_r+0x634>
   23330:	070000f4 	movhi	fp,3
   23334:	e71b5104 	addi	fp,fp,27972
   23338:	e0800017 	ldw	r2,0(fp)
   2333c:	a887883a 	add	r3,r21,r2
   23340:	e0c00015 	stw	r3,0(fp)
   23344:	3500e626 	beq	r6,r20,236e0 <_malloc_r+0x74c>
   23348:	b9000017 	ldw	r4,0(r23)
   2334c:	00bfffc4 	movi	r2,-1
   23350:	2080ee26 	beq	r4,r2,2370c <_malloc_r+0x778>
   23354:	a185c83a 	sub	r2,r20,r6
   23358:	10c5883a 	add	r2,r2,r3
   2335c:	e0800015 	stw	r2,0(fp)
   23360:	a0c001cc 	andi	r3,r20,7
   23364:	1800bc26 	beq	r3,zero,23658 <_malloc_r+0x6c4>
   23368:	a0e9c83a 	sub	r20,r20,r3
   2336c:	00840204 	movi	r2,4104
   23370:	a5000204 	addi	r20,r20,8
   23374:	10c7c83a 	sub	r3,r2,r3
   23378:	a545883a 	add	r2,r20,r21
   2337c:	1083ffcc 	andi	r2,r2,4095
   23380:	18abc83a 	sub	r21,r3,r2
   23384:	a80b883a 	mov	r5,r21
   23388:	9009883a 	mov	r4,r18
   2338c:	0023a080 	call	23a08 <_sbrk_r>
   23390:	00ffffc4 	movi	r3,-1
   23394:	10c0e126 	beq	r2,r3,2371c <_malloc_r+0x788>
   23398:	1505c83a 	sub	r2,r2,r20
   2339c:	1545883a 	add	r2,r2,r21
   233a0:	10800054 	ori	r2,r2,1
   233a4:	e0c00017 	ldw	r3,0(fp)
   233a8:	9d000215 	stw	r20,8(r19)
   233ac:	a0800115 	stw	r2,4(r20)
   233b0:	a8c7883a 	add	r3,r21,r3
   233b4:	e0c00015 	stw	r3,0(fp)
   233b8:	84c00e26 	beq	r16,r19,233f4 <_malloc_r+0x460>
   233bc:	018003c4 	movi	r6,15
   233c0:	3580a72e 	bgeu	r6,r22,23660 <_malloc_r+0x6cc>
   233c4:	81400117 	ldw	r5,4(r16)
   233c8:	013ffe04 	movi	r4,-8
   233cc:	b0bffd04 	addi	r2,r22,-12
   233d0:	1104703a 	and	r2,r2,r4
   233d4:	2900004c 	andi	r4,r5,1
   233d8:	2088b03a 	or	r4,r4,r2
   233dc:	81000115 	stw	r4,4(r16)
   233e0:	01400144 	movi	r5,5
   233e4:	8089883a 	add	r4,r16,r2
   233e8:	21400115 	stw	r5,4(r4)
   233ec:	21400215 	stw	r5,8(r4)
   233f0:	3080cd36 	bltu	r6,r2,23728 <_malloc_r+0x794>
   233f4:	008000f4 	movhi	r2,3
   233f8:	109b4004 	addi	r2,r2,27904
   233fc:	11000017 	ldw	r4,0(r2)
   23400:	20c0012e 	bgeu	r4,r3,23408 <_malloc_r+0x474>
   23404:	10c00015 	stw	r3,0(r2)
   23408:	008000f4 	movhi	r2,3
   2340c:	109b3f04 	addi	r2,r2,27900
   23410:	11000017 	ldw	r4,0(r2)
   23414:	9c000217 	ldw	r16,8(r19)
   23418:	20c0012e 	bgeu	r4,r3,23420 <_malloc_r+0x48c>
   2341c:	10c00015 	stw	r3,0(r2)
   23420:	80c00117 	ldw	r3,4(r16)
   23424:	00bfff04 	movi	r2,-4
   23428:	1886703a 	and	r3,r3,r2
   2342c:	1c45c83a 	sub	r2,r3,r17
   23430:	1c400236 	bltu	r3,r17,2343c <_malloc_r+0x4a8>
   23434:	00c003c4 	movi	r3,15
   23438:	18800416 	blt	r3,r2,2344c <_malloc_r+0x4b8>
   2343c:	9009883a 	mov	r4,r18
   23440:	00302c00 	call	302c0 <__malloc_unlock>
   23444:	0005883a 	mov	r2,zero
   23448:	003f7b06 	br	23238 <_gp+0xfffe61a8>
   2344c:	88c00054 	ori	r3,r17,1
   23450:	80c00115 	stw	r3,4(r16)
   23454:	8463883a 	add	r17,r16,r17
   23458:	10800054 	ori	r2,r2,1
   2345c:	9c400215 	stw	r17,8(r19)
   23460:	88800115 	stw	r2,4(r17)
   23464:	9009883a 	mov	r4,r18
   23468:	00302c00 	call	302c0 <__malloc_unlock>
   2346c:	80800204 	addi	r2,r16,8
   23470:	003f7106 	br	23238 <_gp+0xfffe61a8>
   23474:	00c00504 	movi	r3,20
   23478:	18804a2e 	bgeu	r3,r2,235a4 <_malloc_r+0x610>
   2347c:	00c01504 	movi	r3,84
   23480:	18806e36 	bltu	r3,r2,2363c <_malloc_r+0x6a8>
   23484:	8804d33a 	srli	r2,r17,12
   23488:	12001bc4 	addi	r8,r2,111
   2348c:	11c01b84 	addi	r7,r2,110
   23490:	4209883a 	add	r4,r8,r8
   23494:	003edd06 	br	2300c <_gp+0xfffe5f7c>
   23498:	3804d27a 	srli	r2,r7,9
   2349c:	00c00104 	movi	r3,4
   234a0:	1880442e 	bgeu	r3,r2,235b4 <_malloc_r+0x620>
   234a4:	00c00504 	movi	r3,20
   234a8:	18808136 	bltu	r3,r2,236b0 <_malloc_r+0x71c>
   234ac:	11401704 	addi	r5,r2,92
   234b0:	10c016c4 	addi	r3,r2,91
   234b4:	294b883a 	add	r5,r5,r5
   234b8:	294b883a 	add	r5,r5,r5
   234bc:	294b883a 	add	r5,r5,r5
   234c0:	994b883a 	add	r5,r19,r5
   234c4:	28800017 	ldw	r2,0(r5)
   234c8:	018000f4 	movhi	r6,3
   234cc:	297ffe04 	addi	r5,r5,-8
   234d0:	318d4804 	addi	r6,r6,13600
   234d4:	28806526 	beq	r5,r2,2366c <_malloc_r+0x6d8>
   234d8:	01bfff04 	movi	r6,-4
   234dc:	10c00117 	ldw	r3,4(r2)
   234e0:	1986703a 	and	r3,r3,r6
   234e4:	38c0022e 	bgeu	r7,r3,234f0 <_malloc_r+0x55c>
   234e8:	10800217 	ldw	r2,8(r2)
   234ec:	28bffb1e 	bne	r5,r2,234dc <_gp+0xfffe644c>
   234f0:	11400317 	ldw	r5,12(r2)
   234f4:	98c00117 	ldw	r3,4(r19)
   234f8:	81400315 	stw	r5,12(r16)
   234fc:	80800215 	stw	r2,8(r16)
   23500:	2c000215 	stw	r16,8(r5)
   23504:	14000315 	stw	r16,12(r2)
   23508:	003ef806 	br	230ec <_gp+0xfffe605c>
   2350c:	88c00054 	ori	r3,r17,1
   23510:	80c00115 	stw	r3,4(r16)
   23514:	8463883a 	add	r17,r16,r17
   23518:	34400515 	stw	r17,20(r6)
   2351c:	34400415 	stw	r17,16(r6)
   23520:	10c00054 	ori	r3,r2,1
   23524:	8a000315 	stw	r8,12(r17)
   23528:	8a000215 	stw	r8,8(r17)
   2352c:	88c00115 	stw	r3,4(r17)
   23530:	88a3883a 	add	r17,r17,r2
   23534:	88800015 	stw	r2,0(r17)
   23538:	9009883a 	mov	r4,r18
   2353c:	00302c00 	call	302c0 <__malloc_unlock>
   23540:	80800204 	addi	r2,r16,8
   23544:	003f3c06 	br	23238 <_gp+0xfffe61a8>
   23548:	30c00117 	ldw	r3,4(r6)
   2354c:	003ee706 	br	230ec <_gp+0xfffe605c>
   23550:	5ac00044 	addi	r11,r11,1
   23554:	588000cc 	andi	r2,r11,3
   23558:	31800204 	addi	r6,r6,8
   2355c:	103efd1e 	bne	r2,zero,23154 <_gp+0xfffe60c4>
   23560:	00002406 	br	235f4 <_malloc_r+0x660>
   23564:	14000317 	ldw	r16,12(r2)
   23568:	143f251e 	bne	r2,r16,23200 <_gp+0xfffe6170>
   2356c:	21000084 	addi	r4,r4,2
   23570:	003ebc06 	br	23064 <_gp+0xfffe5fd4>
   23574:	8085883a 	add	r2,r16,r2
   23578:	10c00117 	ldw	r3,4(r2)
   2357c:	81000317 	ldw	r4,12(r16)
   23580:	81400217 	ldw	r5,8(r16)
   23584:	18c00054 	ori	r3,r3,1
   23588:	10c00115 	stw	r3,4(r2)
   2358c:	29000315 	stw	r4,12(r5)
   23590:	21400215 	stw	r5,8(r4)
   23594:	9009883a 	mov	r4,r18
   23598:	00302c00 	call	302c0 <__malloc_unlock>
   2359c:	80800204 	addi	r2,r16,8
   235a0:	003f2506 	br	23238 <_gp+0xfffe61a8>
   235a4:	12001704 	addi	r8,r2,92
   235a8:	11c016c4 	addi	r7,r2,91
   235ac:	4209883a 	add	r4,r8,r8
   235b0:	003e9606 	br	2300c <_gp+0xfffe5f7c>
   235b4:	3804d1ba 	srli	r2,r7,6
   235b8:	11400e44 	addi	r5,r2,57
   235bc:	10c00e04 	addi	r3,r2,56
   235c0:	294b883a 	add	r5,r5,r5
   235c4:	003fbc06 	br	234b8 <_gp+0xfffe6428>
   235c8:	84ff5926 	beq	r16,r19,23330 <_gp+0xfffe62a0>
   235cc:	008000f4 	movhi	r2,3
   235d0:	108d4804 	addi	r2,r2,13600
   235d4:	14000217 	ldw	r16,8(r2)
   235d8:	00bfff04 	movi	r2,-4
   235dc:	80c00117 	ldw	r3,4(r16)
   235e0:	1886703a 	and	r3,r3,r2
   235e4:	003f9106 	br	2342c <_gp+0xfffe639c>
   235e8:	60800217 	ldw	r2,8(r12)
   235ec:	213fffc4 	addi	r4,r4,-1
   235f0:	1300651e 	bne	r2,r12,23788 <_malloc_r+0x7f4>
   235f4:	208000cc 	andi	r2,r4,3
   235f8:	633ffe04 	addi	r12,r12,-8
   235fc:	103ffa1e 	bne	r2,zero,235e8 <_gp+0xfffe6558>
   23600:	98800117 	ldw	r2,4(r19)
   23604:	0146303a 	nor	r3,zero,r5
   23608:	1884703a 	and	r2,r3,r2
   2360c:	98800115 	stw	r2,4(r19)
   23610:	294b883a 	add	r5,r5,r5
   23614:	117f2836 	bltu	r2,r5,232b8 <_gp+0xfffe6228>
   23618:	283f2726 	beq	r5,zero,232b8 <_gp+0xfffe6228>
   2361c:	2886703a 	and	r3,r5,r2
   23620:	5809883a 	mov	r4,r11
   23624:	183ec31e 	bne	r3,zero,23134 <_gp+0xfffe60a4>
   23628:	294b883a 	add	r5,r5,r5
   2362c:	2886703a 	and	r3,r5,r2
   23630:	21000104 	addi	r4,r4,4
   23634:	183ffc26 	beq	r3,zero,23628 <_gp+0xfffe6598>
   23638:	003ebe06 	br	23134 <_gp+0xfffe60a4>
   2363c:	00c05504 	movi	r3,340
   23640:	18801236 	bltu	r3,r2,2368c <_malloc_r+0x6f8>
   23644:	8804d3fa 	srli	r2,r17,15
   23648:	12001e04 	addi	r8,r2,120
   2364c:	11c01dc4 	addi	r7,r2,119
   23650:	4209883a 	add	r4,r8,r8
   23654:	003e6d06 	br	2300c <_gp+0xfffe5f7c>
   23658:	00c40004 	movi	r3,4096
   2365c:	003f4606 	br	23378 <_gp+0xfffe62e8>
   23660:	00800044 	movi	r2,1
   23664:	a0800115 	stw	r2,4(r20)
   23668:	003f7406 	br	2343c <_gp+0xfffe63ac>
   2366c:	1805d0ba 	srai	r2,r3,2
   23670:	01c00044 	movi	r7,1
   23674:	30c00117 	ldw	r3,4(r6)
   23678:	388e983a 	sll	r7,r7,r2
   2367c:	2805883a 	mov	r2,r5
   23680:	38c6b03a 	or	r3,r7,r3
   23684:	30c00115 	stw	r3,4(r6)
   23688:	003f9b06 	br	234f8 <_gp+0xfffe6468>
   2368c:	00c15504 	movi	r3,1364
   23690:	18801a36 	bltu	r3,r2,236fc <_malloc_r+0x768>
   23694:	8804d4ba 	srli	r2,r17,18
   23698:	12001f44 	addi	r8,r2,125
   2369c:	11c01f04 	addi	r7,r2,124
   236a0:	4209883a 	add	r4,r8,r8
   236a4:	003e5906 	br	2300c <_gp+0xfffe5f7c>
   236a8:	ad400404 	addi	r21,r21,16
   236ac:	003f1706 	br	2330c <_gp+0xfffe627c>
   236b0:	00c01504 	movi	r3,84
   236b4:	18802336 	bltu	r3,r2,23744 <_malloc_r+0x7b0>
   236b8:	3804d33a 	srli	r2,r7,12
   236bc:	11401bc4 	addi	r5,r2,111
   236c0:	10c01b84 	addi	r3,r2,110
   236c4:	294b883a 	add	r5,r5,r5
   236c8:	003f7b06 	br	234b8 <_gp+0xfffe6428>
   236cc:	9c000217 	ldw	r16,8(r19)
   236d0:	00bfff04 	movi	r2,-4
   236d4:	80c00117 	ldw	r3,4(r16)
   236d8:	1886703a 	and	r3,r3,r2
   236dc:	003f5306 	br	2342c <_gp+0xfffe639c>
   236e0:	3083ffcc 	andi	r2,r6,4095
   236e4:	103f181e 	bne	r2,zero,23348 <_gp+0xfffe62b8>
   236e8:	99000217 	ldw	r4,8(r19)
   236ec:	b545883a 	add	r2,r22,r21
   236f0:	10800054 	ori	r2,r2,1
   236f4:	20800115 	stw	r2,4(r4)
   236f8:	003f3e06 	br	233f4 <_gp+0xfffe6364>
   236fc:	01003f84 	movi	r4,254
   23700:	02001fc4 	movi	r8,127
   23704:	01c01f84 	movi	r7,126
   23708:	003e4006 	br	2300c <_gp+0xfffe5f7c>
   2370c:	008000f4 	movhi	r2,3
   23710:	10943204 	addi	r2,r2,20680
   23714:	15000015 	stw	r20,0(r2)
   23718:	003f1106 	br	23360 <_gp+0xfffe62d0>
   2371c:	00800044 	movi	r2,1
   23720:	002b883a 	mov	r21,zero
   23724:	003f1f06 	br	233a4 <_gp+0xfffe6314>
   23728:	81400204 	addi	r5,r16,8
   2372c:	9009883a 	mov	r4,r18
   23730:	00282ec0 	call	282ec <_free_r>
   23734:	008000f4 	movhi	r2,3
   23738:	109b5104 	addi	r2,r2,27972
   2373c:	10c00017 	ldw	r3,0(r2)
   23740:	003f2c06 	br	233f4 <_gp+0xfffe6364>
   23744:	00c05504 	movi	r3,340
   23748:	18800536 	bltu	r3,r2,23760 <_malloc_r+0x7cc>
   2374c:	3804d3fa 	srli	r2,r7,15
   23750:	11401e04 	addi	r5,r2,120
   23754:	10c01dc4 	addi	r3,r2,119
   23758:	294b883a 	add	r5,r5,r5
   2375c:	003f5606 	br	234b8 <_gp+0xfffe6428>
   23760:	00c15504 	movi	r3,1364
   23764:	18800536 	bltu	r3,r2,2377c <_malloc_r+0x7e8>
   23768:	3804d4ba 	srli	r2,r7,18
   2376c:	11401f44 	addi	r5,r2,125
   23770:	10c01f04 	addi	r3,r2,124
   23774:	294b883a 	add	r5,r5,r5
   23778:	003f4f06 	br	234b8 <_gp+0xfffe6428>
   2377c:	01403f84 	movi	r5,254
   23780:	00c01f84 	movi	r3,126
   23784:	003f4c06 	br	234b8 <_gp+0xfffe6428>
   23788:	98800117 	ldw	r2,4(r19)
   2378c:	003fa006 	br	23610 <_gp+0xfffe6580>
   23790:	8808d0fa 	srli	r4,r17,3
   23794:	20800044 	addi	r2,r4,1
   23798:	1085883a 	add	r2,r2,r2
   2379c:	003e9006 	br	231e0 <_gp+0xfffe6150>

000237a0 <memset>:
   237a0:	20c000cc 	andi	r3,r4,3
   237a4:	2005883a 	mov	r2,r4
   237a8:	18004426 	beq	r3,zero,238bc <memset+0x11c>
   237ac:	31ffffc4 	addi	r7,r6,-1
   237b0:	30004026 	beq	r6,zero,238b4 <memset+0x114>
   237b4:	2813883a 	mov	r9,r5
   237b8:	200d883a 	mov	r6,r4
   237bc:	2007883a 	mov	r3,r4
   237c0:	00000406 	br	237d4 <memset+0x34>
   237c4:	3a3fffc4 	addi	r8,r7,-1
   237c8:	31800044 	addi	r6,r6,1
   237cc:	38003926 	beq	r7,zero,238b4 <memset+0x114>
   237d0:	400f883a 	mov	r7,r8
   237d4:	18c00044 	addi	r3,r3,1
   237d8:	32400005 	stb	r9,0(r6)
   237dc:	1a0000cc 	andi	r8,r3,3
   237e0:	403ff81e 	bne	r8,zero,237c4 <_gp+0xfffe6734>
   237e4:	010000c4 	movi	r4,3
   237e8:	21c02d2e 	bgeu	r4,r7,238a0 <memset+0x100>
   237ec:	29003fcc 	andi	r4,r5,255
   237f0:	200c923a 	slli	r6,r4,8
   237f4:	3108b03a 	or	r4,r6,r4
   237f8:	200c943a 	slli	r6,r4,16
   237fc:	218cb03a 	or	r6,r4,r6
   23800:	010003c4 	movi	r4,15
   23804:	21c0182e 	bgeu	r4,r7,23868 <memset+0xc8>
   23808:	3b3ffc04 	addi	r12,r7,-16
   2380c:	6018d13a 	srli	r12,r12,4
   23810:	1a000104 	addi	r8,r3,4
   23814:	1ac00204 	addi	r11,r3,8
   23818:	6008913a 	slli	r4,r12,4
   2381c:	1a800304 	addi	r10,r3,12
   23820:	1813883a 	mov	r9,r3
   23824:	21000504 	addi	r4,r4,20
   23828:	1909883a 	add	r4,r3,r4
   2382c:	49800015 	stw	r6,0(r9)
   23830:	41800015 	stw	r6,0(r8)
   23834:	59800015 	stw	r6,0(r11)
   23838:	51800015 	stw	r6,0(r10)
   2383c:	42000404 	addi	r8,r8,16
   23840:	4a400404 	addi	r9,r9,16
   23844:	5ac00404 	addi	r11,r11,16
   23848:	52800404 	addi	r10,r10,16
   2384c:	413ff71e 	bne	r8,r4,2382c <_gp+0xfffe679c>
   23850:	63000044 	addi	r12,r12,1
   23854:	6018913a 	slli	r12,r12,4
   23858:	39c003cc 	andi	r7,r7,15
   2385c:	010000c4 	movi	r4,3
   23860:	1b07883a 	add	r3,r3,r12
   23864:	21c00e2e 	bgeu	r4,r7,238a0 <memset+0x100>
   23868:	1813883a 	mov	r9,r3
   2386c:	3811883a 	mov	r8,r7
   23870:	010000c4 	movi	r4,3
   23874:	49800015 	stw	r6,0(r9)
   23878:	423fff04 	addi	r8,r8,-4
   2387c:	4a400104 	addi	r9,r9,4
   23880:	223ffc36 	bltu	r4,r8,23874 <_gp+0xfffe67e4>
   23884:	393fff04 	addi	r4,r7,-4
   23888:	2008d0ba 	srli	r4,r4,2
   2388c:	39c000cc 	andi	r7,r7,3
   23890:	21000044 	addi	r4,r4,1
   23894:	2109883a 	add	r4,r4,r4
   23898:	2109883a 	add	r4,r4,r4
   2389c:	1907883a 	add	r3,r3,r4
   238a0:	38000526 	beq	r7,zero,238b8 <memset+0x118>
   238a4:	19cf883a 	add	r7,r3,r7
   238a8:	19400005 	stb	r5,0(r3)
   238ac:	18c00044 	addi	r3,r3,1
   238b0:	38fffd1e 	bne	r7,r3,238a8 <_gp+0xfffe6818>
   238b4:	f800283a 	ret
   238b8:	f800283a 	ret
   238bc:	2007883a 	mov	r3,r4
   238c0:	300f883a 	mov	r7,r6
   238c4:	003fc706 	br	237e4 <_gp+0xfffe6754>

000238c8 <_printf_r>:
   238c8:	defffd04 	addi	sp,sp,-12
   238cc:	2805883a 	mov	r2,r5
   238d0:	dfc00015 	stw	ra,0(sp)
   238d4:	d9800115 	stw	r6,4(sp)
   238d8:	d9c00215 	stw	r7,8(sp)
   238dc:	21400217 	ldw	r5,8(r4)
   238e0:	d9c00104 	addi	r7,sp,4
   238e4:	100d883a 	mov	r6,r2
   238e8:	0023ed40 	call	23ed4 <___vfprintf_internal_r>
   238ec:	dfc00017 	ldw	ra,0(sp)
   238f0:	dec00304 	addi	sp,sp,12
   238f4:	f800283a 	ret

000238f8 <printf>:
   238f8:	defffc04 	addi	sp,sp,-16
   238fc:	dfc00015 	stw	ra,0(sp)
   23900:	d9400115 	stw	r5,4(sp)
   23904:	d9800215 	stw	r6,8(sp)
   23908:	d9c00315 	stw	r7,12(sp)
   2390c:	008000f4 	movhi	r2,3
   23910:	10943504 	addi	r2,r2,20692
   23914:	10800017 	ldw	r2,0(r2)
   23918:	200b883a 	mov	r5,r4
   2391c:	d9800104 	addi	r6,sp,4
   23920:	11000217 	ldw	r4,8(r2)
   23924:	00260cc0 	call	260cc <__vfprintf_internal>
   23928:	dfc00017 	ldw	ra,0(sp)
   2392c:	dec00404 	addi	sp,sp,16
   23930:	f800283a 	ret

00023934 <_puts_r>:
   23934:	defff604 	addi	sp,sp,-40
   23938:	dc000715 	stw	r16,28(sp)
   2393c:	2021883a 	mov	r16,r4
   23940:	2809883a 	mov	r4,r5
   23944:	dc400815 	stw	r17,32(sp)
   23948:	dfc00915 	stw	ra,36(sp)
   2394c:	2823883a 	mov	r17,r5
   23950:	0023e3c0 	call	23e3c <strlen>
   23954:	10c00044 	addi	r3,r2,1
   23958:	d8800115 	stw	r2,4(sp)
   2395c:	008000f4 	movhi	r2,3
   23960:	108c8404 	addi	r2,r2,12816
   23964:	d8800215 	stw	r2,8(sp)
   23968:	00800044 	movi	r2,1
   2396c:	d8800315 	stw	r2,12(sp)
   23970:	00800084 	movi	r2,2
   23974:	dc400015 	stw	r17,0(sp)
   23978:	d8c00615 	stw	r3,24(sp)
   2397c:	dec00415 	stw	sp,16(sp)
   23980:	d8800515 	stw	r2,20(sp)
   23984:	80000226 	beq	r16,zero,23990 <_puts_r+0x5c>
   23988:	80800e17 	ldw	r2,56(r16)
   2398c:	10001426 	beq	r2,zero,239e0 <_puts_r+0xac>
   23990:	81400217 	ldw	r5,8(r16)
   23994:	2880030b 	ldhu	r2,12(r5)
   23998:	10c8000c 	andi	r3,r2,8192
   2399c:	1800061e 	bne	r3,zero,239b8 <_puts_r+0x84>
   239a0:	29001917 	ldw	r4,100(r5)
   239a4:	00f7ffc4 	movi	r3,-8193
   239a8:	10880014 	ori	r2,r2,8192
   239ac:	20c6703a 	and	r3,r4,r3
   239b0:	2880030d 	sth	r2,12(r5)
   239b4:	28c01915 	stw	r3,100(r5)
   239b8:	d9800404 	addi	r6,sp,16
   239bc:	8009883a 	mov	r4,r16
   239c0:	00285fc0 	call	285fc <__sfvwrite_r>
   239c4:	1000091e 	bne	r2,zero,239ec <_puts_r+0xb8>
   239c8:	00800284 	movi	r2,10
   239cc:	dfc00917 	ldw	ra,36(sp)
   239d0:	dc400817 	ldw	r17,32(sp)
   239d4:	dc000717 	ldw	r16,28(sp)
   239d8:	dec00a04 	addi	sp,sp,40
   239dc:	f800283a 	ret
   239e0:	8009883a 	mov	r4,r16
   239e4:	00281780 	call	28178 <__sinit>
   239e8:	003fe906 	br	23990 <_gp+0xfffe6900>
   239ec:	00bfffc4 	movi	r2,-1
   239f0:	003ff606 	br	239cc <_gp+0xfffe693c>

000239f4 <puts>:
   239f4:	008000f4 	movhi	r2,3
   239f8:	10943504 	addi	r2,r2,20692
   239fc:	200b883a 	mov	r5,r4
   23a00:	11000017 	ldw	r4,0(r2)
   23a04:	00239341 	jmpi	23934 <_puts_r>

00023a08 <_sbrk_r>:
   23a08:	defffd04 	addi	sp,sp,-12
   23a0c:	dc000015 	stw	r16,0(sp)
   23a10:	040000f4 	movhi	r16,3
   23a14:	dc400115 	stw	r17,4(sp)
   23a18:	841b4204 	addi	r16,r16,27912
   23a1c:	2023883a 	mov	r17,r4
   23a20:	2809883a 	mov	r4,r5
   23a24:	dfc00215 	stw	ra,8(sp)
   23a28:	80000015 	stw	zero,0(r16)
   23a2c:	00306d40 	call	306d4 <sbrk>
   23a30:	00ffffc4 	movi	r3,-1
   23a34:	10c00526 	beq	r2,r3,23a4c <_sbrk_r+0x44>
   23a38:	dfc00217 	ldw	ra,8(sp)
   23a3c:	dc400117 	ldw	r17,4(sp)
   23a40:	dc000017 	ldw	r16,0(sp)
   23a44:	dec00304 	addi	sp,sp,12
   23a48:	f800283a 	ret
   23a4c:	80c00017 	ldw	r3,0(r16)
   23a50:	183ff926 	beq	r3,zero,23a38 <_gp+0xfffe69a8>
   23a54:	88c00015 	stw	r3,0(r17)
   23a58:	003ff706 	br	23a38 <_gp+0xfffe69a8>

00023a5c <_init_signal_r>:
   23a5c:	2080b717 	ldw	r2,732(r4)
   23a60:	10000226 	beq	r2,zero,23a6c <_init_signal_r+0x10>
   23a64:	0005883a 	mov	r2,zero
   23a68:	f800283a 	ret
   23a6c:	defffe04 	addi	sp,sp,-8
   23a70:	01402004 	movi	r5,128
   23a74:	dc000015 	stw	r16,0(sp)
   23a78:	dfc00115 	stw	ra,4(sp)
   23a7c:	2021883a 	mov	r16,r4
   23a80:	0022f940 	call	22f94 <_malloc_r>
   23a84:	8080b715 	stw	r2,732(r16)
   23a88:	10000d26 	beq	r2,zero,23ac0 <_init_signal_r+0x64>
   23a8c:	0007883a 	mov	r3,zero
   23a90:	01002004 	movi	r4,128
   23a94:	00000106 	br	23a9c <_init_signal_r+0x40>
   23a98:	8080b717 	ldw	r2,732(r16)
   23a9c:	10c5883a 	add	r2,r2,r3
   23aa0:	10000015 	stw	zero,0(r2)
   23aa4:	18c00104 	addi	r3,r3,4
   23aa8:	193ffb1e 	bne	r3,r4,23a98 <_gp+0xfffe6a08>
   23aac:	0005883a 	mov	r2,zero
   23ab0:	dfc00117 	ldw	ra,4(sp)
   23ab4:	dc000017 	ldw	r16,0(sp)
   23ab8:	dec00204 	addi	sp,sp,8
   23abc:	f800283a 	ret
   23ac0:	00bfffc4 	movi	r2,-1
   23ac4:	003ffa06 	br	23ab0 <_gp+0xfffe6a20>

00023ac8 <_signal_r>:
   23ac8:	00c007c4 	movi	r3,31
   23acc:	19401536 	bltu	r3,r5,23b24 <_signal_r+0x5c>
   23ad0:	2080b717 	ldw	r2,732(r4)
   23ad4:	defffc04 	addi	sp,sp,-16
   23ad8:	dc800215 	stw	r18,8(sp)
   23adc:	dc400115 	stw	r17,4(sp)
   23ae0:	dc000015 	stw	r16,0(sp)
   23ae4:	dfc00315 	stw	ra,12(sp)
   23ae8:	3023883a 	mov	r17,r6
   23aec:	2021883a 	mov	r16,r4
   23af0:	2825883a 	mov	r18,r5
   23af4:	10000f26 	beq	r2,zero,23b34 <_signal_r+0x6c>
   23af8:	948b883a 	add	r5,r18,r18
   23afc:	294b883a 	add	r5,r5,r5
   23b00:	114b883a 	add	r5,r2,r5
   23b04:	28800017 	ldw	r2,0(r5)
   23b08:	2c400015 	stw	r17,0(r5)
   23b0c:	dfc00317 	ldw	ra,12(sp)
   23b10:	dc800217 	ldw	r18,8(sp)
   23b14:	dc400117 	ldw	r17,4(sp)
   23b18:	dc000017 	ldw	r16,0(sp)
   23b1c:	dec00404 	addi	sp,sp,16
   23b20:	f800283a 	ret
   23b24:	00c00584 	movi	r3,22
   23b28:	20c00015 	stw	r3,0(r4)
   23b2c:	00bfffc4 	movi	r2,-1
   23b30:	f800283a 	ret
   23b34:	0023a5c0 	call	23a5c <_init_signal_r>
   23b38:	1000021e 	bne	r2,zero,23b44 <_signal_r+0x7c>
   23b3c:	8080b717 	ldw	r2,732(r16)
   23b40:	003fed06 	br	23af8 <_gp+0xfffe6a68>
   23b44:	00bfffc4 	movi	r2,-1
   23b48:	003ff006 	br	23b0c <_gp+0xfffe6a7c>

00023b4c <_raise_r>:
   23b4c:	008007c4 	movi	r2,31
   23b50:	11402936 	bltu	r2,r5,23bf8 <_raise_r+0xac>
   23b54:	20c0b717 	ldw	r3,732(r4)
   23b58:	defffd04 	addi	sp,sp,-12
   23b5c:	dc400115 	stw	r17,4(sp)
   23b60:	dc000015 	stw	r16,0(sp)
   23b64:	dfc00215 	stw	ra,8(sp)
   23b68:	2021883a 	mov	r16,r4
   23b6c:	2823883a 	mov	r17,r5
   23b70:	18001726 	beq	r3,zero,23bd0 <_raise_r+0x84>
   23b74:	2945883a 	add	r2,r5,r5
   23b78:	1085883a 	add	r2,r2,r2
   23b7c:	1887883a 	add	r3,r3,r2
   23b80:	19800017 	ldw	r6,0(r3)
   23b84:	30001226 	beq	r6,zero,23bd0 <_raise_r+0x84>
   23b88:	00800044 	movi	r2,1
   23b8c:	30800e26 	beq	r6,r2,23bc8 <_raise_r+0x7c>
   23b90:	013fffc4 	movi	r4,-1
   23b94:	31000926 	beq	r6,r4,23bbc <_raise_r+0x70>
   23b98:	18000015 	stw	zero,0(r3)
   23b9c:	2809883a 	mov	r4,r5
   23ba0:	303ee83a 	callr	r6
   23ba4:	0005883a 	mov	r2,zero
   23ba8:	dfc00217 	ldw	ra,8(sp)
   23bac:	dc400117 	ldw	r17,4(sp)
   23bb0:	dc000017 	ldw	r16,0(sp)
   23bb4:	dec00304 	addi	sp,sp,12
   23bb8:	f800283a 	ret
   23bbc:	00c00584 	movi	r3,22
   23bc0:	80c00015 	stw	r3,0(r16)
   23bc4:	003ff806 	br	23ba8 <_gp+0xfffe6b18>
   23bc8:	0005883a 	mov	r2,zero
   23bcc:	003ff606 	br	23ba8 <_gp+0xfffe6b18>
   23bd0:	8009883a 	mov	r4,r16
   23bd4:	0023d5c0 	call	23d5c <_getpid_r>
   23bd8:	880d883a 	mov	r6,r17
   23bdc:	100b883a 	mov	r5,r2
   23be0:	8009883a 	mov	r4,r16
   23be4:	dfc00217 	ldw	ra,8(sp)
   23be8:	dc400117 	ldw	r17,4(sp)
   23bec:	dc000017 	ldw	r16,0(sp)
   23bf0:	dec00304 	addi	sp,sp,12
   23bf4:	0023d001 	jmpi	23d00 <_kill_r>
   23bf8:	00800584 	movi	r2,22
   23bfc:	20800015 	stw	r2,0(r4)
   23c00:	00bfffc4 	movi	r2,-1
   23c04:	f800283a 	ret

00023c08 <__sigtramp_r>:
   23c08:	008007c4 	movi	r2,31
   23c0c:	11402436 	bltu	r2,r5,23ca0 <__sigtramp_r+0x98>
   23c10:	20c0b717 	ldw	r3,732(r4)
   23c14:	defffd04 	addi	sp,sp,-12
   23c18:	dc400115 	stw	r17,4(sp)
   23c1c:	dc000015 	stw	r16,0(sp)
   23c20:	dfc00215 	stw	ra,8(sp)
   23c24:	2021883a 	mov	r16,r4
   23c28:	2823883a 	mov	r17,r5
   23c2c:	18001826 	beq	r3,zero,23c90 <__sigtramp_r+0x88>
   23c30:	8c45883a 	add	r2,r17,r17
   23c34:	1085883a 	add	r2,r2,r2
   23c38:	1885883a 	add	r2,r3,r2
   23c3c:	10c00017 	ldw	r3,0(r2)
   23c40:	18001126 	beq	r3,zero,23c88 <__sigtramp_r+0x80>
   23c44:	013fffc4 	movi	r4,-1
   23c48:	19000d26 	beq	r3,r4,23c80 <__sigtramp_r+0x78>
   23c4c:	01000044 	movi	r4,1
   23c50:	19000926 	beq	r3,r4,23c78 <__sigtramp_r+0x70>
   23c54:	10000015 	stw	zero,0(r2)
   23c58:	8809883a 	mov	r4,r17
   23c5c:	183ee83a 	callr	r3
   23c60:	0005883a 	mov	r2,zero
   23c64:	dfc00217 	ldw	ra,8(sp)
   23c68:	dc400117 	ldw	r17,4(sp)
   23c6c:	dc000017 	ldw	r16,0(sp)
   23c70:	dec00304 	addi	sp,sp,12
   23c74:	f800283a 	ret
   23c78:	008000c4 	movi	r2,3
   23c7c:	003ff906 	br	23c64 <_gp+0xfffe6bd4>
   23c80:	00800084 	movi	r2,2
   23c84:	003ff706 	br	23c64 <_gp+0xfffe6bd4>
   23c88:	00800044 	movi	r2,1
   23c8c:	003ff506 	br	23c64 <_gp+0xfffe6bd4>
   23c90:	0023a5c0 	call	23a5c <_init_signal_r>
   23c94:	1000041e 	bne	r2,zero,23ca8 <__sigtramp_r+0xa0>
   23c98:	80c0b717 	ldw	r3,732(r16)
   23c9c:	003fe406 	br	23c30 <_gp+0xfffe6ba0>
   23ca0:	00bfffc4 	movi	r2,-1
   23ca4:	f800283a 	ret
   23ca8:	00bfffc4 	movi	r2,-1
   23cac:	003fed06 	br	23c64 <_gp+0xfffe6bd4>

00023cb0 <raise>:
   23cb0:	008000f4 	movhi	r2,3
   23cb4:	10943504 	addi	r2,r2,20692
   23cb8:	200b883a 	mov	r5,r4
   23cbc:	11000017 	ldw	r4,0(r2)
   23cc0:	0023b4c1 	jmpi	23b4c <_raise_r>

00023cc4 <signal>:
   23cc4:	008000f4 	movhi	r2,3
   23cc8:	10943504 	addi	r2,r2,20692
   23ccc:	280d883a 	mov	r6,r5
   23cd0:	200b883a 	mov	r5,r4
   23cd4:	11000017 	ldw	r4,0(r2)
   23cd8:	0023ac81 	jmpi	23ac8 <_signal_r>

00023cdc <_init_signal>:
   23cdc:	008000f4 	movhi	r2,3
   23ce0:	10943504 	addi	r2,r2,20692
   23ce4:	11000017 	ldw	r4,0(r2)
   23ce8:	0023a5c1 	jmpi	23a5c <_init_signal_r>

00023cec <__sigtramp>:
   23cec:	008000f4 	movhi	r2,3
   23cf0:	10943504 	addi	r2,r2,20692
   23cf4:	200b883a 	mov	r5,r4
   23cf8:	11000017 	ldw	r4,0(r2)
   23cfc:	0023c081 	jmpi	23c08 <__sigtramp_r>

00023d00 <_kill_r>:
   23d00:	defffd04 	addi	sp,sp,-12
   23d04:	2805883a 	mov	r2,r5
   23d08:	dc000015 	stw	r16,0(sp)
   23d0c:	040000f4 	movhi	r16,3
   23d10:	dc400115 	stw	r17,4(sp)
   23d14:	841b4204 	addi	r16,r16,27912
   23d18:	2023883a 	mov	r17,r4
   23d1c:	300b883a 	mov	r5,r6
   23d20:	1009883a 	mov	r4,r2
   23d24:	dfc00215 	stw	ra,8(sp)
   23d28:	80000015 	stw	zero,0(r16)
   23d2c:	002fef40 	call	2fef4 <kill>
   23d30:	00ffffc4 	movi	r3,-1
   23d34:	10c00526 	beq	r2,r3,23d4c <_kill_r+0x4c>
   23d38:	dfc00217 	ldw	ra,8(sp)
   23d3c:	dc400117 	ldw	r17,4(sp)
   23d40:	dc000017 	ldw	r16,0(sp)
   23d44:	dec00304 	addi	sp,sp,12
   23d48:	f800283a 	ret
   23d4c:	80c00017 	ldw	r3,0(r16)
   23d50:	183ff926 	beq	r3,zero,23d38 <_gp+0xfffe6ca8>
   23d54:	88c00015 	stw	r3,0(r17)
   23d58:	003ff706 	br	23d38 <_gp+0xfffe6ca8>

00023d5c <_getpid_r>:
   23d5c:	002fdb81 	jmpi	2fdb8 <getpid>

00023d60 <strcmp>:
   23d60:	2144b03a 	or	r2,r4,r5
   23d64:	108000cc 	andi	r2,r2,3
   23d68:	1000171e 	bne	r2,zero,23dc8 <strcmp+0x68>
   23d6c:	20800017 	ldw	r2,0(r4)
   23d70:	28c00017 	ldw	r3,0(r5)
   23d74:	10c0141e 	bne	r2,r3,23dc8 <strcmp+0x68>
   23d78:	027fbff4 	movhi	r9,65279
   23d7c:	4a7fbfc4 	addi	r9,r9,-257
   23d80:	0086303a 	nor	r3,zero,r2
   23d84:	02202074 	movhi	r8,32897
   23d88:	1245883a 	add	r2,r2,r9
   23d8c:	42202004 	addi	r8,r8,-32640
   23d90:	10c4703a 	and	r2,r2,r3
   23d94:	1204703a 	and	r2,r2,r8
   23d98:	10000226 	beq	r2,zero,23da4 <strcmp+0x44>
   23d9c:	00002306 	br	23e2c <strcmp+0xcc>
   23da0:	1000221e 	bne	r2,zero,23e2c <strcmp+0xcc>
   23da4:	21000104 	addi	r4,r4,4
   23da8:	20c00017 	ldw	r3,0(r4)
   23dac:	29400104 	addi	r5,r5,4
   23db0:	29800017 	ldw	r6,0(r5)
   23db4:	1a4f883a 	add	r7,r3,r9
   23db8:	00c4303a 	nor	r2,zero,r3
   23dbc:	3884703a 	and	r2,r7,r2
   23dc0:	1204703a 	and	r2,r2,r8
   23dc4:	19bff626 	beq	r3,r6,23da0 <_gp+0xfffe6d10>
   23dc8:	20800003 	ldbu	r2,0(r4)
   23dcc:	10c03fcc 	andi	r3,r2,255
   23dd0:	18c0201c 	xori	r3,r3,128
   23dd4:	18ffe004 	addi	r3,r3,-128
   23dd8:	18000c26 	beq	r3,zero,23e0c <strcmp+0xac>
   23ddc:	29800007 	ldb	r6,0(r5)
   23de0:	19800326 	beq	r3,r6,23df0 <strcmp+0x90>
   23de4:	00001306 	br	23e34 <strcmp+0xd4>
   23de8:	29800007 	ldb	r6,0(r5)
   23dec:	11800b1e 	bne	r2,r6,23e1c <strcmp+0xbc>
   23df0:	21000044 	addi	r4,r4,1
   23df4:	20c00003 	ldbu	r3,0(r4)
   23df8:	29400044 	addi	r5,r5,1
   23dfc:	18803fcc 	andi	r2,r3,255
   23e00:	1080201c 	xori	r2,r2,128
   23e04:	10bfe004 	addi	r2,r2,-128
   23e08:	103ff71e 	bne	r2,zero,23de8 <_gp+0xfffe6d58>
   23e0c:	0007883a 	mov	r3,zero
   23e10:	28800003 	ldbu	r2,0(r5)
   23e14:	1885c83a 	sub	r2,r3,r2
   23e18:	f800283a 	ret
   23e1c:	28800003 	ldbu	r2,0(r5)
   23e20:	18c03fcc 	andi	r3,r3,255
   23e24:	1885c83a 	sub	r2,r3,r2
   23e28:	f800283a 	ret
   23e2c:	0005883a 	mov	r2,zero
   23e30:	f800283a 	ret
   23e34:	10c03fcc 	andi	r3,r2,255
   23e38:	003ff506 	br	23e10 <_gp+0xfffe6d80>

00023e3c <strlen>:
   23e3c:	208000cc 	andi	r2,r4,3
   23e40:	10002026 	beq	r2,zero,23ec4 <strlen+0x88>
   23e44:	20800007 	ldb	r2,0(r4)
   23e48:	10002026 	beq	r2,zero,23ecc <strlen+0x90>
   23e4c:	2005883a 	mov	r2,r4
   23e50:	00000206 	br	23e5c <strlen+0x20>
   23e54:	10c00007 	ldb	r3,0(r2)
   23e58:	18001826 	beq	r3,zero,23ebc <strlen+0x80>
   23e5c:	10800044 	addi	r2,r2,1
   23e60:	10c000cc 	andi	r3,r2,3
   23e64:	183ffb1e 	bne	r3,zero,23e54 <_gp+0xfffe6dc4>
   23e68:	10c00017 	ldw	r3,0(r2)
   23e6c:	01ffbff4 	movhi	r7,65279
   23e70:	39ffbfc4 	addi	r7,r7,-257
   23e74:	00ca303a 	nor	r5,zero,r3
   23e78:	01a02074 	movhi	r6,32897
   23e7c:	19c7883a 	add	r3,r3,r7
   23e80:	31a02004 	addi	r6,r6,-32640
   23e84:	1946703a 	and	r3,r3,r5
   23e88:	1986703a 	and	r3,r3,r6
   23e8c:	1800091e 	bne	r3,zero,23eb4 <strlen+0x78>
   23e90:	10800104 	addi	r2,r2,4
   23e94:	10c00017 	ldw	r3,0(r2)
   23e98:	19cb883a 	add	r5,r3,r7
   23e9c:	00c6303a 	nor	r3,zero,r3
   23ea0:	28c6703a 	and	r3,r5,r3
   23ea4:	1986703a 	and	r3,r3,r6
   23ea8:	183ff926 	beq	r3,zero,23e90 <_gp+0xfffe6e00>
   23eac:	00000106 	br	23eb4 <strlen+0x78>
   23eb0:	10800044 	addi	r2,r2,1
   23eb4:	10c00007 	ldb	r3,0(r2)
   23eb8:	183ffd1e 	bne	r3,zero,23eb0 <_gp+0xfffe6e20>
   23ebc:	1105c83a 	sub	r2,r2,r4
   23ec0:	f800283a 	ret
   23ec4:	2005883a 	mov	r2,r4
   23ec8:	003fe706 	br	23e68 <_gp+0xfffe6dd8>
   23ecc:	0005883a 	mov	r2,zero
   23ed0:	f800283a 	ret

00023ed4 <___vfprintf_internal_r>:
   23ed4:	deffb804 	addi	sp,sp,-288
   23ed8:	dfc04715 	stw	ra,284(sp)
   23edc:	ddc04515 	stw	r23,276(sp)
   23ee0:	dd404315 	stw	r21,268(sp)
   23ee4:	d9002c15 	stw	r4,176(sp)
   23ee8:	282f883a 	mov	r23,r5
   23eec:	302b883a 	mov	r21,r6
   23ef0:	d9c02d15 	stw	r7,180(sp)
   23ef4:	df004615 	stw	fp,280(sp)
   23ef8:	dd804415 	stw	r22,272(sp)
   23efc:	dd004215 	stw	r20,264(sp)
   23f00:	dcc04115 	stw	r19,260(sp)
   23f04:	dc804015 	stw	r18,256(sp)
   23f08:	dc403f15 	stw	r17,252(sp)
   23f0c:	dc003e15 	stw	r16,248(sp)
   23f10:	0028cec0 	call	28cec <_localeconv_r>
   23f14:	10800017 	ldw	r2,0(r2)
   23f18:	1009883a 	mov	r4,r2
   23f1c:	d8803415 	stw	r2,208(sp)
   23f20:	0023e3c0 	call	23e3c <strlen>
   23f24:	d8803715 	stw	r2,220(sp)
   23f28:	d8802c17 	ldw	r2,176(sp)
   23f2c:	10000226 	beq	r2,zero,23f38 <___vfprintf_internal_r+0x64>
   23f30:	10800e17 	ldw	r2,56(r2)
   23f34:	1000f926 	beq	r2,zero,2431c <___vfprintf_internal_r+0x448>
   23f38:	b880030b 	ldhu	r2,12(r23)
   23f3c:	10c8000c 	andi	r3,r2,8192
   23f40:	1800061e 	bne	r3,zero,23f5c <___vfprintf_internal_r+0x88>
   23f44:	b9001917 	ldw	r4,100(r23)
   23f48:	00f7ffc4 	movi	r3,-8193
   23f4c:	10880014 	ori	r2,r2,8192
   23f50:	20c6703a 	and	r3,r4,r3
   23f54:	b880030d 	sth	r2,12(r23)
   23f58:	b8c01915 	stw	r3,100(r23)
   23f5c:	10c0020c 	andi	r3,r2,8
   23f60:	1800c126 	beq	r3,zero,24268 <___vfprintf_internal_r+0x394>
   23f64:	b8c00417 	ldw	r3,16(r23)
   23f68:	1800bf26 	beq	r3,zero,24268 <___vfprintf_internal_r+0x394>
   23f6c:	1080068c 	andi	r2,r2,26
   23f70:	00c00284 	movi	r3,10
   23f74:	10c0c426 	beq	r2,r3,24288 <___vfprintf_internal_r+0x3b4>
   23f78:	d8c00404 	addi	r3,sp,16
   23f7c:	050000f4 	movhi	r20,3
   23f80:	d9001e04 	addi	r4,sp,120
   23f84:	a50c9584 	addi	r20,r20,12886
   23f88:	d8c01e15 	stw	r3,120(sp)
   23f8c:	d8002015 	stw	zero,128(sp)
   23f90:	d8001f15 	stw	zero,124(sp)
   23f94:	d8003315 	stw	zero,204(sp)
   23f98:	d8003615 	stw	zero,216(sp)
   23f9c:	d8003815 	stw	zero,224(sp)
   23fa0:	1811883a 	mov	r8,r3
   23fa4:	d8003915 	stw	zero,228(sp)
   23fa8:	d8003a15 	stw	zero,232(sp)
   23fac:	d8002f15 	stw	zero,188(sp)
   23fb0:	d9002815 	stw	r4,160(sp)
   23fb4:	a8800007 	ldb	r2,0(r21)
   23fb8:	10027b26 	beq	r2,zero,249a8 <___vfprintf_internal_r+0xad4>
   23fbc:	00c00944 	movi	r3,37
   23fc0:	a821883a 	mov	r16,r21
   23fc4:	10c0021e 	bne	r2,r3,23fd0 <___vfprintf_internal_r+0xfc>
   23fc8:	00001406 	br	2401c <___vfprintf_internal_r+0x148>
   23fcc:	10c00326 	beq	r2,r3,23fdc <___vfprintf_internal_r+0x108>
   23fd0:	84000044 	addi	r16,r16,1
   23fd4:	80800007 	ldb	r2,0(r16)
   23fd8:	103ffc1e 	bne	r2,zero,23fcc <_gp+0xfffe6f3c>
   23fdc:	8563c83a 	sub	r17,r16,r21
   23fe0:	88000e26 	beq	r17,zero,2401c <___vfprintf_internal_r+0x148>
   23fe4:	d8c02017 	ldw	r3,128(sp)
   23fe8:	d8801f17 	ldw	r2,124(sp)
   23fec:	45400015 	stw	r21,0(r8)
   23ff0:	1c47883a 	add	r3,r3,r17
   23ff4:	10800044 	addi	r2,r2,1
   23ff8:	d8c02015 	stw	r3,128(sp)
   23ffc:	44400115 	stw	r17,4(r8)
   24000:	d8801f15 	stw	r2,124(sp)
   24004:	00c001c4 	movi	r3,7
   24008:	1880a716 	blt	r3,r2,242a8 <___vfprintf_internal_r+0x3d4>
   2400c:	42000204 	addi	r8,r8,8
   24010:	d9402f17 	ldw	r5,188(sp)
   24014:	2c4b883a 	add	r5,r5,r17
   24018:	d9402f15 	stw	r5,188(sp)
   2401c:	80800007 	ldb	r2,0(r16)
   24020:	1000a826 	beq	r2,zero,242c4 <___vfprintf_internal_r+0x3f0>
   24024:	84400047 	ldb	r17,1(r16)
   24028:	00bfffc4 	movi	r2,-1
   2402c:	85400044 	addi	r21,r16,1
   24030:	d8002785 	stb	zero,158(sp)
   24034:	0007883a 	mov	r3,zero
   24038:	000f883a 	mov	r7,zero
   2403c:	d8802915 	stw	r2,164(sp)
   24040:	d8003115 	stw	zero,196(sp)
   24044:	0025883a 	mov	r18,zero
   24048:	01401604 	movi	r5,88
   2404c:	01800244 	movi	r6,9
   24050:	02800a84 	movi	r10,42
   24054:	02401b04 	movi	r9,108
   24058:	ad400044 	addi	r21,r21,1
   2405c:	88bff804 	addi	r2,r17,-32
   24060:	28830436 	bltu	r5,r2,24c74 <___vfprintf_internal_r+0xda0>
   24064:	100490ba 	slli	r2,r2,2
   24068:	010000b4 	movhi	r4,2
   2406c:	21101f04 	addi	r4,r4,16508
   24070:	1105883a 	add	r2,r2,r4
   24074:	10800017 	ldw	r2,0(r2)
   24078:	1000683a 	jmp	r2
   2407c:	00024b94 	movui	zero,2350
   24080:	00024c74 	movhi	zero,2353
   24084:	00024c74 	movhi	zero,2353
   24088:	00024bb4 	movhi	zero,2350
   2408c:	00024c74 	movhi	zero,2353
   24090:	00024c74 	movhi	zero,2353
   24094:	00024c74 	movhi	zero,2353
   24098:	00024c74 	movhi	zero,2353
   2409c:	00024c74 	movhi	zero,2353
   240a0:	00024c74 	movhi	zero,2353
   240a4:	00024328 	cmpgeui	zero,zero,2316
   240a8:	00024ad0 	cmplti	zero,zero,2347
   240ac:	00024c74 	movhi	zero,2353
   240b0:	000241f0 	cmpltui	zero,zero,2311
   240b4:	00024350 	cmplti	zero,zero,2317
   240b8:	00024c74 	movhi	zero,2353
   240bc:	00024390 	cmplti	zero,zero,2318
   240c0:	0002439c 	xori	zero,zero,2318
   240c4:	0002439c 	xori	zero,zero,2318
   240c8:	0002439c 	xori	zero,zero,2318
   240cc:	0002439c 	xori	zero,zero,2318
   240d0:	0002439c 	xori	zero,zero,2318
   240d4:	0002439c 	xori	zero,zero,2318
   240d8:	0002439c 	xori	zero,zero,2318
   240dc:	0002439c 	xori	zero,zero,2318
   240e0:	0002439c 	xori	zero,zero,2318
   240e4:	00024c74 	movhi	zero,2353
   240e8:	00024c74 	movhi	zero,2353
   240ec:	00024c74 	movhi	zero,2353
   240f0:	00024c74 	movhi	zero,2353
   240f4:	00024c74 	movhi	zero,2353
   240f8:	00024c74 	movhi	zero,2353
   240fc:	00024c74 	movhi	zero,2353
   24100:	00024c74 	movhi	zero,2353
   24104:	00024c74 	movhi	zero,2353
   24108:	00024c74 	movhi	zero,2353
   2410c:	000243d0 	cmplti	zero,zero,2319
   24110:	0002448c 	andi	zero,zero,2322
   24114:	00024c74 	movhi	zero,2353
   24118:	0002448c 	andi	zero,zero,2322
   2411c:	00024c74 	movhi	zero,2353
   24120:	00024c74 	movhi	zero,2353
   24124:	00024c74 	movhi	zero,2353
   24128:	00024c74 	movhi	zero,2353
   2412c:	0002452c 	andhi	zero,zero,2324
   24130:	00024c74 	movhi	zero,2353
   24134:	00024c74 	movhi	zero,2353
   24138:	00024538 	rdprs	zero,zero,2324
   2413c:	00024c74 	movhi	zero,2353
   24140:	00024c74 	movhi	zero,2353
   24144:	00024c74 	movhi	zero,2353
   24148:	00024c74 	movhi	zero,2353
   2414c:	00024c74 	movhi	zero,2353
   24150:	000249b0 	cmpltui	zero,zero,2342
   24154:	00024c74 	movhi	zero,2353
   24158:	00024c74 	movhi	zero,2353
   2415c:	00024a10 	cmplti	zero,zero,2344
   24160:	00024c74 	movhi	zero,2353
   24164:	00024c74 	movhi	zero,2353
   24168:	00024c74 	movhi	zero,2353
   2416c:	00024c74 	movhi	zero,2353
   24170:	00024c74 	movhi	zero,2353
   24174:	00024c74 	movhi	zero,2353
   24178:	00024c74 	movhi	zero,2353
   2417c:	00024c74 	movhi	zero,2353
   24180:	00024c74 	movhi	zero,2353
   24184:	00024c74 	movhi	zero,2353
   24188:	00024c20 	cmpeqi	zero,zero,2352
   2418c:	00024bc0 	call	24bc <__reset-0x1db44>
   24190:	0002448c 	andi	zero,zero,2322
   24194:	0002448c 	andi	zero,zero,2322
   24198:	0002448c 	andi	zero,zero,2322
   2419c:	00024bd0 	cmplti	zero,zero,2351
   241a0:	00024bc0 	call	24bc <__reset-0x1db44>
   241a4:	00024c74 	movhi	zero,2353
   241a8:	00024c74 	movhi	zero,2353
   241ac:	00024bdc 	xori	zero,zero,2351
   241b0:	00024c74 	movhi	zero,2353
   241b4:	00024bec 	andhi	zero,zero,2351
   241b8:	00024ac0 	call	24ac <__reset-0x1db54>
   241bc:	000241fc 	xorhi	zero,zero,2311
   241c0:	00024ae0 	cmpeqi	zero,zero,2347
   241c4:	00024c74 	movhi	zero,2353
   241c8:	00024aec 	andhi	zero,zero,2347
   241cc:	00024c74 	movhi	zero,2353
   241d0:	00024b48 	cmpgei	zero,zero,2349
   241d4:	00024c74 	movhi	zero,2353
   241d8:	00024c74 	movhi	zero,2353
   241dc:	00024b58 	cmpnei	zero,zero,2349
   241e0:	d9003117 	ldw	r4,196(sp)
   241e4:	d8802d15 	stw	r2,180(sp)
   241e8:	0109c83a 	sub	r4,zero,r4
   241ec:	d9003115 	stw	r4,196(sp)
   241f0:	94800114 	ori	r18,r18,4
   241f4:	ac400007 	ldb	r17,0(r21)
   241f8:	003f9706 	br	24058 <_gp+0xfffe6fc8>
   241fc:	00800c04 	movi	r2,48
   24200:	d9002d17 	ldw	r4,180(sp)
   24204:	d9402917 	ldw	r5,164(sp)
   24208:	d8802705 	stb	r2,156(sp)
   2420c:	00801e04 	movi	r2,120
   24210:	d8802745 	stb	r2,157(sp)
   24214:	d8002785 	stb	zero,158(sp)
   24218:	20c00104 	addi	r3,r4,4
   2421c:	24c00017 	ldw	r19,0(r4)
   24220:	002d883a 	mov	r22,zero
   24224:	90800094 	ori	r2,r18,2
   24228:	28029a16 	blt	r5,zero,24c94 <___vfprintf_internal_r+0xdc0>
   2422c:	00bfdfc4 	movi	r2,-129
   24230:	90a4703a 	and	r18,r18,r2
   24234:	d8c02d15 	stw	r3,180(sp)
   24238:	94800094 	ori	r18,r18,2
   2423c:	9802871e 	bne	r19,zero,24c5c <___vfprintf_internal_r+0xd88>
   24240:	008000f4 	movhi	r2,3
   24244:	108c8e04 	addi	r2,r2,12856
   24248:	d8803915 	stw	r2,228(sp)
   2424c:	04401e04 	movi	r17,120
   24250:	d8802917 	ldw	r2,164(sp)
   24254:	0039883a 	mov	fp,zero
   24258:	1001e926 	beq	r2,zero,24a00 <___vfprintf_internal_r+0xb2c>
   2425c:	0027883a 	mov	r19,zero
   24260:	002d883a 	mov	r22,zero
   24264:	00020506 	br	24a7c <___vfprintf_internal_r+0xba8>
   24268:	d9002c17 	ldw	r4,176(sp)
   2426c:	b80b883a 	mov	r5,r23
   24270:	00261a40 	call	261a4 <__swsetup_r>
   24274:	1005ac1e 	bne	r2,zero,25928 <___vfprintf_internal_r+0x1a54>
   24278:	b880030b 	ldhu	r2,12(r23)
   2427c:	00c00284 	movi	r3,10
   24280:	1080068c 	andi	r2,r2,26
   24284:	10ff3c1e 	bne	r2,r3,23f78 <_gp+0xfffe6ee8>
   24288:	b880038f 	ldh	r2,14(r23)
   2428c:	103f3a16 	blt	r2,zero,23f78 <_gp+0xfffe6ee8>
   24290:	d9c02d17 	ldw	r7,180(sp)
   24294:	d9002c17 	ldw	r4,176(sp)
   24298:	a80d883a 	mov	r6,r21
   2429c:	b80b883a 	mov	r5,r23
   242a0:	00260e80 	call	260e8 <__sbprintf>
   242a4:	00001106 	br	242ec <___vfprintf_internal_r+0x418>
   242a8:	d9002c17 	ldw	r4,176(sp)
   242ac:	d9801e04 	addi	r6,sp,120
   242b0:	b80b883a 	mov	r5,r23
   242b4:	002aa6c0 	call	2aa6c <__sprint_r>
   242b8:	1000081e 	bne	r2,zero,242dc <___vfprintf_internal_r+0x408>
   242bc:	da000404 	addi	r8,sp,16
   242c0:	003f5306 	br	24010 <_gp+0xfffe6f80>
   242c4:	d8802017 	ldw	r2,128(sp)
   242c8:	10000426 	beq	r2,zero,242dc <___vfprintf_internal_r+0x408>
   242cc:	d9002c17 	ldw	r4,176(sp)
   242d0:	d9801e04 	addi	r6,sp,120
   242d4:	b80b883a 	mov	r5,r23
   242d8:	002aa6c0 	call	2aa6c <__sprint_r>
   242dc:	b880030b 	ldhu	r2,12(r23)
   242e0:	1080100c 	andi	r2,r2,64
   242e4:	1005901e 	bne	r2,zero,25928 <___vfprintf_internal_r+0x1a54>
   242e8:	d8802f17 	ldw	r2,188(sp)
   242ec:	dfc04717 	ldw	ra,284(sp)
   242f0:	df004617 	ldw	fp,280(sp)
   242f4:	ddc04517 	ldw	r23,276(sp)
   242f8:	dd804417 	ldw	r22,272(sp)
   242fc:	dd404317 	ldw	r21,268(sp)
   24300:	dd004217 	ldw	r20,264(sp)
   24304:	dcc04117 	ldw	r19,260(sp)
   24308:	dc804017 	ldw	r18,256(sp)
   2430c:	dc403f17 	ldw	r17,252(sp)
   24310:	dc003e17 	ldw	r16,248(sp)
   24314:	dec04804 	addi	sp,sp,288
   24318:	f800283a 	ret
   2431c:	d9002c17 	ldw	r4,176(sp)
   24320:	00281780 	call	28178 <__sinit>
   24324:	003f0406 	br	23f38 <_gp+0xfffe6ea8>
   24328:	d8802d17 	ldw	r2,180(sp)
   2432c:	d9002d17 	ldw	r4,180(sp)
   24330:	10800017 	ldw	r2,0(r2)
   24334:	d8803115 	stw	r2,196(sp)
   24338:	20800104 	addi	r2,r4,4
   2433c:	d9003117 	ldw	r4,196(sp)
   24340:	203fa716 	blt	r4,zero,241e0 <_gp+0xfffe7150>
   24344:	d8802d15 	stw	r2,180(sp)
   24348:	ac400007 	ldb	r17,0(r21)
   2434c:	003f4206 	br	24058 <_gp+0xfffe6fc8>
   24350:	ac400007 	ldb	r17,0(r21)
   24354:	aac00044 	addi	r11,r21,1
   24358:	8a872826 	beq	r17,r10,25ffc <___vfprintf_internal_r+0x2128>
   2435c:	88bff404 	addi	r2,r17,-48
   24360:	0009883a 	mov	r4,zero
   24364:	30867d36 	bltu	r6,r2,25d5c <___vfprintf_internal_r+0x1e88>
   24368:	5c400007 	ldb	r17,0(r11)
   2436c:	210002a4 	muli	r4,r4,10
   24370:	5d400044 	addi	r21,r11,1
   24374:	a817883a 	mov	r11,r21
   24378:	2089883a 	add	r4,r4,r2
   2437c:	88bff404 	addi	r2,r17,-48
   24380:	30bff92e 	bgeu	r6,r2,24368 <_gp+0xfffe72d8>
   24384:	2005c916 	blt	r4,zero,25aac <___vfprintf_internal_r+0x1bd8>
   24388:	d9002915 	stw	r4,164(sp)
   2438c:	003f3306 	br	2405c <_gp+0xfffe6fcc>
   24390:	94802014 	ori	r18,r18,128
   24394:	ac400007 	ldb	r17,0(r21)
   24398:	003f2f06 	br	24058 <_gp+0xfffe6fc8>
   2439c:	a809883a 	mov	r4,r21
   243a0:	d8003115 	stw	zero,196(sp)
   243a4:	88bff404 	addi	r2,r17,-48
   243a8:	0017883a 	mov	r11,zero
   243ac:	24400007 	ldb	r17,0(r4)
   243b0:	5ac002a4 	muli	r11,r11,10
   243b4:	ad400044 	addi	r21,r21,1
   243b8:	a809883a 	mov	r4,r21
   243bc:	12d7883a 	add	r11,r2,r11
   243c0:	88bff404 	addi	r2,r17,-48
   243c4:	30bff92e 	bgeu	r6,r2,243ac <_gp+0xfffe731c>
   243c8:	dac03115 	stw	r11,196(sp)
   243cc:	003f2306 	br	2405c <_gp+0xfffe6fcc>
   243d0:	18c03fcc 	andi	r3,r3,255
   243d4:	18072b1e 	bne	r3,zero,26084 <___vfprintf_internal_r+0x21b0>
   243d8:	94800414 	ori	r18,r18,16
   243dc:	9080080c 	andi	r2,r18,32
   243e0:	10037b26 	beq	r2,zero,251d0 <___vfprintf_internal_r+0x12fc>
   243e4:	d9402d17 	ldw	r5,180(sp)
   243e8:	28800117 	ldw	r2,4(r5)
   243ec:	2cc00017 	ldw	r19,0(r5)
   243f0:	29400204 	addi	r5,r5,8
   243f4:	d9402d15 	stw	r5,180(sp)
   243f8:	102d883a 	mov	r22,r2
   243fc:	10044b16 	blt	r2,zero,2552c <___vfprintf_internal_r+0x1658>
   24400:	d9402917 	ldw	r5,164(sp)
   24404:	df002783 	ldbu	fp,158(sp)
   24408:	2803bc16 	blt	r5,zero,252fc <___vfprintf_internal_r+0x1428>
   2440c:	00ffdfc4 	movi	r3,-129
   24410:	9d84b03a 	or	r2,r19,r22
   24414:	90e4703a 	and	r18,r18,r3
   24418:	10017726 	beq	r2,zero,249f8 <___vfprintf_internal_r+0xb24>
   2441c:	b0038326 	beq	r22,zero,2522c <___vfprintf_internal_r+0x1358>
   24420:	dc402a15 	stw	r17,168(sp)
   24424:	dc001e04 	addi	r16,sp,120
   24428:	b023883a 	mov	r17,r22
   2442c:	402d883a 	mov	r22,r8
   24430:	9809883a 	mov	r4,r19
   24434:	880b883a 	mov	r5,r17
   24438:	01800284 	movi	r6,10
   2443c:	000f883a 	mov	r7,zero
   24440:	002ce640 	call	2ce64 <__umoddi3>
   24444:	10800c04 	addi	r2,r2,48
   24448:	843fffc4 	addi	r16,r16,-1
   2444c:	9809883a 	mov	r4,r19
   24450:	880b883a 	mov	r5,r17
   24454:	80800005 	stb	r2,0(r16)
   24458:	01800284 	movi	r6,10
   2445c:	000f883a 	mov	r7,zero
   24460:	002c8ec0 	call	2c8ec <__udivdi3>
   24464:	1027883a 	mov	r19,r2
   24468:	10c4b03a 	or	r2,r2,r3
   2446c:	1823883a 	mov	r17,r3
   24470:	103fef1e 	bne	r2,zero,24430 <_gp+0xfffe73a0>
   24474:	d8c02817 	ldw	r3,160(sp)
   24478:	dc402a17 	ldw	r17,168(sp)
   2447c:	b011883a 	mov	r8,r22
   24480:	1c07c83a 	sub	r3,r3,r16
   24484:	d8c02e15 	stw	r3,184(sp)
   24488:	00005906 	br	245f0 <___vfprintf_internal_r+0x71c>
   2448c:	18c03fcc 	andi	r3,r3,255
   24490:	1806fa1e 	bne	r3,zero,2607c <___vfprintf_internal_r+0x21a8>
   24494:	9080020c 	andi	r2,r18,8
   24498:	10048a26 	beq	r2,zero,256c4 <___vfprintf_internal_r+0x17f0>
   2449c:	d8c02d17 	ldw	r3,180(sp)
   244a0:	d9002d17 	ldw	r4,180(sp)
   244a4:	d9402d17 	ldw	r5,180(sp)
   244a8:	18c00017 	ldw	r3,0(r3)
   244ac:	21000117 	ldw	r4,4(r4)
   244b0:	29400204 	addi	r5,r5,8
   244b4:	d8c03615 	stw	r3,216(sp)
   244b8:	d9003815 	stw	r4,224(sp)
   244bc:	d9402d15 	stw	r5,180(sp)
   244c0:	d9003617 	ldw	r4,216(sp)
   244c4:	d9403817 	ldw	r5,224(sp)
   244c8:	da003d15 	stw	r8,244(sp)
   244cc:	04000044 	movi	r16,1
   244d0:	002a7c00 	call	2a7c0 <__fpclassifyd>
   244d4:	da003d17 	ldw	r8,244(sp)
   244d8:	14041f1e 	bne	r2,r16,25558 <___vfprintf_internal_r+0x1684>
   244dc:	d9003617 	ldw	r4,216(sp)
   244e0:	d9403817 	ldw	r5,224(sp)
   244e4:	000d883a 	mov	r6,zero
   244e8:	000f883a 	mov	r7,zero
   244ec:	002e6940 	call	2e694 <__ledf2>
   244f0:	da003d17 	ldw	r8,244(sp)
   244f4:	1005be16 	blt	r2,zero,25bf0 <___vfprintf_internal_r+0x1d1c>
   244f8:	df002783 	ldbu	fp,158(sp)
   244fc:	008011c4 	movi	r2,71
   24500:	1445330e 	bge	r2,r17,259d0 <___vfprintf_internal_r+0x1afc>
   24504:	040000f4 	movhi	r16,3
   24508:	840c8604 	addi	r16,r16,12824
   2450c:	00c000c4 	movi	r3,3
   24510:	00bfdfc4 	movi	r2,-129
   24514:	d8c02a15 	stw	r3,168(sp)
   24518:	90a4703a 	and	r18,r18,r2
   2451c:	d8c02e15 	stw	r3,184(sp)
   24520:	d8002915 	stw	zero,164(sp)
   24524:	d8003215 	stw	zero,200(sp)
   24528:	00003706 	br	24608 <___vfprintf_internal_r+0x734>
   2452c:	94800214 	ori	r18,r18,8
   24530:	ac400007 	ldb	r17,0(r21)
   24534:	003ec806 	br	24058 <_gp+0xfffe6fc8>
   24538:	18c03fcc 	andi	r3,r3,255
   2453c:	1806db1e 	bne	r3,zero,260ac <___vfprintf_internal_r+0x21d8>
   24540:	94800414 	ori	r18,r18,16
   24544:	9080080c 	andi	r2,r18,32
   24548:	1002d826 	beq	r2,zero,250ac <___vfprintf_internal_r+0x11d8>
   2454c:	d9402d17 	ldw	r5,180(sp)
   24550:	d8c02917 	ldw	r3,164(sp)
   24554:	d8002785 	stb	zero,158(sp)
   24558:	28800204 	addi	r2,r5,8
   2455c:	2cc00017 	ldw	r19,0(r5)
   24560:	2d800117 	ldw	r22,4(r5)
   24564:	18048f16 	blt	r3,zero,257a4 <___vfprintf_internal_r+0x18d0>
   24568:	013fdfc4 	movi	r4,-129
   2456c:	9d86b03a 	or	r3,r19,r22
   24570:	d8802d15 	stw	r2,180(sp)
   24574:	9124703a 	and	r18,r18,r4
   24578:	1802d91e 	bne	r3,zero,250e0 <___vfprintf_internal_r+0x120c>
   2457c:	d8c02917 	ldw	r3,164(sp)
   24580:	0039883a 	mov	fp,zero
   24584:	1805c326 	beq	r3,zero,25c94 <___vfprintf_internal_r+0x1dc0>
   24588:	0027883a 	mov	r19,zero
   2458c:	002d883a 	mov	r22,zero
   24590:	dc001e04 	addi	r16,sp,120
   24594:	9806d0fa 	srli	r3,r19,3
   24598:	b008977a 	slli	r4,r22,29
   2459c:	b02cd0fa 	srli	r22,r22,3
   245a0:	9cc001cc 	andi	r19,r19,7
   245a4:	98800c04 	addi	r2,r19,48
   245a8:	843fffc4 	addi	r16,r16,-1
   245ac:	20e6b03a 	or	r19,r4,r3
   245b0:	80800005 	stb	r2,0(r16)
   245b4:	9d86b03a 	or	r3,r19,r22
   245b8:	183ff61e 	bne	r3,zero,24594 <_gp+0xfffe7504>
   245bc:	90c0004c 	andi	r3,r18,1
   245c0:	18013b26 	beq	r3,zero,24ab0 <___vfprintf_internal_r+0xbdc>
   245c4:	10803fcc 	andi	r2,r2,255
   245c8:	1080201c 	xori	r2,r2,128
   245cc:	10bfe004 	addi	r2,r2,-128
   245d0:	00c00c04 	movi	r3,48
   245d4:	10c13626 	beq	r2,r3,24ab0 <___vfprintf_internal_r+0xbdc>
   245d8:	80ffffc5 	stb	r3,-1(r16)
   245dc:	d8c02817 	ldw	r3,160(sp)
   245e0:	80bfffc4 	addi	r2,r16,-1
   245e4:	1021883a 	mov	r16,r2
   245e8:	1887c83a 	sub	r3,r3,r2
   245ec:	d8c02e15 	stw	r3,184(sp)
   245f0:	d8802e17 	ldw	r2,184(sp)
   245f4:	d9002917 	ldw	r4,164(sp)
   245f8:	1100010e 	bge	r2,r4,24600 <___vfprintf_internal_r+0x72c>
   245fc:	2005883a 	mov	r2,r4
   24600:	d8802a15 	stw	r2,168(sp)
   24604:	d8003215 	stw	zero,200(sp)
   24608:	e7003fcc 	andi	fp,fp,255
   2460c:	e700201c 	xori	fp,fp,128
   24610:	e73fe004 	addi	fp,fp,-128
   24614:	e0000326 	beq	fp,zero,24624 <___vfprintf_internal_r+0x750>
   24618:	d8c02a17 	ldw	r3,168(sp)
   2461c:	18c00044 	addi	r3,r3,1
   24620:	d8c02a15 	stw	r3,168(sp)
   24624:	90c0008c 	andi	r3,r18,2
   24628:	d8c02b15 	stw	r3,172(sp)
   2462c:	18000326 	beq	r3,zero,2463c <___vfprintf_internal_r+0x768>
   24630:	d8c02a17 	ldw	r3,168(sp)
   24634:	18c00084 	addi	r3,r3,2
   24638:	d8c02a15 	stw	r3,168(sp)
   2463c:	90c0210c 	andi	r3,r18,132
   24640:	d8c03015 	stw	r3,192(sp)
   24644:	1801a31e 	bne	r3,zero,24cd4 <___vfprintf_internal_r+0xe00>
   24648:	d9003117 	ldw	r4,196(sp)
   2464c:	d8c02a17 	ldw	r3,168(sp)
   24650:	20e7c83a 	sub	r19,r4,r3
   24654:	04c19f0e 	bge	zero,r19,24cd4 <___vfprintf_internal_r+0xe00>
   24658:	02400404 	movi	r9,16
   2465c:	d8c02017 	ldw	r3,128(sp)
   24660:	d8801f17 	ldw	r2,124(sp)
   24664:	4cc50d0e 	bge	r9,r19,25a9c <___vfprintf_internal_r+0x1bc8>
   24668:	014000f4 	movhi	r5,3
   2466c:	294c9984 	addi	r5,r5,12902
   24670:	dc403b15 	stw	r17,236(sp)
   24674:	d9403515 	stw	r5,212(sp)
   24678:	9823883a 	mov	r17,r19
   2467c:	482d883a 	mov	r22,r9
   24680:	9027883a 	mov	r19,r18
   24684:	070001c4 	movi	fp,7
   24688:	8025883a 	mov	r18,r16
   2468c:	dc002c17 	ldw	r16,176(sp)
   24690:	00000306 	br	246a0 <___vfprintf_internal_r+0x7cc>
   24694:	8c7ffc04 	addi	r17,r17,-16
   24698:	42000204 	addi	r8,r8,8
   2469c:	b440130e 	bge	r22,r17,246ec <___vfprintf_internal_r+0x818>
   246a0:	010000f4 	movhi	r4,3
   246a4:	18c00404 	addi	r3,r3,16
   246a8:	10800044 	addi	r2,r2,1
   246ac:	210c9984 	addi	r4,r4,12902
   246b0:	41000015 	stw	r4,0(r8)
   246b4:	45800115 	stw	r22,4(r8)
   246b8:	d8c02015 	stw	r3,128(sp)
   246bc:	d8801f15 	stw	r2,124(sp)
   246c0:	e0bff40e 	bge	fp,r2,24694 <_gp+0xfffe7604>
   246c4:	d9801e04 	addi	r6,sp,120
   246c8:	b80b883a 	mov	r5,r23
   246cc:	8009883a 	mov	r4,r16
   246d0:	002aa6c0 	call	2aa6c <__sprint_r>
   246d4:	103f011e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   246d8:	8c7ffc04 	addi	r17,r17,-16
   246dc:	d8c02017 	ldw	r3,128(sp)
   246e0:	d8801f17 	ldw	r2,124(sp)
   246e4:	da000404 	addi	r8,sp,16
   246e8:	b47fed16 	blt	r22,r17,246a0 <_gp+0xfffe7610>
   246ec:	9021883a 	mov	r16,r18
   246f0:	9825883a 	mov	r18,r19
   246f4:	8827883a 	mov	r19,r17
   246f8:	dc403b17 	ldw	r17,236(sp)
   246fc:	d9403517 	ldw	r5,212(sp)
   24700:	98c7883a 	add	r3,r19,r3
   24704:	10800044 	addi	r2,r2,1
   24708:	41400015 	stw	r5,0(r8)
   2470c:	44c00115 	stw	r19,4(r8)
   24710:	d8c02015 	stw	r3,128(sp)
   24714:	d8801f15 	stw	r2,124(sp)
   24718:	010001c4 	movi	r4,7
   2471c:	2082a316 	blt	r4,r2,251ac <___vfprintf_internal_r+0x12d8>
   24720:	df002787 	ldb	fp,158(sp)
   24724:	42000204 	addi	r8,r8,8
   24728:	e0000c26 	beq	fp,zero,2475c <___vfprintf_internal_r+0x888>
   2472c:	d8801f17 	ldw	r2,124(sp)
   24730:	d9002784 	addi	r4,sp,158
   24734:	18c00044 	addi	r3,r3,1
   24738:	10800044 	addi	r2,r2,1
   2473c:	41000015 	stw	r4,0(r8)
   24740:	01000044 	movi	r4,1
   24744:	41000115 	stw	r4,4(r8)
   24748:	d8c02015 	stw	r3,128(sp)
   2474c:	d8801f15 	stw	r2,124(sp)
   24750:	010001c4 	movi	r4,7
   24754:	20823c16 	blt	r4,r2,25048 <___vfprintf_internal_r+0x1174>
   24758:	42000204 	addi	r8,r8,8
   2475c:	d8802b17 	ldw	r2,172(sp)
   24760:	10000c26 	beq	r2,zero,24794 <___vfprintf_internal_r+0x8c0>
   24764:	d8801f17 	ldw	r2,124(sp)
   24768:	d9002704 	addi	r4,sp,156
   2476c:	18c00084 	addi	r3,r3,2
   24770:	10800044 	addi	r2,r2,1
   24774:	41000015 	stw	r4,0(r8)
   24778:	01000084 	movi	r4,2
   2477c:	41000115 	stw	r4,4(r8)
   24780:	d8c02015 	stw	r3,128(sp)
   24784:	d8801f15 	stw	r2,124(sp)
   24788:	010001c4 	movi	r4,7
   2478c:	20823616 	blt	r4,r2,25068 <___vfprintf_internal_r+0x1194>
   24790:	42000204 	addi	r8,r8,8
   24794:	d9003017 	ldw	r4,192(sp)
   24798:	00802004 	movi	r2,128
   2479c:	20819926 	beq	r4,r2,24e04 <___vfprintf_internal_r+0xf30>
   247a0:	d9402917 	ldw	r5,164(sp)
   247a4:	d8802e17 	ldw	r2,184(sp)
   247a8:	28adc83a 	sub	r22,r5,r2
   247ac:	0580310e 	bge	zero,r22,24874 <___vfprintf_internal_r+0x9a0>
   247b0:	07000404 	movi	fp,16
   247b4:	d8801f17 	ldw	r2,124(sp)
   247b8:	e584140e 	bge	fp,r22,2580c <___vfprintf_internal_r+0x1938>
   247bc:	014000f4 	movhi	r5,3
   247c0:	294c9584 	addi	r5,r5,12886
   247c4:	dc402915 	stw	r17,164(sp)
   247c8:	d9402b15 	stw	r5,172(sp)
   247cc:	b023883a 	mov	r17,r22
   247d0:	04c001c4 	movi	r19,7
   247d4:	a82d883a 	mov	r22,r21
   247d8:	902b883a 	mov	r21,r18
   247dc:	8025883a 	mov	r18,r16
   247e0:	dc002c17 	ldw	r16,176(sp)
   247e4:	00000306 	br	247f4 <___vfprintf_internal_r+0x920>
   247e8:	8c7ffc04 	addi	r17,r17,-16
   247ec:	42000204 	addi	r8,r8,8
   247f0:	e440110e 	bge	fp,r17,24838 <___vfprintf_internal_r+0x964>
   247f4:	18c00404 	addi	r3,r3,16
   247f8:	10800044 	addi	r2,r2,1
   247fc:	45000015 	stw	r20,0(r8)
   24800:	47000115 	stw	fp,4(r8)
   24804:	d8c02015 	stw	r3,128(sp)
   24808:	d8801f15 	stw	r2,124(sp)
   2480c:	98bff60e 	bge	r19,r2,247e8 <_gp+0xfffe7758>
   24810:	d9801e04 	addi	r6,sp,120
   24814:	b80b883a 	mov	r5,r23
   24818:	8009883a 	mov	r4,r16
   2481c:	002aa6c0 	call	2aa6c <__sprint_r>
   24820:	103eae1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   24824:	8c7ffc04 	addi	r17,r17,-16
   24828:	d8c02017 	ldw	r3,128(sp)
   2482c:	d8801f17 	ldw	r2,124(sp)
   24830:	da000404 	addi	r8,sp,16
   24834:	e47fef16 	blt	fp,r17,247f4 <_gp+0xfffe7764>
   24838:	9021883a 	mov	r16,r18
   2483c:	a825883a 	mov	r18,r21
   24840:	b02b883a 	mov	r21,r22
   24844:	882d883a 	mov	r22,r17
   24848:	dc402917 	ldw	r17,164(sp)
   2484c:	d9002b17 	ldw	r4,172(sp)
   24850:	1d87883a 	add	r3,r3,r22
   24854:	10800044 	addi	r2,r2,1
   24858:	41000015 	stw	r4,0(r8)
   2485c:	45800115 	stw	r22,4(r8)
   24860:	d8c02015 	stw	r3,128(sp)
   24864:	d8801f15 	stw	r2,124(sp)
   24868:	010001c4 	movi	r4,7
   2486c:	2081ee16 	blt	r4,r2,25028 <___vfprintf_internal_r+0x1154>
   24870:	42000204 	addi	r8,r8,8
   24874:	9080400c 	andi	r2,r18,256
   24878:	1001181e 	bne	r2,zero,24cdc <___vfprintf_internal_r+0xe08>
   2487c:	d9402e17 	ldw	r5,184(sp)
   24880:	d8801f17 	ldw	r2,124(sp)
   24884:	44000015 	stw	r16,0(r8)
   24888:	1947883a 	add	r3,r3,r5
   2488c:	10800044 	addi	r2,r2,1
   24890:	41400115 	stw	r5,4(r8)
   24894:	d8c02015 	stw	r3,128(sp)
   24898:	d8801f15 	stw	r2,124(sp)
   2489c:	010001c4 	movi	r4,7
   248a0:	2081d316 	blt	r4,r2,24ff0 <___vfprintf_internal_r+0x111c>
   248a4:	42000204 	addi	r8,r8,8
   248a8:	9480010c 	andi	r18,r18,4
   248ac:	90003226 	beq	r18,zero,24978 <___vfprintf_internal_r+0xaa4>
   248b0:	d9403117 	ldw	r5,196(sp)
   248b4:	d8802a17 	ldw	r2,168(sp)
   248b8:	28a1c83a 	sub	r16,r5,r2
   248bc:	04002e0e 	bge	zero,r16,24978 <___vfprintf_internal_r+0xaa4>
   248c0:	04400404 	movi	r17,16
   248c4:	d8801f17 	ldw	r2,124(sp)
   248c8:	8c04a20e 	bge	r17,r16,25b54 <___vfprintf_internal_r+0x1c80>
   248cc:	014000f4 	movhi	r5,3
   248d0:	294c9984 	addi	r5,r5,12902
   248d4:	d9403515 	stw	r5,212(sp)
   248d8:	048001c4 	movi	r18,7
   248dc:	dcc02c17 	ldw	r19,176(sp)
   248e0:	00000306 	br	248f0 <___vfprintf_internal_r+0xa1c>
   248e4:	843ffc04 	addi	r16,r16,-16
   248e8:	42000204 	addi	r8,r8,8
   248ec:	8c00130e 	bge	r17,r16,2493c <___vfprintf_internal_r+0xa68>
   248f0:	010000f4 	movhi	r4,3
   248f4:	18c00404 	addi	r3,r3,16
   248f8:	10800044 	addi	r2,r2,1
   248fc:	210c9984 	addi	r4,r4,12902
   24900:	41000015 	stw	r4,0(r8)
   24904:	44400115 	stw	r17,4(r8)
   24908:	d8c02015 	stw	r3,128(sp)
   2490c:	d8801f15 	stw	r2,124(sp)
   24910:	90bff40e 	bge	r18,r2,248e4 <_gp+0xfffe7854>
   24914:	d9801e04 	addi	r6,sp,120
   24918:	b80b883a 	mov	r5,r23
   2491c:	9809883a 	mov	r4,r19
   24920:	002aa6c0 	call	2aa6c <__sprint_r>
   24924:	103e6d1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   24928:	843ffc04 	addi	r16,r16,-16
   2492c:	d8c02017 	ldw	r3,128(sp)
   24930:	d8801f17 	ldw	r2,124(sp)
   24934:	da000404 	addi	r8,sp,16
   24938:	8c3fed16 	blt	r17,r16,248f0 <_gp+0xfffe7860>
   2493c:	d9403517 	ldw	r5,212(sp)
   24940:	1c07883a 	add	r3,r3,r16
   24944:	10800044 	addi	r2,r2,1
   24948:	41400015 	stw	r5,0(r8)
   2494c:	44000115 	stw	r16,4(r8)
   24950:	d8c02015 	stw	r3,128(sp)
   24954:	d8801f15 	stw	r2,124(sp)
   24958:	010001c4 	movi	r4,7
   2495c:	2080060e 	bge	r4,r2,24978 <___vfprintf_internal_r+0xaa4>
   24960:	d9002c17 	ldw	r4,176(sp)
   24964:	d9801e04 	addi	r6,sp,120
   24968:	b80b883a 	mov	r5,r23
   2496c:	002aa6c0 	call	2aa6c <__sprint_r>
   24970:	103e5a1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   24974:	d8c02017 	ldw	r3,128(sp)
   24978:	d8803117 	ldw	r2,196(sp)
   2497c:	d9002a17 	ldw	r4,168(sp)
   24980:	1100010e 	bge	r2,r4,24988 <___vfprintf_internal_r+0xab4>
   24984:	2005883a 	mov	r2,r4
   24988:	d9402f17 	ldw	r5,188(sp)
   2498c:	288b883a 	add	r5,r5,r2
   24990:	d9402f15 	stw	r5,188(sp)
   24994:	18019e1e 	bne	r3,zero,25010 <___vfprintf_internal_r+0x113c>
   24998:	a8800007 	ldb	r2,0(r21)
   2499c:	d8001f15 	stw	zero,124(sp)
   249a0:	da000404 	addi	r8,sp,16
   249a4:	103d851e 	bne	r2,zero,23fbc <_gp+0xfffe6f2c>
   249a8:	a821883a 	mov	r16,r21
   249ac:	003d9b06 	br	2401c <_gp+0xfffe6f8c>
   249b0:	18c03fcc 	andi	r3,r3,255
   249b4:	1805c11e 	bne	r3,zero,260bc <___vfprintf_internal_r+0x21e8>
   249b8:	94800414 	ori	r18,r18,16
   249bc:	9080080c 	andi	r2,r18,32
   249c0:	10020c26 	beq	r2,zero,251f4 <___vfprintf_internal_r+0x1320>
   249c4:	d8802d17 	ldw	r2,180(sp)
   249c8:	d9002917 	ldw	r4,164(sp)
   249cc:	d8002785 	stb	zero,158(sp)
   249d0:	10c00204 	addi	r3,r2,8
   249d4:	14c00017 	ldw	r19,0(r2)
   249d8:	15800117 	ldw	r22,4(r2)
   249dc:	20040f16 	blt	r4,zero,25a1c <___vfprintf_internal_r+0x1b48>
   249e0:	013fdfc4 	movi	r4,-129
   249e4:	9d84b03a 	or	r2,r19,r22
   249e8:	d8c02d15 	stw	r3,180(sp)
   249ec:	9124703a 	and	r18,r18,r4
   249f0:	0039883a 	mov	fp,zero
   249f4:	103e891e 	bne	r2,zero,2441c <_gp+0xfffe738c>
   249f8:	d9002917 	ldw	r4,164(sp)
   249fc:	2002c11e 	bne	r4,zero,25504 <___vfprintf_internal_r+0x1630>
   24a00:	d8002915 	stw	zero,164(sp)
   24a04:	d8002e15 	stw	zero,184(sp)
   24a08:	dc001e04 	addi	r16,sp,120
   24a0c:	003ef806 	br	245f0 <_gp+0xfffe7560>
   24a10:	18c03fcc 	andi	r3,r3,255
   24a14:	18059d1e 	bne	r3,zero,2608c <___vfprintf_internal_r+0x21b8>
   24a18:	014000f4 	movhi	r5,3
   24a1c:	294c8904 	addi	r5,r5,12836
   24a20:	d9403915 	stw	r5,228(sp)
   24a24:	9080080c 	andi	r2,r18,32
   24a28:	10005226 	beq	r2,zero,24b74 <___vfprintf_internal_r+0xca0>
   24a2c:	d8802d17 	ldw	r2,180(sp)
   24a30:	14c00017 	ldw	r19,0(r2)
   24a34:	15800117 	ldw	r22,4(r2)
   24a38:	10800204 	addi	r2,r2,8
   24a3c:	d8802d15 	stw	r2,180(sp)
   24a40:	9080004c 	andi	r2,r18,1
   24a44:	10019026 	beq	r2,zero,25088 <___vfprintf_internal_r+0x11b4>
   24a48:	9d84b03a 	or	r2,r19,r22
   24a4c:	10036926 	beq	r2,zero,257f4 <___vfprintf_internal_r+0x1920>
   24a50:	d8c02917 	ldw	r3,164(sp)
   24a54:	00800c04 	movi	r2,48
   24a58:	d8802705 	stb	r2,156(sp)
   24a5c:	dc402745 	stb	r17,157(sp)
   24a60:	d8002785 	stb	zero,158(sp)
   24a64:	90800094 	ori	r2,r18,2
   24a68:	18045d16 	blt	r3,zero,25be0 <___vfprintf_internal_r+0x1d0c>
   24a6c:	00bfdfc4 	movi	r2,-129
   24a70:	90a4703a 	and	r18,r18,r2
   24a74:	94800094 	ori	r18,r18,2
   24a78:	0039883a 	mov	fp,zero
   24a7c:	d9003917 	ldw	r4,228(sp)
   24a80:	dc001e04 	addi	r16,sp,120
   24a84:	988003cc 	andi	r2,r19,15
   24a88:	b006973a 	slli	r3,r22,28
   24a8c:	2085883a 	add	r2,r4,r2
   24a90:	9826d13a 	srli	r19,r19,4
   24a94:	10800003 	ldbu	r2,0(r2)
   24a98:	b02cd13a 	srli	r22,r22,4
   24a9c:	843fffc4 	addi	r16,r16,-1
   24aa0:	1ce6b03a 	or	r19,r3,r19
   24aa4:	80800005 	stb	r2,0(r16)
   24aa8:	9d84b03a 	or	r2,r19,r22
   24aac:	103ff51e 	bne	r2,zero,24a84 <_gp+0xfffe79f4>
   24ab0:	d8c02817 	ldw	r3,160(sp)
   24ab4:	1c07c83a 	sub	r3,r3,r16
   24ab8:	d8c02e15 	stw	r3,184(sp)
   24abc:	003ecc06 	br	245f0 <_gp+0xfffe7560>
   24ac0:	18c03fcc 	andi	r3,r3,255
   24ac4:	183e9f26 	beq	r3,zero,24544 <_gp+0xfffe74b4>
   24ac8:	d9c02785 	stb	r7,158(sp)
   24acc:	003e9d06 	br	24544 <_gp+0xfffe74b4>
   24ad0:	00c00044 	movi	r3,1
   24ad4:	01c00ac4 	movi	r7,43
   24ad8:	ac400007 	ldb	r17,0(r21)
   24adc:	003d5e06 	br	24058 <_gp+0xfffe6fc8>
   24ae0:	94800814 	ori	r18,r18,32
   24ae4:	ac400007 	ldb	r17,0(r21)
   24ae8:	003d5b06 	br	24058 <_gp+0xfffe6fc8>
   24aec:	d8c02d17 	ldw	r3,180(sp)
   24af0:	d8002785 	stb	zero,158(sp)
   24af4:	1c000017 	ldw	r16,0(r3)
   24af8:	1cc00104 	addi	r19,r3,4
   24afc:	80041926 	beq	r16,zero,25b64 <___vfprintf_internal_r+0x1c90>
   24b00:	d9002917 	ldw	r4,164(sp)
   24b04:	2003d016 	blt	r4,zero,25a48 <___vfprintf_internal_r+0x1b74>
   24b08:	200d883a 	mov	r6,r4
   24b0c:	000b883a 	mov	r5,zero
   24b10:	8009883a 	mov	r4,r16
   24b14:	da003d15 	stw	r8,244(sp)
   24b18:	0028ed80 	call	28ed8 <memchr>
   24b1c:	da003d17 	ldw	r8,244(sp)
   24b20:	10045426 	beq	r2,zero,25c74 <___vfprintf_internal_r+0x1da0>
   24b24:	1405c83a 	sub	r2,r2,r16
   24b28:	d8802e15 	stw	r2,184(sp)
   24b2c:	1003cc16 	blt	r2,zero,25a60 <___vfprintf_internal_r+0x1b8c>
   24b30:	df002783 	ldbu	fp,158(sp)
   24b34:	d8802a15 	stw	r2,168(sp)
   24b38:	dcc02d15 	stw	r19,180(sp)
   24b3c:	d8002915 	stw	zero,164(sp)
   24b40:	d8003215 	stw	zero,200(sp)
   24b44:	003eb006 	br	24608 <_gp+0xfffe7578>
   24b48:	18c03fcc 	andi	r3,r3,255
   24b4c:	183f9b26 	beq	r3,zero,249bc <_gp+0xfffe792c>
   24b50:	d9c02785 	stb	r7,158(sp)
   24b54:	003f9906 	br	249bc <_gp+0xfffe792c>
   24b58:	18c03fcc 	andi	r3,r3,255
   24b5c:	1805551e 	bne	r3,zero,260b4 <___vfprintf_internal_r+0x21e0>
   24b60:	014000f4 	movhi	r5,3
   24b64:	294c8e04 	addi	r5,r5,12856
   24b68:	d9403915 	stw	r5,228(sp)
   24b6c:	9080080c 	andi	r2,r18,32
   24b70:	103fae1e 	bne	r2,zero,24a2c <_gp+0xfffe799c>
   24b74:	9080040c 	andi	r2,r18,16
   24b78:	1002de26 	beq	r2,zero,256f4 <___vfprintf_internal_r+0x1820>
   24b7c:	d8c02d17 	ldw	r3,180(sp)
   24b80:	002d883a 	mov	r22,zero
   24b84:	1cc00017 	ldw	r19,0(r3)
   24b88:	18c00104 	addi	r3,r3,4
   24b8c:	d8c02d15 	stw	r3,180(sp)
   24b90:	003fab06 	br	24a40 <_gp+0xfffe79b0>
   24b94:	38803fcc 	andi	r2,r7,255
   24b98:	1080201c 	xori	r2,r2,128
   24b9c:	10bfe004 	addi	r2,r2,-128
   24ba0:	1002d21e 	bne	r2,zero,256ec <___vfprintf_internal_r+0x1818>
   24ba4:	00c00044 	movi	r3,1
   24ba8:	01c00804 	movi	r7,32
   24bac:	ac400007 	ldb	r17,0(r21)
   24bb0:	003d2906 	br	24058 <_gp+0xfffe6fc8>
   24bb4:	94800054 	ori	r18,r18,1
   24bb8:	ac400007 	ldb	r17,0(r21)
   24bbc:	003d2606 	br	24058 <_gp+0xfffe6fc8>
   24bc0:	18c03fcc 	andi	r3,r3,255
   24bc4:	183e0526 	beq	r3,zero,243dc <_gp+0xfffe734c>
   24bc8:	d9c02785 	stb	r7,158(sp)
   24bcc:	003e0306 	br	243dc <_gp+0xfffe734c>
   24bd0:	94801014 	ori	r18,r18,64
   24bd4:	ac400007 	ldb	r17,0(r21)
   24bd8:	003d1f06 	br	24058 <_gp+0xfffe6fc8>
   24bdc:	ac400007 	ldb	r17,0(r21)
   24be0:	8a438726 	beq	r17,r9,25a00 <___vfprintf_internal_r+0x1b2c>
   24be4:	94800414 	ori	r18,r18,16
   24be8:	003d1b06 	br	24058 <_gp+0xfffe6fc8>
   24bec:	18c03fcc 	andi	r3,r3,255
   24bf0:	1805341e 	bne	r3,zero,260c4 <___vfprintf_internal_r+0x21f0>
   24bf4:	9080080c 	andi	r2,r18,32
   24bf8:	1002cd26 	beq	r2,zero,25730 <___vfprintf_internal_r+0x185c>
   24bfc:	d9402d17 	ldw	r5,180(sp)
   24c00:	d9002f17 	ldw	r4,188(sp)
   24c04:	28800017 	ldw	r2,0(r5)
   24c08:	2007d7fa 	srai	r3,r4,31
   24c0c:	29400104 	addi	r5,r5,4
   24c10:	d9402d15 	stw	r5,180(sp)
   24c14:	11000015 	stw	r4,0(r2)
   24c18:	10c00115 	stw	r3,4(r2)
   24c1c:	003ce506 	br	23fb4 <_gp+0xfffe6f24>
   24c20:	d8c02d17 	ldw	r3,180(sp)
   24c24:	d9002d17 	ldw	r4,180(sp)
   24c28:	d8002785 	stb	zero,158(sp)
   24c2c:	18800017 	ldw	r2,0(r3)
   24c30:	21000104 	addi	r4,r4,4
   24c34:	00c00044 	movi	r3,1
   24c38:	d8c02a15 	stw	r3,168(sp)
   24c3c:	d8801405 	stb	r2,80(sp)
   24c40:	d9002d15 	stw	r4,180(sp)
   24c44:	d8c02e15 	stw	r3,184(sp)
   24c48:	d8002915 	stw	zero,164(sp)
   24c4c:	d8003215 	stw	zero,200(sp)
   24c50:	dc001404 	addi	r16,sp,80
   24c54:	0039883a 	mov	fp,zero
   24c58:	003e7206 	br	24624 <_gp+0xfffe7594>
   24c5c:	010000f4 	movhi	r4,3
   24c60:	210c8e04 	addi	r4,r4,12856
   24c64:	0039883a 	mov	fp,zero
   24c68:	d9003915 	stw	r4,228(sp)
   24c6c:	04401e04 	movi	r17,120
   24c70:	003f8206 	br	24a7c <_gp+0xfffe79ec>
   24c74:	18c03fcc 	andi	r3,r3,255
   24c78:	1805061e 	bne	r3,zero,26094 <___vfprintf_internal_r+0x21c0>
   24c7c:	883d9126 	beq	r17,zero,242c4 <_gp+0xfffe7234>
   24c80:	00c00044 	movi	r3,1
   24c84:	d8c02a15 	stw	r3,168(sp)
   24c88:	dc401405 	stb	r17,80(sp)
   24c8c:	d8002785 	stb	zero,158(sp)
   24c90:	003fec06 	br	24c44 <_gp+0xfffe7bb4>
   24c94:	014000f4 	movhi	r5,3
   24c98:	294c8e04 	addi	r5,r5,12856
   24c9c:	d9403915 	stw	r5,228(sp)
   24ca0:	d8c02d15 	stw	r3,180(sp)
   24ca4:	1025883a 	mov	r18,r2
   24ca8:	04401e04 	movi	r17,120
   24cac:	9d84b03a 	or	r2,r19,r22
   24cb0:	1000fc1e 	bne	r2,zero,250a4 <___vfprintf_internal_r+0x11d0>
   24cb4:	0039883a 	mov	fp,zero
   24cb8:	00800084 	movi	r2,2
   24cbc:	10803fcc 	andi	r2,r2,255
   24cc0:	00c00044 	movi	r3,1
   24cc4:	10c20f26 	beq	r2,r3,25504 <___vfprintf_internal_r+0x1630>
   24cc8:	00c00084 	movi	r3,2
   24ccc:	10fd6326 	beq	r2,r3,2425c <_gp+0xfffe71cc>
   24cd0:	003e2d06 	br	24588 <_gp+0xfffe74f8>
   24cd4:	d8c02017 	ldw	r3,128(sp)
   24cd8:	003e9306 	br	24728 <_gp+0xfffe7698>
   24cdc:	00801944 	movi	r2,101
   24ce0:	14407e0e 	bge	r2,r17,24edc <___vfprintf_internal_r+0x1008>
   24ce4:	d9003617 	ldw	r4,216(sp)
   24ce8:	d9403817 	ldw	r5,224(sp)
   24cec:	000d883a 	mov	r6,zero
   24cf0:	000f883a 	mov	r7,zero
   24cf4:	d8c03c15 	stw	r3,240(sp)
   24cf8:	da003d15 	stw	r8,244(sp)
   24cfc:	002e5300 	call	2e530 <__eqdf2>
   24d00:	d8c03c17 	ldw	r3,240(sp)
   24d04:	da003d17 	ldw	r8,244(sp)
   24d08:	1000f71e 	bne	r2,zero,250e8 <___vfprintf_internal_r+0x1214>
   24d0c:	d8801f17 	ldw	r2,124(sp)
   24d10:	010000f4 	movhi	r4,3
   24d14:	210c9504 	addi	r4,r4,12884
   24d18:	18c00044 	addi	r3,r3,1
   24d1c:	10800044 	addi	r2,r2,1
   24d20:	41000015 	stw	r4,0(r8)
   24d24:	01000044 	movi	r4,1
   24d28:	41000115 	stw	r4,4(r8)
   24d2c:	d8c02015 	stw	r3,128(sp)
   24d30:	d8801f15 	stw	r2,124(sp)
   24d34:	010001c4 	movi	r4,7
   24d38:	2082b816 	blt	r4,r2,2581c <___vfprintf_internal_r+0x1948>
   24d3c:	42000204 	addi	r8,r8,8
   24d40:	d8802617 	ldw	r2,152(sp)
   24d44:	d9403317 	ldw	r5,204(sp)
   24d48:	11400216 	blt	r2,r5,24d54 <___vfprintf_internal_r+0xe80>
   24d4c:	9080004c 	andi	r2,r18,1
   24d50:	103ed526 	beq	r2,zero,248a8 <_gp+0xfffe7818>
   24d54:	d8803717 	ldw	r2,220(sp)
   24d58:	d9003417 	ldw	r4,208(sp)
   24d5c:	d9403717 	ldw	r5,220(sp)
   24d60:	1887883a 	add	r3,r3,r2
   24d64:	d8801f17 	ldw	r2,124(sp)
   24d68:	41000015 	stw	r4,0(r8)
   24d6c:	41400115 	stw	r5,4(r8)
   24d70:	10800044 	addi	r2,r2,1
   24d74:	d8c02015 	stw	r3,128(sp)
   24d78:	d8801f15 	stw	r2,124(sp)
   24d7c:	010001c4 	movi	r4,7
   24d80:	20832916 	blt	r4,r2,25a28 <___vfprintf_internal_r+0x1b54>
   24d84:	42000204 	addi	r8,r8,8
   24d88:	d8803317 	ldw	r2,204(sp)
   24d8c:	143fffc4 	addi	r16,r2,-1
   24d90:	043ec50e 	bge	zero,r16,248a8 <_gp+0xfffe7818>
   24d94:	04400404 	movi	r17,16
   24d98:	d8801f17 	ldw	r2,124(sp)
   24d9c:	8c00880e 	bge	r17,r16,24fc0 <___vfprintf_internal_r+0x10ec>
   24da0:	014000f4 	movhi	r5,3
   24da4:	294c9584 	addi	r5,r5,12886
   24da8:	d9402b15 	stw	r5,172(sp)
   24dac:	058001c4 	movi	r22,7
   24db0:	dcc02c17 	ldw	r19,176(sp)
   24db4:	00000306 	br	24dc4 <___vfprintf_internal_r+0xef0>
   24db8:	42000204 	addi	r8,r8,8
   24dbc:	843ffc04 	addi	r16,r16,-16
   24dc0:	8c00820e 	bge	r17,r16,24fcc <___vfprintf_internal_r+0x10f8>
   24dc4:	18c00404 	addi	r3,r3,16
   24dc8:	10800044 	addi	r2,r2,1
   24dcc:	45000015 	stw	r20,0(r8)
   24dd0:	44400115 	stw	r17,4(r8)
   24dd4:	d8c02015 	stw	r3,128(sp)
   24dd8:	d8801f15 	stw	r2,124(sp)
   24ddc:	b0bff60e 	bge	r22,r2,24db8 <_gp+0xfffe7d28>
   24de0:	d9801e04 	addi	r6,sp,120
   24de4:	b80b883a 	mov	r5,r23
   24de8:	9809883a 	mov	r4,r19
   24dec:	002aa6c0 	call	2aa6c <__sprint_r>
   24df0:	103d3a1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   24df4:	d8c02017 	ldw	r3,128(sp)
   24df8:	d8801f17 	ldw	r2,124(sp)
   24dfc:	da000404 	addi	r8,sp,16
   24e00:	003fee06 	br	24dbc <_gp+0xfffe7d2c>
   24e04:	d9403117 	ldw	r5,196(sp)
   24e08:	d8802a17 	ldw	r2,168(sp)
   24e0c:	28adc83a 	sub	r22,r5,r2
   24e10:	05be630e 	bge	zero,r22,247a0 <_gp+0xfffe7710>
   24e14:	07000404 	movi	fp,16
   24e18:	d8801f17 	ldw	r2,124(sp)
   24e1c:	e5838f0e 	bge	fp,r22,25c5c <___vfprintf_internal_r+0x1d88>
   24e20:	014000f4 	movhi	r5,3
   24e24:	294c9584 	addi	r5,r5,12886
   24e28:	dc403015 	stw	r17,192(sp)
   24e2c:	d9402b15 	stw	r5,172(sp)
   24e30:	b023883a 	mov	r17,r22
   24e34:	04c001c4 	movi	r19,7
   24e38:	a82d883a 	mov	r22,r21
   24e3c:	902b883a 	mov	r21,r18
   24e40:	8025883a 	mov	r18,r16
   24e44:	dc002c17 	ldw	r16,176(sp)
   24e48:	00000306 	br	24e58 <___vfprintf_internal_r+0xf84>
   24e4c:	8c7ffc04 	addi	r17,r17,-16
   24e50:	42000204 	addi	r8,r8,8
   24e54:	e440110e 	bge	fp,r17,24e9c <___vfprintf_internal_r+0xfc8>
   24e58:	18c00404 	addi	r3,r3,16
   24e5c:	10800044 	addi	r2,r2,1
   24e60:	45000015 	stw	r20,0(r8)
   24e64:	47000115 	stw	fp,4(r8)
   24e68:	d8c02015 	stw	r3,128(sp)
   24e6c:	d8801f15 	stw	r2,124(sp)
   24e70:	98bff60e 	bge	r19,r2,24e4c <_gp+0xfffe7dbc>
   24e74:	d9801e04 	addi	r6,sp,120
   24e78:	b80b883a 	mov	r5,r23
   24e7c:	8009883a 	mov	r4,r16
   24e80:	002aa6c0 	call	2aa6c <__sprint_r>
   24e84:	103d151e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   24e88:	8c7ffc04 	addi	r17,r17,-16
   24e8c:	d8c02017 	ldw	r3,128(sp)
   24e90:	d8801f17 	ldw	r2,124(sp)
   24e94:	da000404 	addi	r8,sp,16
   24e98:	e47fef16 	blt	fp,r17,24e58 <_gp+0xfffe7dc8>
   24e9c:	9021883a 	mov	r16,r18
   24ea0:	a825883a 	mov	r18,r21
   24ea4:	b02b883a 	mov	r21,r22
   24ea8:	882d883a 	mov	r22,r17
   24eac:	dc403017 	ldw	r17,192(sp)
   24eb0:	d9002b17 	ldw	r4,172(sp)
   24eb4:	1d87883a 	add	r3,r3,r22
   24eb8:	10800044 	addi	r2,r2,1
   24ebc:	41000015 	stw	r4,0(r8)
   24ec0:	45800115 	stw	r22,4(r8)
   24ec4:	d8c02015 	stw	r3,128(sp)
   24ec8:	d8801f15 	stw	r2,124(sp)
   24ecc:	010001c4 	movi	r4,7
   24ed0:	20818e16 	blt	r4,r2,2550c <___vfprintf_internal_r+0x1638>
   24ed4:	42000204 	addi	r8,r8,8
   24ed8:	003e3106 	br	247a0 <_gp+0xfffe7710>
   24edc:	d9403317 	ldw	r5,204(sp)
   24ee0:	00800044 	movi	r2,1
   24ee4:	18c00044 	addi	r3,r3,1
   24ee8:	1141530e 	bge	r2,r5,25438 <___vfprintf_internal_r+0x1564>
   24eec:	dc401f17 	ldw	r17,124(sp)
   24ef0:	00800044 	movi	r2,1
   24ef4:	40800115 	stw	r2,4(r8)
   24ef8:	8c400044 	addi	r17,r17,1
   24efc:	44000015 	stw	r16,0(r8)
   24f00:	d8c02015 	stw	r3,128(sp)
   24f04:	dc401f15 	stw	r17,124(sp)
   24f08:	008001c4 	movi	r2,7
   24f0c:	14416b16 	blt	r2,r17,254bc <___vfprintf_internal_r+0x15e8>
   24f10:	42000204 	addi	r8,r8,8
   24f14:	d8803717 	ldw	r2,220(sp)
   24f18:	d9003417 	ldw	r4,208(sp)
   24f1c:	8c400044 	addi	r17,r17,1
   24f20:	10c7883a 	add	r3,r2,r3
   24f24:	40800115 	stw	r2,4(r8)
   24f28:	41000015 	stw	r4,0(r8)
   24f2c:	d8c02015 	stw	r3,128(sp)
   24f30:	dc401f15 	stw	r17,124(sp)
   24f34:	008001c4 	movi	r2,7
   24f38:	14416916 	blt	r2,r17,254e0 <___vfprintf_internal_r+0x160c>
   24f3c:	45800204 	addi	r22,r8,8
   24f40:	d9003617 	ldw	r4,216(sp)
   24f44:	d9403817 	ldw	r5,224(sp)
   24f48:	000d883a 	mov	r6,zero
   24f4c:	000f883a 	mov	r7,zero
   24f50:	d8c03c15 	stw	r3,240(sp)
   24f54:	002e5300 	call	2e530 <__eqdf2>
   24f58:	d8c03c17 	ldw	r3,240(sp)
   24f5c:	1000bc26 	beq	r2,zero,25250 <___vfprintf_internal_r+0x137c>
   24f60:	d9403317 	ldw	r5,204(sp)
   24f64:	84000044 	addi	r16,r16,1
   24f68:	8c400044 	addi	r17,r17,1
   24f6c:	28bfffc4 	addi	r2,r5,-1
   24f70:	1887883a 	add	r3,r3,r2
   24f74:	b0800115 	stw	r2,4(r22)
   24f78:	b4000015 	stw	r16,0(r22)
   24f7c:	d8c02015 	stw	r3,128(sp)
   24f80:	dc401f15 	stw	r17,124(sp)
   24f84:	008001c4 	movi	r2,7
   24f88:	14414316 	blt	r2,r17,25498 <___vfprintf_internal_r+0x15c4>
   24f8c:	b5800204 	addi	r22,r22,8
   24f90:	d9003a17 	ldw	r4,232(sp)
   24f94:	df0022c4 	addi	fp,sp,139
   24f98:	8c400044 	addi	r17,r17,1
   24f9c:	20c7883a 	add	r3,r4,r3
   24fa0:	b7000015 	stw	fp,0(r22)
   24fa4:	b1000115 	stw	r4,4(r22)
   24fa8:	d8c02015 	stw	r3,128(sp)
   24fac:	dc401f15 	stw	r17,124(sp)
   24fb0:	008001c4 	movi	r2,7
   24fb4:	14400e16 	blt	r2,r17,24ff0 <___vfprintf_internal_r+0x111c>
   24fb8:	b2000204 	addi	r8,r22,8
   24fbc:	003e3a06 	br	248a8 <_gp+0xfffe7818>
   24fc0:	010000f4 	movhi	r4,3
   24fc4:	210c9584 	addi	r4,r4,12886
   24fc8:	d9002b15 	stw	r4,172(sp)
   24fcc:	d9002b17 	ldw	r4,172(sp)
   24fd0:	1c07883a 	add	r3,r3,r16
   24fd4:	44000115 	stw	r16,4(r8)
   24fd8:	41000015 	stw	r4,0(r8)
   24fdc:	10800044 	addi	r2,r2,1
   24fe0:	d8c02015 	stw	r3,128(sp)
   24fe4:	d8801f15 	stw	r2,124(sp)
   24fe8:	010001c4 	movi	r4,7
   24fec:	20be2d0e 	bge	r4,r2,248a4 <_gp+0xfffe7814>
   24ff0:	d9002c17 	ldw	r4,176(sp)
   24ff4:	d9801e04 	addi	r6,sp,120
   24ff8:	b80b883a 	mov	r5,r23
   24ffc:	002aa6c0 	call	2aa6c <__sprint_r>
   25000:	103cb61e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25004:	d8c02017 	ldw	r3,128(sp)
   25008:	da000404 	addi	r8,sp,16
   2500c:	003e2606 	br	248a8 <_gp+0xfffe7818>
   25010:	d9002c17 	ldw	r4,176(sp)
   25014:	d9801e04 	addi	r6,sp,120
   25018:	b80b883a 	mov	r5,r23
   2501c:	002aa6c0 	call	2aa6c <__sprint_r>
   25020:	103e5d26 	beq	r2,zero,24998 <_gp+0xfffe7908>
   25024:	003cad06 	br	242dc <_gp+0xfffe724c>
   25028:	d9002c17 	ldw	r4,176(sp)
   2502c:	d9801e04 	addi	r6,sp,120
   25030:	b80b883a 	mov	r5,r23
   25034:	002aa6c0 	call	2aa6c <__sprint_r>
   25038:	103ca81e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   2503c:	d8c02017 	ldw	r3,128(sp)
   25040:	da000404 	addi	r8,sp,16
   25044:	003e0b06 	br	24874 <_gp+0xfffe77e4>
   25048:	d9002c17 	ldw	r4,176(sp)
   2504c:	d9801e04 	addi	r6,sp,120
   25050:	b80b883a 	mov	r5,r23
   25054:	002aa6c0 	call	2aa6c <__sprint_r>
   25058:	103ca01e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   2505c:	d8c02017 	ldw	r3,128(sp)
   25060:	da000404 	addi	r8,sp,16
   25064:	003dbd06 	br	2475c <_gp+0xfffe76cc>
   25068:	d9002c17 	ldw	r4,176(sp)
   2506c:	d9801e04 	addi	r6,sp,120
   25070:	b80b883a 	mov	r5,r23
   25074:	002aa6c0 	call	2aa6c <__sprint_r>
   25078:	103c981e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   2507c:	d8c02017 	ldw	r3,128(sp)
   25080:	da000404 	addi	r8,sp,16
   25084:	003dc306 	br	24794 <_gp+0xfffe7704>
   25088:	d8802917 	ldw	r2,164(sp)
   2508c:	d8002785 	stb	zero,158(sp)
   25090:	103f0616 	blt	r2,zero,24cac <_gp+0xfffe7c1c>
   25094:	00ffdfc4 	movi	r3,-129
   25098:	9d84b03a 	or	r2,r19,r22
   2509c:	90e4703a 	and	r18,r18,r3
   250a0:	103c6b26 	beq	r2,zero,24250 <_gp+0xfffe71c0>
   250a4:	0039883a 	mov	fp,zero
   250a8:	003e7406 	br	24a7c <_gp+0xfffe79ec>
   250ac:	9080040c 	andi	r2,r18,16
   250b0:	1001b326 	beq	r2,zero,25780 <___vfprintf_internal_r+0x18ac>
   250b4:	d9002d17 	ldw	r4,180(sp)
   250b8:	d9402917 	ldw	r5,164(sp)
   250bc:	d8002785 	stb	zero,158(sp)
   250c0:	20800104 	addi	r2,r4,4
   250c4:	24c00017 	ldw	r19,0(r4)
   250c8:	002d883a 	mov	r22,zero
   250cc:	2801b516 	blt	r5,zero,257a4 <___vfprintf_internal_r+0x18d0>
   250d0:	00ffdfc4 	movi	r3,-129
   250d4:	d8802d15 	stw	r2,180(sp)
   250d8:	90e4703a 	and	r18,r18,r3
   250dc:	983d2726 	beq	r19,zero,2457c <_gp+0xfffe74ec>
   250e0:	0039883a 	mov	fp,zero
   250e4:	003d2a06 	br	24590 <_gp+0xfffe7500>
   250e8:	dc402617 	ldw	r17,152(sp)
   250ec:	0441d30e 	bge	zero,r17,2583c <___vfprintf_internal_r+0x1968>
   250f0:	dc403217 	ldw	r17,200(sp)
   250f4:	d8803317 	ldw	r2,204(sp)
   250f8:	1440010e 	bge	r2,r17,25100 <___vfprintf_internal_r+0x122c>
   250fc:	1023883a 	mov	r17,r2
   25100:	04400a0e 	bge	zero,r17,2512c <___vfprintf_internal_r+0x1258>
   25104:	d8801f17 	ldw	r2,124(sp)
   25108:	1c47883a 	add	r3,r3,r17
   2510c:	44000015 	stw	r16,0(r8)
   25110:	10800044 	addi	r2,r2,1
   25114:	44400115 	stw	r17,4(r8)
   25118:	d8c02015 	stw	r3,128(sp)
   2511c:	d8801f15 	stw	r2,124(sp)
   25120:	010001c4 	movi	r4,7
   25124:	20826516 	blt	r4,r2,25abc <___vfprintf_internal_r+0x1be8>
   25128:	42000204 	addi	r8,r8,8
   2512c:	88026116 	blt	r17,zero,25ab4 <___vfprintf_internal_r+0x1be0>
   25130:	d9003217 	ldw	r4,200(sp)
   25134:	2463c83a 	sub	r17,r4,r17
   25138:	04407b0e 	bge	zero,r17,25328 <___vfprintf_internal_r+0x1454>
   2513c:	05800404 	movi	r22,16
   25140:	d8801f17 	ldw	r2,124(sp)
   25144:	b4419d0e 	bge	r22,r17,257bc <___vfprintf_internal_r+0x18e8>
   25148:	010000f4 	movhi	r4,3
   2514c:	210c9584 	addi	r4,r4,12886
   25150:	d9002b15 	stw	r4,172(sp)
   25154:	070001c4 	movi	fp,7
   25158:	dcc02c17 	ldw	r19,176(sp)
   2515c:	00000306 	br	2516c <___vfprintf_internal_r+0x1298>
   25160:	42000204 	addi	r8,r8,8
   25164:	8c7ffc04 	addi	r17,r17,-16
   25168:	b441970e 	bge	r22,r17,257c8 <___vfprintf_internal_r+0x18f4>
   2516c:	18c00404 	addi	r3,r3,16
   25170:	10800044 	addi	r2,r2,1
   25174:	45000015 	stw	r20,0(r8)
   25178:	45800115 	stw	r22,4(r8)
   2517c:	d8c02015 	stw	r3,128(sp)
   25180:	d8801f15 	stw	r2,124(sp)
   25184:	e0bff60e 	bge	fp,r2,25160 <_gp+0xfffe80d0>
   25188:	d9801e04 	addi	r6,sp,120
   2518c:	b80b883a 	mov	r5,r23
   25190:	9809883a 	mov	r4,r19
   25194:	002aa6c0 	call	2aa6c <__sprint_r>
   25198:	103c501e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   2519c:	d8c02017 	ldw	r3,128(sp)
   251a0:	d8801f17 	ldw	r2,124(sp)
   251a4:	da000404 	addi	r8,sp,16
   251a8:	003fee06 	br	25164 <_gp+0xfffe80d4>
   251ac:	d9002c17 	ldw	r4,176(sp)
   251b0:	d9801e04 	addi	r6,sp,120
   251b4:	b80b883a 	mov	r5,r23
   251b8:	002aa6c0 	call	2aa6c <__sprint_r>
   251bc:	103c471e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   251c0:	d8c02017 	ldw	r3,128(sp)
   251c4:	df002787 	ldb	fp,158(sp)
   251c8:	da000404 	addi	r8,sp,16
   251cc:	003d5606 	br	24728 <_gp+0xfffe7698>
   251d0:	9080040c 	andi	r2,r18,16
   251d4:	10016126 	beq	r2,zero,2575c <___vfprintf_internal_r+0x1888>
   251d8:	d8802d17 	ldw	r2,180(sp)
   251dc:	14c00017 	ldw	r19,0(r2)
   251e0:	10800104 	addi	r2,r2,4
   251e4:	d8802d15 	stw	r2,180(sp)
   251e8:	982dd7fa 	srai	r22,r19,31
   251ec:	b005883a 	mov	r2,r22
   251f0:	003c8206 	br	243fc <_gp+0xfffe736c>
   251f4:	9080040c 	andi	r2,r18,16
   251f8:	10003526 	beq	r2,zero,252d0 <___vfprintf_internal_r+0x13fc>
   251fc:	d9402d17 	ldw	r5,180(sp)
   25200:	d8c02917 	ldw	r3,164(sp)
   25204:	d8002785 	stb	zero,158(sp)
   25208:	28800104 	addi	r2,r5,4
   2520c:	2cc00017 	ldw	r19,0(r5)
   25210:	002d883a 	mov	r22,zero
   25214:	18003716 	blt	r3,zero,252f4 <___vfprintf_internal_r+0x1420>
   25218:	00ffdfc4 	movi	r3,-129
   2521c:	d8802d15 	stw	r2,180(sp)
   25220:	90e4703a 	and	r18,r18,r3
   25224:	0039883a 	mov	fp,zero
   25228:	983df326 	beq	r19,zero,249f8 <_gp+0xfffe7968>
   2522c:	00800244 	movi	r2,9
   25230:	14fc7b36 	bltu	r2,r19,24420 <_gp+0xfffe7390>
   25234:	d8c02817 	ldw	r3,160(sp)
   25238:	dc001dc4 	addi	r16,sp,119
   2523c:	9cc00c04 	addi	r19,r19,48
   25240:	1c07c83a 	sub	r3,r3,r16
   25244:	dcc01dc5 	stb	r19,119(sp)
   25248:	d8c02e15 	stw	r3,184(sp)
   2524c:	003ce806 	br	245f0 <_gp+0xfffe7560>
   25250:	d8803317 	ldw	r2,204(sp)
   25254:	143fffc4 	addi	r16,r2,-1
   25258:	043f4d0e 	bge	zero,r16,24f90 <_gp+0xfffe7f00>
   2525c:	07000404 	movi	fp,16
   25260:	e400810e 	bge	fp,r16,25468 <___vfprintf_internal_r+0x1594>
   25264:	014000f4 	movhi	r5,3
   25268:	294c9584 	addi	r5,r5,12886
   2526c:	d9402b15 	stw	r5,172(sp)
   25270:	01c001c4 	movi	r7,7
   25274:	dcc02c17 	ldw	r19,176(sp)
   25278:	00000306 	br	25288 <___vfprintf_internal_r+0x13b4>
   2527c:	b5800204 	addi	r22,r22,8
   25280:	843ffc04 	addi	r16,r16,-16
   25284:	e4007b0e 	bge	fp,r16,25474 <___vfprintf_internal_r+0x15a0>
   25288:	18c00404 	addi	r3,r3,16
   2528c:	8c400044 	addi	r17,r17,1
   25290:	b5000015 	stw	r20,0(r22)
   25294:	b7000115 	stw	fp,4(r22)
   25298:	d8c02015 	stw	r3,128(sp)
   2529c:	dc401f15 	stw	r17,124(sp)
   252a0:	3c7ff60e 	bge	r7,r17,2527c <_gp+0xfffe81ec>
   252a4:	d9801e04 	addi	r6,sp,120
   252a8:	b80b883a 	mov	r5,r23
   252ac:	9809883a 	mov	r4,r19
   252b0:	d9c03c15 	stw	r7,240(sp)
   252b4:	002aa6c0 	call	2aa6c <__sprint_r>
   252b8:	d9c03c17 	ldw	r7,240(sp)
   252bc:	103c071e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   252c0:	d8c02017 	ldw	r3,128(sp)
   252c4:	dc401f17 	ldw	r17,124(sp)
   252c8:	dd800404 	addi	r22,sp,16
   252cc:	003fec06 	br	25280 <_gp+0xfffe81f0>
   252d0:	9080100c 	andi	r2,r18,64
   252d4:	d8002785 	stb	zero,158(sp)
   252d8:	10010e26 	beq	r2,zero,25714 <___vfprintf_internal_r+0x1840>
   252dc:	d9002d17 	ldw	r4,180(sp)
   252e0:	d9402917 	ldw	r5,164(sp)
   252e4:	002d883a 	mov	r22,zero
   252e8:	20800104 	addi	r2,r4,4
   252ec:	24c0000b 	ldhu	r19,0(r4)
   252f0:	283fc90e 	bge	r5,zero,25218 <_gp+0xfffe8188>
   252f4:	d8802d15 	stw	r2,180(sp)
   252f8:	0039883a 	mov	fp,zero
   252fc:	9d84b03a 	or	r2,r19,r22
   25300:	103c461e 	bne	r2,zero,2441c <_gp+0xfffe738c>
   25304:	00800044 	movi	r2,1
   25308:	003e6c06 	br	24cbc <_gp+0xfffe7c2c>
   2530c:	d9002c17 	ldw	r4,176(sp)
   25310:	d9801e04 	addi	r6,sp,120
   25314:	b80b883a 	mov	r5,r23
   25318:	002aa6c0 	call	2aa6c <__sprint_r>
   2531c:	103bef1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25320:	d8c02017 	ldw	r3,128(sp)
   25324:	da000404 	addi	r8,sp,16
   25328:	d9003217 	ldw	r4,200(sp)
   2532c:	d8802617 	ldw	r2,152(sp)
   25330:	d9403317 	ldw	r5,204(sp)
   25334:	8123883a 	add	r17,r16,r4
   25338:	11400216 	blt	r2,r5,25344 <___vfprintf_internal_r+0x1470>
   2533c:	9100004c 	andi	r4,r18,1
   25340:	20000d26 	beq	r4,zero,25378 <___vfprintf_internal_r+0x14a4>
   25344:	d9003717 	ldw	r4,220(sp)
   25348:	d9403417 	ldw	r5,208(sp)
   2534c:	1907883a 	add	r3,r3,r4
   25350:	d9001f17 	ldw	r4,124(sp)
   25354:	41400015 	stw	r5,0(r8)
   25358:	d9403717 	ldw	r5,220(sp)
   2535c:	21000044 	addi	r4,r4,1
   25360:	d8c02015 	stw	r3,128(sp)
   25364:	41400115 	stw	r5,4(r8)
   25368:	d9001f15 	stw	r4,124(sp)
   2536c:	014001c4 	movi	r5,7
   25370:	2901e816 	blt	r5,r4,25b14 <___vfprintf_internal_r+0x1c40>
   25374:	42000204 	addi	r8,r8,8
   25378:	d9003317 	ldw	r4,204(sp)
   2537c:	8121883a 	add	r16,r16,r4
   25380:	2085c83a 	sub	r2,r4,r2
   25384:	8461c83a 	sub	r16,r16,r17
   25388:	1400010e 	bge	r2,r16,25390 <___vfprintf_internal_r+0x14bc>
   2538c:	1021883a 	mov	r16,r2
   25390:	04000a0e 	bge	zero,r16,253bc <___vfprintf_internal_r+0x14e8>
   25394:	d9001f17 	ldw	r4,124(sp)
   25398:	1c07883a 	add	r3,r3,r16
   2539c:	44400015 	stw	r17,0(r8)
   253a0:	21000044 	addi	r4,r4,1
   253a4:	44000115 	stw	r16,4(r8)
   253a8:	d8c02015 	stw	r3,128(sp)
   253ac:	d9001f15 	stw	r4,124(sp)
   253b0:	014001c4 	movi	r5,7
   253b4:	2901fb16 	blt	r5,r4,25ba4 <___vfprintf_internal_r+0x1cd0>
   253b8:	42000204 	addi	r8,r8,8
   253bc:	8001f716 	blt	r16,zero,25b9c <___vfprintf_internal_r+0x1cc8>
   253c0:	1421c83a 	sub	r16,r2,r16
   253c4:	043d380e 	bge	zero,r16,248a8 <_gp+0xfffe7818>
   253c8:	04400404 	movi	r17,16
   253cc:	d8801f17 	ldw	r2,124(sp)
   253d0:	8c3efb0e 	bge	r17,r16,24fc0 <_gp+0xfffe7f30>
   253d4:	014000f4 	movhi	r5,3
   253d8:	294c9584 	addi	r5,r5,12886
   253dc:	d9402b15 	stw	r5,172(sp)
   253e0:	058001c4 	movi	r22,7
   253e4:	dcc02c17 	ldw	r19,176(sp)
   253e8:	00000306 	br	253f8 <___vfprintf_internal_r+0x1524>
   253ec:	42000204 	addi	r8,r8,8
   253f0:	843ffc04 	addi	r16,r16,-16
   253f4:	8c3ef50e 	bge	r17,r16,24fcc <_gp+0xfffe7f3c>
   253f8:	18c00404 	addi	r3,r3,16
   253fc:	10800044 	addi	r2,r2,1
   25400:	45000015 	stw	r20,0(r8)
   25404:	44400115 	stw	r17,4(r8)
   25408:	d8c02015 	stw	r3,128(sp)
   2540c:	d8801f15 	stw	r2,124(sp)
   25410:	b0bff60e 	bge	r22,r2,253ec <_gp+0xfffe835c>
   25414:	d9801e04 	addi	r6,sp,120
   25418:	b80b883a 	mov	r5,r23
   2541c:	9809883a 	mov	r4,r19
   25420:	002aa6c0 	call	2aa6c <__sprint_r>
   25424:	103bad1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25428:	d8c02017 	ldw	r3,128(sp)
   2542c:	d8801f17 	ldw	r2,124(sp)
   25430:	da000404 	addi	r8,sp,16
   25434:	003fee06 	br	253f0 <_gp+0xfffe8360>
   25438:	9088703a 	and	r4,r18,r2
   2543c:	203eab1e 	bne	r4,zero,24eec <_gp+0xfffe7e5c>
   25440:	dc401f17 	ldw	r17,124(sp)
   25444:	40800115 	stw	r2,4(r8)
   25448:	44000015 	stw	r16,0(r8)
   2544c:	8c400044 	addi	r17,r17,1
   25450:	d8c02015 	stw	r3,128(sp)
   25454:	dc401f15 	stw	r17,124(sp)
   25458:	008001c4 	movi	r2,7
   2545c:	14400e16 	blt	r2,r17,25498 <___vfprintf_internal_r+0x15c4>
   25460:	45800204 	addi	r22,r8,8
   25464:	003eca06 	br	24f90 <_gp+0xfffe7f00>
   25468:	010000f4 	movhi	r4,3
   2546c:	210c9584 	addi	r4,r4,12886
   25470:	d9002b15 	stw	r4,172(sp)
   25474:	d8802b17 	ldw	r2,172(sp)
   25478:	1c07883a 	add	r3,r3,r16
   2547c:	8c400044 	addi	r17,r17,1
   25480:	b0800015 	stw	r2,0(r22)
   25484:	b4000115 	stw	r16,4(r22)
   25488:	d8c02015 	stw	r3,128(sp)
   2548c:	dc401f15 	stw	r17,124(sp)
   25490:	008001c4 	movi	r2,7
   25494:	147ebd0e 	bge	r2,r17,24f8c <_gp+0xfffe7efc>
   25498:	d9002c17 	ldw	r4,176(sp)
   2549c:	d9801e04 	addi	r6,sp,120
   254a0:	b80b883a 	mov	r5,r23
   254a4:	002aa6c0 	call	2aa6c <__sprint_r>
   254a8:	103b8c1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   254ac:	d8c02017 	ldw	r3,128(sp)
   254b0:	dc401f17 	ldw	r17,124(sp)
   254b4:	dd800404 	addi	r22,sp,16
   254b8:	003eb506 	br	24f90 <_gp+0xfffe7f00>
   254bc:	d9002c17 	ldw	r4,176(sp)
   254c0:	d9801e04 	addi	r6,sp,120
   254c4:	b80b883a 	mov	r5,r23
   254c8:	002aa6c0 	call	2aa6c <__sprint_r>
   254cc:	103b831e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   254d0:	d8c02017 	ldw	r3,128(sp)
   254d4:	dc401f17 	ldw	r17,124(sp)
   254d8:	da000404 	addi	r8,sp,16
   254dc:	003e8d06 	br	24f14 <_gp+0xfffe7e84>
   254e0:	d9002c17 	ldw	r4,176(sp)
   254e4:	d9801e04 	addi	r6,sp,120
   254e8:	b80b883a 	mov	r5,r23
   254ec:	002aa6c0 	call	2aa6c <__sprint_r>
   254f0:	103b7a1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   254f4:	d8c02017 	ldw	r3,128(sp)
   254f8:	dc401f17 	ldw	r17,124(sp)
   254fc:	dd800404 	addi	r22,sp,16
   25500:	003e8f06 	br	24f40 <_gp+0xfffe7eb0>
   25504:	0027883a 	mov	r19,zero
   25508:	003f4a06 	br	25234 <_gp+0xfffe81a4>
   2550c:	d9002c17 	ldw	r4,176(sp)
   25510:	d9801e04 	addi	r6,sp,120
   25514:	b80b883a 	mov	r5,r23
   25518:	002aa6c0 	call	2aa6c <__sprint_r>
   2551c:	103b6f1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25520:	d8c02017 	ldw	r3,128(sp)
   25524:	da000404 	addi	r8,sp,16
   25528:	003c9d06 	br	247a0 <_gp+0xfffe7710>
   2552c:	04e7c83a 	sub	r19,zero,r19
   25530:	9804c03a 	cmpne	r2,r19,zero
   25534:	05adc83a 	sub	r22,zero,r22
   25538:	b0adc83a 	sub	r22,r22,r2
   2553c:	d8802917 	ldw	r2,164(sp)
   25540:	07000b44 	movi	fp,45
   25544:	df002785 	stb	fp,158(sp)
   25548:	10017b16 	blt	r2,zero,25b38 <___vfprintf_internal_r+0x1c64>
   2554c:	00bfdfc4 	movi	r2,-129
   25550:	90a4703a 	and	r18,r18,r2
   25554:	003bb106 	br	2441c <_gp+0xfffe738c>
   25558:	d9003617 	ldw	r4,216(sp)
   2555c:	d9403817 	ldw	r5,224(sp)
   25560:	da003d15 	stw	r8,244(sp)
   25564:	002a7c00 	call	2a7c0 <__fpclassifyd>
   25568:	da003d17 	ldw	r8,244(sp)
   2556c:	1000f026 	beq	r2,zero,25930 <___vfprintf_internal_r+0x1a5c>
   25570:	d9002917 	ldw	r4,164(sp)
   25574:	05bff7c4 	movi	r22,-33
   25578:	00bfffc4 	movi	r2,-1
   2557c:	8dac703a 	and	r22,r17,r22
   25580:	20820026 	beq	r4,r2,25d84 <___vfprintf_internal_r+0x1eb0>
   25584:	008011c4 	movi	r2,71
   25588:	b081f726 	beq	r22,r2,25d68 <___vfprintf_internal_r+0x1e94>
   2558c:	d9003817 	ldw	r4,224(sp)
   25590:	90c04014 	ori	r3,r18,256
   25594:	d8c02b15 	stw	r3,172(sp)
   25598:	20021516 	blt	r4,zero,25df0 <___vfprintf_internal_r+0x1f1c>
   2559c:	dcc03817 	ldw	r19,224(sp)
   255a0:	d8002a05 	stb	zero,168(sp)
   255a4:	00801984 	movi	r2,102
   255a8:	8881f926 	beq	r17,r2,25d90 <___vfprintf_internal_r+0x1ebc>
   255ac:	00801184 	movi	r2,70
   255b0:	88821c26 	beq	r17,r2,25e24 <___vfprintf_internal_r+0x1f50>
   255b4:	00801144 	movi	r2,69
   255b8:	b081ef26 	beq	r22,r2,25d78 <___vfprintf_internal_r+0x1ea4>
   255bc:	d8c02917 	ldw	r3,164(sp)
   255c0:	d8802104 	addi	r2,sp,132
   255c4:	d8800315 	stw	r2,12(sp)
   255c8:	d9403617 	ldw	r5,216(sp)
   255cc:	d8802504 	addi	r2,sp,148
   255d0:	d9002c17 	ldw	r4,176(sp)
   255d4:	d8800215 	stw	r2,8(sp)
   255d8:	d8802604 	addi	r2,sp,152
   255dc:	d8c00015 	stw	r3,0(sp)
   255e0:	d8800115 	stw	r2,4(sp)
   255e4:	01c00084 	movi	r7,2
   255e8:	980d883a 	mov	r6,r19
   255ec:	d8c03c15 	stw	r3,240(sp)
   255f0:	da003d15 	stw	r8,244(sp)
   255f4:	00264f80 	call	264f8 <_dtoa_r>
   255f8:	1021883a 	mov	r16,r2
   255fc:	008019c4 	movi	r2,103
   25600:	d8c03c17 	ldw	r3,240(sp)
   25604:	da003d17 	ldw	r8,244(sp)
   25608:	88817126 	beq	r17,r2,25bd0 <___vfprintf_internal_r+0x1cfc>
   2560c:	008011c4 	movi	r2,71
   25610:	88829226 	beq	r17,r2,2605c <___vfprintf_internal_r+0x2188>
   25614:	80f9883a 	add	fp,r16,r3
   25618:	d9003617 	ldw	r4,216(sp)
   2561c:	000d883a 	mov	r6,zero
   25620:	000f883a 	mov	r7,zero
   25624:	980b883a 	mov	r5,r19
   25628:	da003d15 	stw	r8,244(sp)
   2562c:	002e5300 	call	2e530 <__eqdf2>
   25630:	da003d17 	ldw	r8,244(sp)
   25634:	10018d26 	beq	r2,zero,25c6c <___vfprintf_internal_r+0x1d98>
   25638:	d8802117 	ldw	r2,132(sp)
   2563c:	1700062e 	bgeu	r2,fp,25658 <___vfprintf_internal_r+0x1784>
   25640:	01000c04 	movi	r4,48
   25644:	10c00044 	addi	r3,r2,1
   25648:	d8c02115 	stw	r3,132(sp)
   2564c:	11000005 	stb	r4,0(r2)
   25650:	d8802117 	ldw	r2,132(sp)
   25654:	173ffb36 	bltu	r2,fp,25644 <_gp+0xfffe85b4>
   25658:	1405c83a 	sub	r2,r2,r16
   2565c:	d8803315 	stw	r2,204(sp)
   25660:	008011c4 	movi	r2,71
   25664:	b0817626 	beq	r22,r2,25c40 <___vfprintf_internal_r+0x1d6c>
   25668:	00801944 	movi	r2,101
   2566c:	1442810e 	bge	r2,r17,26074 <___vfprintf_internal_r+0x21a0>
   25670:	d8c02617 	ldw	r3,152(sp)
   25674:	00801984 	movi	r2,102
   25678:	d8c03215 	stw	r3,200(sp)
   2567c:	8881fe26 	beq	r17,r2,25e78 <___vfprintf_internal_r+0x1fa4>
   25680:	d8c03217 	ldw	r3,200(sp)
   25684:	d9003317 	ldw	r4,204(sp)
   25688:	1901dd16 	blt	r3,r4,25e00 <___vfprintf_internal_r+0x1f2c>
   2568c:	9480004c 	andi	r18,r18,1
   25690:	90022b1e 	bne	r18,zero,25f40 <___vfprintf_internal_r+0x206c>
   25694:	1805883a 	mov	r2,r3
   25698:	18028016 	blt	r3,zero,2609c <___vfprintf_internal_r+0x21c8>
   2569c:	d8c03217 	ldw	r3,200(sp)
   256a0:	044019c4 	movi	r17,103
   256a4:	d8c02e15 	stw	r3,184(sp)
   256a8:	df002a07 	ldb	fp,168(sp)
   256ac:	e001531e 	bne	fp,zero,25bfc <___vfprintf_internal_r+0x1d28>
   256b0:	df002783 	ldbu	fp,158(sp)
   256b4:	d8802a15 	stw	r2,168(sp)
   256b8:	dc802b17 	ldw	r18,172(sp)
   256bc:	d8002915 	stw	zero,164(sp)
   256c0:	003bd106 	br	24608 <_gp+0xfffe7578>
   256c4:	d8802d17 	ldw	r2,180(sp)
   256c8:	d8c02d17 	ldw	r3,180(sp)
   256cc:	d9002d17 	ldw	r4,180(sp)
   256d0:	10800017 	ldw	r2,0(r2)
   256d4:	18c00117 	ldw	r3,4(r3)
   256d8:	21000204 	addi	r4,r4,8
   256dc:	d8803615 	stw	r2,216(sp)
   256e0:	d8c03815 	stw	r3,224(sp)
   256e4:	d9002d15 	stw	r4,180(sp)
   256e8:	003b7506 	br	244c0 <_gp+0xfffe7430>
   256ec:	ac400007 	ldb	r17,0(r21)
   256f0:	003a5906 	br	24058 <_gp+0xfffe6fc8>
   256f4:	9080100c 	andi	r2,r18,64
   256f8:	1000a826 	beq	r2,zero,2599c <___vfprintf_internal_r+0x1ac8>
   256fc:	d9002d17 	ldw	r4,180(sp)
   25700:	002d883a 	mov	r22,zero
   25704:	24c0000b 	ldhu	r19,0(r4)
   25708:	21000104 	addi	r4,r4,4
   2570c:	d9002d15 	stw	r4,180(sp)
   25710:	003ccb06 	br	24a40 <_gp+0xfffe79b0>
   25714:	d8c02d17 	ldw	r3,180(sp)
   25718:	d9002917 	ldw	r4,164(sp)
   2571c:	002d883a 	mov	r22,zero
   25720:	18800104 	addi	r2,r3,4
   25724:	1cc00017 	ldw	r19,0(r3)
   25728:	203ebb0e 	bge	r4,zero,25218 <_gp+0xfffe8188>
   2572c:	003ef106 	br	252f4 <_gp+0xfffe8264>
   25730:	9080040c 	andi	r2,r18,16
   25734:	1000921e 	bne	r2,zero,25980 <___vfprintf_internal_r+0x1aac>
   25738:	9480100c 	andi	r18,r18,64
   2573c:	90013926 	beq	r18,zero,25c24 <___vfprintf_internal_r+0x1d50>
   25740:	d9002d17 	ldw	r4,180(sp)
   25744:	d9402f17 	ldw	r5,188(sp)
   25748:	20800017 	ldw	r2,0(r4)
   2574c:	21000104 	addi	r4,r4,4
   25750:	d9002d15 	stw	r4,180(sp)
   25754:	1140000d 	sth	r5,0(r2)
   25758:	003a1606 	br	23fb4 <_gp+0xfffe6f24>
   2575c:	9080100c 	andi	r2,r18,64
   25760:	10008026 	beq	r2,zero,25964 <___vfprintf_internal_r+0x1a90>
   25764:	d8c02d17 	ldw	r3,180(sp)
   25768:	1cc0000f 	ldh	r19,0(r3)
   2576c:	18c00104 	addi	r3,r3,4
   25770:	d8c02d15 	stw	r3,180(sp)
   25774:	982dd7fa 	srai	r22,r19,31
   25778:	b005883a 	mov	r2,r22
   2577c:	003b1f06 	br	243fc <_gp+0xfffe736c>
   25780:	9080100c 	andi	r2,r18,64
   25784:	d8002785 	stb	zero,158(sp)
   25788:	10008a1e 	bne	r2,zero,259b4 <___vfprintf_internal_r+0x1ae0>
   2578c:	d9402d17 	ldw	r5,180(sp)
   25790:	d8c02917 	ldw	r3,164(sp)
   25794:	002d883a 	mov	r22,zero
   25798:	28800104 	addi	r2,r5,4
   2579c:	2cc00017 	ldw	r19,0(r5)
   257a0:	183e4b0e 	bge	r3,zero,250d0 <_gp+0xfffe8040>
   257a4:	9d86b03a 	or	r3,r19,r22
   257a8:	d8802d15 	stw	r2,180(sp)
   257ac:	183e4c1e 	bne	r3,zero,250e0 <_gp+0xfffe8050>
   257b0:	0039883a 	mov	fp,zero
   257b4:	0005883a 	mov	r2,zero
   257b8:	003d4006 	br	24cbc <_gp+0xfffe7c2c>
   257bc:	014000f4 	movhi	r5,3
   257c0:	294c9584 	addi	r5,r5,12886
   257c4:	d9402b15 	stw	r5,172(sp)
   257c8:	d9402b17 	ldw	r5,172(sp)
   257cc:	1c47883a 	add	r3,r3,r17
   257d0:	10800044 	addi	r2,r2,1
   257d4:	41400015 	stw	r5,0(r8)
   257d8:	44400115 	stw	r17,4(r8)
   257dc:	d8c02015 	stw	r3,128(sp)
   257e0:	d8801f15 	stw	r2,124(sp)
   257e4:	010001c4 	movi	r4,7
   257e8:	20bec816 	blt	r4,r2,2530c <_gp+0xfffe827c>
   257ec:	42000204 	addi	r8,r8,8
   257f0:	003ecd06 	br	25328 <_gp+0xfffe8298>
   257f4:	d9002917 	ldw	r4,164(sp)
   257f8:	d8002785 	stb	zero,158(sp)
   257fc:	203d2d16 	blt	r4,zero,24cb4 <_gp+0xfffe7c24>
   25800:	00bfdfc4 	movi	r2,-129
   25804:	90a4703a 	and	r18,r18,r2
   25808:	003a9106 	br	24250 <_gp+0xfffe71c0>
   2580c:	010000f4 	movhi	r4,3
   25810:	210c9584 	addi	r4,r4,12886
   25814:	d9002b15 	stw	r4,172(sp)
   25818:	003c0c06 	br	2484c <_gp+0xfffe77bc>
   2581c:	d9002c17 	ldw	r4,176(sp)
   25820:	d9801e04 	addi	r6,sp,120
   25824:	b80b883a 	mov	r5,r23
   25828:	002aa6c0 	call	2aa6c <__sprint_r>
   2582c:	103aab1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25830:	d8c02017 	ldw	r3,128(sp)
   25834:	da000404 	addi	r8,sp,16
   25838:	003d4106 	br	24d40 <_gp+0xfffe7cb0>
   2583c:	d8801f17 	ldw	r2,124(sp)
   25840:	014000f4 	movhi	r5,3
   25844:	01000044 	movi	r4,1
   25848:	18c00044 	addi	r3,r3,1
   2584c:	10800044 	addi	r2,r2,1
   25850:	294c9504 	addi	r5,r5,12884
   25854:	41000115 	stw	r4,4(r8)
   25858:	41400015 	stw	r5,0(r8)
   2585c:	d8c02015 	stw	r3,128(sp)
   25860:	d8801f15 	stw	r2,124(sp)
   25864:	010001c4 	movi	r4,7
   25868:	20805c16 	blt	r4,r2,259dc <___vfprintf_internal_r+0x1b08>
   2586c:	42000204 	addi	r8,r8,8
   25870:	8800041e 	bne	r17,zero,25884 <___vfprintf_internal_r+0x19b0>
   25874:	d8803317 	ldw	r2,204(sp)
   25878:	1000021e 	bne	r2,zero,25884 <___vfprintf_internal_r+0x19b0>
   2587c:	9080004c 	andi	r2,r18,1
   25880:	103c0926 	beq	r2,zero,248a8 <_gp+0xfffe7818>
   25884:	d9003717 	ldw	r4,220(sp)
   25888:	d8801f17 	ldw	r2,124(sp)
   2588c:	d9403417 	ldw	r5,208(sp)
   25890:	20c7883a 	add	r3,r4,r3
   25894:	10800044 	addi	r2,r2,1
   25898:	41000115 	stw	r4,4(r8)
   2589c:	41400015 	stw	r5,0(r8)
   258a0:	d8c02015 	stw	r3,128(sp)
   258a4:	d8801f15 	stw	r2,124(sp)
   258a8:	010001c4 	movi	r4,7
   258ac:	20812116 	blt	r4,r2,25d34 <___vfprintf_internal_r+0x1e60>
   258b0:	42000204 	addi	r8,r8,8
   258b4:	0463c83a 	sub	r17,zero,r17
   258b8:	0440730e 	bge	zero,r17,25a88 <___vfprintf_internal_r+0x1bb4>
   258bc:	05800404 	movi	r22,16
   258c0:	b440860e 	bge	r22,r17,25adc <___vfprintf_internal_r+0x1c08>
   258c4:	014000f4 	movhi	r5,3
   258c8:	294c9584 	addi	r5,r5,12886
   258cc:	d9402b15 	stw	r5,172(sp)
   258d0:	070001c4 	movi	fp,7
   258d4:	dcc02c17 	ldw	r19,176(sp)
   258d8:	00000306 	br	258e8 <___vfprintf_internal_r+0x1a14>
   258dc:	42000204 	addi	r8,r8,8
   258e0:	8c7ffc04 	addi	r17,r17,-16
   258e4:	b440800e 	bge	r22,r17,25ae8 <___vfprintf_internal_r+0x1c14>
   258e8:	18c00404 	addi	r3,r3,16
   258ec:	10800044 	addi	r2,r2,1
   258f0:	45000015 	stw	r20,0(r8)
   258f4:	45800115 	stw	r22,4(r8)
   258f8:	d8c02015 	stw	r3,128(sp)
   258fc:	d8801f15 	stw	r2,124(sp)
   25900:	e0bff60e 	bge	fp,r2,258dc <_gp+0xfffe884c>
   25904:	d9801e04 	addi	r6,sp,120
   25908:	b80b883a 	mov	r5,r23
   2590c:	9809883a 	mov	r4,r19
   25910:	002aa6c0 	call	2aa6c <__sprint_r>
   25914:	103a711e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25918:	d8c02017 	ldw	r3,128(sp)
   2591c:	d8801f17 	ldw	r2,124(sp)
   25920:	da000404 	addi	r8,sp,16
   25924:	003fee06 	br	258e0 <_gp+0xfffe8850>
   25928:	00bfffc4 	movi	r2,-1
   2592c:	003a6f06 	br	242ec <_gp+0xfffe725c>
   25930:	008011c4 	movi	r2,71
   25934:	1440b816 	blt	r2,r17,25c18 <___vfprintf_internal_r+0x1d44>
   25938:	040000f4 	movhi	r16,3
   2593c:	840c8704 	addi	r16,r16,12828
   25940:	00c000c4 	movi	r3,3
   25944:	00bfdfc4 	movi	r2,-129
   25948:	d8c02a15 	stw	r3,168(sp)
   2594c:	90a4703a 	and	r18,r18,r2
   25950:	df002783 	ldbu	fp,158(sp)
   25954:	d8c02e15 	stw	r3,184(sp)
   25958:	d8002915 	stw	zero,164(sp)
   2595c:	d8003215 	stw	zero,200(sp)
   25960:	003b2906 	br	24608 <_gp+0xfffe7578>
   25964:	d9002d17 	ldw	r4,180(sp)
   25968:	24c00017 	ldw	r19,0(r4)
   2596c:	21000104 	addi	r4,r4,4
   25970:	d9002d15 	stw	r4,180(sp)
   25974:	982dd7fa 	srai	r22,r19,31
   25978:	b005883a 	mov	r2,r22
   2597c:	003a9f06 	br	243fc <_gp+0xfffe736c>
   25980:	d9402d17 	ldw	r5,180(sp)
   25984:	d8c02f17 	ldw	r3,188(sp)
   25988:	28800017 	ldw	r2,0(r5)
   2598c:	29400104 	addi	r5,r5,4
   25990:	d9402d15 	stw	r5,180(sp)
   25994:	10c00015 	stw	r3,0(r2)
   25998:	00398606 	br	23fb4 <_gp+0xfffe6f24>
   2599c:	d9402d17 	ldw	r5,180(sp)
   259a0:	002d883a 	mov	r22,zero
   259a4:	2cc00017 	ldw	r19,0(r5)
   259a8:	29400104 	addi	r5,r5,4
   259ac:	d9402d15 	stw	r5,180(sp)
   259b0:	003c2306 	br	24a40 <_gp+0xfffe79b0>
   259b4:	d8c02d17 	ldw	r3,180(sp)
   259b8:	d9002917 	ldw	r4,164(sp)
   259bc:	002d883a 	mov	r22,zero
   259c0:	18800104 	addi	r2,r3,4
   259c4:	1cc0000b 	ldhu	r19,0(r3)
   259c8:	203dc10e 	bge	r4,zero,250d0 <_gp+0xfffe8040>
   259cc:	003f7506 	br	257a4 <_gp+0xfffe8714>
   259d0:	040000f4 	movhi	r16,3
   259d4:	840c8504 	addi	r16,r16,12820
   259d8:	003acc06 	br	2450c <_gp+0xfffe747c>
   259dc:	d9002c17 	ldw	r4,176(sp)
   259e0:	d9801e04 	addi	r6,sp,120
   259e4:	b80b883a 	mov	r5,r23
   259e8:	002aa6c0 	call	2aa6c <__sprint_r>
   259ec:	103a3b1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   259f0:	dc402617 	ldw	r17,152(sp)
   259f4:	d8c02017 	ldw	r3,128(sp)
   259f8:	da000404 	addi	r8,sp,16
   259fc:	003f9c06 	br	25870 <_gp+0xfffe87e0>
   25a00:	ac400043 	ldbu	r17,1(r21)
   25a04:	94800814 	ori	r18,r18,32
   25a08:	ad400044 	addi	r21,r21,1
   25a0c:	8c403fcc 	andi	r17,r17,255
   25a10:	8c40201c 	xori	r17,r17,128
   25a14:	8c7fe004 	addi	r17,r17,-128
   25a18:	00398f06 	br	24058 <_gp+0xfffe6fc8>
   25a1c:	d8c02d15 	stw	r3,180(sp)
   25a20:	0039883a 	mov	fp,zero
   25a24:	003e3506 	br	252fc <_gp+0xfffe826c>
   25a28:	d9002c17 	ldw	r4,176(sp)
   25a2c:	d9801e04 	addi	r6,sp,120
   25a30:	b80b883a 	mov	r5,r23
   25a34:	002aa6c0 	call	2aa6c <__sprint_r>
   25a38:	103a281e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25a3c:	d8c02017 	ldw	r3,128(sp)
   25a40:	da000404 	addi	r8,sp,16
   25a44:	003cd006 	br	24d88 <_gp+0xfffe7cf8>
   25a48:	8009883a 	mov	r4,r16
   25a4c:	da003d15 	stw	r8,244(sp)
   25a50:	0023e3c0 	call	23e3c <strlen>
   25a54:	d8802e15 	stw	r2,184(sp)
   25a58:	da003d17 	ldw	r8,244(sp)
   25a5c:	103c340e 	bge	r2,zero,24b30 <_gp+0xfffe7aa0>
   25a60:	0005883a 	mov	r2,zero
   25a64:	003c3206 	br	24b30 <_gp+0xfffe7aa0>
   25a68:	d9002c17 	ldw	r4,176(sp)
   25a6c:	d9801e04 	addi	r6,sp,120
   25a70:	b80b883a 	mov	r5,r23
   25a74:	002aa6c0 	call	2aa6c <__sprint_r>
   25a78:	103a181e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25a7c:	d8c02017 	ldw	r3,128(sp)
   25a80:	d8801f17 	ldw	r2,124(sp)
   25a84:	da000404 	addi	r8,sp,16
   25a88:	d9403317 	ldw	r5,204(sp)
   25a8c:	10800044 	addi	r2,r2,1
   25a90:	44000015 	stw	r16,0(r8)
   25a94:	28c7883a 	add	r3,r5,r3
   25a98:	003b7d06 	br	24890 <_gp+0xfffe7800>
   25a9c:	010000f4 	movhi	r4,3
   25aa0:	210c9984 	addi	r4,r4,12902
   25aa4:	d9003515 	stw	r4,212(sp)
   25aa8:	003b1406 	br	246fc <_gp+0xfffe766c>
   25aac:	013fffc4 	movi	r4,-1
   25ab0:	003a3506 	br	24388 <_gp+0xfffe72f8>
   25ab4:	0023883a 	mov	r17,zero
   25ab8:	003d9d06 	br	25130 <_gp+0xfffe80a0>
   25abc:	d9002c17 	ldw	r4,176(sp)
   25ac0:	d9801e04 	addi	r6,sp,120
   25ac4:	b80b883a 	mov	r5,r23
   25ac8:	002aa6c0 	call	2aa6c <__sprint_r>
   25acc:	103a031e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25ad0:	d8c02017 	ldw	r3,128(sp)
   25ad4:	da000404 	addi	r8,sp,16
   25ad8:	003d9406 	br	2512c <_gp+0xfffe809c>
   25adc:	010000f4 	movhi	r4,3
   25ae0:	210c9584 	addi	r4,r4,12886
   25ae4:	d9002b15 	stw	r4,172(sp)
   25ae8:	d9002b17 	ldw	r4,172(sp)
   25aec:	1c47883a 	add	r3,r3,r17
   25af0:	10800044 	addi	r2,r2,1
   25af4:	41000015 	stw	r4,0(r8)
   25af8:	44400115 	stw	r17,4(r8)
   25afc:	d8c02015 	stw	r3,128(sp)
   25b00:	d8801f15 	stw	r2,124(sp)
   25b04:	010001c4 	movi	r4,7
   25b08:	20bfd716 	blt	r4,r2,25a68 <_gp+0xfffe89d8>
   25b0c:	42000204 	addi	r8,r8,8
   25b10:	003fdd06 	br	25a88 <_gp+0xfffe89f8>
   25b14:	d9002c17 	ldw	r4,176(sp)
   25b18:	d9801e04 	addi	r6,sp,120
   25b1c:	b80b883a 	mov	r5,r23
   25b20:	002aa6c0 	call	2aa6c <__sprint_r>
   25b24:	1039ed1e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25b28:	d8802617 	ldw	r2,152(sp)
   25b2c:	d8c02017 	ldw	r3,128(sp)
   25b30:	da000404 	addi	r8,sp,16
   25b34:	003e1006 	br	25378 <_gp+0xfffe82e8>
   25b38:	00800044 	movi	r2,1
   25b3c:	10803fcc 	andi	r2,r2,255
   25b40:	00c00044 	movi	r3,1
   25b44:	10fa3526 	beq	r2,r3,2441c <_gp+0xfffe738c>
   25b48:	00c00084 	movi	r3,2
   25b4c:	10fbcb26 	beq	r2,r3,24a7c <_gp+0xfffe79ec>
   25b50:	003a8f06 	br	24590 <_gp+0xfffe7500>
   25b54:	010000f4 	movhi	r4,3
   25b58:	210c9984 	addi	r4,r4,12902
   25b5c:	d9003515 	stw	r4,212(sp)
   25b60:	003b7606 	br	2493c <_gp+0xfffe78ac>
   25b64:	d8802917 	ldw	r2,164(sp)
   25b68:	00c00184 	movi	r3,6
   25b6c:	1880012e 	bgeu	r3,r2,25b74 <___vfprintf_internal_r+0x1ca0>
   25b70:	1805883a 	mov	r2,r3
   25b74:	d8802e15 	stw	r2,184(sp)
   25b78:	1000ef16 	blt	r2,zero,25f38 <___vfprintf_internal_r+0x2064>
   25b7c:	040000f4 	movhi	r16,3
   25b80:	d8802a15 	stw	r2,168(sp)
   25b84:	dcc02d15 	stw	r19,180(sp)
   25b88:	d8002915 	stw	zero,164(sp)
   25b8c:	d8003215 	stw	zero,200(sp)
   25b90:	840c9304 	addi	r16,r16,12876
   25b94:	0039883a 	mov	fp,zero
   25b98:	003aa206 	br	24624 <_gp+0xfffe7594>
   25b9c:	0021883a 	mov	r16,zero
   25ba0:	003e0706 	br	253c0 <_gp+0xfffe8330>
   25ba4:	d9002c17 	ldw	r4,176(sp)
   25ba8:	d9801e04 	addi	r6,sp,120
   25bac:	b80b883a 	mov	r5,r23
   25bb0:	002aa6c0 	call	2aa6c <__sprint_r>
   25bb4:	1039c91e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25bb8:	d8802617 	ldw	r2,152(sp)
   25bbc:	d9403317 	ldw	r5,204(sp)
   25bc0:	d8c02017 	ldw	r3,128(sp)
   25bc4:	da000404 	addi	r8,sp,16
   25bc8:	2885c83a 	sub	r2,r5,r2
   25bcc:	003dfb06 	br	253bc <_gp+0xfffe832c>
   25bd0:	9080004c 	andi	r2,r18,1
   25bd4:	103e8f1e 	bne	r2,zero,25614 <_gp+0xfffe8584>
   25bd8:	d8802117 	ldw	r2,132(sp)
   25bdc:	003e9e06 	br	25658 <_gp+0xfffe85c8>
   25be0:	1025883a 	mov	r18,r2
   25be4:	0039883a 	mov	fp,zero
   25be8:	00800084 	movi	r2,2
   25bec:	003fd306 	br	25b3c <_gp+0xfffe8aac>
   25bf0:	07000b44 	movi	fp,45
   25bf4:	df002785 	stb	fp,158(sp)
   25bf8:	003a4006 	br	244fc <_gp+0xfffe746c>
   25bfc:	00c00b44 	movi	r3,45
   25c00:	d8c02785 	stb	r3,158(sp)
   25c04:	d8802a15 	stw	r2,168(sp)
   25c08:	dc802b17 	ldw	r18,172(sp)
   25c0c:	d8002915 	stw	zero,164(sp)
   25c10:	07000b44 	movi	fp,45
   25c14:	003a8006 	br	24618 <_gp+0xfffe7588>
   25c18:	040000f4 	movhi	r16,3
   25c1c:	840c8804 	addi	r16,r16,12832
   25c20:	003f4706 	br	25940 <_gp+0xfffe88b0>
   25c24:	d8c02d17 	ldw	r3,180(sp)
   25c28:	d9002f17 	ldw	r4,188(sp)
   25c2c:	18800017 	ldw	r2,0(r3)
   25c30:	18c00104 	addi	r3,r3,4
   25c34:	d8c02d15 	stw	r3,180(sp)
   25c38:	11000015 	stw	r4,0(r2)
   25c3c:	0038dd06 	br	23fb4 <_gp+0xfffe6f24>
   25c40:	dd802617 	ldw	r22,152(sp)
   25c44:	00bfff44 	movi	r2,-3
   25c48:	b0801c16 	blt	r22,r2,25cbc <___vfprintf_internal_r+0x1de8>
   25c4c:	d9402917 	ldw	r5,164(sp)
   25c50:	2d801a16 	blt	r5,r22,25cbc <___vfprintf_internal_r+0x1de8>
   25c54:	dd803215 	stw	r22,200(sp)
   25c58:	003e8906 	br	25680 <_gp+0xfffe85f0>
   25c5c:	010000f4 	movhi	r4,3
   25c60:	210c9584 	addi	r4,r4,12886
   25c64:	d9002b15 	stw	r4,172(sp)
   25c68:	003c9106 	br	24eb0 <_gp+0xfffe7e20>
   25c6c:	e005883a 	mov	r2,fp
   25c70:	003e7906 	br	25658 <_gp+0xfffe85c8>
   25c74:	d9402917 	ldw	r5,164(sp)
   25c78:	df002783 	ldbu	fp,158(sp)
   25c7c:	dcc02d15 	stw	r19,180(sp)
   25c80:	d9402a15 	stw	r5,168(sp)
   25c84:	d9402e15 	stw	r5,184(sp)
   25c88:	d8002915 	stw	zero,164(sp)
   25c8c:	d8003215 	stw	zero,200(sp)
   25c90:	003a5d06 	br	24608 <_gp+0xfffe7578>
   25c94:	9080004c 	andi	r2,r18,1
   25c98:	0039883a 	mov	fp,zero
   25c9c:	10000426 	beq	r2,zero,25cb0 <___vfprintf_internal_r+0x1ddc>
   25ca0:	00800c04 	movi	r2,48
   25ca4:	dc001dc4 	addi	r16,sp,119
   25ca8:	d8801dc5 	stb	r2,119(sp)
   25cac:	003b8006 	br	24ab0 <_gp+0xfffe7a20>
   25cb0:	d8002e15 	stw	zero,184(sp)
   25cb4:	dc001e04 	addi	r16,sp,120
   25cb8:	003a4d06 	br	245f0 <_gp+0xfffe7560>
   25cbc:	8c7fff84 	addi	r17,r17,-2
   25cc0:	b5bfffc4 	addi	r22,r22,-1
   25cc4:	dd802615 	stw	r22,152(sp)
   25cc8:	dc4022c5 	stb	r17,139(sp)
   25ccc:	b000bf16 	blt	r22,zero,25fcc <___vfprintf_internal_r+0x20f8>
   25cd0:	00800ac4 	movi	r2,43
   25cd4:	d8802305 	stb	r2,140(sp)
   25cd8:	00800244 	movi	r2,9
   25cdc:	15807016 	blt	r2,r22,25ea0 <___vfprintf_internal_r+0x1fcc>
   25ce0:	00800c04 	movi	r2,48
   25ce4:	b5800c04 	addi	r22,r22,48
   25ce8:	d8802345 	stb	r2,141(sp)
   25cec:	dd802385 	stb	r22,142(sp)
   25cf0:	d88023c4 	addi	r2,sp,143
   25cf4:	df0022c4 	addi	fp,sp,139
   25cf8:	d8c03317 	ldw	r3,204(sp)
   25cfc:	1739c83a 	sub	fp,r2,fp
   25d00:	d9003317 	ldw	r4,204(sp)
   25d04:	e0c7883a 	add	r3,fp,r3
   25d08:	df003a15 	stw	fp,232(sp)
   25d0c:	d8c02e15 	stw	r3,184(sp)
   25d10:	00800044 	movi	r2,1
   25d14:	1100b30e 	bge	r2,r4,25fe4 <___vfprintf_internal_r+0x2110>
   25d18:	d8c02e17 	ldw	r3,184(sp)
   25d1c:	18c00044 	addi	r3,r3,1
   25d20:	d8c02e15 	stw	r3,184(sp)
   25d24:	1805883a 	mov	r2,r3
   25d28:	1800ac16 	blt	r3,zero,25fdc <___vfprintf_internal_r+0x2108>
   25d2c:	d8003215 	stw	zero,200(sp)
   25d30:	003e5d06 	br	256a8 <_gp+0xfffe8618>
   25d34:	d9002c17 	ldw	r4,176(sp)
   25d38:	d9801e04 	addi	r6,sp,120
   25d3c:	b80b883a 	mov	r5,r23
   25d40:	002aa6c0 	call	2aa6c <__sprint_r>
   25d44:	1039651e 	bne	r2,zero,242dc <_gp+0xfffe724c>
   25d48:	dc402617 	ldw	r17,152(sp)
   25d4c:	d8c02017 	ldw	r3,128(sp)
   25d50:	d8801f17 	ldw	r2,124(sp)
   25d54:	da000404 	addi	r8,sp,16
   25d58:	003ed606 	br	258b4 <_gp+0xfffe8824>
   25d5c:	582b883a 	mov	r21,r11
   25d60:	d8002915 	stw	zero,164(sp)
   25d64:	0038bd06 	br	2405c <_gp+0xfffe6fcc>
   25d68:	d8802917 	ldw	r2,164(sp)
   25d6c:	103e071e 	bne	r2,zero,2558c <_gp+0xfffe84fc>
   25d70:	dc002915 	stw	r16,164(sp)
   25d74:	003e0506 	br	2558c <_gp+0xfffe84fc>
   25d78:	d9002917 	ldw	r4,164(sp)
   25d7c:	20c00044 	addi	r3,r4,1
   25d80:	003e0f06 	br	255c0 <_gp+0xfffe8530>
   25d84:	01400184 	movi	r5,6
   25d88:	d9402915 	stw	r5,164(sp)
   25d8c:	003dff06 	br	2558c <_gp+0xfffe84fc>
   25d90:	d8802104 	addi	r2,sp,132
   25d94:	d8800315 	stw	r2,12(sp)
   25d98:	d8802504 	addi	r2,sp,148
   25d9c:	d8800215 	stw	r2,8(sp)
   25da0:	d8802604 	addi	r2,sp,152
   25da4:	d8800115 	stw	r2,4(sp)
   25da8:	d8802917 	ldw	r2,164(sp)
   25dac:	d9403617 	ldw	r5,216(sp)
   25db0:	d9002c17 	ldw	r4,176(sp)
   25db4:	d8800015 	stw	r2,0(sp)
   25db8:	01c000c4 	movi	r7,3
   25dbc:	980d883a 	mov	r6,r19
   25dc0:	da003d15 	stw	r8,244(sp)
   25dc4:	00264f80 	call	264f8 <_dtoa_r>
   25dc8:	d8c02917 	ldw	r3,164(sp)
   25dcc:	da003d17 	ldw	r8,244(sp)
   25dd0:	1021883a 	mov	r16,r2
   25dd4:	10f9883a 	add	fp,r2,r3
   25dd8:	81000007 	ldb	r4,0(r16)
   25ddc:	00800c04 	movi	r2,48
   25de0:	20805e26 	beq	r4,r2,25f5c <___vfprintf_internal_r+0x2088>
   25de4:	d8c02617 	ldw	r3,152(sp)
   25de8:	e0f9883a 	add	fp,fp,r3
   25dec:	003e0a06 	br	25618 <_gp+0xfffe8588>
   25df0:	00c00b44 	movi	r3,45
   25df4:	24e0003c 	xorhi	r19,r4,32768
   25df8:	d8c02a05 	stb	r3,168(sp)
   25dfc:	003de906 	br	255a4 <_gp+0xfffe8514>
   25e00:	d8c03217 	ldw	r3,200(sp)
   25e04:	00c07a0e 	bge	zero,r3,25ff0 <___vfprintf_internal_r+0x211c>
   25e08:	00800044 	movi	r2,1
   25e0c:	d9003317 	ldw	r4,204(sp)
   25e10:	1105883a 	add	r2,r2,r4
   25e14:	d8802e15 	stw	r2,184(sp)
   25e18:	10004e16 	blt	r2,zero,25f54 <___vfprintf_internal_r+0x2080>
   25e1c:	044019c4 	movi	r17,103
   25e20:	003e2106 	br	256a8 <_gp+0xfffe8618>
   25e24:	d9002917 	ldw	r4,164(sp)
   25e28:	d8802104 	addi	r2,sp,132
   25e2c:	d8800315 	stw	r2,12(sp)
   25e30:	d9000015 	stw	r4,0(sp)
   25e34:	d8802504 	addi	r2,sp,148
   25e38:	d9403617 	ldw	r5,216(sp)
   25e3c:	d9002c17 	ldw	r4,176(sp)
   25e40:	d8800215 	stw	r2,8(sp)
   25e44:	d8802604 	addi	r2,sp,152
   25e48:	d8800115 	stw	r2,4(sp)
   25e4c:	01c000c4 	movi	r7,3
   25e50:	980d883a 	mov	r6,r19
   25e54:	da003d15 	stw	r8,244(sp)
   25e58:	00264f80 	call	264f8 <_dtoa_r>
   25e5c:	d8c02917 	ldw	r3,164(sp)
   25e60:	da003d17 	ldw	r8,244(sp)
   25e64:	1021883a 	mov	r16,r2
   25e68:	00801184 	movi	r2,70
   25e6c:	80f9883a 	add	fp,r16,r3
   25e70:	88bfd926 	beq	r17,r2,25dd8 <_gp+0xfffe8d48>
   25e74:	003de806 	br	25618 <_gp+0xfffe8588>
   25e78:	d9002917 	ldw	r4,164(sp)
   25e7c:	00c04d0e 	bge	zero,r3,25fb4 <___vfprintf_internal_r+0x20e0>
   25e80:	2000441e 	bne	r4,zero,25f94 <___vfprintf_internal_r+0x20c0>
   25e84:	9480004c 	andi	r18,r18,1
   25e88:	9000421e 	bne	r18,zero,25f94 <___vfprintf_internal_r+0x20c0>
   25e8c:	1805883a 	mov	r2,r3
   25e90:	18007016 	blt	r3,zero,26054 <___vfprintf_internal_r+0x2180>
   25e94:	d8c03217 	ldw	r3,200(sp)
   25e98:	d8c02e15 	stw	r3,184(sp)
   25e9c:	003e0206 	br	256a8 <_gp+0xfffe8618>
   25ea0:	df0022c4 	addi	fp,sp,139
   25ea4:	dc002915 	stw	r16,164(sp)
   25ea8:	4027883a 	mov	r19,r8
   25eac:	e021883a 	mov	r16,fp
   25eb0:	b009883a 	mov	r4,r22
   25eb4:	01400284 	movi	r5,10
   25eb8:	00229040 	call	22904 <__modsi3>
   25ebc:	10800c04 	addi	r2,r2,48
   25ec0:	843fffc4 	addi	r16,r16,-1
   25ec4:	b009883a 	mov	r4,r22
   25ec8:	01400284 	movi	r5,10
   25ecc:	80800005 	stb	r2,0(r16)
   25ed0:	00228800 	call	22880 <__divsi3>
   25ed4:	102d883a 	mov	r22,r2
   25ed8:	00800244 	movi	r2,9
   25edc:	15bff416 	blt	r2,r22,25eb0 <_gp+0xfffe8e20>
   25ee0:	9811883a 	mov	r8,r19
   25ee4:	b0800c04 	addi	r2,r22,48
   25ee8:	8027883a 	mov	r19,r16
   25eec:	997fffc4 	addi	r5,r19,-1
   25ef0:	98bfffc5 	stb	r2,-1(r19)
   25ef4:	dc002917 	ldw	r16,164(sp)
   25ef8:	2f006a2e 	bgeu	r5,fp,260a4 <___vfprintf_internal_r+0x21d0>
   25efc:	d9c02384 	addi	r7,sp,142
   25f00:	3ccfc83a 	sub	r7,r7,r19
   25f04:	d9002344 	addi	r4,sp,141
   25f08:	e1cf883a 	add	r7,fp,r7
   25f0c:	00000106 	br	25f14 <___vfprintf_internal_r+0x2040>
   25f10:	28800003 	ldbu	r2,0(r5)
   25f14:	20800005 	stb	r2,0(r4)
   25f18:	21000044 	addi	r4,r4,1
   25f1c:	29400044 	addi	r5,r5,1
   25f20:	393ffb1e 	bne	r7,r4,25f10 <_gp+0xfffe8e80>
   25f24:	d8802304 	addi	r2,sp,140
   25f28:	14c5c83a 	sub	r2,r2,r19
   25f2c:	d8c02344 	addi	r3,sp,141
   25f30:	1885883a 	add	r2,r3,r2
   25f34:	003f7006 	br	25cf8 <_gp+0xfffe8c68>
   25f38:	0005883a 	mov	r2,zero
   25f3c:	003f0f06 	br	25b7c <_gp+0xfffe8aec>
   25f40:	d8c03217 	ldw	r3,200(sp)
   25f44:	18c00044 	addi	r3,r3,1
   25f48:	d8c02e15 	stw	r3,184(sp)
   25f4c:	1805883a 	mov	r2,r3
   25f50:	183fb20e 	bge	r3,zero,25e1c <_gp+0xfffe8d8c>
   25f54:	0005883a 	mov	r2,zero
   25f58:	003fb006 	br	25e1c <_gp+0xfffe8d8c>
   25f5c:	d9003617 	ldw	r4,216(sp)
   25f60:	000d883a 	mov	r6,zero
   25f64:	000f883a 	mov	r7,zero
   25f68:	980b883a 	mov	r5,r19
   25f6c:	d8c03c15 	stw	r3,240(sp)
   25f70:	da003d15 	stw	r8,244(sp)
   25f74:	002e5300 	call	2e530 <__eqdf2>
   25f78:	d8c03c17 	ldw	r3,240(sp)
   25f7c:	da003d17 	ldw	r8,244(sp)
   25f80:	103f9826 	beq	r2,zero,25de4 <_gp+0xfffe8d54>
   25f84:	00800044 	movi	r2,1
   25f88:	10c7c83a 	sub	r3,r2,r3
   25f8c:	d8c02615 	stw	r3,152(sp)
   25f90:	003f9506 	br	25de8 <_gp+0xfffe8d58>
   25f94:	d9002917 	ldw	r4,164(sp)
   25f98:	d8c03217 	ldw	r3,200(sp)
   25f9c:	20800044 	addi	r2,r4,1
   25fa0:	1885883a 	add	r2,r3,r2
   25fa4:	d8802e15 	stw	r2,184(sp)
   25fa8:	103dbf0e 	bge	r2,zero,256a8 <_gp+0xfffe8618>
   25fac:	0005883a 	mov	r2,zero
   25fb0:	003dbd06 	br	256a8 <_gp+0xfffe8618>
   25fb4:	2000211e 	bne	r4,zero,2603c <___vfprintf_internal_r+0x2168>
   25fb8:	9480004c 	andi	r18,r18,1
   25fbc:	90001f1e 	bne	r18,zero,2603c <___vfprintf_internal_r+0x2168>
   25fc0:	00800044 	movi	r2,1
   25fc4:	d8802e15 	stw	r2,184(sp)
   25fc8:	003db706 	br	256a8 <_gp+0xfffe8618>
   25fcc:	00800b44 	movi	r2,45
   25fd0:	05adc83a 	sub	r22,zero,r22
   25fd4:	d8802305 	stb	r2,140(sp)
   25fd8:	003f3f06 	br	25cd8 <_gp+0xfffe8c48>
   25fdc:	0005883a 	mov	r2,zero
   25fe0:	003f5206 	br	25d2c <_gp+0xfffe8c9c>
   25fe4:	90a4703a 	and	r18,r18,r2
   25fe8:	903f4e26 	beq	r18,zero,25d24 <_gp+0xfffe8c94>
   25fec:	003f4a06 	br	25d18 <_gp+0xfffe8c88>
   25ff0:	00800084 	movi	r2,2
   25ff4:	10c5c83a 	sub	r2,r2,r3
   25ff8:	003f8406 	br	25e0c <_gp+0xfffe8d7c>
   25ffc:	d8802d17 	ldw	r2,180(sp)
   26000:	d9002d17 	ldw	r4,180(sp)
   26004:	ac400043 	ldbu	r17,1(r21)
   26008:	10800017 	ldw	r2,0(r2)
   2600c:	582b883a 	mov	r21,r11
   26010:	d8802915 	stw	r2,164(sp)
   26014:	20800104 	addi	r2,r4,4
   26018:	d9002917 	ldw	r4,164(sp)
   2601c:	d8802d15 	stw	r2,180(sp)
   26020:	203e7a0e 	bge	r4,zero,25a0c <_gp+0xfffe897c>
   26024:	8c403fcc 	andi	r17,r17,255
   26028:	00bfffc4 	movi	r2,-1
   2602c:	8c40201c 	xori	r17,r17,128
   26030:	d8802915 	stw	r2,164(sp)
   26034:	8c7fe004 	addi	r17,r17,-128
   26038:	00380706 	br	24058 <_gp+0xfffe6fc8>
   2603c:	d8c02917 	ldw	r3,164(sp)
   26040:	18c00084 	addi	r3,r3,2
   26044:	d8c02e15 	stw	r3,184(sp)
   26048:	1805883a 	mov	r2,r3
   2604c:	183d960e 	bge	r3,zero,256a8 <_gp+0xfffe8618>
   26050:	003fd606 	br	25fac <_gp+0xfffe8f1c>
   26054:	0005883a 	mov	r2,zero
   26058:	003f8e06 	br	25e94 <_gp+0xfffe8e04>
   2605c:	9080004c 	andi	r2,r18,1
   26060:	103f811e 	bne	r2,zero,25e68 <_gp+0xfffe8dd8>
   26064:	d8802117 	ldw	r2,132(sp)
   26068:	1405c83a 	sub	r2,r2,r16
   2606c:	d8803315 	stw	r2,204(sp)
   26070:	b47ef326 	beq	r22,r17,25c40 <_gp+0xfffe8bb0>
   26074:	dd802617 	ldw	r22,152(sp)
   26078:	003f1106 	br	25cc0 <_gp+0xfffe8c30>
   2607c:	d9c02785 	stb	r7,158(sp)
   26080:	00390406 	br	24494 <_gp+0xfffe7404>
   26084:	d9c02785 	stb	r7,158(sp)
   26088:	0038d306 	br	243d8 <_gp+0xfffe7348>
   2608c:	d9c02785 	stb	r7,158(sp)
   26090:	003a6106 	br	24a18 <_gp+0xfffe7988>
   26094:	d9c02785 	stb	r7,158(sp)
   26098:	003af806 	br	24c7c <_gp+0xfffe7bec>
   2609c:	0005883a 	mov	r2,zero
   260a0:	003d7e06 	br	2569c <_gp+0xfffe860c>
   260a4:	d8802344 	addi	r2,sp,141
   260a8:	003f1306 	br	25cf8 <_gp+0xfffe8c68>
   260ac:	d9c02785 	stb	r7,158(sp)
   260b0:	00392306 	br	24540 <_gp+0xfffe74b0>
   260b4:	d9c02785 	stb	r7,158(sp)
   260b8:	003aa906 	br	24b60 <_gp+0xfffe7ad0>
   260bc:	d9c02785 	stb	r7,158(sp)
   260c0:	003a3d06 	br	249b8 <_gp+0xfffe7928>
   260c4:	d9c02785 	stb	r7,158(sp)
   260c8:	003aca06 	br	24bf4 <_gp+0xfffe7b64>

000260cc <__vfprintf_internal>:
   260cc:	008000f4 	movhi	r2,3
   260d0:	10943504 	addi	r2,r2,20692
   260d4:	300f883a 	mov	r7,r6
   260d8:	280d883a 	mov	r6,r5
   260dc:	200b883a 	mov	r5,r4
   260e0:	11000017 	ldw	r4,0(r2)
   260e4:	0023ed41 	jmpi	23ed4 <___vfprintf_internal_r>

000260e8 <__sbprintf>:
   260e8:	2880030b 	ldhu	r2,12(r5)
   260ec:	2ac01917 	ldw	r11,100(r5)
   260f0:	2a80038b 	ldhu	r10,14(r5)
   260f4:	2a400717 	ldw	r9,28(r5)
   260f8:	2a000917 	ldw	r8,36(r5)
   260fc:	defee204 	addi	sp,sp,-1144
   26100:	00c10004 	movi	r3,1024
   26104:	dc011a15 	stw	r16,1128(sp)
   26108:	10bfff4c 	andi	r2,r2,65533
   2610c:	2821883a 	mov	r16,r5
   26110:	d8cb883a 	add	r5,sp,r3
   26114:	dc811c15 	stw	r18,1136(sp)
   26118:	dc411b15 	stw	r17,1132(sp)
   2611c:	dfc11d15 	stw	ra,1140(sp)
   26120:	2025883a 	mov	r18,r4
   26124:	d881030d 	sth	r2,1036(sp)
   26128:	dac11915 	stw	r11,1124(sp)
   2612c:	da81038d 	sth	r10,1038(sp)
   26130:	da410715 	stw	r9,1052(sp)
   26134:	da010915 	stw	r8,1060(sp)
   26138:	dec10015 	stw	sp,1024(sp)
   2613c:	dec10415 	stw	sp,1040(sp)
   26140:	d8c10215 	stw	r3,1032(sp)
   26144:	d8c10515 	stw	r3,1044(sp)
   26148:	d8010615 	stw	zero,1048(sp)
   2614c:	0023ed40 	call	23ed4 <___vfprintf_internal_r>
   26150:	1023883a 	mov	r17,r2
   26154:	10000416 	blt	r2,zero,26168 <__sbprintf+0x80>
   26158:	d9410004 	addi	r5,sp,1024
   2615c:	9009883a 	mov	r4,r18
   26160:	0027d9c0 	call	27d9c <_fflush_r>
   26164:	10000d1e 	bne	r2,zero,2619c <__sbprintf+0xb4>
   26168:	d881030b 	ldhu	r2,1036(sp)
   2616c:	1080100c 	andi	r2,r2,64
   26170:	10000326 	beq	r2,zero,26180 <__sbprintf+0x98>
   26174:	8080030b 	ldhu	r2,12(r16)
   26178:	10801014 	ori	r2,r2,64
   2617c:	8080030d 	sth	r2,12(r16)
   26180:	8805883a 	mov	r2,r17
   26184:	dfc11d17 	ldw	ra,1140(sp)
   26188:	dc811c17 	ldw	r18,1136(sp)
   2618c:	dc411b17 	ldw	r17,1132(sp)
   26190:	dc011a17 	ldw	r16,1128(sp)
   26194:	dec11e04 	addi	sp,sp,1144
   26198:	f800283a 	ret
   2619c:	047fffc4 	movi	r17,-1
   261a0:	003ff106 	br	26168 <_gp+0xfffe90d8>

000261a4 <__swsetup_r>:
   261a4:	008000f4 	movhi	r2,3
   261a8:	defffd04 	addi	sp,sp,-12
   261ac:	10943504 	addi	r2,r2,20692
   261b0:	dc400115 	stw	r17,4(sp)
   261b4:	2023883a 	mov	r17,r4
   261b8:	11000017 	ldw	r4,0(r2)
   261bc:	dc000015 	stw	r16,0(sp)
   261c0:	dfc00215 	stw	ra,8(sp)
   261c4:	2821883a 	mov	r16,r5
   261c8:	20000226 	beq	r4,zero,261d4 <__swsetup_r+0x30>
   261cc:	20800e17 	ldw	r2,56(r4)
   261d0:	10003126 	beq	r2,zero,26298 <__swsetup_r+0xf4>
   261d4:	8080030b 	ldhu	r2,12(r16)
   261d8:	10c0020c 	andi	r3,r2,8
   261dc:	1009883a 	mov	r4,r2
   261e0:	18000f26 	beq	r3,zero,26220 <__swsetup_r+0x7c>
   261e4:	80c00417 	ldw	r3,16(r16)
   261e8:	18001526 	beq	r3,zero,26240 <__swsetup_r+0x9c>
   261ec:	1100004c 	andi	r4,r2,1
   261f0:	20001c1e 	bne	r4,zero,26264 <__swsetup_r+0xc0>
   261f4:	1080008c 	andi	r2,r2,2
   261f8:	1000291e 	bne	r2,zero,262a0 <__swsetup_r+0xfc>
   261fc:	80800517 	ldw	r2,20(r16)
   26200:	80800215 	stw	r2,8(r16)
   26204:	18001c26 	beq	r3,zero,26278 <__swsetup_r+0xd4>
   26208:	0005883a 	mov	r2,zero
   2620c:	dfc00217 	ldw	ra,8(sp)
   26210:	dc400117 	ldw	r17,4(sp)
   26214:	dc000017 	ldw	r16,0(sp)
   26218:	dec00304 	addi	sp,sp,12
   2621c:	f800283a 	ret
   26220:	2080040c 	andi	r2,r4,16
   26224:	10002e26 	beq	r2,zero,262e0 <__swsetup_r+0x13c>
   26228:	2080010c 	andi	r2,r4,4
   2622c:	10001e1e 	bne	r2,zero,262a8 <__swsetup_r+0x104>
   26230:	80c00417 	ldw	r3,16(r16)
   26234:	20800214 	ori	r2,r4,8
   26238:	8080030d 	sth	r2,12(r16)
   2623c:	183feb1e 	bne	r3,zero,261ec <_gp+0xfffe915c>
   26240:	1100a00c 	andi	r4,r2,640
   26244:	01408004 	movi	r5,512
   26248:	217fe826 	beq	r4,r5,261ec <_gp+0xfffe915c>
   2624c:	800b883a 	mov	r5,r16
   26250:	8809883a 	mov	r4,r17
   26254:	0028d1c0 	call	28d1c <__smakebuf_r>
   26258:	8080030b 	ldhu	r2,12(r16)
   2625c:	80c00417 	ldw	r3,16(r16)
   26260:	003fe206 	br	261ec <_gp+0xfffe915c>
   26264:	80800517 	ldw	r2,20(r16)
   26268:	80000215 	stw	zero,8(r16)
   2626c:	0085c83a 	sub	r2,zero,r2
   26270:	80800615 	stw	r2,24(r16)
   26274:	183fe41e 	bne	r3,zero,26208 <_gp+0xfffe9178>
   26278:	80c0030b 	ldhu	r3,12(r16)
   2627c:	0005883a 	mov	r2,zero
   26280:	1900200c 	andi	r4,r3,128
   26284:	203fe126 	beq	r4,zero,2620c <_gp+0xfffe917c>
   26288:	18c01014 	ori	r3,r3,64
   2628c:	80c0030d 	sth	r3,12(r16)
   26290:	00bfffc4 	movi	r2,-1
   26294:	003fdd06 	br	2620c <_gp+0xfffe917c>
   26298:	00281780 	call	28178 <__sinit>
   2629c:	003fcd06 	br	261d4 <_gp+0xfffe9144>
   262a0:	0005883a 	mov	r2,zero
   262a4:	003fd606 	br	26200 <_gp+0xfffe9170>
   262a8:	81400c17 	ldw	r5,48(r16)
   262ac:	28000626 	beq	r5,zero,262c8 <__swsetup_r+0x124>
   262b0:	80801004 	addi	r2,r16,64
   262b4:	28800326 	beq	r5,r2,262c4 <__swsetup_r+0x120>
   262b8:	8809883a 	mov	r4,r17
   262bc:	00282ec0 	call	282ec <_free_r>
   262c0:	8100030b 	ldhu	r4,12(r16)
   262c4:	80000c15 	stw	zero,48(r16)
   262c8:	80c00417 	ldw	r3,16(r16)
   262cc:	00bff6c4 	movi	r2,-37
   262d0:	1108703a 	and	r4,r2,r4
   262d4:	80000115 	stw	zero,4(r16)
   262d8:	80c00015 	stw	r3,0(r16)
   262dc:	003fd506 	br	26234 <_gp+0xfffe91a4>
   262e0:	00800244 	movi	r2,9
   262e4:	88800015 	stw	r2,0(r17)
   262e8:	20801014 	ori	r2,r4,64
   262ec:	8080030d 	sth	r2,12(r16)
   262f0:	00bfffc4 	movi	r2,-1
   262f4:	003fc506 	br	2620c <_gp+0xfffe917c>

000262f8 <quorem>:
   262f8:	defff704 	addi	sp,sp,-36
   262fc:	dc800215 	stw	r18,8(sp)
   26300:	20800417 	ldw	r2,16(r4)
   26304:	2c800417 	ldw	r18,16(r5)
   26308:	dfc00815 	stw	ra,32(sp)
   2630c:	ddc00715 	stw	r23,28(sp)
   26310:	dd800615 	stw	r22,24(sp)
   26314:	dd400515 	stw	r21,20(sp)
   26318:	dd000415 	stw	r20,16(sp)
   2631c:	dcc00315 	stw	r19,12(sp)
   26320:	dc400115 	stw	r17,4(sp)
   26324:	dc000015 	stw	r16,0(sp)
   26328:	14807116 	blt	r2,r18,264f0 <quorem+0x1f8>
   2632c:	94bfffc4 	addi	r18,r18,-1
   26330:	94ad883a 	add	r22,r18,r18
   26334:	b5ad883a 	add	r22,r22,r22
   26338:	2c400504 	addi	r17,r5,20
   2633c:	8da9883a 	add	r20,r17,r22
   26340:	25400504 	addi	r21,r4,20
   26344:	282f883a 	mov	r23,r5
   26348:	adad883a 	add	r22,r21,r22
   2634c:	a1400017 	ldw	r5,0(r20)
   26350:	2021883a 	mov	r16,r4
   26354:	b1000017 	ldw	r4,0(r22)
   26358:	29400044 	addi	r5,r5,1
   2635c:	00229780 	call	22978 <__udivsi3>
   26360:	1027883a 	mov	r19,r2
   26364:	10002c26 	beq	r2,zero,26418 <quorem+0x120>
   26368:	a813883a 	mov	r9,r21
   2636c:	880b883a 	mov	r5,r17
   26370:	0009883a 	mov	r4,zero
   26374:	000d883a 	mov	r6,zero
   26378:	2a000017 	ldw	r8,0(r5)
   2637c:	49c00017 	ldw	r7,0(r9)
   26380:	29400104 	addi	r5,r5,4
   26384:	40bfffcc 	andi	r2,r8,65535
   26388:	14c5383a 	mul	r2,r2,r19
   2638c:	4010d43a 	srli	r8,r8,16
   26390:	38ffffcc 	andi	r3,r7,65535
   26394:	1105883a 	add	r2,r2,r4
   26398:	1008d43a 	srli	r4,r2,16
   2639c:	44d1383a 	mul	r8,r8,r19
   263a0:	198d883a 	add	r6,r3,r6
   263a4:	10ffffcc 	andi	r3,r2,65535
   263a8:	30c7c83a 	sub	r3,r6,r3
   263ac:	380ed43a 	srli	r7,r7,16
   263b0:	4105883a 	add	r2,r8,r4
   263b4:	180dd43a 	srai	r6,r3,16
   263b8:	113fffcc 	andi	r4,r2,65535
   263bc:	390fc83a 	sub	r7,r7,r4
   263c0:	398d883a 	add	r6,r7,r6
   263c4:	300e943a 	slli	r7,r6,16
   263c8:	18ffffcc 	andi	r3,r3,65535
   263cc:	1008d43a 	srli	r4,r2,16
   263d0:	38ceb03a 	or	r7,r7,r3
   263d4:	49c00015 	stw	r7,0(r9)
   263d8:	300dd43a 	srai	r6,r6,16
   263dc:	4a400104 	addi	r9,r9,4
   263e0:	a17fe52e 	bgeu	r20,r5,26378 <_gp+0xfffe92e8>
   263e4:	b0800017 	ldw	r2,0(r22)
   263e8:	10000b1e 	bne	r2,zero,26418 <quorem+0x120>
   263ec:	b0bfff04 	addi	r2,r22,-4
   263f0:	a880082e 	bgeu	r21,r2,26414 <quorem+0x11c>
   263f4:	b0ffff17 	ldw	r3,-4(r22)
   263f8:	18000326 	beq	r3,zero,26408 <quorem+0x110>
   263fc:	00000506 	br	26414 <quorem+0x11c>
   26400:	10c00017 	ldw	r3,0(r2)
   26404:	1800031e 	bne	r3,zero,26414 <quorem+0x11c>
   26408:	10bfff04 	addi	r2,r2,-4
   2640c:	94bfffc4 	addi	r18,r18,-1
   26410:	a8bffb36 	bltu	r21,r2,26400 <_gp+0xfffe9370>
   26414:	84800415 	stw	r18,16(r16)
   26418:	b80b883a 	mov	r5,r23
   2641c:	8009883a 	mov	r4,r16
   26420:	0029b280 	call	29b28 <__mcmp>
   26424:	10002616 	blt	r2,zero,264c0 <quorem+0x1c8>
   26428:	9cc00044 	addi	r19,r19,1
   2642c:	a805883a 	mov	r2,r21
   26430:	000b883a 	mov	r5,zero
   26434:	11000017 	ldw	r4,0(r2)
   26438:	89800017 	ldw	r6,0(r17)
   2643c:	10800104 	addi	r2,r2,4
   26440:	20ffffcc 	andi	r3,r4,65535
   26444:	194b883a 	add	r5,r3,r5
   26448:	30ffffcc 	andi	r3,r6,65535
   2644c:	28c7c83a 	sub	r3,r5,r3
   26450:	300cd43a 	srli	r6,r6,16
   26454:	2008d43a 	srli	r4,r4,16
   26458:	180bd43a 	srai	r5,r3,16
   2645c:	18ffffcc 	andi	r3,r3,65535
   26460:	2189c83a 	sub	r4,r4,r6
   26464:	2149883a 	add	r4,r4,r5
   26468:	200c943a 	slli	r6,r4,16
   2646c:	8c400104 	addi	r17,r17,4
   26470:	200bd43a 	srai	r5,r4,16
   26474:	30c6b03a 	or	r3,r6,r3
   26478:	10ffff15 	stw	r3,-4(r2)
   2647c:	a47fed2e 	bgeu	r20,r17,26434 <_gp+0xfffe93a4>
   26480:	9485883a 	add	r2,r18,r18
   26484:	1085883a 	add	r2,r2,r2
   26488:	a887883a 	add	r3,r21,r2
   2648c:	18800017 	ldw	r2,0(r3)
   26490:	10000b1e 	bne	r2,zero,264c0 <quorem+0x1c8>
   26494:	18bfff04 	addi	r2,r3,-4
   26498:	a880082e 	bgeu	r21,r2,264bc <quorem+0x1c4>
   2649c:	18ffff17 	ldw	r3,-4(r3)
   264a0:	18000326 	beq	r3,zero,264b0 <quorem+0x1b8>
   264a4:	00000506 	br	264bc <quorem+0x1c4>
   264a8:	10c00017 	ldw	r3,0(r2)
   264ac:	1800031e 	bne	r3,zero,264bc <quorem+0x1c4>
   264b0:	10bfff04 	addi	r2,r2,-4
   264b4:	94bfffc4 	addi	r18,r18,-1
   264b8:	a8bffb36 	bltu	r21,r2,264a8 <_gp+0xfffe9418>
   264bc:	84800415 	stw	r18,16(r16)
   264c0:	9805883a 	mov	r2,r19
   264c4:	dfc00817 	ldw	ra,32(sp)
   264c8:	ddc00717 	ldw	r23,28(sp)
   264cc:	dd800617 	ldw	r22,24(sp)
   264d0:	dd400517 	ldw	r21,20(sp)
   264d4:	dd000417 	ldw	r20,16(sp)
   264d8:	dcc00317 	ldw	r19,12(sp)
   264dc:	dc800217 	ldw	r18,8(sp)
   264e0:	dc400117 	ldw	r17,4(sp)
   264e4:	dc000017 	ldw	r16,0(sp)
   264e8:	dec00904 	addi	sp,sp,36
   264ec:	f800283a 	ret
   264f0:	0005883a 	mov	r2,zero
   264f4:	003ff306 	br	264c4 <_gp+0xfffe9434>

000264f8 <_dtoa_r>:
   264f8:	20801017 	ldw	r2,64(r4)
   264fc:	deffde04 	addi	sp,sp,-136
   26500:	df002015 	stw	fp,128(sp)
   26504:	dcc01b15 	stw	r19,108(sp)
   26508:	dc801a15 	stw	r18,104(sp)
   2650c:	dc401915 	stw	r17,100(sp)
   26510:	dc001815 	stw	r16,96(sp)
   26514:	dfc02115 	stw	ra,132(sp)
   26518:	ddc01f15 	stw	r23,124(sp)
   2651c:	dd801e15 	stw	r22,120(sp)
   26520:	dd401d15 	stw	r21,116(sp)
   26524:	dd001c15 	stw	r20,112(sp)
   26528:	d9c00315 	stw	r7,12(sp)
   2652c:	2039883a 	mov	fp,r4
   26530:	3023883a 	mov	r17,r6
   26534:	2825883a 	mov	r18,r5
   26538:	dc002417 	ldw	r16,144(sp)
   2653c:	3027883a 	mov	r19,r6
   26540:	10000826 	beq	r2,zero,26564 <_dtoa_r+0x6c>
   26544:	21801117 	ldw	r6,68(r4)
   26548:	00c00044 	movi	r3,1
   2654c:	100b883a 	mov	r5,r2
   26550:	1986983a 	sll	r3,r3,r6
   26554:	11800115 	stw	r6,4(r2)
   26558:	10c00215 	stw	r3,8(r2)
   2655c:	00293080 	call	29308 <_Bfree>
   26560:	e0001015 	stw	zero,64(fp)
   26564:	88002e16 	blt	r17,zero,26620 <_dtoa_r+0x128>
   26568:	80000015 	stw	zero,0(r16)
   2656c:	889ffc2c 	andhi	r2,r17,32752
   26570:	00dffc34 	movhi	r3,32752
   26574:	10c01c26 	beq	r2,r3,265e8 <_dtoa_r+0xf0>
   26578:	000d883a 	mov	r6,zero
   2657c:	000f883a 	mov	r7,zero
   26580:	9009883a 	mov	r4,r18
   26584:	980b883a 	mov	r5,r19
   26588:	002e5300 	call	2e530 <__eqdf2>
   2658c:	10002b1e 	bne	r2,zero,2663c <_dtoa_r+0x144>
   26590:	d9c02317 	ldw	r7,140(sp)
   26594:	00800044 	movi	r2,1
   26598:	38800015 	stw	r2,0(r7)
   2659c:	d8802517 	ldw	r2,148(sp)
   265a0:	10019e26 	beq	r2,zero,26c1c <_dtoa_r+0x724>
   265a4:	d8c02517 	ldw	r3,148(sp)
   265a8:	008000f4 	movhi	r2,3
   265ac:	108c9544 	addi	r2,r2,12885
   265b0:	18800015 	stw	r2,0(r3)
   265b4:	10bfffc4 	addi	r2,r2,-1
   265b8:	dfc02117 	ldw	ra,132(sp)
   265bc:	df002017 	ldw	fp,128(sp)
   265c0:	ddc01f17 	ldw	r23,124(sp)
   265c4:	dd801e17 	ldw	r22,120(sp)
   265c8:	dd401d17 	ldw	r21,116(sp)
   265cc:	dd001c17 	ldw	r20,112(sp)
   265d0:	dcc01b17 	ldw	r19,108(sp)
   265d4:	dc801a17 	ldw	r18,104(sp)
   265d8:	dc401917 	ldw	r17,100(sp)
   265dc:	dc001817 	ldw	r16,96(sp)
   265e0:	dec02204 	addi	sp,sp,136
   265e4:	f800283a 	ret
   265e8:	d8c02317 	ldw	r3,140(sp)
   265ec:	0089c3c4 	movi	r2,9999
   265f0:	18800015 	stw	r2,0(r3)
   265f4:	90017726 	beq	r18,zero,26bd4 <_dtoa_r+0x6dc>
   265f8:	008000f4 	movhi	r2,3
   265fc:	108ca104 	addi	r2,r2,12932
   26600:	d9002517 	ldw	r4,148(sp)
   26604:	203fec26 	beq	r4,zero,265b8 <_gp+0xfffe9528>
   26608:	10c000c7 	ldb	r3,3(r2)
   2660c:	1801781e 	bne	r3,zero,26bf0 <_dtoa_r+0x6f8>
   26610:	10c000c4 	addi	r3,r2,3
   26614:	d9802517 	ldw	r6,148(sp)
   26618:	30c00015 	stw	r3,0(r6)
   2661c:	003fe606 	br	265b8 <_gp+0xfffe9528>
   26620:	04e00034 	movhi	r19,32768
   26624:	9cffffc4 	addi	r19,r19,-1
   26628:	00800044 	movi	r2,1
   2662c:	8ce6703a 	and	r19,r17,r19
   26630:	80800015 	stw	r2,0(r16)
   26634:	9823883a 	mov	r17,r19
   26638:	003fcc06 	br	2656c <_gp+0xfffe94dc>
   2663c:	d8800204 	addi	r2,sp,8
   26640:	d8800015 	stw	r2,0(sp)
   26644:	d9c00104 	addi	r7,sp,4
   26648:	900b883a 	mov	r5,r18
   2664c:	980d883a 	mov	r6,r19
   26650:	e009883a 	mov	r4,fp
   26654:	8820d53a 	srli	r16,r17,20
   26658:	0029ef40 	call	29ef4 <__d2b>
   2665c:	d8800915 	stw	r2,36(sp)
   26660:	8001651e 	bne	r16,zero,26bf8 <_dtoa_r+0x700>
   26664:	dd800217 	ldw	r22,8(sp)
   26668:	dc000117 	ldw	r16,4(sp)
   2666c:	00800804 	movi	r2,32
   26670:	b421883a 	add	r16,r22,r16
   26674:	80c10c84 	addi	r3,r16,1074
   26678:	10c2d10e 	bge	r2,r3,271c0 <_dtoa_r+0xcc8>
   2667c:	00801004 	movi	r2,64
   26680:	81010484 	addi	r4,r16,1042
   26684:	10c7c83a 	sub	r3,r2,r3
   26688:	9108d83a 	srl	r4,r18,r4
   2668c:	88e2983a 	sll	r17,r17,r3
   26690:	2448b03a 	or	r4,r4,r17
   26694:	002f8f80 	call	2f8f8 <__floatunsidf>
   26698:	017f8434 	movhi	r5,65040
   2669c:	01800044 	movi	r6,1
   266a0:	1009883a 	mov	r4,r2
   266a4:	194b883a 	add	r5,r3,r5
   266a8:	843fffc4 	addi	r16,r16,-1
   266ac:	d9801115 	stw	r6,68(sp)
   266b0:	000d883a 	mov	r6,zero
   266b4:	01cffe34 	movhi	r7,16376
   266b8:	002eea00 	call	2eea0 <__subdf3>
   266bc:	0198dbf4 	movhi	r6,25455
   266c0:	01cff4f4 	movhi	r7,16339
   266c4:	3190d844 	addi	r6,r6,17249
   266c8:	39e1e9c4 	addi	r7,r7,-30809
   266cc:	1009883a 	mov	r4,r2
   266d0:	180b883a 	mov	r5,r3
   266d4:	002e7880 	call	2e788 <__muldf3>
   266d8:	01a2d874 	movhi	r6,35681
   266dc:	01cff1f4 	movhi	r7,16327
   266e0:	31b22cc4 	addi	r6,r6,-14157
   266e4:	39e28a04 	addi	r7,r7,-30168
   266e8:	180b883a 	mov	r5,r3
   266ec:	1009883a 	mov	r4,r2
   266f0:	002d39c0 	call	2d39c <__adddf3>
   266f4:	8009883a 	mov	r4,r16
   266f8:	1029883a 	mov	r20,r2
   266fc:	1823883a 	mov	r17,r3
   26700:	002f81c0 	call	2f81c <__floatsidf>
   26704:	019427f4 	movhi	r6,20639
   26708:	01cff4f4 	movhi	r7,16339
   2670c:	319e7ec4 	addi	r6,r6,31227
   26710:	39d104c4 	addi	r7,r7,17427
   26714:	1009883a 	mov	r4,r2
   26718:	180b883a 	mov	r5,r3
   2671c:	002e7880 	call	2e788 <__muldf3>
   26720:	100d883a 	mov	r6,r2
   26724:	180f883a 	mov	r7,r3
   26728:	a009883a 	mov	r4,r20
   2672c:	880b883a 	mov	r5,r17
   26730:	002d39c0 	call	2d39c <__adddf3>
   26734:	1009883a 	mov	r4,r2
   26738:	180b883a 	mov	r5,r3
   2673c:	1029883a 	mov	r20,r2
   26740:	1823883a 	mov	r17,r3
   26744:	002f79c0 	call	2f79c <__fixdfsi>
   26748:	000d883a 	mov	r6,zero
   2674c:	000f883a 	mov	r7,zero
   26750:	a009883a 	mov	r4,r20
   26754:	880b883a 	mov	r5,r17
   26758:	d8800515 	stw	r2,20(sp)
   2675c:	002e6940 	call	2e694 <__ledf2>
   26760:	10028716 	blt	r2,zero,27180 <_dtoa_r+0xc88>
   26764:	d8c00517 	ldw	r3,20(sp)
   26768:	00800584 	movi	r2,22
   2676c:	10c27536 	bltu	r2,r3,27144 <_dtoa_r+0xc4c>
   26770:	180490fa 	slli	r2,r3,3
   26774:	00c000f4 	movhi	r3,3
   26778:	18ccbd04 	addi	r3,r3,13044
   2677c:	1885883a 	add	r2,r3,r2
   26780:	11000017 	ldw	r4,0(r2)
   26784:	11400117 	ldw	r5,4(r2)
   26788:	900d883a 	mov	r6,r18
   2678c:	980f883a 	mov	r7,r19
   26790:	002e5b80 	call	2e5b8 <__gedf2>
   26794:	00828d0e 	bge	zero,r2,271cc <_dtoa_r+0xcd4>
   26798:	d9000517 	ldw	r4,20(sp)
   2679c:	d8000e15 	stw	zero,56(sp)
   267a0:	213fffc4 	addi	r4,r4,-1
   267a4:	d9000515 	stw	r4,20(sp)
   267a8:	b42dc83a 	sub	r22,r22,r16
   267ac:	b5bfffc4 	addi	r22,r22,-1
   267b0:	b0026f16 	blt	r22,zero,27170 <_dtoa_r+0xc78>
   267b4:	d8000815 	stw	zero,32(sp)
   267b8:	d9c00517 	ldw	r7,20(sp)
   267bc:	38026416 	blt	r7,zero,27150 <_dtoa_r+0xc58>
   267c0:	b1ed883a 	add	r22,r22,r7
   267c4:	d9c00d15 	stw	r7,52(sp)
   267c8:	d8000a15 	stw	zero,40(sp)
   267cc:	d9800317 	ldw	r6,12(sp)
   267d0:	00800244 	movi	r2,9
   267d4:	11811436 	bltu	r2,r6,26c28 <_dtoa_r+0x730>
   267d8:	00800144 	movi	r2,5
   267dc:	1184e10e 	bge	r2,r6,27b64 <_dtoa_r+0x166c>
   267e0:	31bfff04 	addi	r6,r6,-4
   267e4:	d9800315 	stw	r6,12(sp)
   267e8:	0023883a 	mov	r17,zero
   267ec:	d9800317 	ldw	r6,12(sp)
   267f0:	008000c4 	movi	r2,3
   267f4:	30836726 	beq	r6,r2,27594 <_dtoa_r+0x109c>
   267f8:	1183410e 	bge	r2,r6,27500 <_dtoa_r+0x1008>
   267fc:	d9c00317 	ldw	r7,12(sp)
   26800:	00800104 	movi	r2,4
   26804:	38827c26 	beq	r7,r2,271f8 <_dtoa_r+0xd00>
   26808:	00800144 	movi	r2,5
   2680c:	3884c41e 	bne	r7,r2,27b20 <_dtoa_r+0x1628>
   26810:	00800044 	movi	r2,1
   26814:	d8800b15 	stw	r2,44(sp)
   26818:	d8c00517 	ldw	r3,20(sp)
   2681c:	d9002217 	ldw	r4,136(sp)
   26820:	1907883a 	add	r3,r3,r4
   26824:	19800044 	addi	r6,r3,1
   26828:	d8c00c15 	stw	r3,48(sp)
   2682c:	d9800615 	stw	r6,24(sp)
   26830:	0183a40e 	bge	zero,r6,276c4 <_dtoa_r+0x11cc>
   26834:	d9800617 	ldw	r6,24(sp)
   26838:	3021883a 	mov	r16,r6
   2683c:	e0001115 	stw	zero,68(fp)
   26840:	008005c4 	movi	r2,23
   26844:	1184c92e 	bgeu	r2,r6,27b6c <_dtoa_r+0x1674>
   26848:	00c00044 	movi	r3,1
   2684c:	00800104 	movi	r2,4
   26850:	1085883a 	add	r2,r2,r2
   26854:	11000504 	addi	r4,r2,20
   26858:	180b883a 	mov	r5,r3
   2685c:	18c00044 	addi	r3,r3,1
   26860:	313ffb2e 	bgeu	r6,r4,26850 <_gp+0xfffe97c0>
   26864:	e1401115 	stw	r5,68(fp)
   26868:	e009883a 	mov	r4,fp
   2686c:	00292600 	call	29260 <_Balloc>
   26870:	d8800715 	stw	r2,28(sp)
   26874:	e0801015 	stw	r2,64(fp)
   26878:	00800384 	movi	r2,14
   2687c:	1400f736 	bltu	r2,r16,26c5c <_dtoa_r+0x764>
   26880:	8800f626 	beq	r17,zero,26c5c <_dtoa_r+0x764>
   26884:	d9c00517 	ldw	r7,20(sp)
   26888:	01c39a0e 	bge	zero,r7,276f4 <_dtoa_r+0x11fc>
   2688c:	388003cc 	andi	r2,r7,15
   26890:	100490fa 	slli	r2,r2,3
   26894:	382bd13a 	srai	r21,r7,4
   26898:	00c000f4 	movhi	r3,3
   2689c:	18ccbd04 	addi	r3,r3,13044
   268a0:	1885883a 	add	r2,r3,r2
   268a4:	a8c0040c 	andi	r3,r21,16
   268a8:	12400017 	ldw	r9,0(r2)
   268ac:	12000117 	ldw	r8,4(r2)
   268b0:	18037926 	beq	r3,zero,27698 <_dtoa_r+0x11a0>
   268b4:	008000f4 	movhi	r2,3
   268b8:	108cb304 	addi	r2,r2,13004
   268bc:	11800817 	ldw	r6,32(r2)
   268c0:	11c00917 	ldw	r7,36(r2)
   268c4:	9009883a 	mov	r4,r18
   268c8:	980b883a 	mov	r5,r19
   268cc:	da001715 	stw	r8,92(sp)
   268d0:	da401615 	stw	r9,88(sp)
   268d4:	002dc480 	call	2dc48 <__divdf3>
   268d8:	da001717 	ldw	r8,92(sp)
   268dc:	da401617 	ldw	r9,88(sp)
   268e0:	ad4003cc 	andi	r21,r21,15
   268e4:	040000c4 	movi	r16,3
   268e8:	1023883a 	mov	r17,r2
   268ec:	1829883a 	mov	r20,r3
   268f0:	a8001126 	beq	r21,zero,26938 <_dtoa_r+0x440>
   268f4:	05c000f4 	movhi	r23,3
   268f8:	bdccb304 	addi	r23,r23,13004
   268fc:	4805883a 	mov	r2,r9
   26900:	4007883a 	mov	r3,r8
   26904:	a980004c 	andi	r6,r21,1
   26908:	1009883a 	mov	r4,r2
   2690c:	a82bd07a 	srai	r21,r21,1
   26910:	180b883a 	mov	r5,r3
   26914:	30000426 	beq	r6,zero,26928 <_dtoa_r+0x430>
   26918:	b9800017 	ldw	r6,0(r23)
   2691c:	b9c00117 	ldw	r7,4(r23)
   26920:	84000044 	addi	r16,r16,1
   26924:	002e7880 	call	2e788 <__muldf3>
   26928:	bdc00204 	addi	r23,r23,8
   2692c:	a83ff51e 	bne	r21,zero,26904 <_gp+0xfffe9874>
   26930:	1013883a 	mov	r9,r2
   26934:	1811883a 	mov	r8,r3
   26938:	480d883a 	mov	r6,r9
   2693c:	400f883a 	mov	r7,r8
   26940:	8809883a 	mov	r4,r17
   26944:	a00b883a 	mov	r5,r20
   26948:	002dc480 	call	2dc48 <__divdf3>
   2694c:	d8800f15 	stw	r2,60(sp)
   26950:	d8c01015 	stw	r3,64(sp)
   26954:	d8c00e17 	ldw	r3,56(sp)
   26958:	18000626 	beq	r3,zero,26974 <_dtoa_r+0x47c>
   2695c:	d9000f17 	ldw	r4,60(sp)
   26960:	d9401017 	ldw	r5,64(sp)
   26964:	000d883a 	mov	r6,zero
   26968:	01cffc34 	movhi	r7,16368
   2696c:	002e6940 	call	2e694 <__ledf2>
   26970:	10040b16 	blt	r2,zero,279a0 <_dtoa_r+0x14a8>
   26974:	8009883a 	mov	r4,r16
   26978:	002f81c0 	call	2f81c <__floatsidf>
   2697c:	d9800f17 	ldw	r6,60(sp)
   26980:	d9c01017 	ldw	r7,64(sp)
   26984:	1009883a 	mov	r4,r2
   26988:	180b883a 	mov	r5,r3
   2698c:	002e7880 	call	2e788 <__muldf3>
   26990:	000d883a 	mov	r6,zero
   26994:	01d00734 	movhi	r7,16412
   26998:	1009883a 	mov	r4,r2
   2699c:	180b883a 	mov	r5,r3
   269a0:	002d39c0 	call	2d39c <__adddf3>
   269a4:	1021883a 	mov	r16,r2
   269a8:	d8800617 	ldw	r2,24(sp)
   269ac:	047f3034 	movhi	r17,64704
   269b0:	1c63883a 	add	r17,r3,r17
   269b4:	10031826 	beq	r2,zero,27618 <_dtoa_r+0x1120>
   269b8:	d8c00517 	ldw	r3,20(sp)
   269bc:	db000617 	ldw	r12,24(sp)
   269c0:	d8c01315 	stw	r3,76(sp)
   269c4:	d9000b17 	ldw	r4,44(sp)
   269c8:	20038f26 	beq	r4,zero,27808 <_dtoa_r+0x1310>
   269cc:	60bfffc4 	addi	r2,r12,-1
   269d0:	100490fa 	slli	r2,r2,3
   269d4:	00c000f4 	movhi	r3,3
   269d8:	18ccbd04 	addi	r3,r3,13044
   269dc:	1885883a 	add	r2,r3,r2
   269e0:	11800017 	ldw	r6,0(r2)
   269e4:	11c00117 	ldw	r7,4(r2)
   269e8:	d8800717 	ldw	r2,28(sp)
   269ec:	0009883a 	mov	r4,zero
   269f0:	014ff834 	movhi	r5,16352
   269f4:	db001615 	stw	r12,88(sp)
   269f8:	15c00044 	addi	r23,r2,1
   269fc:	002dc480 	call	2dc48 <__divdf3>
   26a00:	800d883a 	mov	r6,r16
   26a04:	880f883a 	mov	r7,r17
   26a08:	1009883a 	mov	r4,r2
   26a0c:	180b883a 	mov	r5,r3
   26a10:	002eea00 	call	2eea0 <__subdf3>
   26a14:	d9401017 	ldw	r5,64(sp)
   26a18:	d9000f17 	ldw	r4,60(sp)
   26a1c:	102b883a 	mov	r21,r2
   26a20:	d8c01215 	stw	r3,72(sp)
   26a24:	002f79c0 	call	2f79c <__fixdfsi>
   26a28:	1009883a 	mov	r4,r2
   26a2c:	1029883a 	mov	r20,r2
   26a30:	002f81c0 	call	2f81c <__floatsidf>
   26a34:	d9000f17 	ldw	r4,60(sp)
   26a38:	d9401017 	ldw	r5,64(sp)
   26a3c:	100d883a 	mov	r6,r2
   26a40:	180f883a 	mov	r7,r3
   26a44:	002eea00 	call	2eea0 <__subdf3>
   26a48:	1823883a 	mov	r17,r3
   26a4c:	d8c00717 	ldw	r3,28(sp)
   26a50:	d9401217 	ldw	r5,72(sp)
   26a54:	a2000c04 	addi	r8,r20,48
   26a58:	1021883a 	mov	r16,r2
   26a5c:	1a000005 	stb	r8,0(r3)
   26a60:	800d883a 	mov	r6,r16
   26a64:	880f883a 	mov	r7,r17
   26a68:	a809883a 	mov	r4,r21
   26a6c:	4029883a 	mov	r20,r8
   26a70:	002e5b80 	call	2e5b8 <__gedf2>
   26a74:	00841d16 	blt	zero,r2,27aec <_dtoa_r+0x15f4>
   26a78:	800d883a 	mov	r6,r16
   26a7c:	880f883a 	mov	r7,r17
   26a80:	0009883a 	mov	r4,zero
   26a84:	014ffc34 	movhi	r5,16368
   26a88:	002eea00 	call	2eea0 <__subdf3>
   26a8c:	d9401217 	ldw	r5,72(sp)
   26a90:	100d883a 	mov	r6,r2
   26a94:	180f883a 	mov	r7,r3
   26a98:	a809883a 	mov	r4,r21
   26a9c:	002e5b80 	call	2e5b8 <__gedf2>
   26aa0:	db001617 	ldw	r12,88(sp)
   26aa4:	00840e16 	blt	zero,r2,27ae0 <_dtoa_r+0x15e8>
   26aa8:	00800044 	movi	r2,1
   26aac:	13006b0e 	bge	r2,r12,26c5c <_dtoa_r+0x764>
   26ab0:	d9000717 	ldw	r4,28(sp)
   26ab4:	dd800f15 	stw	r22,60(sp)
   26ab8:	dcc01015 	stw	r19,64(sp)
   26abc:	2319883a 	add	r12,r4,r12
   26ac0:	dcc01217 	ldw	r19,72(sp)
   26ac4:	602d883a 	mov	r22,r12
   26ac8:	dc801215 	stw	r18,72(sp)
   26acc:	b825883a 	mov	r18,r23
   26ad0:	00000906 	br	26af8 <_dtoa_r+0x600>
   26ad4:	002eea00 	call	2eea0 <__subdf3>
   26ad8:	a80d883a 	mov	r6,r21
   26adc:	980f883a 	mov	r7,r19
   26ae0:	1009883a 	mov	r4,r2
   26ae4:	180b883a 	mov	r5,r3
   26ae8:	002e6940 	call	2e694 <__ledf2>
   26aec:	1003e816 	blt	r2,zero,27a90 <_dtoa_r+0x1598>
   26af0:	b825883a 	mov	r18,r23
   26af4:	bd83e926 	beq	r23,r22,27a9c <_dtoa_r+0x15a4>
   26af8:	a809883a 	mov	r4,r21
   26afc:	980b883a 	mov	r5,r19
   26b00:	000d883a 	mov	r6,zero
   26b04:	01d00934 	movhi	r7,16420
   26b08:	002e7880 	call	2e788 <__muldf3>
   26b0c:	000d883a 	mov	r6,zero
   26b10:	01d00934 	movhi	r7,16420
   26b14:	8009883a 	mov	r4,r16
   26b18:	880b883a 	mov	r5,r17
   26b1c:	102b883a 	mov	r21,r2
   26b20:	1827883a 	mov	r19,r3
   26b24:	002e7880 	call	2e788 <__muldf3>
   26b28:	180b883a 	mov	r5,r3
   26b2c:	1009883a 	mov	r4,r2
   26b30:	1821883a 	mov	r16,r3
   26b34:	1023883a 	mov	r17,r2
   26b38:	002f79c0 	call	2f79c <__fixdfsi>
   26b3c:	1009883a 	mov	r4,r2
   26b40:	1029883a 	mov	r20,r2
   26b44:	002f81c0 	call	2f81c <__floatsidf>
   26b48:	8809883a 	mov	r4,r17
   26b4c:	800b883a 	mov	r5,r16
   26b50:	100d883a 	mov	r6,r2
   26b54:	180f883a 	mov	r7,r3
   26b58:	002eea00 	call	2eea0 <__subdf3>
   26b5c:	a5000c04 	addi	r20,r20,48
   26b60:	a80d883a 	mov	r6,r21
   26b64:	980f883a 	mov	r7,r19
   26b68:	1009883a 	mov	r4,r2
   26b6c:	180b883a 	mov	r5,r3
   26b70:	95000005 	stb	r20,0(r18)
   26b74:	1021883a 	mov	r16,r2
   26b78:	1823883a 	mov	r17,r3
   26b7c:	002e6940 	call	2e694 <__ledf2>
   26b80:	bdc00044 	addi	r23,r23,1
   26b84:	800d883a 	mov	r6,r16
   26b88:	880f883a 	mov	r7,r17
   26b8c:	0009883a 	mov	r4,zero
   26b90:	014ffc34 	movhi	r5,16368
   26b94:	103fcf0e 	bge	r2,zero,26ad4 <_gp+0xfffe9a44>
   26b98:	d8c01317 	ldw	r3,76(sp)
   26b9c:	d8c00515 	stw	r3,20(sp)
   26ba0:	d9400917 	ldw	r5,36(sp)
   26ba4:	e009883a 	mov	r4,fp
   26ba8:	00293080 	call	29308 <_Bfree>
   26bac:	d9000517 	ldw	r4,20(sp)
   26bb0:	d9802317 	ldw	r6,140(sp)
   26bb4:	d9c02517 	ldw	r7,148(sp)
   26bb8:	b8000005 	stb	zero,0(r23)
   26bbc:	20800044 	addi	r2,r4,1
   26bc0:	30800015 	stw	r2,0(r6)
   26bc4:	3802aa26 	beq	r7,zero,27670 <_dtoa_r+0x1178>
   26bc8:	3dc00015 	stw	r23,0(r7)
   26bcc:	d8800717 	ldw	r2,28(sp)
   26bd0:	003e7906 	br	265b8 <_gp+0xfffe9528>
   26bd4:	00800434 	movhi	r2,16
   26bd8:	10bfffc4 	addi	r2,r2,-1
   26bdc:	88a2703a 	and	r17,r17,r2
   26be0:	883e851e 	bne	r17,zero,265f8 <_gp+0xfffe9568>
   26be4:	008000f4 	movhi	r2,3
   26be8:	108c9e04 	addi	r2,r2,12920
   26bec:	003e8406 	br	26600 <_gp+0xfffe9570>
   26bf0:	10c00204 	addi	r3,r2,8
   26bf4:	003e8706 	br	26614 <_gp+0xfffe9584>
   26bf8:	01400434 	movhi	r5,16
   26bfc:	297fffc4 	addi	r5,r5,-1
   26c00:	994a703a 	and	r5,r19,r5
   26c04:	9009883a 	mov	r4,r18
   26c08:	843f0044 	addi	r16,r16,-1023
   26c0c:	294ffc34 	orhi	r5,r5,16368
   26c10:	dd800217 	ldw	r22,8(sp)
   26c14:	d8001115 	stw	zero,68(sp)
   26c18:	003ea506 	br	266b0 <_gp+0xfffe9620>
   26c1c:	008000f4 	movhi	r2,3
   26c20:	108c9504 	addi	r2,r2,12884
   26c24:	003e6406 	br	265b8 <_gp+0xfffe9528>
   26c28:	e0001115 	stw	zero,68(fp)
   26c2c:	000b883a 	mov	r5,zero
   26c30:	e009883a 	mov	r4,fp
   26c34:	00292600 	call	29260 <_Balloc>
   26c38:	01bfffc4 	movi	r6,-1
   26c3c:	01c00044 	movi	r7,1
   26c40:	d8800715 	stw	r2,28(sp)
   26c44:	d9800c15 	stw	r6,48(sp)
   26c48:	e0801015 	stw	r2,64(fp)
   26c4c:	d8000315 	stw	zero,12(sp)
   26c50:	d9c00b15 	stw	r7,44(sp)
   26c54:	d9800615 	stw	r6,24(sp)
   26c58:	d8002215 	stw	zero,136(sp)
   26c5c:	d8800117 	ldw	r2,4(sp)
   26c60:	10008916 	blt	r2,zero,26e88 <_dtoa_r+0x990>
   26c64:	d9000517 	ldw	r4,20(sp)
   26c68:	00c00384 	movi	r3,14
   26c6c:	19008616 	blt	r3,r4,26e88 <_dtoa_r+0x990>
   26c70:	200490fa 	slli	r2,r4,3
   26c74:	00c000f4 	movhi	r3,3
   26c78:	d9802217 	ldw	r6,136(sp)
   26c7c:	18ccbd04 	addi	r3,r3,13044
   26c80:	1885883a 	add	r2,r3,r2
   26c84:	14000017 	ldw	r16,0(r2)
   26c88:	14400117 	ldw	r17,4(r2)
   26c8c:	30016316 	blt	r6,zero,2721c <_dtoa_r+0xd24>
   26c90:	800d883a 	mov	r6,r16
   26c94:	880f883a 	mov	r7,r17
   26c98:	9009883a 	mov	r4,r18
   26c9c:	980b883a 	mov	r5,r19
   26ca0:	002dc480 	call	2dc48 <__divdf3>
   26ca4:	180b883a 	mov	r5,r3
   26ca8:	1009883a 	mov	r4,r2
   26cac:	002f79c0 	call	2f79c <__fixdfsi>
   26cb0:	1009883a 	mov	r4,r2
   26cb4:	102b883a 	mov	r21,r2
   26cb8:	002f81c0 	call	2f81c <__floatsidf>
   26cbc:	800d883a 	mov	r6,r16
   26cc0:	880f883a 	mov	r7,r17
   26cc4:	1009883a 	mov	r4,r2
   26cc8:	180b883a 	mov	r5,r3
   26ccc:	002e7880 	call	2e788 <__muldf3>
   26cd0:	100d883a 	mov	r6,r2
   26cd4:	180f883a 	mov	r7,r3
   26cd8:	9009883a 	mov	r4,r18
   26cdc:	980b883a 	mov	r5,r19
   26ce0:	002eea00 	call	2eea0 <__subdf3>
   26ce4:	d9c00717 	ldw	r7,28(sp)
   26ce8:	1009883a 	mov	r4,r2
   26cec:	a8800c04 	addi	r2,r21,48
   26cf0:	38800005 	stb	r2,0(r7)
   26cf4:	3dc00044 	addi	r23,r7,1
   26cf8:	d9c00617 	ldw	r7,24(sp)
   26cfc:	01800044 	movi	r6,1
   26d00:	180b883a 	mov	r5,r3
   26d04:	2005883a 	mov	r2,r4
   26d08:	39803826 	beq	r7,r6,26dec <_dtoa_r+0x8f4>
   26d0c:	000d883a 	mov	r6,zero
   26d10:	01d00934 	movhi	r7,16420
   26d14:	002e7880 	call	2e788 <__muldf3>
   26d18:	000d883a 	mov	r6,zero
   26d1c:	000f883a 	mov	r7,zero
   26d20:	1009883a 	mov	r4,r2
   26d24:	180b883a 	mov	r5,r3
   26d28:	1025883a 	mov	r18,r2
   26d2c:	1827883a 	mov	r19,r3
   26d30:	002e5300 	call	2e530 <__eqdf2>
   26d34:	103f9a26 	beq	r2,zero,26ba0 <_gp+0xfffe9b10>
   26d38:	d9c00617 	ldw	r7,24(sp)
   26d3c:	d8c00717 	ldw	r3,28(sp)
   26d40:	b829883a 	mov	r20,r23
   26d44:	38bfffc4 	addi	r2,r7,-1
   26d48:	18ad883a 	add	r22,r3,r2
   26d4c:	00000a06 	br	26d78 <_dtoa_r+0x880>
   26d50:	002e7880 	call	2e788 <__muldf3>
   26d54:	000d883a 	mov	r6,zero
   26d58:	000f883a 	mov	r7,zero
   26d5c:	1009883a 	mov	r4,r2
   26d60:	180b883a 	mov	r5,r3
   26d64:	1025883a 	mov	r18,r2
   26d68:	1827883a 	mov	r19,r3
   26d6c:	b829883a 	mov	r20,r23
   26d70:	002e5300 	call	2e530 <__eqdf2>
   26d74:	103f8a26 	beq	r2,zero,26ba0 <_gp+0xfffe9b10>
   26d78:	800d883a 	mov	r6,r16
   26d7c:	880f883a 	mov	r7,r17
   26d80:	9009883a 	mov	r4,r18
   26d84:	980b883a 	mov	r5,r19
   26d88:	002dc480 	call	2dc48 <__divdf3>
   26d8c:	180b883a 	mov	r5,r3
   26d90:	1009883a 	mov	r4,r2
   26d94:	002f79c0 	call	2f79c <__fixdfsi>
   26d98:	1009883a 	mov	r4,r2
   26d9c:	102b883a 	mov	r21,r2
   26da0:	002f81c0 	call	2f81c <__floatsidf>
   26da4:	800d883a 	mov	r6,r16
   26da8:	880f883a 	mov	r7,r17
   26dac:	1009883a 	mov	r4,r2
   26db0:	180b883a 	mov	r5,r3
   26db4:	002e7880 	call	2e788 <__muldf3>
   26db8:	100d883a 	mov	r6,r2
   26dbc:	180f883a 	mov	r7,r3
   26dc0:	9009883a 	mov	r4,r18
   26dc4:	980b883a 	mov	r5,r19
   26dc8:	002eea00 	call	2eea0 <__subdf3>
   26dcc:	aa000c04 	addi	r8,r21,48
   26dd0:	a2000005 	stb	r8,0(r20)
   26dd4:	000d883a 	mov	r6,zero
   26dd8:	01d00934 	movhi	r7,16420
   26ddc:	1009883a 	mov	r4,r2
   26de0:	180b883a 	mov	r5,r3
   26de4:	a5c00044 	addi	r23,r20,1
   26de8:	b53fd91e 	bne	r22,r20,26d50 <_gp+0xfffe9cc0>
   26dec:	100d883a 	mov	r6,r2
   26df0:	180f883a 	mov	r7,r3
   26df4:	1009883a 	mov	r4,r2
   26df8:	180b883a 	mov	r5,r3
   26dfc:	002d39c0 	call	2d39c <__adddf3>
   26e00:	100d883a 	mov	r6,r2
   26e04:	180f883a 	mov	r7,r3
   26e08:	8009883a 	mov	r4,r16
   26e0c:	880b883a 	mov	r5,r17
   26e10:	1027883a 	mov	r19,r2
   26e14:	1825883a 	mov	r18,r3
   26e18:	002e6940 	call	2e694 <__ledf2>
   26e1c:	10000816 	blt	r2,zero,26e40 <_dtoa_r+0x948>
   26e20:	980d883a 	mov	r6,r19
   26e24:	900f883a 	mov	r7,r18
   26e28:	8009883a 	mov	r4,r16
   26e2c:	880b883a 	mov	r5,r17
   26e30:	002e5300 	call	2e530 <__eqdf2>
   26e34:	103f5a1e 	bne	r2,zero,26ba0 <_gp+0xfffe9b10>
   26e38:	ad40004c 	andi	r21,r21,1
   26e3c:	a83f5826 	beq	r21,zero,26ba0 <_gp+0xfffe9b10>
   26e40:	bd3fffc3 	ldbu	r20,-1(r23)
   26e44:	b8bfffc4 	addi	r2,r23,-1
   26e48:	1007883a 	mov	r3,r2
   26e4c:	01400e44 	movi	r5,57
   26e50:	d9800717 	ldw	r6,28(sp)
   26e54:	00000506 	br	26e6c <_dtoa_r+0x974>
   26e58:	18ffffc4 	addi	r3,r3,-1
   26e5c:	11824726 	beq	r2,r6,2777c <_dtoa_r+0x1284>
   26e60:	1d000003 	ldbu	r20,0(r3)
   26e64:	102f883a 	mov	r23,r2
   26e68:	10bfffc4 	addi	r2,r2,-1
   26e6c:	a1003fcc 	andi	r4,r20,255
   26e70:	2100201c 	xori	r4,r4,128
   26e74:	213fe004 	addi	r4,r4,-128
   26e78:	217ff726 	beq	r4,r5,26e58 <_gp+0xfffe9dc8>
   26e7c:	a2000044 	addi	r8,r20,1
   26e80:	12000005 	stb	r8,0(r2)
   26e84:	003f4606 	br	26ba0 <_gp+0xfffe9b10>
   26e88:	d9000b17 	ldw	r4,44(sp)
   26e8c:	2000c826 	beq	r4,zero,271b0 <_dtoa_r+0xcb8>
   26e90:	d9800317 	ldw	r6,12(sp)
   26e94:	00c00044 	movi	r3,1
   26e98:	1980f90e 	bge	r3,r6,27280 <_dtoa_r+0xd88>
   26e9c:	d8800617 	ldw	r2,24(sp)
   26ea0:	d8c00a17 	ldw	r3,40(sp)
   26ea4:	157fffc4 	addi	r21,r2,-1
   26ea8:	1d41f316 	blt	r3,r21,27678 <_dtoa_r+0x1180>
   26eac:	1d6bc83a 	sub	r21,r3,r21
   26eb0:	d9c00617 	ldw	r7,24(sp)
   26eb4:	3802aa16 	blt	r7,zero,27960 <_dtoa_r+0x1468>
   26eb8:	dd000817 	ldw	r20,32(sp)
   26ebc:	d8800617 	ldw	r2,24(sp)
   26ec0:	d8c00817 	ldw	r3,32(sp)
   26ec4:	01400044 	movi	r5,1
   26ec8:	e009883a 	mov	r4,fp
   26ecc:	1887883a 	add	r3,r3,r2
   26ed0:	d8c00815 	stw	r3,32(sp)
   26ed4:	b0ad883a 	add	r22,r22,r2
   26ed8:	002966c0 	call	2966c <__i2b>
   26edc:	1023883a 	mov	r17,r2
   26ee0:	a0000826 	beq	r20,zero,26f04 <_dtoa_r+0xa0c>
   26ee4:	0580070e 	bge	zero,r22,26f04 <_dtoa_r+0xa0c>
   26ee8:	a005883a 	mov	r2,r20
   26eec:	b500b916 	blt	r22,r20,271d4 <_dtoa_r+0xcdc>
   26ef0:	d9000817 	ldw	r4,32(sp)
   26ef4:	a0a9c83a 	sub	r20,r20,r2
   26ef8:	b0adc83a 	sub	r22,r22,r2
   26efc:	2089c83a 	sub	r4,r4,r2
   26f00:	d9000815 	stw	r4,32(sp)
   26f04:	d9800a17 	ldw	r6,40(sp)
   26f08:	0181810e 	bge	zero,r6,27510 <_dtoa_r+0x1018>
   26f0c:	d9c00b17 	ldw	r7,44(sp)
   26f10:	3800b326 	beq	r7,zero,271e0 <_dtoa_r+0xce8>
   26f14:	a800b226 	beq	r21,zero,271e0 <_dtoa_r+0xce8>
   26f18:	880b883a 	mov	r5,r17
   26f1c:	a80d883a 	mov	r6,r21
   26f20:	e009883a 	mov	r4,fp
   26f24:	00298a00 	call	298a0 <__pow5mult>
   26f28:	d9800917 	ldw	r6,36(sp)
   26f2c:	100b883a 	mov	r5,r2
   26f30:	e009883a 	mov	r4,fp
   26f34:	1023883a 	mov	r17,r2
   26f38:	00296a80 	call	296a8 <__multiply>
   26f3c:	1021883a 	mov	r16,r2
   26f40:	d8800a17 	ldw	r2,40(sp)
   26f44:	d9400917 	ldw	r5,36(sp)
   26f48:	e009883a 	mov	r4,fp
   26f4c:	1545c83a 	sub	r2,r2,r21
   26f50:	d8800a15 	stw	r2,40(sp)
   26f54:	00293080 	call	29308 <_Bfree>
   26f58:	d8c00a17 	ldw	r3,40(sp)
   26f5c:	18009f1e 	bne	r3,zero,271dc <_dtoa_r+0xce4>
   26f60:	05c00044 	movi	r23,1
   26f64:	e009883a 	mov	r4,fp
   26f68:	b80b883a 	mov	r5,r23
   26f6c:	002966c0 	call	2966c <__i2b>
   26f70:	d9000d17 	ldw	r4,52(sp)
   26f74:	102b883a 	mov	r21,r2
   26f78:	2000ce26 	beq	r4,zero,272b4 <_dtoa_r+0xdbc>
   26f7c:	200d883a 	mov	r6,r4
   26f80:	100b883a 	mov	r5,r2
   26f84:	e009883a 	mov	r4,fp
   26f88:	00298a00 	call	298a0 <__pow5mult>
   26f8c:	d9800317 	ldw	r6,12(sp)
   26f90:	102b883a 	mov	r21,r2
   26f94:	b981810e 	bge	r23,r6,2759c <_dtoa_r+0x10a4>
   26f98:	0027883a 	mov	r19,zero
   26f9c:	a8800417 	ldw	r2,16(r21)
   26fa0:	05c00804 	movi	r23,32
   26fa4:	10800104 	addi	r2,r2,4
   26fa8:	1085883a 	add	r2,r2,r2
   26fac:	1085883a 	add	r2,r2,r2
   26fb0:	a885883a 	add	r2,r21,r2
   26fb4:	11000017 	ldw	r4,0(r2)
   26fb8:	00295540 	call	29554 <__hi0bits>
   26fbc:	b885c83a 	sub	r2,r23,r2
   26fc0:	1585883a 	add	r2,r2,r22
   26fc4:	108007cc 	andi	r2,r2,31
   26fc8:	1000b326 	beq	r2,zero,27298 <_dtoa_r+0xda0>
   26fcc:	00c00804 	movi	r3,32
   26fd0:	1887c83a 	sub	r3,r3,r2
   26fd4:	01000104 	movi	r4,4
   26fd8:	20c2cd0e 	bge	r4,r3,27b10 <_dtoa_r+0x1618>
   26fdc:	00c00704 	movi	r3,28
   26fe0:	1885c83a 	sub	r2,r3,r2
   26fe4:	d8c00817 	ldw	r3,32(sp)
   26fe8:	a0a9883a 	add	r20,r20,r2
   26fec:	b0ad883a 	add	r22,r22,r2
   26ff0:	1887883a 	add	r3,r3,r2
   26ff4:	d8c00815 	stw	r3,32(sp)
   26ff8:	d9800817 	ldw	r6,32(sp)
   26ffc:	0180040e 	bge	zero,r6,27010 <_dtoa_r+0xb18>
   27000:	800b883a 	mov	r5,r16
   27004:	e009883a 	mov	r4,fp
   27008:	00299e00 	call	299e0 <__lshift>
   2700c:	1021883a 	mov	r16,r2
   27010:	0580050e 	bge	zero,r22,27028 <_dtoa_r+0xb30>
   27014:	a80b883a 	mov	r5,r21
   27018:	b00d883a 	mov	r6,r22
   2701c:	e009883a 	mov	r4,fp
   27020:	00299e00 	call	299e0 <__lshift>
   27024:	102b883a 	mov	r21,r2
   27028:	d9c00e17 	ldw	r7,56(sp)
   2702c:	3801211e 	bne	r7,zero,274b4 <_dtoa_r+0xfbc>
   27030:	d9800617 	ldw	r6,24(sp)
   27034:	0181380e 	bge	zero,r6,27518 <_dtoa_r+0x1020>
   27038:	d8c00b17 	ldw	r3,44(sp)
   2703c:	1800ab1e 	bne	r3,zero,272ec <_dtoa_r+0xdf4>
   27040:	dc800717 	ldw	r18,28(sp)
   27044:	dcc00617 	ldw	r19,24(sp)
   27048:	9029883a 	mov	r20,r18
   2704c:	00000206 	br	27058 <_dtoa_r+0xb60>
   27050:	00293300 	call	29330 <__multadd>
   27054:	1021883a 	mov	r16,r2
   27058:	a80b883a 	mov	r5,r21
   2705c:	8009883a 	mov	r4,r16
   27060:	00262f80 	call	262f8 <quorem>
   27064:	10800c04 	addi	r2,r2,48
   27068:	90800005 	stb	r2,0(r18)
   2706c:	94800044 	addi	r18,r18,1
   27070:	9507c83a 	sub	r3,r18,r20
   27074:	000f883a 	mov	r7,zero
   27078:	01800284 	movi	r6,10
   2707c:	800b883a 	mov	r5,r16
   27080:	e009883a 	mov	r4,fp
   27084:	1cfff216 	blt	r3,r19,27050 <_gp+0xfffe9fc0>
   27088:	1011883a 	mov	r8,r2
   2708c:	d8800617 	ldw	r2,24(sp)
   27090:	0082370e 	bge	zero,r2,27970 <_dtoa_r+0x1478>
   27094:	d9000717 	ldw	r4,28(sp)
   27098:	0025883a 	mov	r18,zero
   2709c:	20af883a 	add	r23,r4,r2
   270a0:	01800044 	movi	r6,1
   270a4:	800b883a 	mov	r5,r16
   270a8:	e009883a 	mov	r4,fp
   270ac:	da001715 	stw	r8,92(sp)
   270b0:	00299e00 	call	299e0 <__lshift>
   270b4:	a80b883a 	mov	r5,r21
   270b8:	1009883a 	mov	r4,r2
   270bc:	d8800915 	stw	r2,36(sp)
   270c0:	0029b280 	call	29b28 <__mcmp>
   270c4:	da001717 	ldw	r8,92(sp)
   270c8:	0081800e 	bge	zero,r2,276cc <_dtoa_r+0x11d4>
   270cc:	b93fffc3 	ldbu	r4,-1(r23)
   270d0:	b8bfffc4 	addi	r2,r23,-1
   270d4:	1007883a 	mov	r3,r2
   270d8:	01800e44 	movi	r6,57
   270dc:	d9c00717 	ldw	r7,28(sp)
   270e0:	00000506 	br	270f8 <_dtoa_r+0xc00>
   270e4:	18ffffc4 	addi	r3,r3,-1
   270e8:	11c12326 	beq	r2,r7,27578 <_dtoa_r+0x1080>
   270ec:	19000003 	ldbu	r4,0(r3)
   270f0:	102f883a 	mov	r23,r2
   270f4:	10bfffc4 	addi	r2,r2,-1
   270f8:	21403fcc 	andi	r5,r4,255
   270fc:	2940201c 	xori	r5,r5,128
   27100:	297fe004 	addi	r5,r5,-128
   27104:	29bff726 	beq	r5,r6,270e4 <_gp+0xfffea054>
   27108:	21000044 	addi	r4,r4,1
   2710c:	11000005 	stb	r4,0(r2)
   27110:	a80b883a 	mov	r5,r21
   27114:	e009883a 	mov	r4,fp
   27118:	00293080 	call	29308 <_Bfree>
   2711c:	883ea026 	beq	r17,zero,26ba0 <_gp+0xfffe9b10>
   27120:	90000426 	beq	r18,zero,27134 <_dtoa_r+0xc3c>
   27124:	94400326 	beq	r18,r17,27134 <_dtoa_r+0xc3c>
   27128:	900b883a 	mov	r5,r18
   2712c:	e009883a 	mov	r4,fp
   27130:	00293080 	call	29308 <_Bfree>
   27134:	880b883a 	mov	r5,r17
   27138:	e009883a 	mov	r4,fp
   2713c:	00293080 	call	29308 <_Bfree>
   27140:	003e9706 	br	26ba0 <_gp+0xfffe9b10>
   27144:	01800044 	movi	r6,1
   27148:	d9800e15 	stw	r6,56(sp)
   2714c:	003d9606 	br	267a8 <_gp+0xfffe9718>
   27150:	d8800817 	ldw	r2,32(sp)
   27154:	d8c00517 	ldw	r3,20(sp)
   27158:	d8000d15 	stw	zero,52(sp)
   2715c:	10c5c83a 	sub	r2,r2,r3
   27160:	00c9c83a 	sub	r4,zero,r3
   27164:	d8800815 	stw	r2,32(sp)
   27168:	d9000a15 	stw	r4,40(sp)
   2716c:	003d9706 	br	267cc <_gp+0xfffe973c>
   27170:	05adc83a 	sub	r22,zero,r22
   27174:	dd800815 	stw	r22,32(sp)
   27178:	002d883a 	mov	r22,zero
   2717c:	003d8e06 	br	267b8 <_gp+0xfffe9728>
   27180:	d9000517 	ldw	r4,20(sp)
   27184:	002f81c0 	call	2f81c <__floatsidf>
   27188:	100d883a 	mov	r6,r2
   2718c:	180f883a 	mov	r7,r3
   27190:	a009883a 	mov	r4,r20
   27194:	880b883a 	mov	r5,r17
   27198:	002e5300 	call	2e530 <__eqdf2>
   2719c:	103d7126 	beq	r2,zero,26764 <_gp+0xfffe96d4>
   271a0:	d9c00517 	ldw	r7,20(sp)
   271a4:	39ffffc4 	addi	r7,r7,-1
   271a8:	d9c00515 	stw	r7,20(sp)
   271ac:	003d6d06 	br	26764 <_gp+0xfffe96d4>
   271b0:	dd400a17 	ldw	r21,40(sp)
   271b4:	dd000817 	ldw	r20,32(sp)
   271b8:	0023883a 	mov	r17,zero
   271bc:	003f4806 	br	26ee0 <_gp+0xfffe9e50>
   271c0:	10e3c83a 	sub	r17,r2,r3
   271c4:	9448983a 	sll	r4,r18,r17
   271c8:	003d3206 	br	26694 <_gp+0xfffe9604>
   271cc:	d8000e15 	stw	zero,56(sp)
   271d0:	003d7506 	br	267a8 <_gp+0xfffe9718>
   271d4:	b005883a 	mov	r2,r22
   271d8:	003f4506 	br	26ef0 <_gp+0xfffe9e60>
   271dc:	dc000915 	stw	r16,36(sp)
   271e0:	d9800a17 	ldw	r6,40(sp)
   271e4:	d9400917 	ldw	r5,36(sp)
   271e8:	e009883a 	mov	r4,fp
   271ec:	00298a00 	call	298a0 <__pow5mult>
   271f0:	1021883a 	mov	r16,r2
   271f4:	003f5a06 	br	26f60 <_gp+0xfffe9ed0>
   271f8:	01c00044 	movi	r7,1
   271fc:	d9c00b15 	stw	r7,44(sp)
   27200:	d8802217 	ldw	r2,136(sp)
   27204:	0081280e 	bge	zero,r2,276a8 <_dtoa_r+0x11b0>
   27208:	100d883a 	mov	r6,r2
   2720c:	1021883a 	mov	r16,r2
   27210:	d8800c15 	stw	r2,48(sp)
   27214:	d8800615 	stw	r2,24(sp)
   27218:	003d8806 	br	2683c <_gp+0xfffe97ac>
   2721c:	d8800617 	ldw	r2,24(sp)
   27220:	00be9b16 	blt	zero,r2,26c90 <_gp+0xfffe9c00>
   27224:	10010f1e 	bne	r2,zero,27664 <_dtoa_r+0x116c>
   27228:	880b883a 	mov	r5,r17
   2722c:	000d883a 	mov	r6,zero
   27230:	01d00534 	movhi	r7,16404
   27234:	8009883a 	mov	r4,r16
   27238:	002e7880 	call	2e788 <__muldf3>
   2723c:	900d883a 	mov	r6,r18
   27240:	980f883a 	mov	r7,r19
   27244:	1009883a 	mov	r4,r2
   27248:	180b883a 	mov	r5,r3
   2724c:	002e5b80 	call	2e5b8 <__gedf2>
   27250:	002b883a 	mov	r21,zero
   27254:	0023883a 	mov	r17,zero
   27258:	1000bf16 	blt	r2,zero,27558 <_dtoa_r+0x1060>
   2725c:	d9802217 	ldw	r6,136(sp)
   27260:	ddc00717 	ldw	r23,28(sp)
   27264:	018c303a 	nor	r6,zero,r6
   27268:	d9800515 	stw	r6,20(sp)
   2726c:	a80b883a 	mov	r5,r21
   27270:	e009883a 	mov	r4,fp
   27274:	00293080 	call	29308 <_Bfree>
   27278:	883e4926 	beq	r17,zero,26ba0 <_gp+0xfffe9b10>
   2727c:	003fad06 	br	27134 <_gp+0xfffea0a4>
   27280:	d9c01117 	ldw	r7,68(sp)
   27284:	3801bc26 	beq	r7,zero,27978 <_dtoa_r+0x1480>
   27288:	10810cc4 	addi	r2,r2,1075
   2728c:	dd400a17 	ldw	r21,40(sp)
   27290:	dd000817 	ldw	r20,32(sp)
   27294:	003f0a06 	br	26ec0 <_gp+0xfffe9e30>
   27298:	00800704 	movi	r2,28
   2729c:	d9000817 	ldw	r4,32(sp)
   272a0:	a0a9883a 	add	r20,r20,r2
   272a4:	b0ad883a 	add	r22,r22,r2
   272a8:	2089883a 	add	r4,r4,r2
   272ac:	d9000815 	stw	r4,32(sp)
   272b0:	003f5106 	br	26ff8 <_gp+0xfffe9f68>
   272b4:	d8c00317 	ldw	r3,12(sp)
   272b8:	b8c1fc0e 	bge	r23,r3,27aac <_dtoa_r+0x15b4>
   272bc:	0027883a 	mov	r19,zero
   272c0:	b805883a 	mov	r2,r23
   272c4:	003f3e06 	br	26fc0 <_gp+0xfffe9f30>
   272c8:	880b883a 	mov	r5,r17
   272cc:	e009883a 	mov	r4,fp
   272d0:	000f883a 	mov	r7,zero
   272d4:	01800284 	movi	r6,10
   272d8:	00293300 	call	29330 <__multadd>
   272dc:	d9000c17 	ldw	r4,48(sp)
   272e0:	1023883a 	mov	r17,r2
   272e4:	0102040e 	bge	zero,r4,27af8 <_dtoa_r+0x1600>
   272e8:	d9000615 	stw	r4,24(sp)
   272ec:	0500050e 	bge	zero,r20,27304 <_dtoa_r+0xe0c>
   272f0:	880b883a 	mov	r5,r17
   272f4:	a00d883a 	mov	r6,r20
   272f8:	e009883a 	mov	r4,fp
   272fc:	00299e00 	call	299e0 <__lshift>
   27300:	1023883a 	mov	r17,r2
   27304:	9801241e 	bne	r19,zero,27798 <_dtoa_r+0x12a0>
   27308:	8829883a 	mov	r20,r17
   2730c:	d9000617 	ldw	r4,24(sp)
   27310:	dcc00717 	ldw	r19,28(sp)
   27314:	9480004c 	andi	r18,r18,1
   27318:	20bfffc4 	addi	r2,r4,-1
   2731c:	9885883a 	add	r2,r19,r2
   27320:	d8800415 	stw	r2,16(sp)
   27324:	dc800615 	stw	r18,24(sp)
   27328:	a80b883a 	mov	r5,r21
   2732c:	8009883a 	mov	r4,r16
   27330:	00262f80 	call	262f8 <quorem>
   27334:	880b883a 	mov	r5,r17
   27338:	8009883a 	mov	r4,r16
   2733c:	102f883a 	mov	r23,r2
   27340:	0029b280 	call	29b28 <__mcmp>
   27344:	a80b883a 	mov	r5,r21
   27348:	a00d883a 	mov	r6,r20
   2734c:	e009883a 	mov	r4,fp
   27350:	102d883a 	mov	r22,r2
   27354:	0029b880 	call	29b88 <__mdiff>
   27358:	1007883a 	mov	r3,r2
   2735c:	10800317 	ldw	r2,12(r2)
   27360:	bc800c04 	addi	r18,r23,48
   27364:	180b883a 	mov	r5,r3
   27368:	10004e1e 	bne	r2,zero,274a4 <_dtoa_r+0xfac>
   2736c:	8009883a 	mov	r4,r16
   27370:	d8c01615 	stw	r3,88(sp)
   27374:	0029b280 	call	29b28 <__mcmp>
   27378:	d8c01617 	ldw	r3,88(sp)
   2737c:	e009883a 	mov	r4,fp
   27380:	d8801615 	stw	r2,88(sp)
   27384:	180b883a 	mov	r5,r3
   27388:	00293080 	call	29308 <_Bfree>
   2738c:	d8801617 	ldw	r2,88(sp)
   27390:	1000041e 	bne	r2,zero,273a4 <_dtoa_r+0xeac>
   27394:	d9800317 	ldw	r6,12(sp)
   27398:	3000021e 	bne	r6,zero,273a4 <_dtoa_r+0xeac>
   2739c:	d8c00617 	ldw	r3,24(sp)
   273a0:	18003726 	beq	r3,zero,27480 <_dtoa_r+0xf88>
   273a4:	b0002016 	blt	r22,zero,27428 <_dtoa_r+0xf30>
   273a8:	b000041e 	bne	r22,zero,273bc <_dtoa_r+0xec4>
   273ac:	d9000317 	ldw	r4,12(sp)
   273b0:	2000021e 	bne	r4,zero,273bc <_dtoa_r+0xec4>
   273b4:	d8c00617 	ldw	r3,24(sp)
   273b8:	18001b26 	beq	r3,zero,27428 <_dtoa_r+0xf30>
   273bc:	00810716 	blt	zero,r2,277dc <_dtoa_r+0x12e4>
   273c0:	d8c00417 	ldw	r3,16(sp)
   273c4:	9d800044 	addi	r22,r19,1
   273c8:	9c800005 	stb	r18,0(r19)
   273cc:	b02f883a 	mov	r23,r22
   273d0:	98c10626 	beq	r19,r3,277ec <_dtoa_r+0x12f4>
   273d4:	800b883a 	mov	r5,r16
   273d8:	000f883a 	mov	r7,zero
   273dc:	01800284 	movi	r6,10
   273e0:	e009883a 	mov	r4,fp
   273e4:	00293300 	call	29330 <__multadd>
   273e8:	1021883a 	mov	r16,r2
   273ec:	000f883a 	mov	r7,zero
   273f0:	01800284 	movi	r6,10
   273f4:	880b883a 	mov	r5,r17
   273f8:	e009883a 	mov	r4,fp
   273fc:	8d002526 	beq	r17,r20,27494 <_dtoa_r+0xf9c>
   27400:	00293300 	call	29330 <__multadd>
   27404:	a00b883a 	mov	r5,r20
   27408:	000f883a 	mov	r7,zero
   2740c:	01800284 	movi	r6,10
   27410:	e009883a 	mov	r4,fp
   27414:	1023883a 	mov	r17,r2
   27418:	00293300 	call	29330 <__multadd>
   2741c:	1029883a 	mov	r20,r2
   27420:	b027883a 	mov	r19,r22
   27424:	003fc006 	br	27328 <_gp+0xfffea298>
   27428:	9011883a 	mov	r8,r18
   2742c:	00800e0e 	bge	zero,r2,27468 <_dtoa_r+0xf70>
   27430:	800b883a 	mov	r5,r16
   27434:	01800044 	movi	r6,1
   27438:	e009883a 	mov	r4,fp
   2743c:	da001715 	stw	r8,92(sp)
   27440:	00299e00 	call	299e0 <__lshift>
   27444:	a80b883a 	mov	r5,r21
   27448:	1009883a 	mov	r4,r2
   2744c:	1021883a 	mov	r16,r2
   27450:	0029b280 	call	29b28 <__mcmp>
   27454:	da001717 	ldw	r8,92(sp)
   27458:	0081960e 	bge	zero,r2,27ab4 <_dtoa_r+0x15bc>
   2745c:	00800e44 	movi	r2,57
   27460:	40817026 	beq	r8,r2,27a24 <_dtoa_r+0x152c>
   27464:	ba000c44 	addi	r8,r23,49
   27468:	8825883a 	mov	r18,r17
   2746c:	9dc00044 	addi	r23,r19,1
   27470:	9a000005 	stb	r8,0(r19)
   27474:	a023883a 	mov	r17,r20
   27478:	dc000915 	stw	r16,36(sp)
   2747c:	003f2406 	br	27110 <_gp+0xfffea080>
   27480:	00800e44 	movi	r2,57
   27484:	9011883a 	mov	r8,r18
   27488:	90816626 	beq	r18,r2,27a24 <_dtoa_r+0x152c>
   2748c:	05bff516 	blt	zero,r22,27464 <_gp+0xfffea3d4>
   27490:	003ff506 	br	27468 <_gp+0xfffea3d8>
   27494:	00293300 	call	29330 <__multadd>
   27498:	1023883a 	mov	r17,r2
   2749c:	1029883a 	mov	r20,r2
   274a0:	003fdf06 	br	27420 <_gp+0xfffea390>
   274a4:	e009883a 	mov	r4,fp
   274a8:	00293080 	call	29308 <_Bfree>
   274ac:	00800044 	movi	r2,1
   274b0:	003fbc06 	br	273a4 <_gp+0xfffea314>
   274b4:	a80b883a 	mov	r5,r21
   274b8:	8009883a 	mov	r4,r16
   274bc:	0029b280 	call	29b28 <__mcmp>
   274c0:	103edb0e 	bge	r2,zero,27030 <_gp+0xfffe9fa0>
   274c4:	800b883a 	mov	r5,r16
   274c8:	000f883a 	mov	r7,zero
   274cc:	01800284 	movi	r6,10
   274d0:	e009883a 	mov	r4,fp
   274d4:	00293300 	call	29330 <__multadd>
   274d8:	1021883a 	mov	r16,r2
   274dc:	d8800517 	ldw	r2,20(sp)
   274e0:	d8c00b17 	ldw	r3,44(sp)
   274e4:	10bfffc4 	addi	r2,r2,-1
   274e8:	d8800515 	stw	r2,20(sp)
   274ec:	183f761e 	bne	r3,zero,272c8 <_gp+0xfffea238>
   274f0:	d9000c17 	ldw	r4,48(sp)
   274f4:	0101730e 	bge	zero,r4,27ac4 <_dtoa_r+0x15cc>
   274f8:	d9000615 	stw	r4,24(sp)
   274fc:	003ed006 	br	27040 <_gp+0xfffe9fb0>
   27500:	00800084 	movi	r2,2
   27504:	3081861e 	bne	r6,r2,27b20 <_dtoa_r+0x1628>
   27508:	d8000b15 	stw	zero,44(sp)
   2750c:	003f3c06 	br	27200 <_gp+0xfffea170>
   27510:	dc000917 	ldw	r16,36(sp)
   27514:	003e9206 	br	26f60 <_gp+0xfffe9ed0>
   27518:	d9c00317 	ldw	r7,12(sp)
   2751c:	00800084 	movi	r2,2
   27520:	11fec50e 	bge	r2,r7,27038 <_gp+0xfffe9fa8>
   27524:	d9000617 	ldw	r4,24(sp)
   27528:	20013c1e 	bne	r4,zero,27a1c <_dtoa_r+0x1524>
   2752c:	a80b883a 	mov	r5,r21
   27530:	000f883a 	mov	r7,zero
   27534:	01800144 	movi	r6,5
   27538:	e009883a 	mov	r4,fp
   2753c:	00293300 	call	29330 <__multadd>
   27540:	100b883a 	mov	r5,r2
   27544:	8009883a 	mov	r4,r16
   27548:	102b883a 	mov	r21,r2
   2754c:	0029b280 	call	29b28 <__mcmp>
   27550:	dc000915 	stw	r16,36(sp)
   27554:	00bf410e 	bge	zero,r2,2725c <_gp+0xfffea1cc>
   27558:	d9c00717 	ldw	r7,28(sp)
   2755c:	00800c44 	movi	r2,49
   27560:	38800005 	stb	r2,0(r7)
   27564:	d8800517 	ldw	r2,20(sp)
   27568:	3dc00044 	addi	r23,r7,1
   2756c:	10800044 	addi	r2,r2,1
   27570:	d8800515 	stw	r2,20(sp)
   27574:	003f3d06 	br	2726c <_gp+0xfffea1dc>
   27578:	d9800517 	ldw	r6,20(sp)
   2757c:	d9c00717 	ldw	r7,28(sp)
   27580:	00800c44 	movi	r2,49
   27584:	31800044 	addi	r6,r6,1
   27588:	d9800515 	stw	r6,20(sp)
   2758c:	38800005 	stb	r2,0(r7)
   27590:	003edf06 	br	27110 <_gp+0xfffea080>
   27594:	d8000b15 	stw	zero,44(sp)
   27598:	003c9f06 	br	26818 <_gp+0xfffe9788>
   2759c:	903e7e1e 	bne	r18,zero,26f98 <_gp+0xfffe9f08>
   275a0:	00800434 	movhi	r2,16
   275a4:	10bfffc4 	addi	r2,r2,-1
   275a8:	9884703a 	and	r2,r19,r2
   275ac:	1000ea1e 	bne	r2,zero,27958 <_dtoa_r+0x1460>
   275b0:	9cdffc2c 	andhi	r19,r19,32752
   275b4:	9800e826 	beq	r19,zero,27958 <_dtoa_r+0x1460>
   275b8:	d9c00817 	ldw	r7,32(sp)
   275bc:	b5800044 	addi	r22,r22,1
   275c0:	04c00044 	movi	r19,1
   275c4:	39c00044 	addi	r7,r7,1
   275c8:	d9c00815 	stw	r7,32(sp)
   275cc:	d8800d17 	ldw	r2,52(sp)
   275d0:	103e721e 	bne	r2,zero,26f9c <_gp+0xfffe9f0c>
   275d4:	00800044 	movi	r2,1
   275d8:	003e7906 	br	26fc0 <_gp+0xfffe9f30>
   275dc:	8009883a 	mov	r4,r16
   275e0:	002f81c0 	call	2f81c <__floatsidf>
   275e4:	d9800f17 	ldw	r6,60(sp)
   275e8:	d9c01017 	ldw	r7,64(sp)
   275ec:	1009883a 	mov	r4,r2
   275f0:	180b883a 	mov	r5,r3
   275f4:	002e7880 	call	2e788 <__muldf3>
   275f8:	000d883a 	mov	r6,zero
   275fc:	01d00734 	movhi	r7,16412
   27600:	1009883a 	mov	r4,r2
   27604:	180b883a 	mov	r5,r3
   27608:	002d39c0 	call	2d39c <__adddf3>
   2760c:	047f3034 	movhi	r17,64704
   27610:	1021883a 	mov	r16,r2
   27614:	1c63883a 	add	r17,r3,r17
   27618:	d9000f17 	ldw	r4,60(sp)
   2761c:	d9401017 	ldw	r5,64(sp)
   27620:	000d883a 	mov	r6,zero
   27624:	01d00534 	movhi	r7,16404
   27628:	002eea00 	call	2eea0 <__subdf3>
   2762c:	800d883a 	mov	r6,r16
   27630:	880f883a 	mov	r7,r17
   27634:	1009883a 	mov	r4,r2
   27638:	180b883a 	mov	r5,r3
   2763c:	102b883a 	mov	r21,r2
   27640:	1829883a 	mov	r20,r3
   27644:	002e5b80 	call	2e5b8 <__gedf2>
   27648:	00806c16 	blt	zero,r2,277fc <_dtoa_r+0x1304>
   2764c:	89e0003c 	xorhi	r7,r17,32768
   27650:	800d883a 	mov	r6,r16
   27654:	a809883a 	mov	r4,r21
   27658:	a00b883a 	mov	r5,r20
   2765c:	002e6940 	call	2e694 <__ledf2>
   27660:	103d7e0e 	bge	r2,zero,26c5c <_gp+0xfffe9bcc>
   27664:	002b883a 	mov	r21,zero
   27668:	0023883a 	mov	r17,zero
   2766c:	003efb06 	br	2725c <_gp+0xfffea1cc>
   27670:	d8800717 	ldw	r2,28(sp)
   27674:	003bd006 	br	265b8 <_gp+0xfffe9528>
   27678:	d9000a17 	ldw	r4,40(sp)
   2767c:	d9800d17 	ldw	r6,52(sp)
   27680:	dd400a15 	stw	r21,40(sp)
   27684:	a905c83a 	sub	r2,r21,r4
   27688:	308d883a 	add	r6,r6,r2
   2768c:	d9800d15 	stw	r6,52(sp)
   27690:	002b883a 	mov	r21,zero
   27694:	003e0606 	br	26eb0 <_gp+0xfffe9e20>
   27698:	9023883a 	mov	r17,r18
   2769c:	9829883a 	mov	r20,r19
   276a0:	04000084 	movi	r16,2
   276a4:	003c9206 	br	268f0 <_gp+0xfffe9860>
   276a8:	04000044 	movi	r16,1
   276ac:	dc000c15 	stw	r16,48(sp)
   276b0:	dc000615 	stw	r16,24(sp)
   276b4:	dc002215 	stw	r16,136(sp)
   276b8:	e0001115 	stw	zero,68(fp)
   276bc:	000b883a 	mov	r5,zero
   276c0:	003c6906 	br	26868 <_gp+0xfffe97d8>
   276c4:	3021883a 	mov	r16,r6
   276c8:	003ffb06 	br	276b8 <_gp+0xfffea628>
   276cc:	1000021e 	bne	r2,zero,276d8 <_dtoa_r+0x11e0>
   276d0:	4200004c 	andi	r8,r8,1
   276d4:	403e7d1e 	bne	r8,zero,270cc <_gp+0xfffea03c>
   276d8:	01000c04 	movi	r4,48
   276dc:	00000106 	br	276e4 <_dtoa_r+0x11ec>
   276e0:	102f883a 	mov	r23,r2
   276e4:	b8bfffc4 	addi	r2,r23,-1
   276e8:	10c00007 	ldb	r3,0(r2)
   276ec:	193ffc26 	beq	r3,r4,276e0 <_gp+0xfffea650>
   276f0:	003e8706 	br	27110 <_gp+0xfffea080>
   276f4:	d8800517 	ldw	r2,20(sp)
   276f8:	00a3c83a 	sub	r17,zero,r2
   276fc:	8800a426 	beq	r17,zero,27990 <_dtoa_r+0x1498>
   27700:	888003cc 	andi	r2,r17,15
   27704:	100490fa 	slli	r2,r2,3
   27708:	00c000f4 	movhi	r3,3
   2770c:	18ccbd04 	addi	r3,r3,13044
   27710:	1885883a 	add	r2,r3,r2
   27714:	11800017 	ldw	r6,0(r2)
   27718:	11c00117 	ldw	r7,4(r2)
   2771c:	9009883a 	mov	r4,r18
   27720:	980b883a 	mov	r5,r19
   27724:	8823d13a 	srai	r17,r17,4
   27728:	002e7880 	call	2e788 <__muldf3>
   2772c:	d8800f15 	stw	r2,60(sp)
   27730:	d8c01015 	stw	r3,64(sp)
   27734:	8800e826 	beq	r17,zero,27ad8 <_dtoa_r+0x15e0>
   27738:	050000f4 	movhi	r20,3
   2773c:	a50cb304 	addi	r20,r20,13004
   27740:	04000084 	movi	r16,2
   27744:	8980004c 	andi	r6,r17,1
   27748:	1009883a 	mov	r4,r2
   2774c:	8823d07a 	srai	r17,r17,1
   27750:	180b883a 	mov	r5,r3
   27754:	30000426 	beq	r6,zero,27768 <_dtoa_r+0x1270>
   27758:	a1800017 	ldw	r6,0(r20)
   2775c:	a1c00117 	ldw	r7,4(r20)
   27760:	84000044 	addi	r16,r16,1
   27764:	002e7880 	call	2e788 <__muldf3>
   27768:	a5000204 	addi	r20,r20,8
   2776c:	883ff51e 	bne	r17,zero,27744 <_gp+0xfffea6b4>
   27770:	d8800f15 	stw	r2,60(sp)
   27774:	d8c01015 	stw	r3,64(sp)
   27778:	003c7606 	br	26954 <_gp+0xfffe98c4>
   2777c:	00c00c04 	movi	r3,48
   27780:	10c00005 	stb	r3,0(r2)
   27784:	d8c00517 	ldw	r3,20(sp)
   27788:	bd3fffc3 	ldbu	r20,-1(r23)
   2778c:	18c00044 	addi	r3,r3,1
   27790:	d8c00515 	stw	r3,20(sp)
   27794:	003db906 	br	26e7c <_gp+0xfffe9dec>
   27798:	89400117 	ldw	r5,4(r17)
   2779c:	e009883a 	mov	r4,fp
   277a0:	00292600 	call	29260 <_Balloc>
   277a4:	89800417 	ldw	r6,16(r17)
   277a8:	89400304 	addi	r5,r17,12
   277ac:	11000304 	addi	r4,r2,12
   277b0:	31800084 	addi	r6,r6,2
   277b4:	318d883a 	add	r6,r6,r6
   277b8:	318d883a 	add	r6,r6,r6
   277bc:	1027883a 	mov	r19,r2
   277c0:	0028fbc0 	call	28fbc <memcpy>
   277c4:	01800044 	movi	r6,1
   277c8:	980b883a 	mov	r5,r19
   277cc:	e009883a 	mov	r4,fp
   277d0:	00299e00 	call	299e0 <__lshift>
   277d4:	1029883a 	mov	r20,r2
   277d8:	003ecc06 	br	2730c <_gp+0xfffea27c>
   277dc:	00800e44 	movi	r2,57
   277e0:	90809026 	beq	r18,r2,27a24 <_dtoa_r+0x152c>
   277e4:	92000044 	addi	r8,r18,1
   277e8:	003f1f06 	br	27468 <_gp+0xfffea3d8>
   277ec:	9011883a 	mov	r8,r18
   277f0:	8825883a 	mov	r18,r17
   277f4:	a023883a 	mov	r17,r20
   277f8:	003e2906 	br	270a0 <_gp+0xfffea010>
   277fc:	002b883a 	mov	r21,zero
   27800:	0023883a 	mov	r17,zero
   27804:	003f5406 	br	27558 <_gp+0xfffea4c8>
   27808:	61bfffc4 	addi	r6,r12,-1
   2780c:	300490fa 	slli	r2,r6,3
   27810:	00c000f4 	movhi	r3,3
   27814:	18ccbd04 	addi	r3,r3,13044
   27818:	1885883a 	add	r2,r3,r2
   2781c:	11000017 	ldw	r4,0(r2)
   27820:	11400117 	ldw	r5,4(r2)
   27824:	d8800717 	ldw	r2,28(sp)
   27828:	880f883a 	mov	r7,r17
   2782c:	d9801215 	stw	r6,72(sp)
   27830:	800d883a 	mov	r6,r16
   27834:	db001615 	stw	r12,88(sp)
   27838:	15c00044 	addi	r23,r2,1
   2783c:	002e7880 	call	2e788 <__muldf3>
   27840:	d9401017 	ldw	r5,64(sp)
   27844:	d9000f17 	ldw	r4,60(sp)
   27848:	d8c01515 	stw	r3,84(sp)
   2784c:	d8801415 	stw	r2,80(sp)
   27850:	002f79c0 	call	2f79c <__fixdfsi>
   27854:	1009883a 	mov	r4,r2
   27858:	1021883a 	mov	r16,r2
   2785c:	002f81c0 	call	2f81c <__floatsidf>
   27860:	d9000f17 	ldw	r4,60(sp)
   27864:	d9401017 	ldw	r5,64(sp)
   27868:	100d883a 	mov	r6,r2
   2786c:	180f883a 	mov	r7,r3
   27870:	002eea00 	call	2eea0 <__subdf3>
   27874:	1829883a 	mov	r20,r3
   27878:	d8c00717 	ldw	r3,28(sp)
   2787c:	84000c04 	addi	r16,r16,48
   27880:	1023883a 	mov	r17,r2
   27884:	1c000005 	stb	r16,0(r3)
   27888:	db001617 	ldw	r12,88(sp)
   2788c:	00800044 	movi	r2,1
   27890:	60802226 	beq	r12,r2,2791c <_dtoa_r+0x1424>
   27894:	d9c00717 	ldw	r7,28(sp)
   27898:	8805883a 	mov	r2,r17
   2789c:	b82b883a 	mov	r21,r23
   278a0:	3b19883a 	add	r12,r7,r12
   278a4:	6023883a 	mov	r17,r12
   278a8:	a007883a 	mov	r3,r20
   278ac:	dc800f15 	stw	r18,60(sp)
   278b0:	000d883a 	mov	r6,zero
   278b4:	01d00934 	movhi	r7,16420
   278b8:	1009883a 	mov	r4,r2
   278bc:	180b883a 	mov	r5,r3
   278c0:	002e7880 	call	2e788 <__muldf3>
   278c4:	180b883a 	mov	r5,r3
   278c8:	1009883a 	mov	r4,r2
   278cc:	1829883a 	mov	r20,r3
   278d0:	1025883a 	mov	r18,r2
   278d4:	002f79c0 	call	2f79c <__fixdfsi>
   278d8:	1009883a 	mov	r4,r2
   278dc:	1021883a 	mov	r16,r2
   278e0:	002f81c0 	call	2f81c <__floatsidf>
   278e4:	100d883a 	mov	r6,r2
   278e8:	180f883a 	mov	r7,r3
   278ec:	9009883a 	mov	r4,r18
   278f0:	a00b883a 	mov	r5,r20
   278f4:	84000c04 	addi	r16,r16,48
   278f8:	002eea00 	call	2eea0 <__subdf3>
   278fc:	ad400044 	addi	r21,r21,1
   27900:	ac3fffc5 	stb	r16,-1(r21)
   27904:	ac7fea1e 	bne	r21,r17,278b0 <_gp+0xfffea820>
   27908:	1023883a 	mov	r17,r2
   2790c:	d8801217 	ldw	r2,72(sp)
   27910:	dc800f17 	ldw	r18,60(sp)
   27914:	1829883a 	mov	r20,r3
   27918:	b8af883a 	add	r23,r23,r2
   2791c:	d9001417 	ldw	r4,80(sp)
   27920:	d9401517 	ldw	r5,84(sp)
   27924:	000d883a 	mov	r6,zero
   27928:	01cff834 	movhi	r7,16352
   2792c:	002d39c0 	call	2d39c <__adddf3>
   27930:	880d883a 	mov	r6,r17
   27934:	a00f883a 	mov	r7,r20
   27938:	1009883a 	mov	r4,r2
   2793c:	180b883a 	mov	r5,r3
   27940:	002e6940 	call	2e694 <__ledf2>
   27944:	10003e0e 	bge	r2,zero,27a40 <_dtoa_r+0x1548>
   27948:	d9001317 	ldw	r4,76(sp)
   2794c:	bd3fffc3 	ldbu	r20,-1(r23)
   27950:	d9000515 	stw	r4,20(sp)
   27954:	003d3b06 	br	26e44 <_gp+0xfffe9db4>
   27958:	0027883a 	mov	r19,zero
   2795c:	003f1b06 	br	275cc <_gp+0xfffea53c>
   27960:	d8800817 	ldw	r2,32(sp)
   27964:	11e9c83a 	sub	r20,r2,r7
   27968:	0005883a 	mov	r2,zero
   2796c:	003d5406 	br	26ec0 <_gp+0xfffe9e30>
   27970:	00800044 	movi	r2,1
   27974:	003dc706 	br	27094 <_gp+0xfffea004>
   27978:	d8c00217 	ldw	r3,8(sp)
   2797c:	00800d84 	movi	r2,54
   27980:	dd400a17 	ldw	r21,40(sp)
   27984:	10c5c83a 	sub	r2,r2,r3
   27988:	dd000817 	ldw	r20,32(sp)
   2798c:	003d4c06 	br	26ec0 <_gp+0xfffe9e30>
   27990:	dc800f15 	stw	r18,60(sp)
   27994:	dcc01015 	stw	r19,64(sp)
   27998:	04000084 	movi	r16,2
   2799c:	003bed06 	br	26954 <_gp+0xfffe98c4>
   279a0:	d9000617 	ldw	r4,24(sp)
   279a4:	203f0d26 	beq	r4,zero,275dc <_gp+0xfffea54c>
   279a8:	d9800c17 	ldw	r6,48(sp)
   279ac:	01bcab0e 	bge	zero,r6,26c5c <_gp+0xfffe9bcc>
   279b0:	d9401017 	ldw	r5,64(sp)
   279b4:	d9000f17 	ldw	r4,60(sp)
   279b8:	000d883a 	mov	r6,zero
   279bc:	01d00934 	movhi	r7,16420
   279c0:	002e7880 	call	2e788 <__muldf3>
   279c4:	81000044 	addi	r4,r16,1
   279c8:	d8800f15 	stw	r2,60(sp)
   279cc:	d8c01015 	stw	r3,64(sp)
   279d0:	002f81c0 	call	2f81c <__floatsidf>
   279d4:	d9800f17 	ldw	r6,60(sp)
   279d8:	d9c01017 	ldw	r7,64(sp)
   279dc:	1009883a 	mov	r4,r2
   279e0:	180b883a 	mov	r5,r3
   279e4:	002e7880 	call	2e788 <__muldf3>
   279e8:	01d00734 	movhi	r7,16412
   279ec:	000d883a 	mov	r6,zero
   279f0:	1009883a 	mov	r4,r2
   279f4:	180b883a 	mov	r5,r3
   279f8:	002d39c0 	call	2d39c <__adddf3>
   279fc:	d9c00517 	ldw	r7,20(sp)
   27a00:	047f3034 	movhi	r17,64704
   27a04:	1021883a 	mov	r16,r2
   27a08:	39ffffc4 	addi	r7,r7,-1
   27a0c:	d9c01315 	stw	r7,76(sp)
   27a10:	1c63883a 	add	r17,r3,r17
   27a14:	db000c17 	ldw	r12,48(sp)
   27a18:	003bea06 	br	269c4 <_gp+0xfffe9934>
   27a1c:	dc000915 	stw	r16,36(sp)
   27a20:	003e0e06 	br	2725c <_gp+0xfffea1cc>
   27a24:	01000e44 	movi	r4,57
   27a28:	8825883a 	mov	r18,r17
   27a2c:	9dc00044 	addi	r23,r19,1
   27a30:	99000005 	stb	r4,0(r19)
   27a34:	a023883a 	mov	r17,r20
   27a38:	dc000915 	stw	r16,36(sp)
   27a3c:	003da406 	br	270d0 <_gp+0xfffea040>
   27a40:	d9801417 	ldw	r6,80(sp)
   27a44:	d9c01517 	ldw	r7,84(sp)
   27a48:	0009883a 	mov	r4,zero
   27a4c:	014ff834 	movhi	r5,16352
   27a50:	002eea00 	call	2eea0 <__subdf3>
   27a54:	880d883a 	mov	r6,r17
   27a58:	a00f883a 	mov	r7,r20
   27a5c:	1009883a 	mov	r4,r2
   27a60:	180b883a 	mov	r5,r3
   27a64:	002e5b80 	call	2e5b8 <__gedf2>
   27a68:	00bc7c0e 	bge	zero,r2,26c5c <_gp+0xfffe9bcc>
   27a6c:	01000c04 	movi	r4,48
   27a70:	00000106 	br	27a78 <_dtoa_r+0x1580>
   27a74:	102f883a 	mov	r23,r2
   27a78:	b8bfffc4 	addi	r2,r23,-1
   27a7c:	10c00007 	ldb	r3,0(r2)
   27a80:	193ffc26 	beq	r3,r4,27a74 <_gp+0xfffea9e4>
   27a84:	d9801317 	ldw	r6,76(sp)
   27a88:	d9800515 	stw	r6,20(sp)
   27a8c:	003c4406 	br	26ba0 <_gp+0xfffe9b10>
   27a90:	d9801317 	ldw	r6,76(sp)
   27a94:	d9800515 	stw	r6,20(sp)
   27a98:	003cea06 	br	26e44 <_gp+0xfffe9db4>
   27a9c:	dd800f17 	ldw	r22,60(sp)
   27aa0:	dcc01017 	ldw	r19,64(sp)
   27aa4:	dc801217 	ldw	r18,72(sp)
   27aa8:	003c6c06 	br	26c5c <_gp+0xfffe9bcc>
   27aac:	903e031e 	bne	r18,zero,272bc <_gp+0xfffea22c>
   27ab0:	003ebb06 	br	275a0 <_gp+0xfffea510>
   27ab4:	103e6c1e 	bne	r2,zero,27468 <_gp+0xfffea3d8>
   27ab8:	4080004c 	andi	r2,r8,1
   27abc:	103e6a26 	beq	r2,zero,27468 <_gp+0xfffea3d8>
   27ac0:	003e6606 	br	2745c <_gp+0xfffea3cc>
   27ac4:	d8c00317 	ldw	r3,12(sp)
   27ac8:	00800084 	movi	r2,2
   27acc:	10c02916 	blt	r2,r3,27b74 <_dtoa_r+0x167c>
   27ad0:	d9000c17 	ldw	r4,48(sp)
   27ad4:	003e8806 	br	274f8 <_gp+0xfffea468>
   27ad8:	04000084 	movi	r16,2
   27adc:	003b9d06 	br	26954 <_gp+0xfffe98c4>
   27ae0:	d9001317 	ldw	r4,76(sp)
   27ae4:	d9000515 	stw	r4,20(sp)
   27ae8:	003cd606 	br	26e44 <_gp+0xfffe9db4>
   27aec:	d8801317 	ldw	r2,76(sp)
   27af0:	d8800515 	stw	r2,20(sp)
   27af4:	003c2a06 	br	26ba0 <_gp+0xfffe9b10>
   27af8:	d9800317 	ldw	r6,12(sp)
   27afc:	00800084 	movi	r2,2
   27b00:	11801516 	blt	r2,r6,27b58 <_dtoa_r+0x1660>
   27b04:	d9c00c17 	ldw	r7,48(sp)
   27b08:	d9c00615 	stw	r7,24(sp)
   27b0c:	003df706 	br	272ec <_gp+0xfffea25c>
   27b10:	193d3926 	beq	r3,r4,26ff8 <_gp+0xfffe9f68>
   27b14:	00c00f04 	movi	r3,60
   27b18:	1885c83a 	sub	r2,r3,r2
   27b1c:	003ddf06 	br	2729c <_gp+0xfffea20c>
   27b20:	e009883a 	mov	r4,fp
   27b24:	e0001115 	stw	zero,68(fp)
   27b28:	000b883a 	mov	r5,zero
   27b2c:	00292600 	call	29260 <_Balloc>
   27b30:	d8800715 	stw	r2,28(sp)
   27b34:	d8c00717 	ldw	r3,28(sp)
   27b38:	00bfffc4 	movi	r2,-1
   27b3c:	01000044 	movi	r4,1
   27b40:	d8800c15 	stw	r2,48(sp)
   27b44:	e0c01015 	stw	r3,64(fp)
   27b48:	d9000b15 	stw	r4,44(sp)
   27b4c:	d8800615 	stw	r2,24(sp)
   27b50:	d8002215 	stw	zero,136(sp)
   27b54:	003c4106 	br	26c5c <_gp+0xfffe9bcc>
   27b58:	d8c00c17 	ldw	r3,48(sp)
   27b5c:	d8c00615 	stw	r3,24(sp)
   27b60:	003e7006 	br	27524 <_gp+0xfffea494>
   27b64:	04400044 	movi	r17,1
   27b68:	003b2006 	br	267ec <_gp+0xfffe975c>
   27b6c:	000b883a 	mov	r5,zero
   27b70:	003b3d06 	br	26868 <_gp+0xfffe97d8>
   27b74:	d8800c17 	ldw	r2,48(sp)
   27b78:	d8800615 	stw	r2,24(sp)
   27b7c:	003e6906 	br	27524 <_gp+0xfffea494>

00027b80 <__sflush_r>:
   27b80:	2880030b 	ldhu	r2,12(r5)
   27b84:	defffb04 	addi	sp,sp,-20
   27b88:	dcc00315 	stw	r19,12(sp)
   27b8c:	dc400115 	stw	r17,4(sp)
   27b90:	dfc00415 	stw	ra,16(sp)
   27b94:	dc800215 	stw	r18,8(sp)
   27b98:	dc000015 	stw	r16,0(sp)
   27b9c:	10c0020c 	andi	r3,r2,8
   27ba0:	2823883a 	mov	r17,r5
   27ba4:	2027883a 	mov	r19,r4
   27ba8:	1800311e 	bne	r3,zero,27c70 <__sflush_r+0xf0>
   27bac:	28c00117 	ldw	r3,4(r5)
   27bb0:	10820014 	ori	r2,r2,2048
   27bb4:	2880030d 	sth	r2,12(r5)
   27bb8:	00c04b0e 	bge	zero,r3,27ce8 <__sflush_r+0x168>
   27bbc:	8a000a17 	ldw	r8,40(r17)
   27bc0:	40002326 	beq	r8,zero,27c50 <__sflush_r+0xd0>
   27bc4:	9c000017 	ldw	r16,0(r19)
   27bc8:	10c4000c 	andi	r3,r2,4096
   27bcc:	98000015 	stw	zero,0(r19)
   27bd0:	18004826 	beq	r3,zero,27cf4 <__sflush_r+0x174>
   27bd4:	89801417 	ldw	r6,80(r17)
   27bd8:	10c0010c 	andi	r3,r2,4
   27bdc:	18000626 	beq	r3,zero,27bf8 <__sflush_r+0x78>
   27be0:	88c00117 	ldw	r3,4(r17)
   27be4:	88800c17 	ldw	r2,48(r17)
   27be8:	30cdc83a 	sub	r6,r6,r3
   27bec:	10000226 	beq	r2,zero,27bf8 <__sflush_r+0x78>
   27bf0:	88800f17 	ldw	r2,60(r17)
   27bf4:	308dc83a 	sub	r6,r6,r2
   27bf8:	89400717 	ldw	r5,28(r17)
   27bfc:	000f883a 	mov	r7,zero
   27c00:	9809883a 	mov	r4,r19
   27c04:	403ee83a 	callr	r8
   27c08:	00ffffc4 	movi	r3,-1
   27c0c:	10c04426 	beq	r2,r3,27d20 <__sflush_r+0x1a0>
   27c10:	88c0030b 	ldhu	r3,12(r17)
   27c14:	89000417 	ldw	r4,16(r17)
   27c18:	88000115 	stw	zero,4(r17)
   27c1c:	197dffcc 	andi	r5,r3,63487
   27c20:	8940030d 	sth	r5,12(r17)
   27c24:	89000015 	stw	r4,0(r17)
   27c28:	18c4000c 	andi	r3,r3,4096
   27c2c:	18002c1e 	bne	r3,zero,27ce0 <__sflush_r+0x160>
   27c30:	89400c17 	ldw	r5,48(r17)
   27c34:	9c000015 	stw	r16,0(r19)
   27c38:	28000526 	beq	r5,zero,27c50 <__sflush_r+0xd0>
   27c3c:	88801004 	addi	r2,r17,64
   27c40:	28800226 	beq	r5,r2,27c4c <__sflush_r+0xcc>
   27c44:	9809883a 	mov	r4,r19
   27c48:	00282ec0 	call	282ec <_free_r>
   27c4c:	88000c15 	stw	zero,48(r17)
   27c50:	0005883a 	mov	r2,zero
   27c54:	dfc00417 	ldw	ra,16(sp)
   27c58:	dcc00317 	ldw	r19,12(sp)
   27c5c:	dc800217 	ldw	r18,8(sp)
   27c60:	dc400117 	ldw	r17,4(sp)
   27c64:	dc000017 	ldw	r16,0(sp)
   27c68:	dec00504 	addi	sp,sp,20
   27c6c:	f800283a 	ret
   27c70:	2c800417 	ldw	r18,16(r5)
   27c74:	903ff626 	beq	r18,zero,27c50 <_gp+0xfffeabc0>
   27c78:	2c000017 	ldw	r16,0(r5)
   27c7c:	108000cc 	andi	r2,r2,3
   27c80:	2c800015 	stw	r18,0(r5)
   27c84:	84a1c83a 	sub	r16,r16,r18
   27c88:	1000131e 	bne	r2,zero,27cd8 <__sflush_r+0x158>
   27c8c:	28800517 	ldw	r2,20(r5)
   27c90:	88800215 	stw	r2,8(r17)
   27c94:	04000316 	blt	zero,r16,27ca4 <__sflush_r+0x124>
   27c98:	003fed06 	br	27c50 <_gp+0xfffeabc0>
   27c9c:	90a5883a 	add	r18,r18,r2
   27ca0:	043feb0e 	bge	zero,r16,27c50 <_gp+0xfffeabc0>
   27ca4:	88800917 	ldw	r2,36(r17)
   27ca8:	89400717 	ldw	r5,28(r17)
   27cac:	800f883a 	mov	r7,r16
   27cb0:	900d883a 	mov	r6,r18
   27cb4:	9809883a 	mov	r4,r19
   27cb8:	103ee83a 	callr	r2
   27cbc:	80a1c83a 	sub	r16,r16,r2
   27cc0:	00bff616 	blt	zero,r2,27c9c <_gp+0xfffeac0c>
   27cc4:	88c0030b 	ldhu	r3,12(r17)
   27cc8:	00bfffc4 	movi	r2,-1
   27ccc:	18c01014 	ori	r3,r3,64
   27cd0:	88c0030d 	sth	r3,12(r17)
   27cd4:	003fdf06 	br	27c54 <_gp+0xfffeabc4>
   27cd8:	0005883a 	mov	r2,zero
   27cdc:	003fec06 	br	27c90 <_gp+0xfffeac00>
   27ce0:	88801415 	stw	r2,80(r17)
   27ce4:	003fd206 	br	27c30 <_gp+0xfffeaba0>
   27ce8:	28c00f17 	ldw	r3,60(r5)
   27cec:	00ffb316 	blt	zero,r3,27bbc <_gp+0xfffeab2c>
   27cf0:	003fd706 	br	27c50 <_gp+0xfffeabc0>
   27cf4:	89400717 	ldw	r5,28(r17)
   27cf8:	000d883a 	mov	r6,zero
   27cfc:	01c00044 	movi	r7,1
   27d00:	9809883a 	mov	r4,r19
   27d04:	403ee83a 	callr	r8
   27d08:	100d883a 	mov	r6,r2
   27d0c:	00bfffc4 	movi	r2,-1
   27d10:	30801426 	beq	r6,r2,27d64 <__sflush_r+0x1e4>
   27d14:	8880030b 	ldhu	r2,12(r17)
   27d18:	8a000a17 	ldw	r8,40(r17)
   27d1c:	003fae06 	br	27bd8 <_gp+0xfffeab48>
   27d20:	98c00017 	ldw	r3,0(r19)
   27d24:	183fba26 	beq	r3,zero,27c10 <_gp+0xfffeab80>
   27d28:	01000744 	movi	r4,29
   27d2c:	19000626 	beq	r3,r4,27d48 <__sflush_r+0x1c8>
   27d30:	01000584 	movi	r4,22
   27d34:	19000426 	beq	r3,r4,27d48 <__sflush_r+0x1c8>
   27d38:	88c0030b 	ldhu	r3,12(r17)
   27d3c:	18c01014 	ori	r3,r3,64
   27d40:	88c0030d 	sth	r3,12(r17)
   27d44:	003fc306 	br	27c54 <_gp+0xfffeabc4>
   27d48:	8880030b 	ldhu	r2,12(r17)
   27d4c:	88c00417 	ldw	r3,16(r17)
   27d50:	88000115 	stw	zero,4(r17)
   27d54:	10bdffcc 	andi	r2,r2,63487
   27d58:	8880030d 	sth	r2,12(r17)
   27d5c:	88c00015 	stw	r3,0(r17)
   27d60:	003fb306 	br	27c30 <_gp+0xfffeaba0>
   27d64:	98800017 	ldw	r2,0(r19)
   27d68:	103fea26 	beq	r2,zero,27d14 <_gp+0xfffeac84>
   27d6c:	00c00744 	movi	r3,29
   27d70:	10c00226 	beq	r2,r3,27d7c <__sflush_r+0x1fc>
   27d74:	00c00584 	movi	r3,22
   27d78:	10c0031e 	bne	r2,r3,27d88 <__sflush_r+0x208>
   27d7c:	9c000015 	stw	r16,0(r19)
   27d80:	0005883a 	mov	r2,zero
   27d84:	003fb306 	br	27c54 <_gp+0xfffeabc4>
   27d88:	88c0030b 	ldhu	r3,12(r17)
   27d8c:	3005883a 	mov	r2,r6
   27d90:	18c01014 	ori	r3,r3,64
   27d94:	88c0030d 	sth	r3,12(r17)
   27d98:	003fae06 	br	27c54 <_gp+0xfffeabc4>

00027d9c <_fflush_r>:
   27d9c:	defffd04 	addi	sp,sp,-12
   27da0:	dc000115 	stw	r16,4(sp)
   27da4:	dfc00215 	stw	ra,8(sp)
   27da8:	2021883a 	mov	r16,r4
   27dac:	20000226 	beq	r4,zero,27db8 <_fflush_r+0x1c>
   27db0:	20800e17 	ldw	r2,56(r4)
   27db4:	10000c26 	beq	r2,zero,27de8 <_fflush_r+0x4c>
   27db8:	2880030f 	ldh	r2,12(r5)
   27dbc:	1000051e 	bne	r2,zero,27dd4 <_fflush_r+0x38>
   27dc0:	0005883a 	mov	r2,zero
   27dc4:	dfc00217 	ldw	ra,8(sp)
   27dc8:	dc000117 	ldw	r16,4(sp)
   27dcc:	dec00304 	addi	sp,sp,12
   27dd0:	f800283a 	ret
   27dd4:	8009883a 	mov	r4,r16
   27dd8:	dfc00217 	ldw	ra,8(sp)
   27ddc:	dc000117 	ldw	r16,4(sp)
   27de0:	dec00304 	addi	sp,sp,12
   27de4:	0027b801 	jmpi	27b80 <__sflush_r>
   27de8:	d9400015 	stw	r5,0(sp)
   27dec:	00281780 	call	28178 <__sinit>
   27df0:	d9400017 	ldw	r5,0(sp)
   27df4:	003ff006 	br	27db8 <_gp+0xfffead28>

00027df8 <fflush>:
   27df8:	20000526 	beq	r4,zero,27e10 <fflush+0x18>
   27dfc:	008000f4 	movhi	r2,3
   27e00:	10943504 	addi	r2,r2,20692
   27e04:	200b883a 	mov	r5,r4
   27e08:	11000017 	ldw	r4,0(r2)
   27e0c:	0027d9c1 	jmpi	27d9c <_fflush_r>
   27e10:	008000f4 	movhi	r2,3
   27e14:	10943404 	addi	r2,r2,20688
   27e18:	11000017 	ldw	r4,0(r2)
   27e1c:	014000b4 	movhi	r5,2
   27e20:	295f6704 	addi	r5,r5,32156
   27e24:	0028b7c1 	jmpi	28b7c <_fwalk_reent>

00027e28 <__fp_unlock>:
   27e28:	0005883a 	mov	r2,zero
   27e2c:	f800283a 	ret

00027e30 <_cleanup_r>:
   27e30:	014000f4 	movhi	r5,3
   27e34:	29704c04 	addi	r5,r5,-16080
   27e38:	0028b7c1 	jmpi	28b7c <_fwalk_reent>

00027e3c <__sinit.part.1>:
   27e3c:	defff704 	addi	sp,sp,-36
   27e40:	00c000b4 	movhi	r3,2
   27e44:	dfc00815 	stw	ra,32(sp)
   27e48:	ddc00715 	stw	r23,28(sp)
   27e4c:	dd800615 	stw	r22,24(sp)
   27e50:	dd400515 	stw	r21,20(sp)
   27e54:	dd000415 	stw	r20,16(sp)
   27e58:	dcc00315 	stw	r19,12(sp)
   27e5c:	dc800215 	stw	r18,8(sp)
   27e60:	dc400115 	stw	r17,4(sp)
   27e64:	dc000015 	stw	r16,0(sp)
   27e68:	18df8c04 	addi	r3,r3,32304
   27e6c:	24000117 	ldw	r16,4(r4)
   27e70:	20c00f15 	stw	r3,60(r4)
   27e74:	2080bb04 	addi	r2,r4,748
   27e78:	00c000c4 	movi	r3,3
   27e7c:	20c0b915 	stw	r3,740(r4)
   27e80:	2080ba15 	stw	r2,744(r4)
   27e84:	2000b815 	stw	zero,736(r4)
   27e88:	05c00204 	movi	r23,8
   27e8c:	00800104 	movi	r2,4
   27e90:	2025883a 	mov	r18,r4
   27e94:	b80d883a 	mov	r6,r23
   27e98:	81001704 	addi	r4,r16,92
   27e9c:	000b883a 	mov	r5,zero
   27ea0:	80000015 	stw	zero,0(r16)
   27ea4:	80000115 	stw	zero,4(r16)
   27ea8:	80000215 	stw	zero,8(r16)
   27eac:	8080030d 	sth	r2,12(r16)
   27eb0:	80001915 	stw	zero,100(r16)
   27eb4:	8000038d 	sth	zero,14(r16)
   27eb8:	80000415 	stw	zero,16(r16)
   27ebc:	80000515 	stw	zero,20(r16)
   27ec0:	80000615 	stw	zero,24(r16)
   27ec4:	00237a00 	call	237a0 <memset>
   27ec8:	058000f4 	movhi	r22,3
   27ecc:	94400217 	ldw	r17,8(r18)
   27ed0:	054000f4 	movhi	r21,3
   27ed4:	050000f4 	movhi	r20,3
   27ed8:	04c000f4 	movhi	r19,3
   27edc:	b5aa0d04 	addi	r22,r22,-22476
   27ee0:	ad6a2404 	addi	r21,r21,-22384
   27ee4:	a52a4304 	addi	r20,r20,-22260
   27ee8:	9cea5a04 	addi	r19,r19,-22168
   27eec:	85800815 	stw	r22,32(r16)
   27ef0:	85400915 	stw	r21,36(r16)
   27ef4:	85000a15 	stw	r20,40(r16)
   27ef8:	84c00b15 	stw	r19,44(r16)
   27efc:	84000715 	stw	r16,28(r16)
   27f00:	00800284 	movi	r2,10
   27f04:	8880030d 	sth	r2,12(r17)
   27f08:	00800044 	movi	r2,1
   27f0c:	b80d883a 	mov	r6,r23
   27f10:	89001704 	addi	r4,r17,92
   27f14:	000b883a 	mov	r5,zero
   27f18:	88000015 	stw	zero,0(r17)
   27f1c:	88000115 	stw	zero,4(r17)
   27f20:	88000215 	stw	zero,8(r17)
   27f24:	88001915 	stw	zero,100(r17)
   27f28:	8880038d 	sth	r2,14(r17)
   27f2c:	88000415 	stw	zero,16(r17)
   27f30:	88000515 	stw	zero,20(r17)
   27f34:	88000615 	stw	zero,24(r17)
   27f38:	00237a00 	call	237a0 <memset>
   27f3c:	94000317 	ldw	r16,12(r18)
   27f40:	00800484 	movi	r2,18
   27f44:	8c400715 	stw	r17,28(r17)
   27f48:	8d800815 	stw	r22,32(r17)
   27f4c:	8d400915 	stw	r21,36(r17)
   27f50:	8d000a15 	stw	r20,40(r17)
   27f54:	8cc00b15 	stw	r19,44(r17)
   27f58:	8080030d 	sth	r2,12(r16)
   27f5c:	00800084 	movi	r2,2
   27f60:	80000015 	stw	zero,0(r16)
   27f64:	80000115 	stw	zero,4(r16)
   27f68:	80000215 	stw	zero,8(r16)
   27f6c:	80001915 	stw	zero,100(r16)
   27f70:	8080038d 	sth	r2,14(r16)
   27f74:	80000415 	stw	zero,16(r16)
   27f78:	80000515 	stw	zero,20(r16)
   27f7c:	80000615 	stw	zero,24(r16)
   27f80:	b80d883a 	mov	r6,r23
   27f84:	000b883a 	mov	r5,zero
   27f88:	81001704 	addi	r4,r16,92
   27f8c:	00237a00 	call	237a0 <memset>
   27f90:	00800044 	movi	r2,1
   27f94:	84000715 	stw	r16,28(r16)
   27f98:	85800815 	stw	r22,32(r16)
   27f9c:	85400915 	stw	r21,36(r16)
   27fa0:	85000a15 	stw	r20,40(r16)
   27fa4:	84c00b15 	stw	r19,44(r16)
   27fa8:	90800e15 	stw	r2,56(r18)
   27fac:	dfc00817 	ldw	ra,32(sp)
   27fb0:	ddc00717 	ldw	r23,28(sp)
   27fb4:	dd800617 	ldw	r22,24(sp)
   27fb8:	dd400517 	ldw	r21,20(sp)
   27fbc:	dd000417 	ldw	r20,16(sp)
   27fc0:	dcc00317 	ldw	r19,12(sp)
   27fc4:	dc800217 	ldw	r18,8(sp)
   27fc8:	dc400117 	ldw	r17,4(sp)
   27fcc:	dc000017 	ldw	r16,0(sp)
   27fd0:	dec00904 	addi	sp,sp,36
   27fd4:	f800283a 	ret

00027fd8 <__fp_lock>:
   27fd8:	0005883a 	mov	r2,zero
   27fdc:	f800283a 	ret

00027fe0 <__sfmoreglue>:
   27fe0:	defffc04 	addi	sp,sp,-16
   27fe4:	dc400115 	stw	r17,4(sp)
   27fe8:	2c7fffc4 	addi	r17,r5,-1
   27fec:	8c401a24 	muli	r17,r17,104
   27ff0:	dc800215 	stw	r18,8(sp)
   27ff4:	2825883a 	mov	r18,r5
   27ff8:	89401d04 	addi	r5,r17,116
   27ffc:	dc000015 	stw	r16,0(sp)
   28000:	dfc00315 	stw	ra,12(sp)
   28004:	0022f940 	call	22f94 <_malloc_r>
   28008:	1021883a 	mov	r16,r2
   2800c:	10000726 	beq	r2,zero,2802c <__sfmoreglue+0x4c>
   28010:	11000304 	addi	r4,r2,12
   28014:	10000015 	stw	zero,0(r2)
   28018:	14800115 	stw	r18,4(r2)
   2801c:	11000215 	stw	r4,8(r2)
   28020:	89801a04 	addi	r6,r17,104
   28024:	000b883a 	mov	r5,zero
   28028:	00237a00 	call	237a0 <memset>
   2802c:	8005883a 	mov	r2,r16
   28030:	dfc00317 	ldw	ra,12(sp)
   28034:	dc800217 	ldw	r18,8(sp)
   28038:	dc400117 	ldw	r17,4(sp)
   2803c:	dc000017 	ldw	r16,0(sp)
   28040:	dec00404 	addi	sp,sp,16
   28044:	f800283a 	ret

00028048 <__sfp>:
   28048:	defffb04 	addi	sp,sp,-20
   2804c:	dc000015 	stw	r16,0(sp)
   28050:	040000f4 	movhi	r16,3
   28054:	84143404 	addi	r16,r16,20688
   28058:	dcc00315 	stw	r19,12(sp)
   2805c:	2027883a 	mov	r19,r4
   28060:	81000017 	ldw	r4,0(r16)
   28064:	dfc00415 	stw	ra,16(sp)
   28068:	dc800215 	stw	r18,8(sp)
   2806c:	20800e17 	ldw	r2,56(r4)
   28070:	dc400115 	stw	r17,4(sp)
   28074:	1000021e 	bne	r2,zero,28080 <__sfp+0x38>
   28078:	0027e3c0 	call	27e3c <__sinit.part.1>
   2807c:	81000017 	ldw	r4,0(r16)
   28080:	2480b804 	addi	r18,r4,736
   28084:	047fffc4 	movi	r17,-1
   28088:	91000117 	ldw	r4,4(r18)
   2808c:	94000217 	ldw	r16,8(r18)
   28090:	213fffc4 	addi	r4,r4,-1
   28094:	20000a16 	blt	r4,zero,280c0 <__sfp+0x78>
   28098:	8080030f 	ldh	r2,12(r16)
   2809c:	10000c26 	beq	r2,zero,280d0 <__sfp+0x88>
   280a0:	80c01d04 	addi	r3,r16,116
   280a4:	00000206 	br	280b0 <__sfp+0x68>
   280a8:	18bfe60f 	ldh	r2,-104(r3)
   280ac:	10000826 	beq	r2,zero,280d0 <__sfp+0x88>
   280b0:	213fffc4 	addi	r4,r4,-1
   280b4:	1c3ffd04 	addi	r16,r3,-12
   280b8:	18c01a04 	addi	r3,r3,104
   280bc:	247ffa1e 	bne	r4,r17,280a8 <_gp+0xfffeb018>
   280c0:	90800017 	ldw	r2,0(r18)
   280c4:	10001d26 	beq	r2,zero,2813c <__sfp+0xf4>
   280c8:	1025883a 	mov	r18,r2
   280cc:	003fee06 	br	28088 <_gp+0xfffeaff8>
   280d0:	00bfffc4 	movi	r2,-1
   280d4:	8080038d 	sth	r2,14(r16)
   280d8:	00800044 	movi	r2,1
   280dc:	8080030d 	sth	r2,12(r16)
   280e0:	80001915 	stw	zero,100(r16)
   280e4:	80000015 	stw	zero,0(r16)
   280e8:	80000215 	stw	zero,8(r16)
   280ec:	80000115 	stw	zero,4(r16)
   280f0:	80000415 	stw	zero,16(r16)
   280f4:	80000515 	stw	zero,20(r16)
   280f8:	80000615 	stw	zero,24(r16)
   280fc:	01800204 	movi	r6,8
   28100:	000b883a 	mov	r5,zero
   28104:	81001704 	addi	r4,r16,92
   28108:	00237a00 	call	237a0 <memset>
   2810c:	8005883a 	mov	r2,r16
   28110:	80000c15 	stw	zero,48(r16)
   28114:	80000d15 	stw	zero,52(r16)
   28118:	80001115 	stw	zero,68(r16)
   2811c:	80001215 	stw	zero,72(r16)
   28120:	dfc00417 	ldw	ra,16(sp)
   28124:	dcc00317 	ldw	r19,12(sp)
   28128:	dc800217 	ldw	r18,8(sp)
   2812c:	dc400117 	ldw	r17,4(sp)
   28130:	dc000017 	ldw	r16,0(sp)
   28134:	dec00504 	addi	sp,sp,20
   28138:	f800283a 	ret
   2813c:	01400104 	movi	r5,4
   28140:	9809883a 	mov	r4,r19
   28144:	0027fe00 	call	27fe0 <__sfmoreglue>
   28148:	90800015 	stw	r2,0(r18)
   2814c:	103fde1e 	bne	r2,zero,280c8 <_gp+0xfffeb038>
   28150:	00800304 	movi	r2,12
   28154:	98800015 	stw	r2,0(r19)
   28158:	0005883a 	mov	r2,zero
   2815c:	003ff006 	br	28120 <_gp+0xfffeb090>

00028160 <_cleanup>:
   28160:	008000f4 	movhi	r2,3
   28164:	10943404 	addi	r2,r2,20688
   28168:	11000017 	ldw	r4,0(r2)
   2816c:	014000f4 	movhi	r5,3
   28170:	29704c04 	addi	r5,r5,-16080
   28174:	0028b7c1 	jmpi	28b7c <_fwalk_reent>

00028178 <__sinit>:
   28178:	20800e17 	ldw	r2,56(r4)
   2817c:	10000126 	beq	r2,zero,28184 <__sinit+0xc>
   28180:	f800283a 	ret
   28184:	0027e3c1 	jmpi	27e3c <__sinit.part.1>

00028188 <__sfp_lock_acquire>:
   28188:	f800283a 	ret

0002818c <__sfp_lock_release>:
   2818c:	f800283a 	ret

00028190 <__sinit_lock_acquire>:
   28190:	f800283a 	ret

00028194 <__sinit_lock_release>:
   28194:	f800283a 	ret

00028198 <__fp_lock_all>:
   28198:	008000f4 	movhi	r2,3
   2819c:	10943504 	addi	r2,r2,20692
   281a0:	11000017 	ldw	r4,0(r2)
   281a4:	014000b4 	movhi	r5,2
   281a8:	295ff604 	addi	r5,r5,32728
   281ac:	0028ab81 	jmpi	28ab8 <_fwalk>

000281b0 <__fp_unlock_all>:
   281b0:	008000f4 	movhi	r2,3
   281b4:	10943504 	addi	r2,r2,20692
   281b8:	11000017 	ldw	r4,0(r2)
   281bc:	014000b4 	movhi	r5,2
   281c0:	295f8a04 	addi	r5,r5,32296
   281c4:	0028ab81 	jmpi	28ab8 <_fwalk>

000281c8 <_malloc_trim_r>:
   281c8:	defffb04 	addi	sp,sp,-20
   281cc:	dcc00315 	stw	r19,12(sp)
   281d0:	04c000f4 	movhi	r19,3
   281d4:	dc800215 	stw	r18,8(sp)
   281d8:	dc400115 	stw	r17,4(sp)
   281dc:	dc000015 	stw	r16,0(sp)
   281e0:	dfc00415 	stw	ra,16(sp)
   281e4:	2821883a 	mov	r16,r5
   281e8:	9ccd4804 	addi	r19,r19,13600
   281ec:	2025883a 	mov	r18,r4
   281f0:	003029c0 	call	3029c <__malloc_lock>
   281f4:	98800217 	ldw	r2,8(r19)
   281f8:	14400117 	ldw	r17,4(r2)
   281fc:	00bfff04 	movi	r2,-4
   28200:	88a2703a 	and	r17,r17,r2
   28204:	8c21c83a 	sub	r16,r17,r16
   28208:	8403fbc4 	addi	r16,r16,4079
   2820c:	8020d33a 	srli	r16,r16,12
   28210:	0083ffc4 	movi	r2,4095
   28214:	843fffc4 	addi	r16,r16,-1
   28218:	8020933a 	slli	r16,r16,12
   2821c:	1400060e 	bge	r2,r16,28238 <_malloc_trim_r+0x70>
   28220:	000b883a 	mov	r5,zero
   28224:	9009883a 	mov	r4,r18
   28228:	0023a080 	call	23a08 <_sbrk_r>
   2822c:	98c00217 	ldw	r3,8(r19)
   28230:	1c47883a 	add	r3,r3,r17
   28234:	10c00a26 	beq	r2,r3,28260 <_malloc_trim_r+0x98>
   28238:	9009883a 	mov	r4,r18
   2823c:	00302c00 	call	302c0 <__malloc_unlock>
   28240:	0005883a 	mov	r2,zero
   28244:	dfc00417 	ldw	ra,16(sp)
   28248:	dcc00317 	ldw	r19,12(sp)
   2824c:	dc800217 	ldw	r18,8(sp)
   28250:	dc400117 	ldw	r17,4(sp)
   28254:	dc000017 	ldw	r16,0(sp)
   28258:	dec00504 	addi	sp,sp,20
   2825c:	f800283a 	ret
   28260:	040bc83a 	sub	r5,zero,r16
   28264:	9009883a 	mov	r4,r18
   28268:	0023a080 	call	23a08 <_sbrk_r>
   2826c:	00ffffc4 	movi	r3,-1
   28270:	10c00d26 	beq	r2,r3,282a8 <_malloc_trim_r+0xe0>
   28274:	00c000f4 	movhi	r3,3
   28278:	18db5104 	addi	r3,r3,27972
   2827c:	18800017 	ldw	r2,0(r3)
   28280:	99000217 	ldw	r4,8(r19)
   28284:	8c23c83a 	sub	r17,r17,r16
   28288:	8c400054 	ori	r17,r17,1
   2828c:	1421c83a 	sub	r16,r2,r16
   28290:	24400115 	stw	r17,4(r4)
   28294:	9009883a 	mov	r4,r18
   28298:	1c000015 	stw	r16,0(r3)
   2829c:	00302c00 	call	302c0 <__malloc_unlock>
   282a0:	00800044 	movi	r2,1
   282a4:	003fe706 	br	28244 <_gp+0xfffeb1b4>
   282a8:	000b883a 	mov	r5,zero
   282ac:	9009883a 	mov	r4,r18
   282b0:	0023a080 	call	23a08 <_sbrk_r>
   282b4:	99000217 	ldw	r4,8(r19)
   282b8:	014003c4 	movi	r5,15
   282bc:	1107c83a 	sub	r3,r2,r4
   282c0:	28ffdd0e 	bge	r5,r3,28238 <_gp+0xfffeb1a8>
   282c4:	014000f4 	movhi	r5,3
   282c8:	29543204 	addi	r5,r5,20680
   282cc:	29400017 	ldw	r5,0(r5)
   282d0:	18c00054 	ori	r3,r3,1
   282d4:	20c00115 	stw	r3,4(r4)
   282d8:	00c000f4 	movhi	r3,3
   282dc:	1145c83a 	sub	r2,r2,r5
   282e0:	18db5104 	addi	r3,r3,27972
   282e4:	18800015 	stw	r2,0(r3)
   282e8:	003fd306 	br	28238 <_gp+0xfffeb1a8>

000282ec <_free_r>:
   282ec:	28004126 	beq	r5,zero,283f4 <_free_r+0x108>
   282f0:	defffd04 	addi	sp,sp,-12
   282f4:	dc400115 	stw	r17,4(sp)
   282f8:	dc000015 	stw	r16,0(sp)
   282fc:	2023883a 	mov	r17,r4
   28300:	2821883a 	mov	r16,r5
   28304:	dfc00215 	stw	ra,8(sp)
   28308:	003029c0 	call	3029c <__malloc_lock>
   2830c:	81ffff17 	ldw	r7,-4(r16)
   28310:	00bfff84 	movi	r2,-2
   28314:	010000f4 	movhi	r4,3
   28318:	81bffe04 	addi	r6,r16,-8
   2831c:	3884703a 	and	r2,r7,r2
   28320:	210d4804 	addi	r4,r4,13600
   28324:	308b883a 	add	r5,r6,r2
   28328:	2a400117 	ldw	r9,4(r5)
   2832c:	22000217 	ldw	r8,8(r4)
   28330:	00ffff04 	movi	r3,-4
   28334:	48c6703a 	and	r3,r9,r3
   28338:	2a005726 	beq	r5,r8,28498 <_free_r+0x1ac>
   2833c:	28c00115 	stw	r3,4(r5)
   28340:	39c0004c 	andi	r7,r7,1
   28344:	3800091e 	bne	r7,zero,2836c <_free_r+0x80>
   28348:	823ffe17 	ldw	r8,-8(r16)
   2834c:	22400204 	addi	r9,r4,8
   28350:	320dc83a 	sub	r6,r6,r8
   28354:	31c00217 	ldw	r7,8(r6)
   28358:	1205883a 	add	r2,r2,r8
   2835c:	3a406526 	beq	r7,r9,284f4 <_free_r+0x208>
   28360:	32000317 	ldw	r8,12(r6)
   28364:	3a000315 	stw	r8,12(r7)
   28368:	41c00215 	stw	r7,8(r8)
   2836c:	28cf883a 	add	r7,r5,r3
   28370:	39c00117 	ldw	r7,4(r7)
   28374:	39c0004c 	andi	r7,r7,1
   28378:	38003a26 	beq	r7,zero,28464 <_free_r+0x178>
   2837c:	10c00054 	ori	r3,r2,1
   28380:	30c00115 	stw	r3,4(r6)
   28384:	3087883a 	add	r3,r6,r2
   28388:	18800015 	stw	r2,0(r3)
   2838c:	00c07fc4 	movi	r3,511
   28390:	18801936 	bltu	r3,r2,283f8 <_free_r+0x10c>
   28394:	1004d0fa 	srli	r2,r2,3
   28398:	01c00044 	movi	r7,1
   2839c:	21400117 	ldw	r5,4(r4)
   283a0:	10c00044 	addi	r3,r2,1
   283a4:	18c7883a 	add	r3,r3,r3
   283a8:	1005d0ba 	srai	r2,r2,2
   283ac:	18c7883a 	add	r3,r3,r3
   283b0:	18c7883a 	add	r3,r3,r3
   283b4:	1907883a 	add	r3,r3,r4
   283b8:	3884983a 	sll	r2,r7,r2
   283bc:	19c00017 	ldw	r7,0(r3)
   283c0:	1a3ffe04 	addi	r8,r3,-8
   283c4:	1144b03a 	or	r2,r2,r5
   283c8:	32000315 	stw	r8,12(r6)
   283cc:	31c00215 	stw	r7,8(r6)
   283d0:	20800115 	stw	r2,4(r4)
   283d4:	19800015 	stw	r6,0(r3)
   283d8:	39800315 	stw	r6,12(r7)
   283dc:	8809883a 	mov	r4,r17
   283e0:	dfc00217 	ldw	ra,8(sp)
   283e4:	dc400117 	ldw	r17,4(sp)
   283e8:	dc000017 	ldw	r16,0(sp)
   283ec:	dec00304 	addi	sp,sp,12
   283f0:	00302c01 	jmpi	302c0 <__malloc_unlock>
   283f4:	f800283a 	ret
   283f8:	100ad27a 	srli	r5,r2,9
   283fc:	00c00104 	movi	r3,4
   28400:	19404a36 	bltu	r3,r5,2852c <_free_r+0x240>
   28404:	100ad1ba 	srli	r5,r2,6
   28408:	28c00e44 	addi	r3,r5,57
   2840c:	18c7883a 	add	r3,r3,r3
   28410:	29400e04 	addi	r5,r5,56
   28414:	18c7883a 	add	r3,r3,r3
   28418:	18c7883a 	add	r3,r3,r3
   2841c:	1909883a 	add	r4,r3,r4
   28420:	20c00017 	ldw	r3,0(r4)
   28424:	01c000f4 	movhi	r7,3
   28428:	213ffe04 	addi	r4,r4,-8
   2842c:	39cd4804 	addi	r7,r7,13600
   28430:	20c04426 	beq	r4,r3,28544 <_free_r+0x258>
   28434:	01ffff04 	movi	r7,-4
   28438:	19400117 	ldw	r5,4(r3)
   2843c:	29ca703a 	and	r5,r5,r7
   28440:	1140022e 	bgeu	r2,r5,2844c <_free_r+0x160>
   28444:	18c00217 	ldw	r3,8(r3)
   28448:	20fffb1e 	bne	r4,r3,28438 <_gp+0xfffeb3a8>
   2844c:	19000317 	ldw	r4,12(r3)
   28450:	31000315 	stw	r4,12(r6)
   28454:	30c00215 	stw	r3,8(r6)
   28458:	21800215 	stw	r6,8(r4)
   2845c:	19800315 	stw	r6,12(r3)
   28460:	003fde06 	br	283dc <_gp+0xfffeb34c>
   28464:	29c00217 	ldw	r7,8(r5)
   28468:	10c5883a 	add	r2,r2,r3
   2846c:	00c000f4 	movhi	r3,3
   28470:	18cd4a04 	addi	r3,r3,13608
   28474:	38c03b26 	beq	r7,r3,28564 <_free_r+0x278>
   28478:	2a000317 	ldw	r8,12(r5)
   2847c:	11400054 	ori	r5,r2,1
   28480:	3087883a 	add	r3,r6,r2
   28484:	3a000315 	stw	r8,12(r7)
   28488:	41c00215 	stw	r7,8(r8)
   2848c:	31400115 	stw	r5,4(r6)
   28490:	18800015 	stw	r2,0(r3)
   28494:	003fbd06 	br	2838c <_gp+0xfffeb2fc>
   28498:	39c0004c 	andi	r7,r7,1
   2849c:	10c5883a 	add	r2,r2,r3
   284a0:	3800071e 	bne	r7,zero,284c0 <_free_r+0x1d4>
   284a4:	81fffe17 	ldw	r7,-8(r16)
   284a8:	31cdc83a 	sub	r6,r6,r7
   284ac:	30c00317 	ldw	r3,12(r6)
   284b0:	31400217 	ldw	r5,8(r6)
   284b4:	11c5883a 	add	r2,r2,r7
   284b8:	28c00315 	stw	r3,12(r5)
   284bc:	19400215 	stw	r5,8(r3)
   284c0:	10c00054 	ori	r3,r2,1
   284c4:	30c00115 	stw	r3,4(r6)
   284c8:	00c000f4 	movhi	r3,3
   284cc:	18d43304 	addi	r3,r3,20684
   284d0:	18c00017 	ldw	r3,0(r3)
   284d4:	21800215 	stw	r6,8(r4)
   284d8:	10ffc036 	bltu	r2,r3,283dc <_gp+0xfffeb34c>
   284dc:	008000f4 	movhi	r2,3
   284e0:	109b4104 	addi	r2,r2,27908
   284e4:	11400017 	ldw	r5,0(r2)
   284e8:	8809883a 	mov	r4,r17
   284ec:	00281c80 	call	281c8 <_malloc_trim_r>
   284f0:	003fba06 	br	283dc <_gp+0xfffeb34c>
   284f4:	28c9883a 	add	r4,r5,r3
   284f8:	21000117 	ldw	r4,4(r4)
   284fc:	2100004c 	andi	r4,r4,1
   28500:	2000391e 	bne	r4,zero,285e8 <_free_r+0x2fc>
   28504:	29c00217 	ldw	r7,8(r5)
   28508:	29000317 	ldw	r4,12(r5)
   2850c:	1885883a 	add	r2,r3,r2
   28510:	10c00054 	ori	r3,r2,1
   28514:	39000315 	stw	r4,12(r7)
   28518:	21c00215 	stw	r7,8(r4)
   2851c:	30c00115 	stw	r3,4(r6)
   28520:	308d883a 	add	r6,r6,r2
   28524:	30800015 	stw	r2,0(r6)
   28528:	003fac06 	br	283dc <_gp+0xfffeb34c>
   2852c:	00c00504 	movi	r3,20
   28530:	19401536 	bltu	r3,r5,28588 <_free_r+0x29c>
   28534:	28c01704 	addi	r3,r5,92
   28538:	18c7883a 	add	r3,r3,r3
   2853c:	294016c4 	addi	r5,r5,91
   28540:	003fb406 	br	28414 <_gp+0xfffeb384>
   28544:	280bd0ba 	srai	r5,r5,2
   28548:	00c00044 	movi	r3,1
   2854c:	38800117 	ldw	r2,4(r7)
   28550:	194a983a 	sll	r5,r3,r5
   28554:	2007883a 	mov	r3,r4
   28558:	2884b03a 	or	r2,r5,r2
   2855c:	38800115 	stw	r2,4(r7)
   28560:	003fbb06 	br	28450 <_gp+0xfffeb3c0>
   28564:	21800515 	stw	r6,20(r4)
   28568:	21800415 	stw	r6,16(r4)
   2856c:	10c00054 	ori	r3,r2,1
   28570:	31c00315 	stw	r7,12(r6)
   28574:	31c00215 	stw	r7,8(r6)
   28578:	30c00115 	stw	r3,4(r6)
   2857c:	308d883a 	add	r6,r6,r2
   28580:	30800015 	stw	r2,0(r6)
   28584:	003f9506 	br	283dc <_gp+0xfffeb34c>
   28588:	00c01504 	movi	r3,84
   2858c:	19400536 	bltu	r3,r5,285a4 <_free_r+0x2b8>
   28590:	100ad33a 	srli	r5,r2,12
   28594:	28c01bc4 	addi	r3,r5,111
   28598:	18c7883a 	add	r3,r3,r3
   2859c:	29401b84 	addi	r5,r5,110
   285a0:	003f9c06 	br	28414 <_gp+0xfffeb384>
   285a4:	00c05504 	movi	r3,340
   285a8:	19400536 	bltu	r3,r5,285c0 <_free_r+0x2d4>
   285ac:	100ad3fa 	srli	r5,r2,15
   285b0:	28c01e04 	addi	r3,r5,120
   285b4:	18c7883a 	add	r3,r3,r3
   285b8:	29401dc4 	addi	r5,r5,119
   285bc:	003f9506 	br	28414 <_gp+0xfffeb384>
   285c0:	00c15504 	movi	r3,1364
   285c4:	19400536 	bltu	r3,r5,285dc <_free_r+0x2f0>
   285c8:	100ad4ba 	srli	r5,r2,18
   285cc:	28c01f44 	addi	r3,r5,125
   285d0:	18c7883a 	add	r3,r3,r3
   285d4:	29401f04 	addi	r5,r5,124
   285d8:	003f8e06 	br	28414 <_gp+0xfffeb384>
   285dc:	00c03f84 	movi	r3,254
   285e0:	01401f84 	movi	r5,126
   285e4:	003f8b06 	br	28414 <_gp+0xfffeb384>
   285e8:	10c00054 	ori	r3,r2,1
   285ec:	30c00115 	stw	r3,4(r6)
   285f0:	308d883a 	add	r6,r6,r2
   285f4:	30800015 	stw	r2,0(r6)
   285f8:	003f7806 	br	283dc <_gp+0xfffeb34c>

000285fc <__sfvwrite_r>:
   285fc:	30800217 	ldw	r2,8(r6)
   28600:	10006726 	beq	r2,zero,287a0 <__sfvwrite_r+0x1a4>
   28604:	28c0030b 	ldhu	r3,12(r5)
   28608:	defff404 	addi	sp,sp,-48
   2860c:	dd400715 	stw	r21,28(sp)
   28610:	dd000615 	stw	r20,24(sp)
   28614:	dc000215 	stw	r16,8(sp)
   28618:	dfc00b15 	stw	ra,44(sp)
   2861c:	df000a15 	stw	fp,40(sp)
   28620:	ddc00915 	stw	r23,36(sp)
   28624:	dd800815 	stw	r22,32(sp)
   28628:	dcc00515 	stw	r19,20(sp)
   2862c:	dc800415 	stw	r18,16(sp)
   28630:	dc400315 	stw	r17,12(sp)
   28634:	1880020c 	andi	r2,r3,8
   28638:	2821883a 	mov	r16,r5
   2863c:	202b883a 	mov	r21,r4
   28640:	3029883a 	mov	r20,r6
   28644:	10002726 	beq	r2,zero,286e4 <__sfvwrite_r+0xe8>
   28648:	28800417 	ldw	r2,16(r5)
   2864c:	10002526 	beq	r2,zero,286e4 <__sfvwrite_r+0xe8>
   28650:	1880008c 	andi	r2,r3,2
   28654:	a4400017 	ldw	r17,0(r20)
   28658:	10002a26 	beq	r2,zero,28704 <__sfvwrite_r+0x108>
   2865c:	05a00034 	movhi	r22,32768
   28660:	0027883a 	mov	r19,zero
   28664:	0025883a 	mov	r18,zero
   28668:	b5bf0004 	addi	r22,r22,-1024
   2866c:	980d883a 	mov	r6,r19
   28670:	a809883a 	mov	r4,r21
   28674:	90004626 	beq	r18,zero,28790 <__sfvwrite_r+0x194>
   28678:	900f883a 	mov	r7,r18
   2867c:	b480022e 	bgeu	r22,r18,28688 <__sfvwrite_r+0x8c>
   28680:	01e00034 	movhi	r7,32768
   28684:	39ff0004 	addi	r7,r7,-1024
   28688:	80800917 	ldw	r2,36(r16)
   2868c:	81400717 	ldw	r5,28(r16)
   28690:	103ee83a 	callr	r2
   28694:	0080570e 	bge	zero,r2,287f4 <__sfvwrite_r+0x1f8>
   28698:	a0c00217 	ldw	r3,8(r20)
   2869c:	98a7883a 	add	r19,r19,r2
   286a0:	90a5c83a 	sub	r18,r18,r2
   286a4:	1885c83a 	sub	r2,r3,r2
   286a8:	a0800215 	stw	r2,8(r20)
   286ac:	103fef1e 	bne	r2,zero,2866c <_gp+0xfffeb5dc>
   286b0:	0005883a 	mov	r2,zero
   286b4:	dfc00b17 	ldw	ra,44(sp)
   286b8:	df000a17 	ldw	fp,40(sp)
   286bc:	ddc00917 	ldw	r23,36(sp)
   286c0:	dd800817 	ldw	r22,32(sp)
   286c4:	dd400717 	ldw	r21,28(sp)
   286c8:	dd000617 	ldw	r20,24(sp)
   286cc:	dcc00517 	ldw	r19,20(sp)
   286d0:	dc800417 	ldw	r18,16(sp)
   286d4:	dc400317 	ldw	r17,12(sp)
   286d8:	dc000217 	ldw	r16,8(sp)
   286dc:	dec00c04 	addi	sp,sp,48
   286e0:	f800283a 	ret
   286e4:	800b883a 	mov	r5,r16
   286e8:	a809883a 	mov	r4,r21
   286ec:	00261a40 	call	261a4 <__swsetup_r>
   286f0:	1000eb1e 	bne	r2,zero,28aa0 <__sfvwrite_r+0x4a4>
   286f4:	80c0030b 	ldhu	r3,12(r16)
   286f8:	a4400017 	ldw	r17,0(r20)
   286fc:	1880008c 	andi	r2,r3,2
   28700:	103fd61e 	bne	r2,zero,2865c <_gp+0xfffeb5cc>
   28704:	1880004c 	andi	r2,r3,1
   28708:	10003f1e 	bne	r2,zero,28808 <__sfvwrite_r+0x20c>
   2870c:	0039883a 	mov	fp,zero
   28710:	0025883a 	mov	r18,zero
   28714:	90001a26 	beq	r18,zero,28780 <__sfvwrite_r+0x184>
   28718:	1880800c 	andi	r2,r3,512
   2871c:	84c00217 	ldw	r19,8(r16)
   28720:	10002126 	beq	r2,zero,287a8 <__sfvwrite_r+0x1ac>
   28724:	982f883a 	mov	r23,r19
   28728:	94c09336 	bltu	r18,r19,28978 <__sfvwrite_r+0x37c>
   2872c:	1881200c 	andi	r2,r3,1152
   28730:	10009e1e 	bne	r2,zero,289ac <__sfvwrite_r+0x3b0>
   28734:	81000017 	ldw	r4,0(r16)
   28738:	b80d883a 	mov	r6,r23
   2873c:	e00b883a 	mov	r5,fp
   28740:	00291040 	call	29104 <memmove>
   28744:	80c00217 	ldw	r3,8(r16)
   28748:	81000017 	ldw	r4,0(r16)
   2874c:	9005883a 	mov	r2,r18
   28750:	1ce7c83a 	sub	r19,r3,r19
   28754:	25cf883a 	add	r7,r4,r23
   28758:	84c00215 	stw	r19,8(r16)
   2875c:	81c00015 	stw	r7,0(r16)
   28760:	a0c00217 	ldw	r3,8(r20)
   28764:	e0b9883a 	add	fp,fp,r2
   28768:	90a5c83a 	sub	r18,r18,r2
   2876c:	18a7c83a 	sub	r19,r3,r2
   28770:	a4c00215 	stw	r19,8(r20)
   28774:	983fce26 	beq	r19,zero,286b0 <_gp+0xfffeb620>
   28778:	80c0030b 	ldhu	r3,12(r16)
   2877c:	903fe61e 	bne	r18,zero,28718 <_gp+0xfffeb688>
   28780:	8f000017 	ldw	fp,0(r17)
   28784:	8c800117 	ldw	r18,4(r17)
   28788:	8c400204 	addi	r17,r17,8
   2878c:	003fe106 	br	28714 <_gp+0xfffeb684>
   28790:	8cc00017 	ldw	r19,0(r17)
   28794:	8c800117 	ldw	r18,4(r17)
   28798:	8c400204 	addi	r17,r17,8
   2879c:	003fb306 	br	2866c <_gp+0xfffeb5dc>
   287a0:	0005883a 	mov	r2,zero
   287a4:	f800283a 	ret
   287a8:	81000017 	ldw	r4,0(r16)
   287ac:	80800417 	ldw	r2,16(r16)
   287b0:	11005736 	bltu	r2,r4,28910 <__sfvwrite_r+0x314>
   287b4:	85c00517 	ldw	r23,20(r16)
   287b8:	95c05536 	bltu	r18,r23,28910 <__sfvwrite_r+0x314>
   287bc:	00a00034 	movhi	r2,32768
   287c0:	10bfffc4 	addi	r2,r2,-1
   287c4:	9009883a 	mov	r4,r18
   287c8:	1480012e 	bgeu	r2,r18,287d0 <__sfvwrite_r+0x1d4>
   287cc:	1009883a 	mov	r4,r2
   287d0:	b80b883a 	mov	r5,r23
   287d4:	00228800 	call	22880 <__divsi3>
   287d8:	15cf383a 	mul	r7,r2,r23
   287dc:	81400717 	ldw	r5,28(r16)
   287e0:	80800917 	ldw	r2,36(r16)
   287e4:	e00d883a 	mov	r6,fp
   287e8:	a809883a 	mov	r4,r21
   287ec:	103ee83a 	callr	r2
   287f0:	00bfdb16 	blt	zero,r2,28760 <_gp+0xfffeb6d0>
   287f4:	8080030b 	ldhu	r2,12(r16)
   287f8:	10801014 	ori	r2,r2,64
   287fc:	8080030d 	sth	r2,12(r16)
   28800:	00bfffc4 	movi	r2,-1
   28804:	003fab06 	br	286b4 <_gp+0xfffeb624>
   28808:	0027883a 	mov	r19,zero
   2880c:	0011883a 	mov	r8,zero
   28810:	0039883a 	mov	fp,zero
   28814:	0025883a 	mov	r18,zero
   28818:	90001f26 	beq	r18,zero,28898 <__sfvwrite_r+0x29c>
   2881c:	40005a26 	beq	r8,zero,28988 <__sfvwrite_r+0x38c>
   28820:	982d883a 	mov	r22,r19
   28824:	94c0012e 	bgeu	r18,r19,2882c <__sfvwrite_r+0x230>
   28828:	902d883a 	mov	r22,r18
   2882c:	81000017 	ldw	r4,0(r16)
   28830:	80800417 	ldw	r2,16(r16)
   28834:	b02f883a 	mov	r23,r22
   28838:	81c00517 	ldw	r7,20(r16)
   2883c:	1100032e 	bgeu	r2,r4,2884c <__sfvwrite_r+0x250>
   28840:	80c00217 	ldw	r3,8(r16)
   28844:	38c7883a 	add	r3,r7,r3
   28848:	1d801816 	blt	r3,r22,288ac <__sfvwrite_r+0x2b0>
   2884c:	b1c03e16 	blt	r22,r7,28948 <__sfvwrite_r+0x34c>
   28850:	80800917 	ldw	r2,36(r16)
   28854:	81400717 	ldw	r5,28(r16)
   28858:	e00d883a 	mov	r6,fp
   2885c:	da000115 	stw	r8,4(sp)
   28860:	a809883a 	mov	r4,r21
   28864:	103ee83a 	callr	r2
   28868:	102f883a 	mov	r23,r2
   2886c:	da000117 	ldw	r8,4(sp)
   28870:	00bfe00e 	bge	zero,r2,287f4 <_gp+0xfffeb764>
   28874:	9de7c83a 	sub	r19,r19,r23
   28878:	98001f26 	beq	r19,zero,288f8 <__sfvwrite_r+0x2fc>
   2887c:	a0800217 	ldw	r2,8(r20)
   28880:	e5f9883a 	add	fp,fp,r23
   28884:	95e5c83a 	sub	r18,r18,r23
   28888:	15efc83a 	sub	r23,r2,r23
   2888c:	a5c00215 	stw	r23,8(r20)
   28890:	b83f8726 	beq	r23,zero,286b0 <_gp+0xfffeb620>
   28894:	903fe11e 	bne	r18,zero,2881c <_gp+0xfffeb78c>
   28898:	8f000017 	ldw	fp,0(r17)
   2889c:	8c800117 	ldw	r18,4(r17)
   288a0:	0011883a 	mov	r8,zero
   288a4:	8c400204 	addi	r17,r17,8
   288a8:	003fdb06 	br	28818 <_gp+0xfffeb788>
   288ac:	180d883a 	mov	r6,r3
   288b0:	e00b883a 	mov	r5,fp
   288b4:	da000115 	stw	r8,4(sp)
   288b8:	d8c00015 	stw	r3,0(sp)
   288bc:	00291040 	call	29104 <memmove>
   288c0:	d8c00017 	ldw	r3,0(sp)
   288c4:	80800017 	ldw	r2,0(r16)
   288c8:	800b883a 	mov	r5,r16
   288cc:	a809883a 	mov	r4,r21
   288d0:	10c5883a 	add	r2,r2,r3
   288d4:	80800015 	stw	r2,0(r16)
   288d8:	d8c00015 	stw	r3,0(sp)
   288dc:	0027d9c0 	call	27d9c <_fflush_r>
   288e0:	d8c00017 	ldw	r3,0(sp)
   288e4:	da000117 	ldw	r8,4(sp)
   288e8:	103fc21e 	bne	r2,zero,287f4 <_gp+0xfffeb764>
   288ec:	182f883a 	mov	r23,r3
   288f0:	9de7c83a 	sub	r19,r19,r23
   288f4:	983fe11e 	bne	r19,zero,2887c <_gp+0xfffeb7ec>
   288f8:	800b883a 	mov	r5,r16
   288fc:	a809883a 	mov	r4,r21
   28900:	0027d9c0 	call	27d9c <_fflush_r>
   28904:	103fbb1e 	bne	r2,zero,287f4 <_gp+0xfffeb764>
   28908:	0011883a 	mov	r8,zero
   2890c:	003fdb06 	br	2887c <_gp+0xfffeb7ec>
   28910:	94c0012e 	bgeu	r18,r19,28918 <__sfvwrite_r+0x31c>
   28914:	9027883a 	mov	r19,r18
   28918:	980d883a 	mov	r6,r19
   2891c:	e00b883a 	mov	r5,fp
   28920:	00291040 	call	29104 <memmove>
   28924:	80800217 	ldw	r2,8(r16)
   28928:	80c00017 	ldw	r3,0(r16)
   2892c:	14c5c83a 	sub	r2,r2,r19
   28930:	1cc7883a 	add	r3,r3,r19
   28934:	80800215 	stw	r2,8(r16)
   28938:	80c00015 	stw	r3,0(r16)
   2893c:	10004326 	beq	r2,zero,28a4c <__sfvwrite_r+0x450>
   28940:	9805883a 	mov	r2,r19
   28944:	003f8606 	br	28760 <_gp+0xfffeb6d0>
   28948:	b00d883a 	mov	r6,r22
   2894c:	e00b883a 	mov	r5,fp
   28950:	da000115 	stw	r8,4(sp)
   28954:	00291040 	call	29104 <memmove>
   28958:	80800217 	ldw	r2,8(r16)
   2895c:	80c00017 	ldw	r3,0(r16)
   28960:	da000117 	ldw	r8,4(sp)
   28964:	1585c83a 	sub	r2,r2,r22
   28968:	1dad883a 	add	r22,r3,r22
   2896c:	80800215 	stw	r2,8(r16)
   28970:	85800015 	stw	r22,0(r16)
   28974:	003fbf06 	br	28874 <_gp+0xfffeb7e4>
   28978:	81000017 	ldw	r4,0(r16)
   2897c:	9027883a 	mov	r19,r18
   28980:	902f883a 	mov	r23,r18
   28984:	003f6c06 	br	28738 <_gp+0xfffeb6a8>
   28988:	900d883a 	mov	r6,r18
   2898c:	01400284 	movi	r5,10
   28990:	e009883a 	mov	r4,fp
   28994:	0028ed80 	call	28ed8 <memchr>
   28998:	10003e26 	beq	r2,zero,28a94 <__sfvwrite_r+0x498>
   2899c:	10800044 	addi	r2,r2,1
   289a0:	1727c83a 	sub	r19,r2,fp
   289a4:	02000044 	movi	r8,1
   289a8:	003f9d06 	br	28820 <_gp+0xfffeb790>
   289ac:	80800517 	ldw	r2,20(r16)
   289b0:	81400417 	ldw	r5,16(r16)
   289b4:	81c00017 	ldw	r7,0(r16)
   289b8:	10a7883a 	add	r19,r2,r2
   289bc:	9885883a 	add	r2,r19,r2
   289c0:	1026d7fa 	srli	r19,r2,31
   289c4:	396dc83a 	sub	r22,r7,r5
   289c8:	b1000044 	addi	r4,r22,1
   289cc:	9885883a 	add	r2,r19,r2
   289d0:	1027d07a 	srai	r19,r2,1
   289d4:	2485883a 	add	r2,r4,r18
   289d8:	980d883a 	mov	r6,r19
   289dc:	9880022e 	bgeu	r19,r2,289e8 <__sfvwrite_r+0x3ec>
   289e0:	1027883a 	mov	r19,r2
   289e4:	100d883a 	mov	r6,r2
   289e8:	18c1000c 	andi	r3,r3,1024
   289ec:	18001c26 	beq	r3,zero,28a60 <__sfvwrite_r+0x464>
   289f0:	300b883a 	mov	r5,r6
   289f4:	a809883a 	mov	r4,r21
   289f8:	0022f940 	call	22f94 <_malloc_r>
   289fc:	102f883a 	mov	r23,r2
   28a00:	10002926 	beq	r2,zero,28aa8 <__sfvwrite_r+0x4ac>
   28a04:	81400417 	ldw	r5,16(r16)
   28a08:	b00d883a 	mov	r6,r22
   28a0c:	1009883a 	mov	r4,r2
   28a10:	0028fbc0 	call	28fbc <memcpy>
   28a14:	8080030b 	ldhu	r2,12(r16)
   28a18:	00fedfc4 	movi	r3,-1153
   28a1c:	10c4703a 	and	r2,r2,r3
   28a20:	10802014 	ori	r2,r2,128
   28a24:	8080030d 	sth	r2,12(r16)
   28a28:	bd89883a 	add	r4,r23,r22
   28a2c:	9d8fc83a 	sub	r7,r19,r22
   28a30:	85c00415 	stw	r23,16(r16)
   28a34:	84c00515 	stw	r19,20(r16)
   28a38:	81000015 	stw	r4,0(r16)
   28a3c:	9027883a 	mov	r19,r18
   28a40:	81c00215 	stw	r7,8(r16)
   28a44:	902f883a 	mov	r23,r18
   28a48:	003f3b06 	br	28738 <_gp+0xfffeb6a8>
   28a4c:	800b883a 	mov	r5,r16
   28a50:	a809883a 	mov	r4,r21
   28a54:	0027d9c0 	call	27d9c <_fflush_r>
   28a58:	103fb926 	beq	r2,zero,28940 <_gp+0xfffeb8b0>
   28a5c:	003f6506 	br	287f4 <_gp+0xfffeb764>
   28a60:	a809883a 	mov	r4,r21
   28a64:	002a25c0 	call	2a25c <_realloc_r>
   28a68:	102f883a 	mov	r23,r2
   28a6c:	103fee1e 	bne	r2,zero,28a28 <_gp+0xfffeb998>
   28a70:	81400417 	ldw	r5,16(r16)
   28a74:	a809883a 	mov	r4,r21
   28a78:	00282ec0 	call	282ec <_free_r>
   28a7c:	8080030b 	ldhu	r2,12(r16)
   28a80:	00ffdfc4 	movi	r3,-129
   28a84:	1884703a 	and	r2,r3,r2
   28a88:	00c00304 	movi	r3,12
   28a8c:	a8c00015 	stw	r3,0(r21)
   28a90:	003f5906 	br	287f8 <_gp+0xfffeb768>
   28a94:	94c00044 	addi	r19,r18,1
   28a98:	02000044 	movi	r8,1
   28a9c:	003f6006 	br	28820 <_gp+0xfffeb790>
   28aa0:	00bfffc4 	movi	r2,-1
   28aa4:	003f0306 	br	286b4 <_gp+0xfffeb624>
   28aa8:	00800304 	movi	r2,12
   28aac:	a8800015 	stw	r2,0(r21)
   28ab0:	8080030b 	ldhu	r2,12(r16)
   28ab4:	003f5006 	br	287f8 <_gp+0xfffeb768>

00028ab8 <_fwalk>:
   28ab8:	defff704 	addi	sp,sp,-36
   28abc:	dd000415 	stw	r20,16(sp)
   28ac0:	dfc00815 	stw	ra,32(sp)
   28ac4:	ddc00715 	stw	r23,28(sp)
   28ac8:	dd800615 	stw	r22,24(sp)
   28acc:	dd400515 	stw	r21,20(sp)
   28ad0:	dcc00315 	stw	r19,12(sp)
   28ad4:	dc800215 	stw	r18,8(sp)
   28ad8:	dc400115 	stw	r17,4(sp)
   28adc:	dc000015 	stw	r16,0(sp)
   28ae0:	2500b804 	addi	r20,r4,736
   28ae4:	a0002326 	beq	r20,zero,28b74 <_fwalk+0xbc>
   28ae8:	282b883a 	mov	r21,r5
   28aec:	002f883a 	mov	r23,zero
   28af0:	05800044 	movi	r22,1
   28af4:	04ffffc4 	movi	r19,-1
   28af8:	a4400117 	ldw	r17,4(r20)
   28afc:	a4800217 	ldw	r18,8(r20)
   28b00:	8c7fffc4 	addi	r17,r17,-1
   28b04:	88000d16 	blt	r17,zero,28b3c <_fwalk+0x84>
   28b08:	94000304 	addi	r16,r18,12
   28b0c:	94800384 	addi	r18,r18,14
   28b10:	8080000b 	ldhu	r2,0(r16)
   28b14:	8c7fffc4 	addi	r17,r17,-1
   28b18:	813ffd04 	addi	r4,r16,-12
   28b1c:	b080042e 	bgeu	r22,r2,28b30 <_fwalk+0x78>
   28b20:	9080000f 	ldh	r2,0(r18)
   28b24:	14c00226 	beq	r2,r19,28b30 <_fwalk+0x78>
   28b28:	a83ee83a 	callr	r21
   28b2c:	b8aeb03a 	or	r23,r23,r2
   28b30:	84001a04 	addi	r16,r16,104
   28b34:	94801a04 	addi	r18,r18,104
   28b38:	8cfff51e 	bne	r17,r19,28b10 <_gp+0xfffeba80>
   28b3c:	a5000017 	ldw	r20,0(r20)
   28b40:	a03fed1e 	bne	r20,zero,28af8 <_gp+0xfffeba68>
   28b44:	b805883a 	mov	r2,r23
   28b48:	dfc00817 	ldw	ra,32(sp)
   28b4c:	ddc00717 	ldw	r23,28(sp)
   28b50:	dd800617 	ldw	r22,24(sp)
   28b54:	dd400517 	ldw	r21,20(sp)
   28b58:	dd000417 	ldw	r20,16(sp)
   28b5c:	dcc00317 	ldw	r19,12(sp)
   28b60:	dc800217 	ldw	r18,8(sp)
   28b64:	dc400117 	ldw	r17,4(sp)
   28b68:	dc000017 	ldw	r16,0(sp)
   28b6c:	dec00904 	addi	sp,sp,36
   28b70:	f800283a 	ret
   28b74:	002f883a 	mov	r23,zero
   28b78:	003ff206 	br	28b44 <_gp+0xfffebab4>

00028b7c <_fwalk_reent>:
   28b7c:	defff704 	addi	sp,sp,-36
   28b80:	dd000415 	stw	r20,16(sp)
   28b84:	dfc00815 	stw	ra,32(sp)
   28b88:	ddc00715 	stw	r23,28(sp)
   28b8c:	dd800615 	stw	r22,24(sp)
   28b90:	dd400515 	stw	r21,20(sp)
   28b94:	dcc00315 	stw	r19,12(sp)
   28b98:	dc800215 	stw	r18,8(sp)
   28b9c:	dc400115 	stw	r17,4(sp)
   28ba0:	dc000015 	stw	r16,0(sp)
   28ba4:	2500b804 	addi	r20,r4,736
   28ba8:	a0002326 	beq	r20,zero,28c38 <_fwalk_reent+0xbc>
   28bac:	282b883a 	mov	r21,r5
   28bb0:	2027883a 	mov	r19,r4
   28bb4:	002f883a 	mov	r23,zero
   28bb8:	05800044 	movi	r22,1
   28bbc:	04bfffc4 	movi	r18,-1
   28bc0:	a4400117 	ldw	r17,4(r20)
   28bc4:	a4000217 	ldw	r16,8(r20)
   28bc8:	8c7fffc4 	addi	r17,r17,-1
   28bcc:	88000c16 	blt	r17,zero,28c00 <_fwalk_reent+0x84>
   28bd0:	84000304 	addi	r16,r16,12
   28bd4:	8080000b 	ldhu	r2,0(r16)
   28bd8:	8c7fffc4 	addi	r17,r17,-1
   28bdc:	817ffd04 	addi	r5,r16,-12
   28be0:	b080052e 	bgeu	r22,r2,28bf8 <_fwalk_reent+0x7c>
   28be4:	8080008f 	ldh	r2,2(r16)
   28be8:	9809883a 	mov	r4,r19
   28bec:	14800226 	beq	r2,r18,28bf8 <_fwalk_reent+0x7c>
   28bf0:	a83ee83a 	callr	r21
   28bf4:	b8aeb03a 	or	r23,r23,r2
   28bf8:	84001a04 	addi	r16,r16,104
   28bfc:	8cbff51e 	bne	r17,r18,28bd4 <_gp+0xfffebb44>
   28c00:	a5000017 	ldw	r20,0(r20)
   28c04:	a03fee1e 	bne	r20,zero,28bc0 <_gp+0xfffebb30>
   28c08:	b805883a 	mov	r2,r23
   28c0c:	dfc00817 	ldw	ra,32(sp)
   28c10:	ddc00717 	ldw	r23,28(sp)
   28c14:	dd800617 	ldw	r22,24(sp)
   28c18:	dd400517 	ldw	r21,20(sp)
   28c1c:	dd000417 	ldw	r20,16(sp)
   28c20:	dcc00317 	ldw	r19,12(sp)
   28c24:	dc800217 	ldw	r18,8(sp)
   28c28:	dc400117 	ldw	r17,4(sp)
   28c2c:	dc000017 	ldw	r16,0(sp)
   28c30:	dec00904 	addi	sp,sp,36
   28c34:	f800283a 	ret
   28c38:	002f883a 	mov	r23,zero
   28c3c:	003ff206 	br	28c08 <_gp+0xfffebb78>

00028c40 <_setlocale_r>:
   28c40:	30001b26 	beq	r6,zero,28cb0 <_setlocale_r+0x70>
   28c44:	014000f4 	movhi	r5,3
   28c48:	defffe04 	addi	sp,sp,-8
   28c4c:	294ca304 	addi	r5,r5,12940
   28c50:	3009883a 	mov	r4,r6
   28c54:	dc000015 	stw	r16,0(sp)
   28c58:	dfc00115 	stw	ra,4(sp)
   28c5c:	3021883a 	mov	r16,r6
   28c60:	0023d600 	call	23d60 <strcmp>
   28c64:	1000061e 	bne	r2,zero,28c80 <_setlocale_r+0x40>
   28c68:	008000f4 	movhi	r2,3
   28c6c:	108ca204 	addi	r2,r2,12936
   28c70:	dfc00117 	ldw	ra,4(sp)
   28c74:	dc000017 	ldw	r16,0(sp)
   28c78:	dec00204 	addi	sp,sp,8
   28c7c:	f800283a 	ret
   28c80:	014000f4 	movhi	r5,3
   28c84:	294ca204 	addi	r5,r5,12936
   28c88:	8009883a 	mov	r4,r16
   28c8c:	0023d600 	call	23d60 <strcmp>
   28c90:	103ff526 	beq	r2,zero,28c68 <_gp+0xfffebbd8>
   28c94:	014000f4 	movhi	r5,3
   28c98:	294c8d04 	addi	r5,r5,12852
   28c9c:	8009883a 	mov	r4,r16
   28ca0:	0023d600 	call	23d60 <strcmp>
   28ca4:	103ff026 	beq	r2,zero,28c68 <_gp+0xfffebbd8>
   28ca8:	0005883a 	mov	r2,zero
   28cac:	003ff006 	br	28c70 <_gp+0xfffebbe0>
   28cb0:	008000f4 	movhi	r2,3
   28cb4:	108ca204 	addi	r2,r2,12936
   28cb8:	f800283a 	ret

00028cbc <__locale_charset>:
   28cbc:	008000f4 	movhi	r2,3
   28cc0:	108f5b04 	addi	r2,r2,15724
   28cc4:	f800283a 	ret

00028cc8 <__locale_mb_cur_max>:
   28cc8:	008000f4 	movhi	r2,3
   28ccc:	10943604 	addi	r2,r2,20696
   28cd0:	10800017 	ldw	r2,0(r2)
   28cd4:	f800283a 	ret

00028cd8 <__locale_msgcharset>:
   28cd8:	008000f4 	movhi	r2,3
   28cdc:	108f5304 	addi	r2,r2,15692
   28ce0:	f800283a 	ret

00028ce4 <__locale_cjk_lang>:
   28ce4:	0005883a 	mov	r2,zero
   28ce8:	f800283a 	ret

00028cec <_localeconv_r>:
   28cec:	008000f4 	movhi	r2,3
   28cf0:	108f6304 	addi	r2,r2,15756
   28cf4:	f800283a 	ret

00028cf8 <setlocale>:
   28cf8:	008000f4 	movhi	r2,3
   28cfc:	10943504 	addi	r2,r2,20692
   28d00:	280d883a 	mov	r6,r5
   28d04:	200b883a 	mov	r5,r4
   28d08:	11000017 	ldw	r4,0(r2)
   28d0c:	0028c401 	jmpi	28c40 <_setlocale_r>

00028d10 <localeconv>:
   28d10:	008000f4 	movhi	r2,3
   28d14:	108f6304 	addi	r2,r2,15756
   28d18:	f800283a 	ret

00028d1c <__smakebuf_r>:
   28d1c:	2880030b 	ldhu	r2,12(r5)
   28d20:	10c0008c 	andi	r3,r2,2
   28d24:	1800411e 	bne	r3,zero,28e2c <__smakebuf_r+0x110>
   28d28:	deffec04 	addi	sp,sp,-80
   28d2c:	dc000f15 	stw	r16,60(sp)
   28d30:	2821883a 	mov	r16,r5
   28d34:	2940038f 	ldh	r5,14(r5)
   28d38:	dc401015 	stw	r17,64(sp)
   28d3c:	dfc01315 	stw	ra,76(sp)
   28d40:	dcc01215 	stw	r19,72(sp)
   28d44:	dc801115 	stw	r18,68(sp)
   28d48:	2023883a 	mov	r17,r4
   28d4c:	28001c16 	blt	r5,zero,28dc0 <__smakebuf_r+0xa4>
   28d50:	d80d883a 	mov	r6,sp
   28d54:	002c43c0 	call	2c43c <_fstat_r>
   28d58:	10001816 	blt	r2,zero,28dbc <__smakebuf_r+0xa0>
   28d5c:	d8800117 	ldw	r2,4(sp)
   28d60:	00e00014 	movui	r3,32768
   28d64:	10bc000c 	andi	r2,r2,61440
   28d68:	14c80020 	cmpeqi	r19,r2,8192
   28d6c:	10c03726 	beq	r2,r3,28e4c <__smakebuf_r+0x130>
   28d70:	80c0030b 	ldhu	r3,12(r16)
   28d74:	18c20014 	ori	r3,r3,2048
   28d78:	80c0030d 	sth	r3,12(r16)
   28d7c:	00c80004 	movi	r3,8192
   28d80:	10c0521e 	bne	r2,r3,28ecc <__smakebuf_r+0x1b0>
   28d84:	8140038f 	ldh	r5,14(r16)
   28d88:	8809883a 	mov	r4,r17
   28d8c:	002c4980 	call	2c498 <_isatty_r>
   28d90:	10004c26 	beq	r2,zero,28ec4 <__smakebuf_r+0x1a8>
   28d94:	8080030b 	ldhu	r2,12(r16)
   28d98:	80c010c4 	addi	r3,r16,67
   28d9c:	80c00015 	stw	r3,0(r16)
   28da0:	10800054 	ori	r2,r2,1
   28da4:	8080030d 	sth	r2,12(r16)
   28da8:	00800044 	movi	r2,1
   28dac:	80c00415 	stw	r3,16(r16)
   28db0:	80800515 	stw	r2,20(r16)
   28db4:	04810004 	movi	r18,1024
   28db8:	00000706 	br	28dd8 <__smakebuf_r+0xbc>
   28dbc:	8080030b 	ldhu	r2,12(r16)
   28dc0:	10c0200c 	andi	r3,r2,128
   28dc4:	18001f1e 	bne	r3,zero,28e44 <__smakebuf_r+0x128>
   28dc8:	04810004 	movi	r18,1024
   28dcc:	10820014 	ori	r2,r2,2048
   28dd0:	8080030d 	sth	r2,12(r16)
   28dd4:	0027883a 	mov	r19,zero
   28dd8:	900b883a 	mov	r5,r18
   28ddc:	8809883a 	mov	r4,r17
   28de0:	0022f940 	call	22f94 <_malloc_r>
   28de4:	10002c26 	beq	r2,zero,28e98 <__smakebuf_r+0x17c>
   28de8:	80c0030b 	ldhu	r3,12(r16)
   28dec:	010000b4 	movhi	r4,2
   28df0:	211f8c04 	addi	r4,r4,32304
   28df4:	89000f15 	stw	r4,60(r17)
   28df8:	18c02014 	ori	r3,r3,128
   28dfc:	80c0030d 	sth	r3,12(r16)
   28e00:	80800015 	stw	r2,0(r16)
   28e04:	80800415 	stw	r2,16(r16)
   28e08:	84800515 	stw	r18,20(r16)
   28e0c:	98001a1e 	bne	r19,zero,28e78 <__smakebuf_r+0x15c>
   28e10:	dfc01317 	ldw	ra,76(sp)
   28e14:	dcc01217 	ldw	r19,72(sp)
   28e18:	dc801117 	ldw	r18,68(sp)
   28e1c:	dc401017 	ldw	r17,64(sp)
   28e20:	dc000f17 	ldw	r16,60(sp)
   28e24:	dec01404 	addi	sp,sp,80
   28e28:	f800283a 	ret
   28e2c:	288010c4 	addi	r2,r5,67
   28e30:	28800015 	stw	r2,0(r5)
   28e34:	28800415 	stw	r2,16(r5)
   28e38:	00800044 	movi	r2,1
   28e3c:	28800515 	stw	r2,20(r5)
   28e40:	f800283a 	ret
   28e44:	04801004 	movi	r18,64
   28e48:	003fe006 	br	28dcc <_gp+0xfffebd3c>
   28e4c:	81000a17 	ldw	r4,40(r16)
   28e50:	00c000f4 	movhi	r3,3
   28e54:	18ea4304 	addi	r3,r3,-22260
   28e58:	20ffc51e 	bne	r4,r3,28d70 <_gp+0xfffebce0>
   28e5c:	8080030b 	ldhu	r2,12(r16)
   28e60:	04810004 	movi	r18,1024
   28e64:	84801315 	stw	r18,76(r16)
   28e68:	1484b03a 	or	r2,r2,r18
   28e6c:	8080030d 	sth	r2,12(r16)
   28e70:	0027883a 	mov	r19,zero
   28e74:	003fd806 	br	28dd8 <_gp+0xfffebd48>
   28e78:	8140038f 	ldh	r5,14(r16)
   28e7c:	8809883a 	mov	r4,r17
   28e80:	002c4980 	call	2c498 <_isatty_r>
   28e84:	103fe226 	beq	r2,zero,28e10 <_gp+0xfffebd80>
   28e88:	8080030b 	ldhu	r2,12(r16)
   28e8c:	10800054 	ori	r2,r2,1
   28e90:	8080030d 	sth	r2,12(r16)
   28e94:	003fde06 	br	28e10 <_gp+0xfffebd80>
   28e98:	8080030b 	ldhu	r2,12(r16)
   28e9c:	10c0800c 	andi	r3,r2,512
   28ea0:	183fdb1e 	bne	r3,zero,28e10 <_gp+0xfffebd80>
   28ea4:	10800094 	ori	r2,r2,2
   28ea8:	80c010c4 	addi	r3,r16,67
   28eac:	8080030d 	sth	r2,12(r16)
   28eb0:	00800044 	movi	r2,1
   28eb4:	80c00015 	stw	r3,0(r16)
   28eb8:	80c00415 	stw	r3,16(r16)
   28ebc:	80800515 	stw	r2,20(r16)
   28ec0:	003fd306 	br	28e10 <_gp+0xfffebd80>
   28ec4:	04810004 	movi	r18,1024
   28ec8:	003fc306 	br	28dd8 <_gp+0xfffebd48>
   28ecc:	0027883a 	mov	r19,zero
   28ed0:	04810004 	movi	r18,1024
   28ed4:	003fc006 	br	28dd8 <_gp+0xfffebd48>

00028ed8 <memchr>:
   28ed8:	208000cc 	andi	r2,r4,3
   28edc:	280f883a 	mov	r7,r5
   28ee0:	10003426 	beq	r2,zero,28fb4 <memchr+0xdc>
   28ee4:	30bfffc4 	addi	r2,r6,-1
   28ee8:	30001a26 	beq	r6,zero,28f54 <memchr+0x7c>
   28eec:	20c00003 	ldbu	r3,0(r4)
   28ef0:	29803fcc 	andi	r6,r5,255
   28ef4:	30c0051e 	bne	r6,r3,28f0c <memchr+0x34>
   28ef8:	00001806 	br	28f5c <memchr+0x84>
   28efc:	10001526 	beq	r2,zero,28f54 <memchr+0x7c>
   28f00:	20c00003 	ldbu	r3,0(r4)
   28f04:	10bfffc4 	addi	r2,r2,-1
   28f08:	30c01426 	beq	r6,r3,28f5c <memchr+0x84>
   28f0c:	21000044 	addi	r4,r4,1
   28f10:	20c000cc 	andi	r3,r4,3
   28f14:	183ff91e 	bne	r3,zero,28efc <_gp+0xfffebe6c>
   28f18:	020000c4 	movi	r8,3
   28f1c:	40801136 	bltu	r8,r2,28f64 <memchr+0x8c>
   28f20:	10000c26 	beq	r2,zero,28f54 <memchr+0x7c>
   28f24:	20c00003 	ldbu	r3,0(r4)
   28f28:	29403fcc 	andi	r5,r5,255
   28f2c:	28c00b26 	beq	r5,r3,28f5c <memchr+0x84>
   28f30:	20c00044 	addi	r3,r4,1
   28f34:	39803fcc 	andi	r6,r7,255
   28f38:	2089883a 	add	r4,r4,r2
   28f3c:	00000306 	br	28f4c <memchr+0x74>
   28f40:	18c00044 	addi	r3,r3,1
   28f44:	197fffc3 	ldbu	r5,-1(r3)
   28f48:	31400526 	beq	r6,r5,28f60 <memchr+0x88>
   28f4c:	1805883a 	mov	r2,r3
   28f50:	20fffb1e 	bne	r4,r3,28f40 <_gp+0xfffebeb0>
   28f54:	0005883a 	mov	r2,zero
   28f58:	f800283a 	ret
   28f5c:	2005883a 	mov	r2,r4
   28f60:	f800283a 	ret
   28f64:	28c03fcc 	andi	r3,r5,255
   28f68:	1812923a 	slli	r9,r3,8
   28f6c:	02ffbff4 	movhi	r11,65279
   28f70:	02a02074 	movhi	r10,32897
   28f74:	48d2b03a 	or	r9,r9,r3
   28f78:	4806943a 	slli	r3,r9,16
   28f7c:	5affbfc4 	addi	r11,r11,-257
   28f80:	52a02004 	addi	r10,r10,-32640
   28f84:	48d2b03a 	or	r9,r9,r3
   28f88:	20c00017 	ldw	r3,0(r4)
   28f8c:	48c6f03a 	xor	r3,r9,r3
   28f90:	1acd883a 	add	r6,r3,r11
   28f94:	00c6303a 	nor	r3,zero,r3
   28f98:	30c6703a 	and	r3,r6,r3
   28f9c:	1a86703a 	and	r3,r3,r10
   28fa0:	183fe01e 	bne	r3,zero,28f24 <_gp+0xfffebe94>
   28fa4:	10bfff04 	addi	r2,r2,-4
   28fa8:	21000104 	addi	r4,r4,4
   28fac:	40bff636 	bltu	r8,r2,28f88 <_gp+0xfffebef8>
   28fb0:	003fdb06 	br	28f20 <_gp+0xfffebe90>
   28fb4:	3005883a 	mov	r2,r6
   28fb8:	003fd706 	br	28f18 <_gp+0xfffebe88>

00028fbc <memcpy>:
   28fbc:	defffd04 	addi	sp,sp,-12
   28fc0:	dfc00215 	stw	ra,8(sp)
   28fc4:	dc400115 	stw	r17,4(sp)
   28fc8:	dc000015 	stw	r16,0(sp)
   28fcc:	00c003c4 	movi	r3,15
   28fd0:	2005883a 	mov	r2,r4
   28fd4:	1980452e 	bgeu	r3,r6,290ec <memcpy+0x130>
   28fd8:	2906b03a 	or	r3,r5,r4
   28fdc:	18c000cc 	andi	r3,r3,3
   28fe0:	1800441e 	bne	r3,zero,290f4 <memcpy+0x138>
   28fe4:	347ffc04 	addi	r17,r6,-16
   28fe8:	8822d13a 	srli	r17,r17,4
   28fec:	28c00104 	addi	r3,r5,4
   28ff0:	23400104 	addi	r13,r4,4
   28ff4:	8820913a 	slli	r16,r17,4
   28ff8:	2b000204 	addi	r12,r5,8
   28ffc:	22c00204 	addi	r11,r4,8
   29000:	84000504 	addi	r16,r16,20
   29004:	2a800304 	addi	r10,r5,12
   29008:	22400304 	addi	r9,r4,12
   2900c:	2c21883a 	add	r16,r5,r16
   29010:	2811883a 	mov	r8,r5
   29014:	200f883a 	mov	r7,r4
   29018:	41000017 	ldw	r4,0(r8)
   2901c:	1fc00017 	ldw	ra,0(r3)
   29020:	63c00017 	ldw	r15,0(r12)
   29024:	39000015 	stw	r4,0(r7)
   29028:	53800017 	ldw	r14,0(r10)
   2902c:	6fc00015 	stw	ra,0(r13)
   29030:	5bc00015 	stw	r15,0(r11)
   29034:	4b800015 	stw	r14,0(r9)
   29038:	18c00404 	addi	r3,r3,16
   2903c:	39c00404 	addi	r7,r7,16
   29040:	42000404 	addi	r8,r8,16
   29044:	6b400404 	addi	r13,r13,16
   29048:	63000404 	addi	r12,r12,16
   2904c:	5ac00404 	addi	r11,r11,16
   29050:	52800404 	addi	r10,r10,16
   29054:	4a400404 	addi	r9,r9,16
   29058:	1c3fef1e 	bne	r3,r16,29018 <_gp+0xfffebf88>
   2905c:	89c00044 	addi	r7,r17,1
   29060:	380e913a 	slli	r7,r7,4
   29064:	310003cc 	andi	r4,r6,15
   29068:	02c000c4 	movi	r11,3
   2906c:	11c7883a 	add	r3,r2,r7
   29070:	29cb883a 	add	r5,r5,r7
   29074:	5900212e 	bgeu	r11,r4,290fc <memcpy+0x140>
   29078:	1813883a 	mov	r9,r3
   2907c:	2811883a 	mov	r8,r5
   29080:	200f883a 	mov	r7,r4
   29084:	42800017 	ldw	r10,0(r8)
   29088:	4a400104 	addi	r9,r9,4
   2908c:	39ffff04 	addi	r7,r7,-4
   29090:	4abfff15 	stw	r10,-4(r9)
   29094:	42000104 	addi	r8,r8,4
   29098:	59fffa36 	bltu	r11,r7,29084 <_gp+0xfffebff4>
   2909c:	213fff04 	addi	r4,r4,-4
   290a0:	2008d0ba 	srli	r4,r4,2
   290a4:	318000cc 	andi	r6,r6,3
   290a8:	21000044 	addi	r4,r4,1
   290ac:	2109883a 	add	r4,r4,r4
   290b0:	2109883a 	add	r4,r4,r4
   290b4:	1907883a 	add	r3,r3,r4
   290b8:	290b883a 	add	r5,r5,r4
   290bc:	30000626 	beq	r6,zero,290d8 <memcpy+0x11c>
   290c0:	198d883a 	add	r6,r3,r6
   290c4:	29c00003 	ldbu	r7,0(r5)
   290c8:	18c00044 	addi	r3,r3,1
   290cc:	29400044 	addi	r5,r5,1
   290d0:	19ffffc5 	stb	r7,-1(r3)
   290d4:	19bffb1e 	bne	r3,r6,290c4 <_gp+0xfffec034>
   290d8:	dfc00217 	ldw	ra,8(sp)
   290dc:	dc400117 	ldw	r17,4(sp)
   290e0:	dc000017 	ldw	r16,0(sp)
   290e4:	dec00304 	addi	sp,sp,12
   290e8:	f800283a 	ret
   290ec:	2007883a 	mov	r3,r4
   290f0:	003ff206 	br	290bc <_gp+0xfffec02c>
   290f4:	2007883a 	mov	r3,r4
   290f8:	003ff106 	br	290c0 <_gp+0xfffec030>
   290fc:	200d883a 	mov	r6,r4
   29100:	003fee06 	br	290bc <_gp+0xfffec02c>

00029104 <memmove>:
   29104:	2005883a 	mov	r2,r4
   29108:	29000b2e 	bgeu	r5,r4,29138 <memmove+0x34>
   2910c:	298f883a 	add	r7,r5,r6
   29110:	21c0092e 	bgeu	r4,r7,29138 <memmove+0x34>
   29114:	2187883a 	add	r3,r4,r6
   29118:	198bc83a 	sub	r5,r3,r6
   2911c:	30004826 	beq	r6,zero,29240 <memmove+0x13c>
   29120:	39ffffc4 	addi	r7,r7,-1
   29124:	39000003 	ldbu	r4,0(r7)
   29128:	18ffffc4 	addi	r3,r3,-1
   2912c:	19000005 	stb	r4,0(r3)
   29130:	28fffb1e 	bne	r5,r3,29120 <_gp+0xfffec090>
   29134:	f800283a 	ret
   29138:	00c003c4 	movi	r3,15
   2913c:	1980412e 	bgeu	r3,r6,29244 <memmove+0x140>
   29140:	2886b03a 	or	r3,r5,r2
   29144:	18c000cc 	andi	r3,r3,3
   29148:	1800401e 	bne	r3,zero,2924c <memmove+0x148>
   2914c:	33fffc04 	addi	r15,r6,-16
   29150:	781ed13a 	srli	r15,r15,4
   29154:	28c00104 	addi	r3,r5,4
   29158:	13400104 	addi	r13,r2,4
   2915c:	781c913a 	slli	r14,r15,4
   29160:	2b000204 	addi	r12,r5,8
   29164:	12c00204 	addi	r11,r2,8
   29168:	73800504 	addi	r14,r14,20
   2916c:	2a800304 	addi	r10,r5,12
   29170:	12400304 	addi	r9,r2,12
   29174:	2b9d883a 	add	r14,r5,r14
   29178:	2811883a 	mov	r8,r5
   2917c:	100f883a 	mov	r7,r2
   29180:	41000017 	ldw	r4,0(r8)
   29184:	39c00404 	addi	r7,r7,16
   29188:	18c00404 	addi	r3,r3,16
   2918c:	393ffc15 	stw	r4,-16(r7)
   29190:	193ffc17 	ldw	r4,-16(r3)
   29194:	6b400404 	addi	r13,r13,16
   29198:	5ac00404 	addi	r11,r11,16
   2919c:	693ffc15 	stw	r4,-16(r13)
   291a0:	61000017 	ldw	r4,0(r12)
   291a4:	4a400404 	addi	r9,r9,16
   291a8:	42000404 	addi	r8,r8,16
   291ac:	593ffc15 	stw	r4,-16(r11)
   291b0:	51000017 	ldw	r4,0(r10)
   291b4:	63000404 	addi	r12,r12,16
   291b8:	52800404 	addi	r10,r10,16
   291bc:	493ffc15 	stw	r4,-16(r9)
   291c0:	1bbfef1e 	bne	r3,r14,29180 <_gp+0xfffec0f0>
   291c4:	79000044 	addi	r4,r15,1
   291c8:	2008913a 	slli	r4,r4,4
   291cc:	328003cc 	andi	r10,r6,15
   291d0:	02c000c4 	movi	r11,3
   291d4:	1107883a 	add	r3,r2,r4
   291d8:	290b883a 	add	r5,r5,r4
   291dc:	5a801e2e 	bgeu	r11,r10,29258 <memmove+0x154>
   291e0:	1813883a 	mov	r9,r3
   291e4:	2811883a 	mov	r8,r5
   291e8:	500f883a 	mov	r7,r10
   291ec:	41000017 	ldw	r4,0(r8)
   291f0:	4a400104 	addi	r9,r9,4
   291f4:	39ffff04 	addi	r7,r7,-4
   291f8:	493fff15 	stw	r4,-4(r9)
   291fc:	42000104 	addi	r8,r8,4
   29200:	59fffa36 	bltu	r11,r7,291ec <_gp+0xfffec15c>
   29204:	513fff04 	addi	r4,r10,-4
   29208:	2008d0ba 	srli	r4,r4,2
   2920c:	318000cc 	andi	r6,r6,3
   29210:	21000044 	addi	r4,r4,1
   29214:	2109883a 	add	r4,r4,r4
   29218:	2109883a 	add	r4,r4,r4
   2921c:	1907883a 	add	r3,r3,r4
   29220:	290b883a 	add	r5,r5,r4
   29224:	30000b26 	beq	r6,zero,29254 <memmove+0x150>
   29228:	198d883a 	add	r6,r3,r6
   2922c:	29c00003 	ldbu	r7,0(r5)
   29230:	18c00044 	addi	r3,r3,1
   29234:	29400044 	addi	r5,r5,1
   29238:	19ffffc5 	stb	r7,-1(r3)
   2923c:	19bffb1e 	bne	r3,r6,2922c <_gp+0xfffec19c>
   29240:	f800283a 	ret
   29244:	1007883a 	mov	r3,r2
   29248:	003ff606 	br	29224 <_gp+0xfffec194>
   2924c:	1007883a 	mov	r3,r2
   29250:	003ff506 	br	29228 <_gp+0xfffec198>
   29254:	f800283a 	ret
   29258:	500d883a 	mov	r6,r10
   2925c:	003ff106 	br	29224 <_gp+0xfffec194>

00029260 <_Balloc>:
   29260:	20801317 	ldw	r2,76(r4)
   29264:	defffc04 	addi	sp,sp,-16
   29268:	dc400115 	stw	r17,4(sp)
   2926c:	dc000015 	stw	r16,0(sp)
   29270:	dfc00315 	stw	ra,12(sp)
   29274:	dc800215 	stw	r18,8(sp)
   29278:	2023883a 	mov	r17,r4
   2927c:	2821883a 	mov	r16,r5
   29280:	10000f26 	beq	r2,zero,292c0 <_Balloc+0x60>
   29284:	8407883a 	add	r3,r16,r16
   29288:	18c7883a 	add	r3,r3,r3
   2928c:	10c7883a 	add	r3,r2,r3
   29290:	18800017 	ldw	r2,0(r3)
   29294:	10001126 	beq	r2,zero,292dc <_Balloc+0x7c>
   29298:	11000017 	ldw	r4,0(r2)
   2929c:	19000015 	stw	r4,0(r3)
   292a0:	10000415 	stw	zero,16(r2)
   292a4:	10000315 	stw	zero,12(r2)
   292a8:	dfc00317 	ldw	ra,12(sp)
   292ac:	dc800217 	ldw	r18,8(sp)
   292b0:	dc400117 	ldw	r17,4(sp)
   292b4:	dc000017 	ldw	r16,0(sp)
   292b8:	dec00404 	addi	sp,sp,16
   292bc:	f800283a 	ret
   292c0:	01800844 	movi	r6,33
   292c4:	01400104 	movi	r5,4
   292c8:	002c06c0 	call	2c06c <_calloc_r>
   292cc:	88801315 	stw	r2,76(r17)
   292d0:	103fec1e 	bne	r2,zero,29284 <_gp+0xfffec1f4>
   292d4:	0005883a 	mov	r2,zero
   292d8:	003ff306 	br	292a8 <_gp+0xfffec218>
   292dc:	01400044 	movi	r5,1
   292e0:	2c24983a 	sll	r18,r5,r16
   292e4:	8809883a 	mov	r4,r17
   292e8:	91800144 	addi	r6,r18,5
   292ec:	318d883a 	add	r6,r6,r6
   292f0:	318d883a 	add	r6,r6,r6
   292f4:	002c06c0 	call	2c06c <_calloc_r>
   292f8:	103ff626 	beq	r2,zero,292d4 <_gp+0xfffec244>
   292fc:	14000115 	stw	r16,4(r2)
   29300:	14800215 	stw	r18,8(r2)
   29304:	003fe606 	br	292a0 <_gp+0xfffec210>

00029308 <_Bfree>:
   29308:	28000826 	beq	r5,zero,2932c <_Bfree+0x24>
   2930c:	28c00117 	ldw	r3,4(r5)
   29310:	20801317 	ldw	r2,76(r4)
   29314:	18c7883a 	add	r3,r3,r3
   29318:	18c7883a 	add	r3,r3,r3
   2931c:	10c5883a 	add	r2,r2,r3
   29320:	10c00017 	ldw	r3,0(r2)
   29324:	28c00015 	stw	r3,0(r5)
   29328:	11400015 	stw	r5,0(r2)
   2932c:	f800283a 	ret

00029330 <__multadd>:
   29330:	defffa04 	addi	sp,sp,-24
   29334:	dc800315 	stw	r18,12(sp)
   29338:	dc400215 	stw	r17,8(sp)
   2933c:	dc000115 	stw	r16,4(sp)
   29340:	2823883a 	mov	r17,r5
   29344:	2c000417 	ldw	r16,16(r5)
   29348:	dfc00515 	stw	ra,20(sp)
   2934c:	dcc00415 	stw	r19,16(sp)
   29350:	2025883a 	mov	r18,r4
   29354:	29400504 	addi	r5,r5,20
   29358:	0011883a 	mov	r8,zero
   2935c:	28c00017 	ldw	r3,0(r5)
   29360:	29400104 	addi	r5,r5,4
   29364:	42000044 	addi	r8,r8,1
   29368:	18bfffcc 	andi	r2,r3,65535
   2936c:	1185383a 	mul	r2,r2,r6
   29370:	1806d43a 	srli	r3,r3,16
   29374:	11cf883a 	add	r7,r2,r7
   29378:	3808d43a 	srli	r4,r7,16
   2937c:	1987383a 	mul	r3,r3,r6
   29380:	38bfffcc 	andi	r2,r7,65535
   29384:	1907883a 	add	r3,r3,r4
   29388:	1808943a 	slli	r4,r3,16
   2938c:	180ed43a 	srli	r7,r3,16
   29390:	2085883a 	add	r2,r4,r2
   29394:	28bfff15 	stw	r2,-4(r5)
   29398:	443ff016 	blt	r8,r16,2935c <_gp+0xfffec2cc>
   2939c:	38000926 	beq	r7,zero,293c4 <__multadd+0x94>
   293a0:	88800217 	ldw	r2,8(r17)
   293a4:	80800f0e 	bge	r16,r2,293e4 <__multadd+0xb4>
   293a8:	80800144 	addi	r2,r16,5
   293ac:	1085883a 	add	r2,r2,r2
   293b0:	1085883a 	add	r2,r2,r2
   293b4:	8885883a 	add	r2,r17,r2
   293b8:	11c00015 	stw	r7,0(r2)
   293bc:	84000044 	addi	r16,r16,1
   293c0:	8c000415 	stw	r16,16(r17)
   293c4:	8805883a 	mov	r2,r17
   293c8:	dfc00517 	ldw	ra,20(sp)
   293cc:	dcc00417 	ldw	r19,16(sp)
   293d0:	dc800317 	ldw	r18,12(sp)
   293d4:	dc400217 	ldw	r17,8(sp)
   293d8:	dc000117 	ldw	r16,4(sp)
   293dc:	dec00604 	addi	sp,sp,24
   293e0:	f800283a 	ret
   293e4:	89400117 	ldw	r5,4(r17)
   293e8:	9009883a 	mov	r4,r18
   293ec:	d9c00015 	stw	r7,0(sp)
   293f0:	29400044 	addi	r5,r5,1
   293f4:	00292600 	call	29260 <_Balloc>
   293f8:	89800417 	ldw	r6,16(r17)
   293fc:	89400304 	addi	r5,r17,12
   29400:	11000304 	addi	r4,r2,12
   29404:	31800084 	addi	r6,r6,2
   29408:	318d883a 	add	r6,r6,r6
   2940c:	318d883a 	add	r6,r6,r6
   29410:	1027883a 	mov	r19,r2
   29414:	0028fbc0 	call	28fbc <memcpy>
   29418:	d9c00017 	ldw	r7,0(sp)
   2941c:	88000a26 	beq	r17,zero,29448 <__multadd+0x118>
   29420:	88c00117 	ldw	r3,4(r17)
   29424:	90801317 	ldw	r2,76(r18)
   29428:	18c7883a 	add	r3,r3,r3
   2942c:	18c7883a 	add	r3,r3,r3
   29430:	10c5883a 	add	r2,r2,r3
   29434:	10c00017 	ldw	r3,0(r2)
   29438:	88c00015 	stw	r3,0(r17)
   2943c:	14400015 	stw	r17,0(r2)
   29440:	9823883a 	mov	r17,r19
   29444:	003fd806 	br	293a8 <_gp+0xfffec318>
   29448:	9823883a 	mov	r17,r19
   2944c:	003fd606 	br	293a8 <_gp+0xfffec318>

00029450 <__s2b>:
   29450:	defff904 	addi	sp,sp,-28
   29454:	dc400115 	stw	r17,4(sp)
   29458:	dc000015 	stw	r16,0(sp)
   2945c:	2023883a 	mov	r17,r4
   29460:	2821883a 	mov	r16,r5
   29464:	39000204 	addi	r4,r7,8
   29468:	01400244 	movi	r5,9
   2946c:	dcc00315 	stw	r19,12(sp)
   29470:	dc800215 	stw	r18,8(sp)
   29474:	dfc00615 	stw	ra,24(sp)
   29478:	dd400515 	stw	r21,20(sp)
   2947c:	dd000415 	stw	r20,16(sp)
   29480:	3825883a 	mov	r18,r7
   29484:	3027883a 	mov	r19,r6
   29488:	00228800 	call	22880 <__divsi3>
   2948c:	00c00044 	movi	r3,1
   29490:	000b883a 	mov	r5,zero
   29494:	1880030e 	bge	r3,r2,294a4 <__s2b+0x54>
   29498:	18c7883a 	add	r3,r3,r3
   2949c:	29400044 	addi	r5,r5,1
   294a0:	18bffd16 	blt	r3,r2,29498 <_gp+0xfffec408>
   294a4:	8809883a 	mov	r4,r17
   294a8:	00292600 	call	29260 <_Balloc>
   294ac:	d8c00717 	ldw	r3,28(sp)
   294b0:	10c00515 	stw	r3,20(r2)
   294b4:	00c00044 	movi	r3,1
   294b8:	10c00415 	stw	r3,16(r2)
   294bc:	00c00244 	movi	r3,9
   294c0:	1cc0210e 	bge	r3,r19,29548 <__s2b+0xf8>
   294c4:	80eb883a 	add	r21,r16,r3
   294c8:	a829883a 	mov	r20,r21
   294cc:	84e1883a 	add	r16,r16,r19
   294d0:	a1c00007 	ldb	r7,0(r20)
   294d4:	01800284 	movi	r6,10
   294d8:	a5000044 	addi	r20,r20,1
   294dc:	100b883a 	mov	r5,r2
   294e0:	39fff404 	addi	r7,r7,-48
   294e4:	8809883a 	mov	r4,r17
   294e8:	00293300 	call	29330 <__multadd>
   294ec:	a43ff81e 	bne	r20,r16,294d0 <_gp+0xfffec440>
   294f0:	ace1883a 	add	r16,r21,r19
   294f4:	843ffe04 	addi	r16,r16,-8
   294f8:	9c800a0e 	bge	r19,r18,29524 <__s2b+0xd4>
   294fc:	94e5c83a 	sub	r18,r18,r19
   29500:	84a5883a 	add	r18,r16,r18
   29504:	81c00007 	ldb	r7,0(r16)
   29508:	01800284 	movi	r6,10
   2950c:	84000044 	addi	r16,r16,1
   29510:	100b883a 	mov	r5,r2
   29514:	39fff404 	addi	r7,r7,-48
   29518:	8809883a 	mov	r4,r17
   2951c:	00293300 	call	29330 <__multadd>
   29520:	84bff81e 	bne	r16,r18,29504 <_gp+0xfffec474>
   29524:	dfc00617 	ldw	ra,24(sp)
   29528:	dd400517 	ldw	r21,20(sp)
   2952c:	dd000417 	ldw	r20,16(sp)
   29530:	dcc00317 	ldw	r19,12(sp)
   29534:	dc800217 	ldw	r18,8(sp)
   29538:	dc400117 	ldw	r17,4(sp)
   2953c:	dc000017 	ldw	r16,0(sp)
   29540:	dec00704 	addi	sp,sp,28
   29544:	f800283a 	ret
   29548:	84000284 	addi	r16,r16,10
   2954c:	1827883a 	mov	r19,r3
   29550:	003fe906 	br	294f8 <_gp+0xfffec468>

00029554 <__hi0bits>:
   29554:	20bfffec 	andhi	r2,r4,65535
   29558:	1000141e 	bne	r2,zero,295ac <__hi0bits+0x58>
   2955c:	2008943a 	slli	r4,r4,16
   29560:	00800404 	movi	r2,16
   29564:	20ffc02c 	andhi	r3,r4,65280
   29568:	1800021e 	bne	r3,zero,29574 <__hi0bits+0x20>
   2956c:	2008923a 	slli	r4,r4,8
   29570:	10800204 	addi	r2,r2,8
   29574:	20fc002c 	andhi	r3,r4,61440
   29578:	1800021e 	bne	r3,zero,29584 <__hi0bits+0x30>
   2957c:	2008913a 	slli	r4,r4,4
   29580:	10800104 	addi	r2,r2,4
   29584:	20f0002c 	andhi	r3,r4,49152
   29588:	1800031e 	bne	r3,zero,29598 <__hi0bits+0x44>
   2958c:	2109883a 	add	r4,r4,r4
   29590:	10800084 	addi	r2,r2,2
   29594:	2109883a 	add	r4,r4,r4
   29598:	20000316 	blt	r4,zero,295a8 <__hi0bits+0x54>
   2959c:	2110002c 	andhi	r4,r4,16384
   295a0:	2000041e 	bne	r4,zero,295b4 <__hi0bits+0x60>
   295a4:	00800804 	movi	r2,32
   295a8:	f800283a 	ret
   295ac:	0005883a 	mov	r2,zero
   295b0:	003fec06 	br	29564 <_gp+0xfffec4d4>
   295b4:	10800044 	addi	r2,r2,1
   295b8:	f800283a 	ret

000295bc <__lo0bits>:
   295bc:	20c00017 	ldw	r3,0(r4)
   295c0:	188001cc 	andi	r2,r3,7
   295c4:	10000826 	beq	r2,zero,295e8 <__lo0bits+0x2c>
   295c8:	1880004c 	andi	r2,r3,1
   295cc:	1000211e 	bne	r2,zero,29654 <__lo0bits+0x98>
   295d0:	1880008c 	andi	r2,r3,2
   295d4:	1000211e 	bne	r2,zero,2965c <__lo0bits+0xa0>
   295d8:	1806d0ba 	srli	r3,r3,2
   295dc:	00800084 	movi	r2,2
   295e0:	20c00015 	stw	r3,0(r4)
   295e4:	f800283a 	ret
   295e8:	18bfffcc 	andi	r2,r3,65535
   295ec:	10001326 	beq	r2,zero,2963c <__lo0bits+0x80>
   295f0:	0005883a 	mov	r2,zero
   295f4:	19403fcc 	andi	r5,r3,255
   295f8:	2800021e 	bne	r5,zero,29604 <__lo0bits+0x48>
   295fc:	1806d23a 	srli	r3,r3,8
   29600:	10800204 	addi	r2,r2,8
   29604:	194003cc 	andi	r5,r3,15
   29608:	2800021e 	bne	r5,zero,29614 <__lo0bits+0x58>
   2960c:	1806d13a 	srli	r3,r3,4
   29610:	10800104 	addi	r2,r2,4
   29614:	194000cc 	andi	r5,r3,3
   29618:	2800021e 	bne	r5,zero,29624 <__lo0bits+0x68>
   2961c:	1806d0ba 	srli	r3,r3,2
   29620:	10800084 	addi	r2,r2,2
   29624:	1940004c 	andi	r5,r3,1
   29628:	2800081e 	bne	r5,zero,2964c <__lo0bits+0x90>
   2962c:	1806d07a 	srli	r3,r3,1
   29630:	1800051e 	bne	r3,zero,29648 <__lo0bits+0x8c>
   29634:	00800804 	movi	r2,32
   29638:	f800283a 	ret
   2963c:	1806d43a 	srli	r3,r3,16
   29640:	00800404 	movi	r2,16
   29644:	003feb06 	br	295f4 <_gp+0xfffec564>
   29648:	10800044 	addi	r2,r2,1
   2964c:	20c00015 	stw	r3,0(r4)
   29650:	f800283a 	ret
   29654:	0005883a 	mov	r2,zero
   29658:	f800283a 	ret
   2965c:	1806d07a 	srli	r3,r3,1
   29660:	00800044 	movi	r2,1
   29664:	20c00015 	stw	r3,0(r4)
   29668:	f800283a 	ret

0002966c <__i2b>:
   2966c:	defffd04 	addi	sp,sp,-12
   29670:	dc000015 	stw	r16,0(sp)
   29674:	04000044 	movi	r16,1
   29678:	dc400115 	stw	r17,4(sp)
   2967c:	2823883a 	mov	r17,r5
   29680:	800b883a 	mov	r5,r16
   29684:	dfc00215 	stw	ra,8(sp)
   29688:	00292600 	call	29260 <_Balloc>
   2968c:	14400515 	stw	r17,20(r2)
   29690:	14000415 	stw	r16,16(r2)
   29694:	dfc00217 	ldw	ra,8(sp)
   29698:	dc400117 	ldw	r17,4(sp)
   2969c:	dc000017 	ldw	r16,0(sp)
   296a0:	dec00304 	addi	sp,sp,12
   296a4:	f800283a 	ret

000296a8 <__multiply>:
   296a8:	defffa04 	addi	sp,sp,-24
   296ac:	dcc00315 	stw	r19,12(sp)
   296b0:	dc800215 	stw	r18,8(sp)
   296b4:	34c00417 	ldw	r19,16(r6)
   296b8:	2c800417 	ldw	r18,16(r5)
   296bc:	dd000415 	stw	r20,16(sp)
   296c0:	dc400115 	stw	r17,4(sp)
   296c4:	dfc00515 	stw	ra,20(sp)
   296c8:	dc000015 	stw	r16,0(sp)
   296cc:	2829883a 	mov	r20,r5
   296d0:	3023883a 	mov	r17,r6
   296d4:	94c0050e 	bge	r18,r19,296ec <__multiply+0x44>
   296d8:	9007883a 	mov	r3,r18
   296dc:	3029883a 	mov	r20,r6
   296e0:	9825883a 	mov	r18,r19
   296e4:	2823883a 	mov	r17,r5
   296e8:	1827883a 	mov	r19,r3
   296ec:	a0800217 	ldw	r2,8(r20)
   296f0:	94e1883a 	add	r16,r18,r19
   296f4:	a1400117 	ldw	r5,4(r20)
   296f8:	1400010e 	bge	r2,r16,29700 <__multiply+0x58>
   296fc:	29400044 	addi	r5,r5,1
   29700:	00292600 	call	29260 <_Balloc>
   29704:	8415883a 	add	r10,r16,r16
   29708:	12c00504 	addi	r11,r2,20
   2970c:	5295883a 	add	r10,r10,r10
   29710:	5a95883a 	add	r10,r11,r10
   29714:	5807883a 	mov	r3,r11
   29718:	5a80032e 	bgeu	r11,r10,29728 <__multiply+0x80>
   2971c:	18000015 	stw	zero,0(r3)
   29720:	18c00104 	addi	r3,r3,4
   29724:	1abffd36 	bltu	r3,r10,2971c <_gp+0xfffec68c>
   29728:	9ce7883a 	add	r19,r19,r19
   2972c:	94a5883a 	add	r18,r18,r18
   29730:	89800504 	addi	r6,r17,20
   29734:	9ce7883a 	add	r19,r19,r19
   29738:	a3400504 	addi	r13,r20,20
   2973c:	94a5883a 	add	r18,r18,r18
   29740:	34d9883a 	add	r12,r6,r19
   29744:	6c93883a 	add	r9,r13,r18
   29748:	3300422e 	bgeu	r6,r12,29854 <__multiply+0x1ac>
   2974c:	37c00017 	ldw	ra,0(r6)
   29750:	fbffffcc 	andi	r15,ra,65535
   29754:	78001b26 	beq	r15,zero,297c4 <__multiply+0x11c>
   29758:	5811883a 	mov	r8,r11
   2975c:	681d883a 	mov	r14,r13
   29760:	000f883a 	mov	r7,zero
   29764:	71000017 	ldw	r4,0(r14)
   29768:	40c00017 	ldw	r3,0(r8)
   2976c:	73800104 	addi	r14,r14,4
   29770:	217fffcc 	andi	r5,r4,65535
   29774:	2bcb383a 	mul	r5,r5,r15
   29778:	2008d43a 	srli	r4,r4,16
   2977c:	1c7fffcc 	andi	r17,r3,65535
   29780:	2c4b883a 	add	r5,r5,r17
   29784:	29cb883a 	add	r5,r5,r7
   29788:	23c9383a 	mul	r4,r4,r15
   2978c:	1806d43a 	srli	r3,r3,16
   29790:	280ed43a 	srli	r7,r5,16
   29794:	297fffcc 	andi	r5,r5,65535
   29798:	20c7883a 	add	r3,r4,r3
   2979c:	19c7883a 	add	r3,r3,r7
   297a0:	1808943a 	slli	r4,r3,16
   297a4:	4023883a 	mov	r17,r8
   297a8:	180ed43a 	srli	r7,r3,16
   297ac:	214ab03a 	or	r5,r4,r5
   297b0:	41400015 	stw	r5,0(r8)
   297b4:	42000104 	addi	r8,r8,4
   297b8:	727fea36 	bltu	r14,r9,29764 <_gp+0xfffec6d4>
   297bc:	89c00115 	stw	r7,4(r17)
   297c0:	37c00017 	ldw	ra,0(r6)
   297c4:	f83ed43a 	srli	ra,ra,16
   297c8:	f8001f26 	beq	ra,zero,29848 <__multiply+0x1a0>
   297cc:	58c00017 	ldw	r3,0(r11)
   297d0:	681d883a 	mov	r14,r13
   297d4:	581f883a 	mov	r15,r11
   297d8:	1811883a 	mov	r8,r3
   297dc:	5825883a 	mov	r18,r11
   297e0:	000f883a 	mov	r7,zero
   297e4:	00000106 	br	297ec <__multiply+0x144>
   297e8:	8825883a 	mov	r18,r17
   297ec:	7140000b 	ldhu	r5,0(r14)
   297f0:	4010d43a 	srli	r8,r8,16
   297f4:	193fffcc 	andi	r4,r3,65535
   297f8:	2fcb383a 	mul	r5,r5,ra
   297fc:	7bc00104 	addi	r15,r15,4
   29800:	73800104 	addi	r14,r14,4
   29804:	2a0b883a 	add	r5,r5,r8
   29808:	29cb883a 	add	r5,r5,r7
   2980c:	2806943a 	slli	r3,r5,16
   29810:	94400104 	addi	r17,r18,4
   29814:	280ad43a 	srli	r5,r5,16
   29818:	1908b03a 	or	r4,r3,r4
   2981c:	793fff15 	stw	r4,-4(r15)
   29820:	70ffff17 	ldw	r3,-4(r14)
   29824:	8a000017 	ldw	r8,0(r17)
   29828:	1806d43a 	srli	r3,r3,16
   2982c:	413fffcc 	andi	r4,r8,65535
   29830:	1fc7383a 	mul	r3,r3,ra
   29834:	1907883a 	add	r3,r3,r4
   29838:	1947883a 	add	r3,r3,r5
   2983c:	180ed43a 	srli	r7,r3,16
   29840:	727fe936 	bltu	r14,r9,297e8 <_gp+0xfffec758>
   29844:	90c00115 	stw	r3,4(r18)
   29848:	31800104 	addi	r6,r6,4
   2984c:	5ac00104 	addi	r11,r11,4
   29850:	333fbe36 	bltu	r6,r12,2974c <_gp+0xfffec6bc>
   29854:	0400090e 	bge	zero,r16,2987c <__multiply+0x1d4>
   29858:	50ffff17 	ldw	r3,-4(r10)
   2985c:	52bfff04 	addi	r10,r10,-4
   29860:	18000326 	beq	r3,zero,29870 <__multiply+0x1c8>
   29864:	00000506 	br	2987c <__multiply+0x1d4>
   29868:	50c00017 	ldw	r3,0(r10)
   2986c:	1800031e 	bne	r3,zero,2987c <__multiply+0x1d4>
   29870:	843fffc4 	addi	r16,r16,-1
   29874:	52bfff04 	addi	r10,r10,-4
   29878:	803ffb1e 	bne	r16,zero,29868 <_gp+0xfffec7d8>
   2987c:	14000415 	stw	r16,16(r2)
   29880:	dfc00517 	ldw	ra,20(sp)
   29884:	dd000417 	ldw	r20,16(sp)
   29888:	dcc00317 	ldw	r19,12(sp)
   2988c:	dc800217 	ldw	r18,8(sp)
   29890:	dc400117 	ldw	r17,4(sp)
   29894:	dc000017 	ldw	r16,0(sp)
   29898:	dec00604 	addi	sp,sp,24
   2989c:	f800283a 	ret

000298a0 <__pow5mult>:
   298a0:	defffa04 	addi	sp,sp,-24
   298a4:	dcc00315 	stw	r19,12(sp)
   298a8:	dc000015 	stw	r16,0(sp)
   298ac:	dfc00515 	stw	ra,20(sp)
   298b0:	dd000415 	stw	r20,16(sp)
   298b4:	dc800215 	stw	r18,8(sp)
   298b8:	dc400115 	stw	r17,4(sp)
   298bc:	308000cc 	andi	r2,r6,3
   298c0:	3021883a 	mov	r16,r6
   298c4:	2027883a 	mov	r19,r4
   298c8:	10002f1e 	bne	r2,zero,29988 <__pow5mult+0xe8>
   298cc:	2825883a 	mov	r18,r5
   298d0:	8021d0ba 	srai	r16,r16,2
   298d4:	80001a26 	beq	r16,zero,29940 <__pow5mult+0xa0>
   298d8:	9c401217 	ldw	r17,72(r19)
   298dc:	8800061e 	bne	r17,zero,298f8 <__pow5mult+0x58>
   298e0:	00003406 	br	299b4 <__pow5mult+0x114>
   298e4:	8021d07a 	srai	r16,r16,1
   298e8:	80001526 	beq	r16,zero,29940 <__pow5mult+0xa0>
   298ec:	88800017 	ldw	r2,0(r17)
   298f0:	10001c26 	beq	r2,zero,29964 <__pow5mult+0xc4>
   298f4:	1023883a 	mov	r17,r2
   298f8:	8080004c 	andi	r2,r16,1
   298fc:	103ff926 	beq	r2,zero,298e4 <_gp+0xfffec854>
   29900:	880d883a 	mov	r6,r17
   29904:	900b883a 	mov	r5,r18
   29908:	9809883a 	mov	r4,r19
   2990c:	00296a80 	call	296a8 <__multiply>
   29910:	90001b26 	beq	r18,zero,29980 <__pow5mult+0xe0>
   29914:	91000117 	ldw	r4,4(r18)
   29918:	98c01317 	ldw	r3,76(r19)
   2991c:	8021d07a 	srai	r16,r16,1
   29920:	2109883a 	add	r4,r4,r4
   29924:	2109883a 	add	r4,r4,r4
   29928:	1907883a 	add	r3,r3,r4
   2992c:	19000017 	ldw	r4,0(r3)
   29930:	91000015 	stw	r4,0(r18)
   29934:	1c800015 	stw	r18,0(r3)
   29938:	1025883a 	mov	r18,r2
   2993c:	803feb1e 	bne	r16,zero,298ec <_gp+0xfffec85c>
   29940:	9005883a 	mov	r2,r18
   29944:	dfc00517 	ldw	ra,20(sp)
   29948:	dd000417 	ldw	r20,16(sp)
   2994c:	dcc00317 	ldw	r19,12(sp)
   29950:	dc800217 	ldw	r18,8(sp)
   29954:	dc400117 	ldw	r17,4(sp)
   29958:	dc000017 	ldw	r16,0(sp)
   2995c:	dec00604 	addi	sp,sp,24
   29960:	f800283a 	ret
   29964:	880d883a 	mov	r6,r17
   29968:	880b883a 	mov	r5,r17
   2996c:	9809883a 	mov	r4,r19
   29970:	00296a80 	call	296a8 <__multiply>
   29974:	88800015 	stw	r2,0(r17)
   29978:	10000015 	stw	zero,0(r2)
   2997c:	003fdd06 	br	298f4 <_gp+0xfffec864>
   29980:	1025883a 	mov	r18,r2
   29984:	003fd706 	br	298e4 <_gp+0xfffec854>
   29988:	10bfffc4 	addi	r2,r2,-1
   2998c:	1085883a 	add	r2,r2,r2
   29990:	00c000f4 	movhi	r3,3
   29994:	18cca604 	addi	r3,r3,12952
   29998:	1085883a 	add	r2,r2,r2
   2999c:	1885883a 	add	r2,r3,r2
   299a0:	11800017 	ldw	r6,0(r2)
   299a4:	000f883a 	mov	r7,zero
   299a8:	00293300 	call	29330 <__multadd>
   299ac:	1025883a 	mov	r18,r2
   299b0:	003fc706 	br	298d0 <_gp+0xfffec840>
   299b4:	05000044 	movi	r20,1
   299b8:	a00b883a 	mov	r5,r20
   299bc:	9809883a 	mov	r4,r19
   299c0:	00292600 	call	29260 <_Balloc>
   299c4:	1023883a 	mov	r17,r2
   299c8:	00809c44 	movi	r2,625
   299cc:	88800515 	stw	r2,20(r17)
   299d0:	8d000415 	stw	r20,16(r17)
   299d4:	9c401215 	stw	r17,72(r19)
   299d8:	88000015 	stw	zero,0(r17)
   299dc:	003fc606 	br	298f8 <_gp+0xfffec868>

000299e0 <__lshift>:
   299e0:	defff904 	addi	sp,sp,-28
   299e4:	dd400515 	stw	r21,20(sp)
   299e8:	dcc00315 	stw	r19,12(sp)
   299ec:	302bd17a 	srai	r21,r6,5
   299f0:	2cc00417 	ldw	r19,16(r5)
   299f4:	28800217 	ldw	r2,8(r5)
   299f8:	dd000415 	stw	r20,16(sp)
   299fc:	ace7883a 	add	r19,r21,r19
   29a00:	dc800215 	stw	r18,8(sp)
   29a04:	dc400115 	stw	r17,4(sp)
   29a08:	dc000015 	stw	r16,0(sp)
   29a0c:	dfc00615 	stw	ra,24(sp)
   29a10:	9c000044 	addi	r16,r19,1
   29a14:	2823883a 	mov	r17,r5
   29a18:	3029883a 	mov	r20,r6
   29a1c:	2025883a 	mov	r18,r4
   29a20:	29400117 	ldw	r5,4(r5)
   29a24:	1400030e 	bge	r2,r16,29a34 <__lshift+0x54>
   29a28:	1085883a 	add	r2,r2,r2
   29a2c:	29400044 	addi	r5,r5,1
   29a30:	143ffd16 	blt	r2,r16,29a28 <_gp+0xfffec998>
   29a34:	9009883a 	mov	r4,r18
   29a38:	00292600 	call	29260 <_Balloc>
   29a3c:	10c00504 	addi	r3,r2,20
   29a40:	0540070e 	bge	zero,r21,29a60 <__lshift+0x80>
   29a44:	ad6b883a 	add	r21,r21,r21
   29a48:	ad6b883a 	add	r21,r21,r21
   29a4c:	1809883a 	mov	r4,r3
   29a50:	1d47883a 	add	r3,r3,r21
   29a54:	20000015 	stw	zero,0(r4)
   29a58:	21000104 	addi	r4,r4,4
   29a5c:	193ffd1e 	bne	r3,r4,29a54 <_gp+0xfffec9c4>
   29a60:	8a000417 	ldw	r8,16(r17)
   29a64:	89000504 	addi	r4,r17,20
   29a68:	a18007cc 	andi	r6,r20,31
   29a6c:	4211883a 	add	r8,r8,r8
   29a70:	4211883a 	add	r8,r8,r8
   29a74:	2211883a 	add	r8,r4,r8
   29a78:	30002326 	beq	r6,zero,29b08 <__lshift+0x128>
   29a7c:	02400804 	movi	r9,32
   29a80:	4993c83a 	sub	r9,r9,r6
   29a84:	000b883a 	mov	r5,zero
   29a88:	21c00017 	ldw	r7,0(r4)
   29a8c:	1815883a 	mov	r10,r3
   29a90:	18c00104 	addi	r3,r3,4
   29a94:	398e983a 	sll	r7,r7,r6
   29a98:	21000104 	addi	r4,r4,4
   29a9c:	394ab03a 	or	r5,r7,r5
   29aa0:	197fff15 	stw	r5,-4(r3)
   29aa4:	217fff17 	ldw	r5,-4(r4)
   29aa8:	2a4ad83a 	srl	r5,r5,r9
   29aac:	223ff636 	bltu	r4,r8,29a88 <_gp+0xfffec9f8>
   29ab0:	51400115 	stw	r5,4(r10)
   29ab4:	28001a1e 	bne	r5,zero,29b20 <__lshift+0x140>
   29ab8:	843fffc4 	addi	r16,r16,-1
   29abc:	14000415 	stw	r16,16(r2)
   29ac0:	88000826 	beq	r17,zero,29ae4 <__lshift+0x104>
   29ac4:	89000117 	ldw	r4,4(r17)
   29ac8:	90c01317 	ldw	r3,76(r18)
   29acc:	2109883a 	add	r4,r4,r4
   29ad0:	2109883a 	add	r4,r4,r4
   29ad4:	1907883a 	add	r3,r3,r4
   29ad8:	19000017 	ldw	r4,0(r3)
   29adc:	89000015 	stw	r4,0(r17)
   29ae0:	1c400015 	stw	r17,0(r3)
   29ae4:	dfc00617 	ldw	ra,24(sp)
   29ae8:	dd400517 	ldw	r21,20(sp)
   29aec:	dd000417 	ldw	r20,16(sp)
   29af0:	dcc00317 	ldw	r19,12(sp)
   29af4:	dc800217 	ldw	r18,8(sp)
   29af8:	dc400117 	ldw	r17,4(sp)
   29afc:	dc000017 	ldw	r16,0(sp)
   29b00:	dec00704 	addi	sp,sp,28
   29b04:	f800283a 	ret
   29b08:	21400017 	ldw	r5,0(r4)
   29b0c:	18c00104 	addi	r3,r3,4
   29b10:	21000104 	addi	r4,r4,4
   29b14:	197fff15 	stw	r5,-4(r3)
   29b18:	223ffb36 	bltu	r4,r8,29b08 <_gp+0xfffeca78>
   29b1c:	003fe606 	br	29ab8 <_gp+0xfffeca28>
   29b20:	9c000084 	addi	r16,r19,2
   29b24:	003fe406 	br	29ab8 <_gp+0xfffeca28>

00029b28 <__mcmp>:
   29b28:	20800417 	ldw	r2,16(r4)
   29b2c:	28c00417 	ldw	r3,16(r5)
   29b30:	10c5c83a 	sub	r2,r2,r3
   29b34:	1000111e 	bne	r2,zero,29b7c <__mcmp+0x54>
   29b38:	18c7883a 	add	r3,r3,r3
   29b3c:	18c7883a 	add	r3,r3,r3
   29b40:	21000504 	addi	r4,r4,20
   29b44:	29400504 	addi	r5,r5,20
   29b48:	20c5883a 	add	r2,r4,r3
   29b4c:	28cb883a 	add	r5,r5,r3
   29b50:	00000106 	br	29b58 <__mcmp+0x30>
   29b54:	20800a2e 	bgeu	r4,r2,29b80 <__mcmp+0x58>
   29b58:	10bfff04 	addi	r2,r2,-4
   29b5c:	297fff04 	addi	r5,r5,-4
   29b60:	11800017 	ldw	r6,0(r2)
   29b64:	28c00017 	ldw	r3,0(r5)
   29b68:	30fffa26 	beq	r6,r3,29b54 <_gp+0xfffecac4>
   29b6c:	30c00236 	bltu	r6,r3,29b78 <__mcmp+0x50>
   29b70:	00800044 	movi	r2,1
   29b74:	f800283a 	ret
   29b78:	00bfffc4 	movi	r2,-1
   29b7c:	f800283a 	ret
   29b80:	0005883a 	mov	r2,zero
   29b84:	f800283a 	ret

00029b88 <__mdiff>:
   29b88:	28c00417 	ldw	r3,16(r5)
   29b8c:	30800417 	ldw	r2,16(r6)
   29b90:	defffa04 	addi	sp,sp,-24
   29b94:	dcc00315 	stw	r19,12(sp)
   29b98:	dc800215 	stw	r18,8(sp)
   29b9c:	dfc00515 	stw	ra,20(sp)
   29ba0:	dd000415 	stw	r20,16(sp)
   29ba4:	dc400115 	stw	r17,4(sp)
   29ba8:	dc000015 	stw	r16,0(sp)
   29bac:	1887c83a 	sub	r3,r3,r2
   29bb0:	2825883a 	mov	r18,r5
   29bb4:	3027883a 	mov	r19,r6
   29bb8:	1800141e 	bne	r3,zero,29c0c <__mdiff+0x84>
   29bbc:	1085883a 	add	r2,r2,r2
   29bc0:	1085883a 	add	r2,r2,r2
   29bc4:	2a000504 	addi	r8,r5,20
   29bc8:	34000504 	addi	r16,r6,20
   29bcc:	4087883a 	add	r3,r8,r2
   29bd0:	8085883a 	add	r2,r16,r2
   29bd4:	00000106 	br	29bdc <__mdiff+0x54>
   29bd8:	40c0592e 	bgeu	r8,r3,29d40 <__mdiff+0x1b8>
   29bdc:	18ffff04 	addi	r3,r3,-4
   29be0:	10bfff04 	addi	r2,r2,-4
   29be4:	19c00017 	ldw	r7,0(r3)
   29be8:	11400017 	ldw	r5,0(r2)
   29bec:	397ffa26 	beq	r7,r5,29bd8 <_gp+0xfffecb48>
   29bf0:	3940592e 	bgeu	r7,r5,29d58 <__mdiff+0x1d0>
   29bf4:	9005883a 	mov	r2,r18
   29bf8:	4023883a 	mov	r17,r8
   29bfc:	9825883a 	mov	r18,r19
   29c00:	05000044 	movi	r20,1
   29c04:	1027883a 	mov	r19,r2
   29c08:	00000406 	br	29c1c <__mdiff+0x94>
   29c0c:	18005616 	blt	r3,zero,29d68 <__mdiff+0x1e0>
   29c10:	34400504 	addi	r17,r6,20
   29c14:	2c000504 	addi	r16,r5,20
   29c18:	0029883a 	mov	r20,zero
   29c1c:	91400117 	ldw	r5,4(r18)
   29c20:	00292600 	call	29260 <_Balloc>
   29c24:	92400417 	ldw	r9,16(r18)
   29c28:	9b000417 	ldw	r12,16(r19)
   29c2c:	12c00504 	addi	r11,r2,20
   29c30:	4a51883a 	add	r8,r9,r9
   29c34:	6319883a 	add	r12,r12,r12
   29c38:	4211883a 	add	r8,r8,r8
   29c3c:	6319883a 	add	r12,r12,r12
   29c40:	15000315 	stw	r20,12(r2)
   29c44:	8211883a 	add	r8,r16,r8
   29c48:	8b19883a 	add	r12,r17,r12
   29c4c:	0007883a 	mov	r3,zero
   29c50:	81400017 	ldw	r5,0(r16)
   29c54:	89c00017 	ldw	r7,0(r17)
   29c58:	59800104 	addi	r6,r11,4
   29c5c:	293fffcc 	andi	r4,r5,65535
   29c60:	20c7883a 	add	r3,r4,r3
   29c64:	393fffcc 	andi	r4,r7,65535
   29c68:	1909c83a 	sub	r4,r3,r4
   29c6c:	280ad43a 	srli	r5,r5,16
   29c70:	380ed43a 	srli	r7,r7,16
   29c74:	2007d43a 	srai	r3,r4,16
   29c78:	213fffcc 	andi	r4,r4,65535
   29c7c:	29cbc83a 	sub	r5,r5,r7
   29c80:	28c7883a 	add	r3,r5,r3
   29c84:	180a943a 	slli	r5,r3,16
   29c88:	8c400104 	addi	r17,r17,4
   29c8c:	84000104 	addi	r16,r16,4
   29c90:	2908b03a 	or	r4,r5,r4
   29c94:	59000015 	stw	r4,0(r11)
   29c98:	1807d43a 	srai	r3,r3,16
   29c9c:	3015883a 	mov	r10,r6
   29ca0:	3017883a 	mov	r11,r6
   29ca4:	8b3fea36 	bltu	r17,r12,29c50 <_gp+0xfffecbc0>
   29ca8:	8200162e 	bgeu	r16,r8,29d04 <__mdiff+0x17c>
   29cac:	8017883a 	mov	r11,r16
   29cb0:	59400017 	ldw	r5,0(r11)
   29cb4:	31800104 	addi	r6,r6,4
   29cb8:	5ac00104 	addi	r11,r11,4
   29cbc:	293fffcc 	andi	r4,r5,65535
   29cc0:	20c7883a 	add	r3,r4,r3
   29cc4:	280ed43a 	srli	r7,r5,16
   29cc8:	180bd43a 	srai	r5,r3,16
   29ccc:	193fffcc 	andi	r4,r3,65535
   29cd0:	3947883a 	add	r3,r7,r5
   29cd4:	180a943a 	slli	r5,r3,16
   29cd8:	1807d43a 	srai	r3,r3,16
   29cdc:	2908b03a 	or	r4,r5,r4
   29ce0:	313fff15 	stw	r4,-4(r6)
   29ce4:	5a3ff236 	bltu	r11,r8,29cb0 <_gp+0xfffecc20>
   29ce8:	0406303a 	nor	r3,zero,r16
   29cec:	1a07883a 	add	r3,r3,r8
   29cf0:	1806d0ba 	srli	r3,r3,2
   29cf4:	18c00044 	addi	r3,r3,1
   29cf8:	18c7883a 	add	r3,r3,r3
   29cfc:	18c7883a 	add	r3,r3,r3
   29d00:	50d5883a 	add	r10,r10,r3
   29d04:	50ffff04 	addi	r3,r10,-4
   29d08:	2000041e 	bne	r4,zero,29d1c <__mdiff+0x194>
   29d0c:	18ffff04 	addi	r3,r3,-4
   29d10:	19000017 	ldw	r4,0(r3)
   29d14:	4a7fffc4 	addi	r9,r9,-1
   29d18:	203ffc26 	beq	r4,zero,29d0c <_gp+0xfffecc7c>
   29d1c:	12400415 	stw	r9,16(r2)
   29d20:	dfc00517 	ldw	ra,20(sp)
   29d24:	dd000417 	ldw	r20,16(sp)
   29d28:	dcc00317 	ldw	r19,12(sp)
   29d2c:	dc800217 	ldw	r18,8(sp)
   29d30:	dc400117 	ldw	r17,4(sp)
   29d34:	dc000017 	ldw	r16,0(sp)
   29d38:	dec00604 	addi	sp,sp,24
   29d3c:	f800283a 	ret
   29d40:	000b883a 	mov	r5,zero
   29d44:	00292600 	call	29260 <_Balloc>
   29d48:	00c00044 	movi	r3,1
   29d4c:	10c00415 	stw	r3,16(r2)
   29d50:	10000515 	stw	zero,20(r2)
   29d54:	003ff206 	br	29d20 <_gp+0xfffecc90>
   29d58:	8023883a 	mov	r17,r16
   29d5c:	0029883a 	mov	r20,zero
   29d60:	4021883a 	mov	r16,r8
   29d64:	003fad06 	br	29c1c <_gp+0xfffecb8c>
   29d68:	9005883a 	mov	r2,r18
   29d6c:	94400504 	addi	r17,r18,20
   29d70:	9c000504 	addi	r16,r19,20
   29d74:	9825883a 	mov	r18,r19
   29d78:	05000044 	movi	r20,1
   29d7c:	1027883a 	mov	r19,r2
   29d80:	003fa606 	br	29c1c <_gp+0xfffecb8c>

00029d84 <__ulp>:
   29d84:	295ffc2c 	andhi	r5,r5,32752
   29d88:	00bf3034 	movhi	r2,64704
   29d8c:	2887883a 	add	r3,r5,r2
   29d90:	00c0020e 	bge	zero,r3,29d9c <__ulp+0x18>
   29d94:	0005883a 	mov	r2,zero
   29d98:	f800283a 	ret
   29d9c:	00c7c83a 	sub	r3,zero,r3
   29da0:	1807d53a 	srai	r3,r3,20
   29da4:	008004c4 	movi	r2,19
   29da8:	10c00b0e 	bge	r2,r3,29dd8 <__ulp+0x54>
   29dac:	18bffb04 	addi	r2,r3,-20
   29db0:	01000784 	movi	r4,30
   29db4:	0007883a 	mov	r3,zero
   29db8:	20800516 	blt	r4,r2,29dd0 <__ulp+0x4c>
   29dbc:	010007c4 	movi	r4,31
   29dc0:	2089c83a 	sub	r4,r4,r2
   29dc4:	00800044 	movi	r2,1
   29dc8:	1104983a 	sll	r2,r2,r4
   29dcc:	f800283a 	ret
   29dd0:	00800044 	movi	r2,1
   29dd4:	f800283a 	ret
   29dd8:	01400234 	movhi	r5,8
   29ddc:	28c7d83a 	sra	r3,r5,r3
   29de0:	0005883a 	mov	r2,zero
   29de4:	f800283a 	ret

00029de8 <__b2d>:
   29de8:	defffa04 	addi	sp,sp,-24
   29dec:	dc000015 	stw	r16,0(sp)
   29df0:	24000417 	ldw	r16,16(r4)
   29df4:	dc400115 	stw	r17,4(sp)
   29df8:	24400504 	addi	r17,r4,20
   29dfc:	8421883a 	add	r16,r16,r16
   29e00:	8421883a 	add	r16,r16,r16
   29e04:	8c21883a 	add	r16,r17,r16
   29e08:	dc800215 	stw	r18,8(sp)
   29e0c:	84bfff17 	ldw	r18,-4(r16)
   29e10:	dd000415 	stw	r20,16(sp)
   29e14:	dcc00315 	stw	r19,12(sp)
   29e18:	9009883a 	mov	r4,r18
   29e1c:	2829883a 	mov	r20,r5
   29e20:	dfc00515 	stw	ra,20(sp)
   29e24:	00295540 	call	29554 <__hi0bits>
   29e28:	00c00804 	movi	r3,32
   29e2c:	1889c83a 	sub	r4,r3,r2
   29e30:	a1000015 	stw	r4,0(r20)
   29e34:	01000284 	movi	r4,10
   29e38:	84ffff04 	addi	r19,r16,-4
   29e3c:	20801216 	blt	r4,r2,29e88 <__b2d+0xa0>
   29e40:	018002c4 	movi	r6,11
   29e44:	308dc83a 	sub	r6,r6,r2
   29e48:	9186d83a 	srl	r3,r18,r6
   29e4c:	18cffc34 	orhi	r3,r3,16368
   29e50:	8cc0212e 	bgeu	r17,r19,29ed8 <__b2d+0xf0>
   29e54:	813ffe17 	ldw	r4,-8(r16)
   29e58:	218cd83a 	srl	r6,r4,r6
   29e5c:	10800544 	addi	r2,r2,21
   29e60:	9084983a 	sll	r2,r18,r2
   29e64:	1184b03a 	or	r2,r2,r6
   29e68:	dfc00517 	ldw	ra,20(sp)
   29e6c:	dd000417 	ldw	r20,16(sp)
   29e70:	dcc00317 	ldw	r19,12(sp)
   29e74:	dc800217 	ldw	r18,8(sp)
   29e78:	dc400117 	ldw	r17,4(sp)
   29e7c:	dc000017 	ldw	r16,0(sp)
   29e80:	dec00604 	addi	sp,sp,24
   29e84:	f800283a 	ret
   29e88:	8cc00f2e 	bgeu	r17,r19,29ec8 <__b2d+0xe0>
   29e8c:	117ffd44 	addi	r5,r2,-11
   29e90:	80bffe17 	ldw	r2,-8(r16)
   29e94:	28000e26 	beq	r5,zero,29ed0 <__b2d+0xe8>
   29e98:	1949c83a 	sub	r4,r3,r5
   29e9c:	9164983a 	sll	r18,r18,r5
   29ea0:	1106d83a 	srl	r3,r2,r4
   29ea4:	81bffe04 	addi	r6,r16,-8
   29ea8:	948ffc34 	orhi	r18,r18,16368
   29eac:	90c6b03a 	or	r3,r18,r3
   29eb0:	89800e2e 	bgeu	r17,r6,29eec <__b2d+0x104>
   29eb4:	81bffd17 	ldw	r6,-12(r16)
   29eb8:	1144983a 	sll	r2,r2,r5
   29ebc:	310ad83a 	srl	r5,r6,r4
   29ec0:	2884b03a 	or	r2,r5,r2
   29ec4:	003fe806 	br	29e68 <_gp+0xfffecdd8>
   29ec8:	10bffd44 	addi	r2,r2,-11
   29ecc:	1000041e 	bne	r2,zero,29ee0 <__b2d+0xf8>
   29ed0:	90cffc34 	orhi	r3,r18,16368
   29ed4:	003fe406 	br	29e68 <_gp+0xfffecdd8>
   29ed8:	000d883a 	mov	r6,zero
   29edc:	003fdf06 	br	29e5c <_gp+0xfffecdcc>
   29ee0:	90a4983a 	sll	r18,r18,r2
   29ee4:	0005883a 	mov	r2,zero
   29ee8:	003ff906 	br	29ed0 <_gp+0xfffece40>
   29eec:	1144983a 	sll	r2,r2,r5
   29ef0:	003fdd06 	br	29e68 <_gp+0xfffecdd8>

00029ef4 <__d2b>:
   29ef4:	defff804 	addi	sp,sp,-32
   29ef8:	dc000215 	stw	r16,8(sp)
   29efc:	3021883a 	mov	r16,r6
   29f00:	dc400315 	stw	r17,12(sp)
   29f04:	8022907a 	slli	r17,r16,1
   29f08:	dd000615 	stw	r20,24(sp)
   29f0c:	2829883a 	mov	r20,r5
   29f10:	01400044 	movi	r5,1
   29f14:	dcc00515 	stw	r19,20(sp)
   29f18:	dc800415 	stw	r18,16(sp)
   29f1c:	dfc00715 	stw	ra,28(sp)
   29f20:	3825883a 	mov	r18,r7
   29f24:	8822d57a 	srli	r17,r17,21
   29f28:	00292600 	call	29260 <_Balloc>
   29f2c:	1027883a 	mov	r19,r2
   29f30:	00800434 	movhi	r2,16
   29f34:	10bfffc4 	addi	r2,r2,-1
   29f38:	808c703a 	and	r6,r16,r2
   29f3c:	88000126 	beq	r17,zero,29f44 <__d2b+0x50>
   29f40:	31800434 	orhi	r6,r6,16
   29f44:	d9800015 	stw	r6,0(sp)
   29f48:	a0002426 	beq	r20,zero,29fdc <__d2b+0xe8>
   29f4c:	d9000104 	addi	r4,sp,4
   29f50:	dd000115 	stw	r20,4(sp)
   29f54:	00295bc0 	call	295bc <__lo0bits>
   29f58:	d8c00017 	ldw	r3,0(sp)
   29f5c:	10002f1e 	bne	r2,zero,2a01c <__d2b+0x128>
   29f60:	d9000117 	ldw	r4,4(sp)
   29f64:	99000515 	stw	r4,20(r19)
   29f68:	1821003a 	cmpeq	r16,r3,zero
   29f6c:	01000084 	movi	r4,2
   29f70:	2421c83a 	sub	r16,r4,r16
   29f74:	98c00615 	stw	r3,24(r19)
   29f78:	9c000415 	stw	r16,16(r19)
   29f7c:	88001f1e 	bne	r17,zero,29ffc <__d2b+0x108>
   29f80:	10bef384 	addi	r2,r2,-1074
   29f84:	90800015 	stw	r2,0(r18)
   29f88:	00900034 	movhi	r2,16384
   29f8c:	10bfffc4 	addi	r2,r2,-1
   29f90:	8085883a 	add	r2,r16,r2
   29f94:	1085883a 	add	r2,r2,r2
   29f98:	1085883a 	add	r2,r2,r2
   29f9c:	9885883a 	add	r2,r19,r2
   29fa0:	11000517 	ldw	r4,20(r2)
   29fa4:	8020917a 	slli	r16,r16,5
   29fa8:	00295540 	call	29554 <__hi0bits>
   29fac:	d8c00817 	ldw	r3,32(sp)
   29fb0:	8085c83a 	sub	r2,r16,r2
   29fb4:	18800015 	stw	r2,0(r3)
   29fb8:	9805883a 	mov	r2,r19
   29fbc:	dfc00717 	ldw	ra,28(sp)
   29fc0:	dd000617 	ldw	r20,24(sp)
   29fc4:	dcc00517 	ldw	r19,20(sp)
   29fc8:	dc800417 	ldw	r18,16(sp)
   29fcc:	dc400317 	ldw	r17,12(sp)
   29fd0:	dc000217 	ldw	r16,8(sp)
   29fd4:	dec00804 	addi	sp,sp,32
   29fd8:	f800283a 	ret
   29fdc:	d809883a 	mov	r4,sp
   29fe0:	00295bc0 	call	295bc <__lo0bits>
   29fe4:	d8c00017 	ldw	r3,0(sp)
   29fe8:	04000044 	movi	r16,1
   29fec:	9c000415 	stw	r16,16(r19)
   29ff0:	98c00515 	stw	r3,20(r19)
   29ff4:	10800804 	addi	r2,r2,32
   29ff8:	883fe126 	beq	r17,zero,29f80 <_gp+0xfffecef0>
   29ffc:	00c00d44 	movi	r3,53
   2a000:	8c7ef344 	addi	r17,r17,-1075
   2a004:	88a3883a 	add	r17,r17,r2
   2a008:	1885c83a 	sub	r2,r3,r2
   2a00c:	d8c00817 	ldw	r3,32(sp)
   2a010:	94400015 	stw	r17,0(r18)
   2a014:	18800015 	stw	r2,0(r3)
   2a018:	003fe706 	br	29fb8 <_gp+0xfffecf28>
   2a01c:	01000804 	movi	r4,32
   2a020:	2089c83a 	sub	r4,r4,r2
   2a024:	1908983a 	sll	r4,r3,r4
   2a028:	d9400117 	ldw	r5,4(sp)
   2a02c:	1886d83a 	srl	r3,r3,r2
   2a030:	2148b03a 	or	r4,r4,r5
   2a034:	99000515 	stw	r4,20(r19)
   2a038:	d8c00015 	stw	r3,0(sp)
   2a03c:	003fca06 	br	29f68 <_gp+0xfffeced8>

0002a040 <__ratio>:
   2a040:	defff904 	addi	sp,sp,-28
   2a044:	dc400315 	stw	r17,12(sp)
   2a048:	2823883a 	mov	r17,r5
   2a04c:	d9400104 	addi	r5,sp,4
   2a050:	dfc00615 	stw	ra,24(sp)
   2a054:	dcc00515 	stw	r19,20(sp)
   2a058:	dc800415 	stw	r18,16(sp)
   2a05c:	2027883a 	mov	r19,r4
   2a060:	dc000215 	stw	r16,8(sp)
   2a064:	0029de80 	call	29de8 <__b2d>
   2a068:	d80b883a 	mov	r5,sp
   2a06c:	8809883a 	mov	r4,r17
   2a070:	1025883a 	mov	r18,r2
   2a074:	1821883a 	mov	r16,r3
   2a078:	0029de80 	call	29de8 <__b2d>
   2a07c:	8a000417 	ldw	r8,16(r17)
   2a080:	99000417 	ldw	r4,16(r19)
   2a084:	d9400117 	ldw	r5,4(sp)
   2a088:	2209c83a 	sub	r4,r4,r8
   2a08c:	2010917a 	slli	r8,r4,5
   2a090:	d9000017 	ldw	r4,0(sp)
   2a094:	2909c83a 	sub	r4,r5,r4
   2a098:	4109883a 	add	r4,r8,r4
   2a09c:	01000e0e 	bge	zero,r4,2a0d8 <__ratio+0x98>
   2a0a0:	2008953a 	slli	r4,r4,20
   2a0a4:	2421883a 	add	r16,r4,r16
   2a0a8:	100d883a 	mov	r6,r2
   2a0ac:	180f883a 	mov	r7,r3
   2a0b0:	9009883a 	mov	r4,r18
   2a0b4:	800b883a 	mov	r5,r16
   2a0b8:	002dc480 	call	2dc48 <__divdf3>
   2a0bc:	dfc00617 	ldw	ra,24(sp)
   2a0c0:	dcc00517 	ldw	r19,20(sp)
   2a0c4:	dc800417 	ldw	r18,16(sp)
   2a0c8:	dc400317 	ldw	r17,12(sp)
   2a0cc:	dc000217 	ldw	r16,8(sp)
   2a0d0:	dec00704 	addi	sp,sp,28
   2a0d4:	f800283a 	ret
   2a0d8:	2008953a 	slli	r4,r4,20
   2a0dc:	1907c83a 	sub	r3,r3,r4
   2a0e0:	003ff106 	br	2a0a8 <_gp+0xfffed018>

0002a0e4 <_mprec_log10>:
   2a0e4:	defffe04 	addi	sp,sp,-8
   2a0e8:	dc000015 	stw	r16,0(sp)
   2a0ec:	dfc00115 	stw	ra,4(sp)
   2a0f0:	008005c4 	movi	r2,23
   2a0f4:	2021883a 	mov	r16,r4
   2a0f8:	11000d0e 	bge	r2,r4,2a130 <_mprec_log10+0x4c>
   2a0fc:	0005883a 	mov	r2,zero
   2a100:	00cffc34 	movhi	r3,16368
   2a104:	843fffc4 	addi	r16,r16,-1
   2a108:	000d883a 	mov	r6,zero
   2a10c:	01d00934 	movhi	r7,16420
   2a110:	1009883a 	mov	r4,r2
   2a114:	180b883a 	mov	r5,r3
   2a118:	002e7880 	call	2e788 <__muldf3>
   2a11c:	803ff91e 	bne	r16,zero,2a104 <_gp+0xfffed074>
   2a120:	dfc00117 	ldw	ra,4(sp)
   2a124:	dc000017 	ldw	r16,0(sp)
   2a128:	dec00204 	addi	sp,sp,8
   2a12c:	f800283a 	ret
   2a130:	202090fa 	slli	r16,r4,3
   2a134:	008000f4 	movhi	r2,3
   2a138:	108cbd04 	addi	r2,r2,13044
   2a13c:	1421883a 	add	r16,r2,r16
   2a140:	80800017 	ldw	r2,0(r16)
   2a144:	80c00117 	ldw	r3,4(r16)
   2a148:	dfc00117 	ldw	ra,4(sp)
   2a14c:	dc000017 	ldw	r16,0(sp)
   2a150:	dec00204 	addi	sp,sp,8
   2a154:	f800283a 	ret

0002a158 <__copybits>:
   2a158:	297fffc4 	addi	r5,r5,-1
   2a15c:	280fd17a 	srai	r7,r5,5
   2a160:	30c00417 	ldw	r3,16(r6)
   2a164:	30800504 	addi	r2,r6,20
   2a168:	39c00044 	addi	r7,r7,1
   2a16c:	18c7883a 	add	r3,r3,r3
   2a170:	39cf883a 	add	r7,r7,r7
   2a174:	18c7883a 	add	r3,r3,r3
   2a178:	39cf883a 	add	r7,r7,r7
   2a17c:	10c7883a 	add	r3,r2,r3
   2a180:	21cf883a 	add	r7,r4,r7
   2a184:	10c00d2e 	bgeu	r2,r3,2a1bc <__copybits+0x64>
   2a188:	200b883a 	mov	r5,r4
   2a18c:	12000017 	ldw	r8,0(r2)
   2a190:	29400104 	addi	r5,r5,4
   2a194:	10800104 	addi	r2,r2,4
   2a198:	2a3fff15 	stw	r8,-4(r5)
   2a19c:	10fffb36 	bltu	r2,r3,2a18c <_gp+0xfffed0fc>
   2a1a0:	1985c83a 	sub	r2,r3,r6
   2a1a4:	10bffac4 	addi	r2,r2,-21
   2a1a8:	1004d0ba 	srli	r2,r2,2
   2a1ac:	10800044 	addi	r2,r2,1
   2a1b0:	1085883a 	add	r2,r2,r2
   2a1b4:	1085883a 	add	r2,r2,r2
   2a1b8:	2089883a 	add	r4,r4,r2
   2a1bc:	21c0032e 	bgeu	r4,r7,2a1cc <__copybits+0x74>
   2a1c0:	20000015 	stw	zero,0(r4)
   2a1c4:	21000104 	addi	r4,r4,4
   2a1c8:	21fffd36 	bltu	r4,r7,2a1c0 <_gp+0xfffed130>
   2a1cc:	f800283a 	ret

0002a1d0 <__any_on>:
   2a1d0:	20c00417 	ldw	r3,16(r4)
   2a1d4:	2805d17a 	srai	r2,r5,5
   2a1d8:	21000504 	addi	r4,r4,20
   2a1dc:	18800d0e 	bge	r3,r2,2a214 <__any_on+0x44>
   2a1e0:	18c7883a 	add	r3,r3,r3
   2a1e4:	18c7883a 	add	r3,r3,r3
   2a1e8:	20c7883a 	add	r3,r4,r3
   2a1ec:	20c0192e 	bgeu	r4,r3,2a254 <__any_on+0x84>
   2a1f0:	18bfff17 	ldw	r2,-4(r3)
   2a1f4:	18ffff04 	addi	r3,r3,-4
   2a1f8:	1000041e 	bne	r2,zero,2a20c <__any_on+0x3c>
   2a1fc:	20c0142e 	bgeu	r4,r3,2a250 <__any_on+0x80>
   2a200:	18ffff04 	addi	r3,r3,-4
   2a204:	19400017 	ldw	r5,0(r3)
   2a208:	283ffc26 	beq	r5,zero,2a1fc <_gp+0xfffed16c>
   2a20c:	00800044 	movi	r2,1
   2a210:	f800283a 	ret
   2a214:	10c00a0e 	bge	r2,r3,2a240 <__any_on+0x70>
   2a218:	1085883a 	add	r2,r2,r2
   2a21c:	1085883a 	add	r2,r2,r2
   2a220:	294007cc 	andi	r5,r5,31
   2a224:	2087883a 	add	r3,r4,r2
   2a228:	283ff026 	beq	r5,zero,2a1ec <_gp+0xfffed15c>
   2a22c:	19800017 	ldw	r6,0(r3)
   2a230:	3144d83a 	srl	r2,r6,r5
   2a234:	114a983a 	sll	r5,r2,r5
   2a238:	317ff41e 	bne	r6,r5,2a20c <_gp+0xfffed17c>
   2a23c:	003feb06 	br	2a1ec <_gp+0xfffed15c>
   2a240:	1085883a 	add	r2,r2,r2
   2a244:	1085883a 	add	r2,r2,r2
   2a248:	2087883a 	add	r3,r4,r2
   2a24c:	003fe706 	br	2a1ec <_gp+0xfffed15c>
   2a250:	f800283a 	ret
   2a254:	0005883a 	mov	r2,zero
   2a258:	f800283a 	ret

0002a25c <_realloc_r>:
   2a25c:	defff604 	addi	sp,sp,-40
   2a260:	dc800215 	stw	r18,8(sp)
   2a264:	dfc00915 	stw	ra,36(sp)
   2a268:	df000815 	stw	fp,32(sp)
   2a26c:	ddc00715 	stw	r23,28(sp)
   2a270:	dd800615 	stw	r22,24(sp)
   2a274:	dd400515 	stw	r21,20(sp)
   2a278:	dd000415 	stw	r20,16(sp)
   2a27c:	dcc00315 	stw	r19,12(sp)
   2a280:	dc400115 	stw	r17,4(sp)
   2a284:	dc000015 	stw	r16,0(sp)
   2a288:	3025883a 	mov	r18,r6
   2a28c:	2800b726 	beq	r5,zero,2a56c <_realloc_r+0x310>
   2a290:	282b883a 	mov	r21,r5
   2a294:	2029883a 	mov	r20,r4
   2a298:	003029c0 	call	3029c <__malloc_lock>
   2a29c:	a8bfff17 	ldw	r2,-4(r21)
   2a2a0:	043fff04 	movi	r16,-4
   2a2a4:	90c002c4 	addi	r3,r18,11
   2a2a8:	01000584 	movi	r4,22
   2a2ac:	acfffe04 	addi	r19,r21,-8
   2a2b0:	1420703a 	and	r16,r2,r16
   2a2b4:	20c0332e 	bgeu	r4,r3,2a384 <_realloc_r+0x128>
   2a2b8:	047ffe04 	movi	r17,-8
   2a2bc:	1c62703a 	and	r17,r3,r17
   2a2c0:	8807883a 	mov	r3,r17
   2a2c4:	88005816 	blt	r17,zero,2a428 <_realloc_r+0x1cc>
   2a2c8:	8c805736 	bltu	r17,r18,2a428 <_realloc_r+0x1cc>
   2a2cc:	80c0300e 	bge	r16,r3,2a390 <_realloc_r+0x134>
   2a2d0:	070000f4 	movhi	fp,3
   2a2d4:	e70d4804 	addi	fp,fp,13600
   2a2d8:	e1c00217 	ldw	r7,8(fp)
   2a2dc:	9c09883a 	add	r4,r19,r16
   2a2e0:	22000117 	ldw	r8,4(r4)
   2a2e4:	21c06326 	beq	r4,r7,2a474 <_realloc_r+0x218>
   2a2e8:	017fff84 	movi	r5,-2
   2a2ec:	414a703a 	and	r5,r8,r5
   2a2f0:	214b883a 	add	r5,r4,r5
   2a2f4:	29800117 	ldw	r6,4(r5)
   2a2f8:	3180004c 	andi	r6,r6,1
   2a2fc:	30003f26 	beq	r6,zero,2a3fc <_realloc_r+0x1a0>
   2a300:	1080004c 	andi	r2,r2,1
   2a304:	10008326 	beq	r2,zero,2a514 <_realloc_r+0x2b8>
   2a308:	900b883a 	mov	r5,r18
   2a30c:	a009883a 	mov	r4,r20
   2a310:	0022f940 	call	22f94 <_malloc_r>
   2a314:	1025883a 	mov	r18,r2
   2a318:	10011e26 	beq	r2,zero,2a794 <_realloc_r+0x538>
   2a31c:	a93fff17 	ldw	r4,-4(r21)
   2a320:	10fffe04 	addi	r3,r2,-8
   2a324:	00bfff84 	movi	r2,-2
   2a328:	2084703a 	and	r2,r4,r2
   2a32c:	9885883a 	add	r2,r19,r2
   2a330:	1880ee26 	beq	r3,r2,2a6ec <_realloc_r+0x490>
   2a334:	81bfff04 	addi	r6,r16,-4
   2a338:	00800904 	movi	r2,36
   2a33c:	1180b836 	bltu	r2,r6,2a620 <_realloc_r+0x3c4>
   2a340:	00c004c4 	movi	r3,19
   2a344:	19809636 	bltu	r3,r6,2a5a0 <_realloc_r+0x344>
   2a348:	9005883a 	mov	r2,r18
   2a34c:	a807883a 	mov	r3,r21
   2a350:	19000017 	ldw	r4,0(r3)
   2a354:	11000015 	stw	r4,0(r2)
   2a358:	19000117 	ldw	r4,4(r3)
   2a35c:	11000115 	stw	r4,4(r2)
   2a360:	18c00217 	ldw	r3,8(r3)
   2a364:	10c00215 	stw	r3,8(r2)
   2a368:	a80b883a 	mov	r5,r21
   2a36c:	a009883a 	mov	r4,r20
   2a370:	00282ec0 	call	282ec <_free_r>
   2a374:	a009883a 	mov	r4,r20
   2a378:	00302c00 	call	302c0 <__malloc_unlock>
   2a37c:	9005883a 	mov	r2,r18
   2a380:	00001206 	br	2a3cc <_realloc_r+0x170>
   2a384:	00c00404 	movi	r3,16
   2a388:	1823883a 	mov	r17,r3
   2a38c:	003fce06 	br	2a2c8 <_gp+0xfffed238>
   2a390:	a825883a 	mov	r18,r21
   2a394:	8445c83a 	sub	r2,r16,r17
   2a398:	00c003c4 	movi	r3,15
   2a39c:	18802636 	bltu	r3,r2,2a438 <_realloc_r+0x1dc>
   2a3a0:	99800117 	ldw	r6,4(r19)
   2a3a4:	9c07883a 	add	r3,r19,r16
   2a3a8:	3180004c 	andi	r6,r6,1
   2a3ac:	3420b03a 	or	r16,r6,r16
   2a3b0:	9c000115 	stw	r16,4(r19)
   2a3b4:	18800117 	ldw	r2,4(r3)
   2a3b8:	10800054 	ori	r2,r2,1
   2a3bc:	18800115 	stw	r2,4(r3)
   2a3c0:	a009883a 	mov	r4,r20
   2a3c4:	00302c00 	call	302c0 <__malloc_unlock>
   2a3c8:	9005883a 	mov	r2,r18
   2a3cc:	dfc00917 	ldw	ra,36(sp)
   2a3d0:	df000817 	ldw	fp,32(sp)
   2a3d4:	ddc00717 	ldw	r23,28(sp)
   2a3d8:	dd800617 	ldw	r22,24(sp)
   2a3dc:	dd400517 	ldw	r21,20(sp)
   2a3e0:	dd000417 	ldw	r20,16(sp)
   2a3e4:	dcc00317 	ldw	r19,12(sp)
   2a3e8:	dc800217 	ldw	r18,8(sp)
   2a3ec:	dc400117 	ldw	r17,4(sp)
   2a3f0:	dc000017 	ldw	r16,0(sp)
   2a3f4:	dec00a04 	addi	sp,sp,40
   2a3f8:	f800283a 	ret
   2a3fc:	017fff04 	movi	r5,-4
   2a400:	414a703a 	and	r5,r8,r5
   2a404:	814d883a 	add	r6,r16,r5
   2a408:	30c01f16 	blt	r6,r3,2a488 <_realloc_r+0x22c>
   2a40c:	20800317 	ldw	r2,12(r4)
   2a410:	20c00217 	ldw	r3,8(r4)
   2a414:	a825883a 	mov	r18,r21
   2a418:	3021883a 	mov	r16,r6
   2a41c:	18800315 	stw	r2,12(r3)
   2a420:	10c00215 	stw	r3,8(r2)
   2a424:	003fdb06 	br	2a394 <_gp+0xfffed304>
   2a428:	00800304 	movi	r2,12
   2a42c:	a0800015 	stw	r2,0(r20)
   2a430:	0005883a 	mov	r2,zero
   2a434:	003fe506 	br	2a3cc <_gp+0xfffed33c>
   2a438:	98c00117 	ldw	r3,4(r19)
   2a43c:	9c4b883a 	add	r5,r19,r17
   2a440:	11000054 	ori	r4,r2,1
   2a444:	18c0004c 	andi	r3,r3,1
   2a448:	1c62b03a 	or	r17,r3,r17
   2a44c:	9c400115 	stw	r17,4(r19)
   2a450:	29000115 	stw	r4,4(r5)
   2a454:	2885883a 	add	r2,r5,r2
   2a458:	10c00117 	ldw	r3,4(r2)
   2a45c:	29400204 	addi	r5,r5,8
   2a460:	a009883a 	mov	r4,r20
   2a464:	18c00054 	ori	r3,r3,1
   2a468:	10c00115 	stw	r3,4(r2)
   2a46c:	00282ec0 	call	282ec <_free_r>
   2a470:	003fd306 	br	2a3c0 <_gp+0xfffed330>
   2a474:	017fff04 	movi	r5,-4
   2a478:	414a703a 	and	r5,r8,r5
   2a47c:	89800404 	addi	r6,r17,16
   2a480:	8151883a 	add	r8,r16,r5
   2a484:	4180590e 	bge	r8,r6,2a5ec <_realloc_r+0x390>
   2a488:	1080004c 	andi	r2,r2,1
   2a48c:	103f9e1e 	bne	r2,zero,2a308 <_gp+0xfffed278>
   2a490:	adbffe17 	ldw	r22,-8(r21)
   2a494:	00bfff04 	movi	r2,-4
   2a498:	9dadc83a 	sub	r22,r19,r22
   2a49c:	b1800117 	ldw	r6,4(r22)
   2a4a0:	3084703a 	and	r2,r6,r2
   2a4a4:	20002026 	beq	r4,zero,2a528 <_realloc_r+0x2cc>
   2a4a8:	80af883a 	add	r23,r16,r2
   2a4ac:	b96f883a 	add	r23,r23,r5
   2a4b0:	21c05f26 	beq	r4,r7,2a630 <_realloc_r+0x3d4>
   2a4b4:	b8c01c16 	blt	r23,r3,2a528 <_realloc_r+0x2cc>
   2a4b8:	20800317 	ldw	r2,12(r4)
   2a4bc:	20c00217 	ldw	r3,8(r4)
   2a4c0:	81bfff04 	addi	r6,r16,-4
   2a4c4:	01000904 	movi	r4,36
   2a4c8:	18800315 	stw	r2,12(r3)
   2a4cc:	10c00215 	stw	r3,8(r2)
   2a4d0:	b0c00217 	ldw	r3,8(r22)
   2a4d4:	b0800317 	ldw	r2,12(r22)
   2a4d8:	b4800204 	addi	r18,r22,8
   2a4dc:	18800315 	stw	r2,12(r3)
   2a4e0:	10c00215 	stw	r3,8(r2)
   2a4e4:	21801b36 	bltu	r4,r6,2a554 <_realloc_r+0x2f8>
   2a4e8:	008004c4 	movi	r2,19
   2a4ec:	1180352e 	bgeu	r2,r6,2a5c4 <_realloc_r+0x368>
   2a4f0:	a8800017 	ldw	r2,0(r21)
   2a4f4:	b0800215 	stw	r2,8(r22)
   2a4f8:	a8800117 	ldw	r2,4(r21)
   2a4fc:	b0800315 	stw	r2,12(r22)
   2a500:	008006c4 	movi	r2,27
   2a504:	11807f36 	bltu	r2,r6,2a704 <_realloc_r+0x4a8>
   2a508:	b0800404 	addi	r2,r22,16
   2a50c:	ad400204 	addi	r21,r21,8
   2a510:	00002d06 	br	2a5c8 <_realloc_r+0x36c>
   2a514:	adbffe17 	ldw	r22,-8(r21)
   2a518:	00bfff04 	movi	r2,-4
   2a51c:	9dadc83a 	sub	r22,r19,r22
   2a520:	b1000117 	ldw	r4,4(r22)
   2a524:	2084703a 	and	r2,r4,r2
   2a528:	b03f7726 	beq	r22,zero,2a308 <_gp+0xfffed278>
   2a52c:	80af883a 	add	r23,r16,r2
   2a530:	b8ff7516 	blt	r23,r3,2a308 <_gp+0xfffed278>
   2a534:	b0800317 	ldw	r2,12(r22)
   2a538:	b0c00217 	ldw	r3,8(r22)
   2a53c:	81bfff04 	addi	r6,r16,-4
   2a540:	01000904 	movi	r4,36
   2a544:	18800315 	stw	r2,12(r3)
   2a548:	10c00215 	stw	r3,8(r2)
   2a54c:	b4800204 	addi	r18,r22,8
   2a550:	21bfe52e 	bgeu	r4,r6,2a4e8 <_gp+0xfffed458>
   2a554:	a80b883a 	mov	r5,r21
   2a558:	9009883a 	mov	r4,r18
   2a55c:	00291040 	call	29104 <memmove>
   2a560:	b821883a 	mov	r16,r23
   2a564:	b027883a 	mov	r19,r22
   2a568:	003f8a06 	br	2a394 <_gp+0xfffed304>
   2a56c:	300b883a 	mov	r5,r6
   2a570:	dfc00917 	ldw	ra,36(sp)
   2a574:	df000817 	ldw	fp,32(sp)
   2a578:	ddc00717 	ldw	r23,28(sp)
   2a57c:	dd800617 	ldw	r22,24(sp)
   2a580:	dd400517 	ldw	r21,20(sp)
   2a584:	dd000417 	ldw	r20,16(sp)
   2a588:	dcc00317 	ldw	r19,12(sp)
   2a58c:	dc800217 	ldw	r18,8(sp)
   2a590:	dc400117 	ldw	r17,4(sp)
   2a594:	dc000017 	ldw	r16,0(sp)
   2a598:	dec00a04 	addi	sp,sp,40
   2a59c:	0022f941 	jmpi	22f94 <_malloc_r>
   2a5a0:	a8c00017 	ldw	r3,0(r21)
   2a5a4:	90c00015 	stw	r3,0(r18)
   2a5a8:	a8c00117 	ldw	r3,4(r21)
   2a5ac:	90c00115 	stw	r3,4(r18)
   2a5b0:	00c006c4 	movi	r3,27
   2a5b4:	19804536 	bltu	r3,r6,2a6cc <_realloc_r+0x470>
   2a5b8:	90800204 	addi	r2,r18,8
   2a5bc:	a8c00204 	addi	r3,r21,8
   2a5c0:	003f6306 	br	2a350 <_gp+0xfffed2c0>
   2a5c4:	9005883a 	mov	r2,r18
   2a5c8:	a8c00017 	ldw	r3,0(r21)
   2a5cc:	b821883a 	mov	r16,r23
   2a5d0:	b027883a 	mov	r19,r22
   2a5d4:	10c00015 	stw	r3,0(r2)
   2a5d8:	a8c00117 	ldw	r3,4(r21)
   2a5dc:	10c00115 	stw	r3,4(r2)
   2a5e0:	a8c00217 	ldw	r3,8(r21)
   2a5e4:	10c00215 	stw	r3,8(r2)
   2a5e8:	003f6a06 	br	2a394 <_gp+0xfffed304>
   2a5ec:	9c67883a 	add	r19,r19,r17
   2a5f0:	4445c83a 	sub	r2,r8,r17
   2a5f4:	e4c00215 	stw	r19,8(fp)
   2a5f8:	10800054 	ori	r2,r2,1
   2a5fc:	98800115 	stw	r2,4(r19)
   2a600:	a8bfff17 	ldw	r2,-4(r21)
   2a604:	a009883a 	mov	r4,r20
   2a608:	1080004c 	andi	r2,r2,1
   2a60c:	1462b03a 	or	r17,r2,r17
   2a610:	ac7fff15 	stw	r17,-4(r21)
   2a614:	00302c00 	call	302c0 <__malloc_unlock>
   2a618:	a805883a 	mov	r2,r21
   2a61c:	003f6b06 	br	2a3cc <_gp+0xfffed33c>
   2a620:	a80b883a 	mov	r5,r21
   2a624:	9009883a 	mov	r4,r18
   2a628:	00291040 	call	29104 <memmove>
   2a62c:	003f4e06 	br	2a368 <_gp+0xfffed2d8>
   2a630:	89000404 	addi	r4,r17,16
   2a634:	b93fbc16 	blt	r23,r4,2a528 <_gp+0xfffed498>
   2a638:	b0800317 	ldw	r2,12(r22)
   2a63c:	b0c00217 	ldw	r3,8(r22)
   2a640:	81bfff04 	addi	r6,r16,-4
   2a644:	01000904 	movi	r4,36
   2a648:	18800315 	stw	r2,12(r3)
   2a64c:	10c00215 	stw	r3,8(r2)
   2a650:	b4800204 	addi	r18,r22,8
   2a654:	21804336 	bltu	r4,r6,2a764 <_realloc_r+0x508>
   2a658:	008004c4 	movi	r2,19
   2a65c:	11803f2e 	bgeu	r2,r6,2a75c <_realloc_r+0x500>
   2a660:	a8800017 	ldw	r2,0(r21)
   2a664:	b0800215 	stw	r2,8(r22)
   2a668:	a8800117 	ldw	r2,4(r21)
   2a66c:	b0800315 	stw	r2,12(r22)
   2a670:	008006c4 	movi	r2,27
   2a674:	11803f36 	bltu	r2,r6,2a774 <_realloc_r+0x518>
   2a678:	b0800404 	addi	r2,r22,16
   2a67c:	ad400204 	addi	r21,r21,8
   2a680:	a8c00017 	ldw	r3,0(r21)
   2a684:	10c00015 	stw	r3,0(r2)
   2a688:	a8c00117 	ldw	r3,4(r21)
   2a68c:	10c00115 	stw	r3,4(r2)
   2a690:	a8c00217 	ldw	r3,8(r21)
   2a694:	10c00215 	stw	r3,8(r2)
   2a698:	b447883a 	add	r3,r22,r17
   2a69c:	bc45c83a 	sub	r2,r23,r17
   2a6a0:	e0c00215 	stw	r3,8(fp)
   2a6a4:	10800054 	ori	r2,r2,1
   2a6a8:	18800115 	stw	r2,4(r3)
   2a6ac:	b0800117 	ldw	r2,4(r22)
   2a6b0:	a009883a 	mov	r4,r20
   2a6b4:	1080004c 	andi	r2,r2,1
   2a6b8:	1462b03a 	or	r17,r2,r17
   2a6bc:	b4400115 	stw	r17,4(r22)
   2a6c0:	00302c00 	call	302c0 <__malloc_unlock>
   2a6c4:	9005883a 	mov	r2,r18
   2a6c8:	003f4006 	br	2a3cc <_gp+0xfffed33c>
   2a6cc:	a8c00217 	ldw	r3,8(r21)
   2a6d0:	90c00215 	stw	r3,8(r18)
   2a6d4:	a8c00317 	ldw	r3,12(r21)
   2a6d8:	90c00315 	stw	r3,12(r18)
   2a6dc:	30801126 	beq	r6,r2,2a724 <_realloc_r+0x4c8>
   2a6e0:	90800404 	addi	r2,r18,16
   2a6e4:	a8c00404 	addi	r3,r21,16
   2a6e8:	003f1906 	br	2a350 <_gp+0xfffed2c0>
   2a6ec:	90ffff17 	ldw	r3,-4(r18)
   2a6f0:	00bfff04 	movi	r2,-4
   2a6f4:	a825883a 	mov	r18,r21
   2a6f8:	1884703a 	and	r2,r3,r2
   2a6fc:	80a1883a 	add	r16,r16,r2
   2a700:	003f2406 	br	2a394 <_gp+0xfffed304>
   2a704:	a8800217 	ldw	r2,8(r21)
   2a708:	b0800415 	stw	r2,16(r22)
   2a70c:	a8800317 	ldw	r2,12(r21)
   2a710:	b0800515 	stw	r2,20(r22)
   2a714:	31000a26 	beq	r6,r4,2a740 <_realloc_r+0x4e4>
   2a718:	b0800604 	addi	r2,r22,24
   2a71c:	ad400404 	addi	r21,r21,16
   2a720:	003fa906 	br	2a5c8 <_gp+0xfffed538>
   2a724:	a9000417 	ldw	r4,16(r21)
   2a728:	90800604 	addi	r2,r18,24
   2a72c:	a8c00604 	addi	r3,r21,24
   2a730:	91000415 	stw	r4,16(r18)
   2a734:	a9000517 	ldw	r4,20(r21)
   2a738:	91000515 	stw	r4,20(r18)
   2a73c:	003f0406 	br	2a350 <_gp+0xfffed2c0>
   2a740:	a8c00417 	ldw	r3,16(r21)
   2a744:	ad400604 	addi	r21,r21,24
   2a748:	b0800804 	addi	r2,r22,32
   2a74c:	b0c00615 	stw	r3,24(r22)
   2a750:	a8ffff17 	ldw	r3,-4(r21)
   2a754:	b0c00715 	stw	r3,28(r22)
   2a758:	003f9b06 	br	2a5c8 <_gp+0xfffed538>
   2a75c:	9005883a 	mov	r2,r18
   2a760:	003fc706 	br	2a680 <_gp+0xfffed5f0>
   2a764:	a80b883a 	mov	r5,r21
   2a768:	9009883a 	mov	r4,r18
   2a76c:	00291040 	call	29104 <memmove>
   2a770:	003fc906 	br	2a698 <_gp+0xfffed608>
   2a774:	a8800217 	ldw	r2,8(r21)
   2a778:	b0800415 	stw	r2,16(r22)
   2a77c:	a8800317 	ldw	r2,12(r21)
   2a780:	b0800515 	stw	r2,20(r22)
   2a784:	31000726 	beq	r6,r4,2a7a4 <_realloc_r+0x548>
   2a788:	b0800604 	addi	r2,r22,24
   2a78c:	ad400404 	addi	r21,r21,16
   2a790:	003fbb06 	br	2a680 <_gp+0xfffed5f0>
   2a794:	a009883a 	mov	r4,r20
   2a798:	00302c00 	call	302c0 <__malloc_unlock>
   2a79c:	0005883a 	mov	r2,zero
   2a7a0:	003f0a06 	br	2a3cc <_gp+0xfffed33c>
   2a7a4:	a8c00417 	ldw	r3,16(r21)
   2a7a8:	ad400604 	addi	r21,r21,24
   2a7ac:	b0800804 	addi	r2,r22,32
   2a7b0:	b0c00615 	stw	r3,24(r22)
   2a7b4:	a8ffff17 	ldw	r3,-4(r21)
   2a7b8:	b0c00715 	stw	r3,28(r22)
   2a7bc:	003fb006 	br	2a680 <_gp+0xfffed5f0>

0002a7c0 <__fpclassifyd>:
   2a7c0:	00a00034 	movhi	r2,32768
   2a7c4:	10bfffc4 	addi	r2,r2,-1
   2a7c8:	2884703a 	and	r2,r5,r2
   2a7cc:	10000726 	beq	r2,zero,2a7ec <__fpclassifyd+0x2c>
   2a7d0:	00fffc34 	movhi	r3,65520
   2a7d4:	019ff834 	movhi	r6,32736
   2a7d8:	28c7883a 	add	r3,r5,r3
   2a7dc:	31bfffc4 	addi	r6,r6,-1
   2a7e0:	30c00536 	bltu	r6,r3,2a7f8 <__fpclassifyd+0x38>
   2a7e4:	00800104 	movi	r2,4
   2a7e8:	f800283a 	ret
   2a7ec:	2000021e 	bne	r4,zero,2a7f8 <__fpclassifyd+0x38>
   2a7f0:	00800084 	movi	r2,2
   2a7f4:	f800283a 	ret
   2a7f8:	00dffc34 	movhi	r3,32752
   2a7fc:	019ff834 	movhi	r6,32736
   2a800:	28cb883a 	add	r5,r5,r3
   2a804:	31bfffc4 	addi	r6,r6,-1
   2a808:	317ff62e 	bgeu	r6,r5,2a7e4 <_gp+0xfffed754>
   2a80c:	01400434 	movhi	r5,16
   2a810:	297fffc4 	addi	r5,r5,-1
   2a814:	28800236 	bltu	r5,r2,2a820 <__fpclassifyd+0x60>
   2a818:	008000c4 	movi	r2,3
   2a81c:	f800283a 	ret
   2a820:	10c00226 	beq	r2,r3,2a82c <__fpclassifyd+0x6c>
   2a824:	0005883a 	mov	r2,zero
   2a828:	f800283a 	ret
   2a82c:	2005003a 	cmpeq	r2,r4,zero
   2a830:	f800283a 	ret

0002a834 <__sread>:
   2a834:	defffe04 	addi	sp,sp,-8
   2a838:	dc000015 	stw	r16,0(sp)
   2a83c:	2821883a 	mov	r16,r5
   2a840:	2940038f 	ldh	r5,14(r5)
   2a844:	dfc00115 	stw	ra,4(sp)
   2a848:	002c54c0 	call	2c54c <_read_r>
   2a84c:	10000716 	blt	r2,zero,2a86c <__sread+0x38>
   2a850:	80c01417 	ldw	r3,80(r16)
   2a854:	1887883a 	add	r3,r3,r2
   2a858:	80c01415 	stw	r3,80(r16)
   2a85c:	dfc00117 	ldw	ra,4(sp)
   2a860:	dc000017 	ldw	r16,0(sp)
   2a864:	dec00204 	addi	sp,sp,8
   2a868:	f800283a 	ret
   2a86c:	80c0030b 	ldhu	r3,12(r16)
   2a870:	18fbffcc 	andi	r3,r3,61439
   2a874:	80c0030d 	sth	r3,12(r16)
   2a878:	dfc00117 	ldw	ra,4(sp)
   2a87c:	dc000017 	ldw	r16,0(sp)
   2a880:	dec00204 	addi	sp,sp,8
   2a884:	f800283a 	ret

0002a888 <__seofread>:
   2a888:	0005883a 	mov	r2,zero
   2a88c:	f800283a 	ret

0002a890 <__swrite>:
   2a890:	2880030b 	ldhu	r2,12(r5)
   2a894:	defffb04 	addi	sp,sp,-20
   2a898:	dcc00315 	stw	r19,12(sp)
   2a89c:	dc800215 	stw	r18,8(sp)
   2a8a0:	dc400115 	stw	r17,4(sp)
   2a8a4:	dc000015 	stw	r16,0(sp)
   2a8a8:	dfc00415 	stw	ra,16(sp)
   2a8ac:	10c0400c 	andi	r3,r2,256
   2a8b0:	2821883a 	mov	r16,r5
   2a8b4:	2023883a 	mov	r17,r4
   2a8b8:	3025883a 	mov	r18,r6
   2a8bc:	3827883a 	mov	r19,r7
   2a8c0:	18000526 	beq	r3,zero,2a8d8 <__swrite+0x48>
   2a8c4:	2940038f 	ldh	r5,14(r5)
   2a8c8:	01c00084 	movi	r7,2
   2a8cc:	000d883a 	mov	r6,zero
   2a8d0:	002c4ec0 	call	2c4ec <_lseek_r>
   2a8d4:	8080030b 	ldhu	r2,12(r16)
   2a8d8:	8140038f 	ldh	r5,14(r16)
   2a8dc:	10bbffcc 	andi	r2,r2,61439
   2a8e0:	980f883a 	mov	r7,r19
   2a8e4:	900d883a 	mov	r6,r18
   2a8e8:	8809883a 	mov	r4,r17
   2a8ec:	8080030d 	sth	r2,12(r16)
   2a8f0:	dfc00417 	ldw	ra,16(sp)
   2a8f4:	dcc00317 	ldw	r19,12(sp)
   2a8f8:	dc800217 	ldw	r18,8(sp)
   2a8fc:	dc400117 	ldw	r17,4(sp)
   2a900:	dc000017 	ldw	r16,0(sp)
   2a904:	dec00504 	addi	sp,sp,20
   2a908:	002bfb81 	jmpi	2bfb8 <_write_r>

0002a90c <__sseek>:
   2a90c:	defffe04 	addi	sp,sp,-8
   2a910:	dc000015 	stw	r16,0(sp)
   2a914:	2821883a 	mov	r16,r5
   2a918:	2940038f 	ldh	r5,14(r5)
   2a91c:	dfc00115 	stw	ra,4(sp)
   2a920:	002c4ec0 	call	2c4ec <_lseek_r>
   2a924:	00ffffc4 	movi	r3,-1
   2a928:	10c00826 	beq	r2,r3,2a94c <__sseek+0x40>
   2a92c:	80c0030b 	ldhu	r3,12(r16)
   2a930:	80801415 	stw	r2,80(r16)
   2a934:	18c40014 	ori	r3,r3,4096
   2a938:	80c0030d 	sth	r3,12(r16)
   2a93c:	dfc00117 	ldw	ra,4(sp)
   2a940:	dc000017 	ldw	r16,0(sp)
   2a944:	dec00204 	addi	sp,sp,8
   2a948:	f800283a 	ret
   2a94c:	80c0030b 	ldhu	r3,12(r16)
   2a950:	18fbffcc 	andi	r3,r3,61439
   2a954:	80c0030d 	sth	r3,12(r16)
   2a958:	dfc00117 	ldw	ra,4(sp)
   2a95c:	dc000017 	ldw	r16,0(sp)
   2a960:	dec00204 	addi	sp,sp,8
   2a964:	f800283a 	ret

0002a968 <__sclose>:
   2a968:	2940038f 	ldh	r5,14(r5)
   2a96c:	002c0181 	jmpi	2c018 <_close_r>

0002a970 <__sprint_r.part.0>:
   2a970:	28801917 	ldw	r2,100(r5)
   2a974:	defff604 	addi	sp,sp,-40
   2a978:	dd400515 	stw	r21,20(sp)
   2a97c:	dfc00915 	stw	ra,36(sp)
   2a980:	df000815 	stw	fp,32(sp)
   2a984:	ddc00715 	stw	r23,28(sp)
   2a988:	dd800615 	stw	r22,24(sp)
   2a98c:	dd000415 	stw	r20,16(sp)
   2a990:	dcc00315 	stw	r19,12(sp)
   2a994:	dc800215 	stw	r18,8(sp)
   2a998:	dc400115 	stw	r17,4(sp)
   2a99c:	dc000015 	stw	r16,0(sp)
   2a9a0:	1088000c 	andi	r2,r2,8192
   2a9a4:	302b883a 	mov	r21,r6
   2a9a8:	10002e26 	beq	r2,zero,2aa64 <__sprint_r.part.0+0xf4>
   2a9ac:	30800217 	ldw	r2,8(r6)
   2a9b0:	35800017 	ldw	r22,0(r6)
   2a9b4:	10002926 	beq	r2,zero,2aa5c <__sprint_r.part.0+0xec>
   2a9b8:	2827883a 	mov	r19,r5
   2a9bc:	2029883a 	mov	r20,r4
   2a9c0:	b5c00104 	addi	r23,r22,4
   2a9c4:	04bfffc4 	movi	r18,-1
   2a9c8:	bc400017 	ldw	r17,0(r23)
   2a9cc:	b4000017 	ldw	r16,0(r22)
   2a9d0:	0039883a 	mov	fp,zero
   2a9d4:	8822d0ba 	srli	r17,r17,2
   2a9d8:	8800031e 	bne	r17,zero,2a9e8 <__sprint_r.part.0+0x78>
   2a9dc:	00001806 	br	2aa40 <__sprint_r.part.0+0xd0>
   2a9e0:	84000104 	addi	r16,r16,4
   2a9e4:	8f001526 	beq	r17,fp,2aa3c <__sprint_r.part.0+0xcc>
   2a9e8:	81400017 	ldw	r5,0(r16)
   2a9ec:	980d883a 	mov	r6,r19
   2a9f0:	a009883a 	mov	r4,r20
   2a9f4:	002c3980 	call	2c398 <_fputwc_r>
   2a9f8:	e7000044 	addi	fp,fp,1
   2a9fc:	14bff81e 	bne	r2,r18,2a9e0 <_gp+0xfffed950>
   2aa00:	9005883a 	mov	r2,r18
   2aa04:	a8000215 	stw	zero,8(r21)
   2aa08:	a8000115 	stw	zero,4(r21)
   2aa0c:	dfc00917 	ldw	ra,36(sp)
   2aa10:	df000817 	ldw	fp,32(sp)
   2aa14:	ddc00717 	ldw	r23,28(sp)
   2aa18:	dd800617 	ldw	r22,24(sp)
   2aa1c:	dd400517 	ldw	r21,20(sp)
   2aa20:	dd000417 	ldw	r20,16(sp)
   2aa24:	dcc00317 	ldw	r19,12(sp)
   2aa28:	dc800217 	ldw	r18,8(sp)
   2aa2c:	dc400117 	ldw	r17,4(sp)
   2aa30:	dc000017 	ldw	r16,0(sp)
   2aa34:	dec00a04 	addi	sp,sp,40
   2aa38:	f800283a 	ret
   2aa3c:	a8800217 	ldw	r2,8(r21)
   2aa40:	8c63883a 	add	r17,r17,r17
   2aa44:	8c63883a 	add	r17,r17,r17
   2aa48:	1445c83a 	sub	r2,r2,r17
   2aa4c:	a8800215 	stw	r2,8(r21)
   2aa50:	b5800204 	addi	r22,r22,8
   2aa54:	bdc00204 	addi	r23,r23,8
   2aa58:	103fdb1e 	bne	r2,zero,2a9c8 <_gp+0xfffed938>
   2aa5c:	0005883a 	mov	r2,zero
   2aa60:	003fe806 	br	2aa04 <_gp+0xfffed974>
   2aa64:	00285fc0 	call	285fc <__sfvwrite_r>
   2aa68:	003fe606 	br	2aa04 <_gp+0xfffed974>

0002aa6c <__sprint_r>:
   2aa6c:	30c00217 	ldw	r3,8(r6)
   2aa70:	18000126 	beq	r3,zero,2aa78 <__sprint_r+0xc>
   2aa74:	002a9701 	jmpi	2a970 <__sprint_r.part.0>
   2aa78:	30000115 	stw	zero,4(r6)
   2aa7c:	0005883a 	mov	r2,zero
   2aa80:	f800283a 	ret

0002aa84 <___vfiprintf_internal_r>:
   2aa84:	deffc904 	addi	sp,sp,-220
   2aa88:	df003515 	stw	fp,212(sp)
   2aa8c:	dd003115 	stw	r20,196(sp)
   2aa90:	dfc03615 	stw	ra,216(sp)
   2aa94:	ddc03415 	stw	r23,208(sp)
   2aa98:	dd803315 	stw	r22,204(sp)
   2aa9c:	dd403215 	stw	r21,200(sp)
   2aaa0:	dcc03015 	stw	r19,192(sp)
   2aaa4:	dc802f15 	stw	r18,188(sp)
   2aaa8:	dc402e15 	stw	r17,184(sp)
   2aaac:	dc002d15 	stw	r16,180(sp)
   2aab0:	d9002015 	stw	r4,128(sp)
   2aab4:	d9c02215 	stw	r7,136(sp)
   2aab8:	2829883a 	mov	r20,r5
   2aabc:	3039883a 	mov	fp,r6
   2aac0:	20000226 	beq	r4,zero,2aacc <___vfiprintf_internal_r+0x48>
   2aac4:	20800e17 	ldw	r2,56(r4)
   2aac8:	1000cf26 	beq	r2,zero,2ae08 <___vfiprintf_internal_r+0x384>
   2aacc:	a080030b 	ldhu	r2,12(r20)
   2aad0:	10c8000c 	andi	r3,r2,8192
   2aad4:	1800061e 	bne	r3,zero,2aaf0 <___vfiprintf_internal_r+0x6c>
   2aad8:	a1001917 	ldw	r4,100(r20)
   2aadc:	00f7ffc4 	movi	r3,-8193
   2aae0:	10880014 	ori	r2,r2,8192
   2aae4:	20c6703a 	and	r3,r4,r3
   2aae8:	a080030d 	sth	r2,12(r20)
   2aaec:	a0c01915 	stw	r3,100(r20)
   2aaf0:	10c0020c 	andi	r3,r2,8
   2aaf4:	1800a926 	beq	r3,zero,2ad9c <___vfiprintf_internal_r+0x318>
   2aaf8:	a0c00417 	ldw	r3,16(r20)
   2aafc:	1800a726 	beq	r3,zero,2ad9c <___vfiprintf_internal_r+0x318>
   2ab00:	1080068c 	andi	r2,r2,26
   2ab04:	00c00284 	movi	r3,10
   2ab08:	10c0ac26 	beq	r2,r3,2adbc <___vfiprintf_internal_r+0x338>
   2ab0c:	da801a04 	addi	r10,sp,104
   2ab10:	da801e15 	stw	r10,120(sp)
   2ab14:	d8801e17 	ldw	r2,120(sp)
   2ab18:	da8019c4 	addi	r10,sp,103
   2ab1c:	058000f4 	movhi	r22,3
   2ab20:	05c000f4 	movhi	r23,3
   2ab24:	da801f15 	stw	r10,124(sp)
   2ab28:	1295c83a 	sub	r10,r2,r10
   2ab2c:	b58cf304 	addi	r22,r22,13260
   2ab30:	bdccef04 	addi	r23,r23,13244
   2ab34:	dec01a15 	stw	sp,104(sp)
   2ab38:	d8001c15 	stw	zero,112(sp)
   2ab3c:	d8001b15 	stw	zero,108(sp)
   2ab40:	d8002615 	stw	zero,152(sp)
   2ab44:	d8002315 	stw	zero,140(sp)
   2ab48:	da802715 	stw	r10,156(sp)
   2ab4c:	d811883a 	mov	r8,sp
   2ab50:	dd002115 	stw	r20,132(sp)
   2ab54:	e021883a 	mov	r16,fp
   2ab58:	80800007 	ldb	r2,0(r16)
   2ab5c:	1003ea26 	beq	r2,zero,2bb08 <___vfiprintf_internal_r+0x1084>
   2ab60:	00c00944 	movi	r3,37
   2ab64:	8025883a 	mov	r18,r16
   2ab68:	10c0021e 	bne	r2,r3,2ab74 <___vfiprintf_internal_r+0xf0>
   2ab6c:	00001606 	br	2abc8 <___vfiprintf_internal_r+0x144>
   2ab70:	10c00326 	beq	r2,r3,2ab80 <___vfiprintf_internal_r+0xfc>
   2ab74:	94800044 	addi	r18,r18,1
   2ab78:	90800007 	ldb	r2,0(r18)
   2ab7c:	103ffc1e 	bne	r2,zero,2ab70 <_gp+0xfffedae0>
   2ab80:	9423c83a 	sub	r17,r18,r16
   2ab84:	88001026 	beq	r17,zero,2abc8 <___vfiprintf_internal_r+0x144>
   2ab88:	d8c01c17 	ldw	r3,112(sp)
   2ab8c:	d8801b17 	ldw	r2,108(sp)
   2ab90:	44000015 	stw	r16,0(r8)
   2ab94:	88c7883a 	add	r3,r17,r3
   2ab98:	10800044 	addi	r2,r2,1
   2ab9c:	44400115 	stw	r17,4(r8)
   2aba0:	d8c01c15 	stw	r3,112(sp)
   2aba4:	d8801b15 	stw	r2,108(sp)
   2aba8:	010001c4 	movi	r4,7
   2abac:	2080760e 	bge	r4,r2,2ad88 <___vfiprintf_internal_r+0x304>
   2abb0:	1803821e 	bne	r3,zero,2b9bc <___vfiprintf_internal_r+0xf38>
   2abb4:	da802317 	ldw	r10,140(sp)
   2abb8:	d8001b15 	stw	zero,108(sp)
   2abbc:	d811883a 	mov	r8,sp
   2abc0:	5455883a 	add	r10,r10,r17
   2abc4:	da802315 	stw	r10,140(sp)
   2abc8:	90800007 	ldb	r2,0(r18)
   2abcc:	10044626 	beq	r2,zero,2bce8 <___vfiprintf_internal_r+0x1264>
   2abd0:	90c00047 	ldb	r3,1(r18)
   2abd4:	94000044 	addi	r16,r18,1
   2abd8:	d8001d85 	stb	zero,118(sp)
   2abdc:	0009883a 	mov	r4,zero
   2abe0:	000f883a 	mov	r7,zero
   2abe4:	027fffc4 	movi	r9,-1
   2abe8:	0023883a 	mov	r17,zero
   2abec:	0029883a 	mov	r20,zero
   2abf0:	01401604 	movi	r5,88
   2abf4:	01800244 	movi	r6,9
   2abf8:	03400a84 	movi	r13,42
   2abfc:	03001b04 	movi	r12,108
   2ac00:	84000044 	addi	r16,r16,1
   2ac04:	18bff804 	addi	r2,r3,-32
   2ac08:	28827336 	bltu	r5,r2,2b5d8 <___vfiprintf_internal_r+0xb54>
   2ac0c:	100490ba 	slli	r2,r2,2
   2ac10:	028000f4 	movhi	r10,3
   2ac14:	52ab0904 	addi	r10,r10,-21468
   2ac18:	1285883a 	add	r2,r2,r10
   2ac1c:	10800017 	ldw	r2,0(r2)
   2ac20:	1000683a 	jmp	r2
   2ac24:	0002b30c 	andi	zero,zero,2764
   2ac28:	0002b5d8 	cmpnei	zero,zero,2775
   2ac2c:	0002b5d8 	cmpnei	zero,zero,2775
   2ac30:	0002b32c 	andhi	zero,zero,2764
   2ac34:	0002b5d8 	cmpnei	zero,zero,2775
   2ac38:	0002b5d8 	cmpnei	zero,zero,2775
   2ac3c:	0002b5d8 	cmpnei	zero,zero,2775
   2ac40:	0002b5d8 	cmpnei	zero,zero,2775
   2ac44:	0002b5d8 	cmpnei	zero,zero,2775
   2ac48:	0002b5d8 	cmpnei	zero,zero,2775
   2ac4c:	0002b514 	movui	zero,2772
   2ac50:	0002b530 	cmpltui	zero,zero,2772
   2ac54:	0002b5d8 	cmpnei	zero,zero,2775
   2ac58:	0002ae18 	cmpnei	zero,zero,2744
   2ac5c:	0002b540 	call	2b54 <__reset-0x1d4ac>
   2ac60:	0002b5d8 	cmpnei	zero,zero,2775
   2ac64:	0002b338 	rdprs	zero,zero,2764
   2ac68:	0002b344 	movi	zero,2765
   2ac6c:	0002b344 	movi	zero,2765
   2ac70:	0002b344 	movi	zero,2765
   2ac74:	0002b344 	movi	zero,2765
   2ac78:	0002b344 	movi	zero,2765
   2ac7c:	0002b344 	movi	zero,2765
   2ac80:	0002b344 	movi	zero,2765
   2ac84:	0002b344 	movi	zero,2765
   2ac88:	0002b344 	movi	zero,2765
   2ac8c:	0002b5d8 	cmpnei	zero,zero,2775
   2ac90:	0002b5d8 	cmpnei	zero,zero,2775
   2ac94:	0002b5d8 	cmpnei	zero,zero,2775
   2ac98:	0002b5d8 	cmpnei	zero,zero,2775
   2ac9c:	0002b5d8 	cmpnei	zero,zero,2775
   2aca0:	0002b5d8 	cmpnei	zero,zero,2775
   2aca4:	0002b5d8 	cmpnei	zero,zero,2775
   2aca8:	0002b5d8 	cmpnei	zero,zero,2775
   2acac:	0002b5d8 	cmpnei	zero,zero,2775
   2acb0:	0002b5d8 	cmpnei	zero,zero,2775
   2acb4:	0002b370 	cmpltui	zero,zero,2765
   2acb8:	0002b5d8 	cmpnei	zero,zero,2775
   2acbc:	0002b5d8 	cmpnei	zero,zero,2775
   2acc0:	0002b5d8 	cmpnei	zero,zero,2775
   2acc4:	0002b5d8 	cmpnei	zero,zero,2775
   2acc8:	0002b5d8 	cmpnei	zero,zero,2775
   2accc:	0002b5d8 	cmpnei	zero,zero,2775
   2acd0:	0002b5d8 	cmpnei	zero,zero,2775
   2acd4:	0002b5d8 	cmpnei	zero,zero,2775
   2acd8:	0002b5d8 	cmpnei	zero,zero,2775
   2acdc:	0002b5d8 	cmpnei	zero,zero,2775
   2ace0:	0002b3a8 	cmpgeui	zero,zero,2766
   2ace4:	0002b5d8 	cmpnei	zero,zero,2775
   2ace8:	0002b5d8 	cmpnei	zero,zero,2775
   2acec:	0002b5d8 	cmpnei	zero,zero,2775
   2acf0:	0002b5d8 	cmpnei	zero,zero,2775
   2acf4:	0002b5d8 	cmpnei	zero,zero,2775
   2acf8:	0002b400 	call	2b40 <__reset-0x1d4c0>
   2acfc:	0002b5d8 	cmpnei	zero,zero,2775
   2ad00:	0002b5d8 	cmpnei	zero,zero,2775
   2ad04:	0002b470 	cmpltui	zero,zero,2769
   2ad08:	0002b5d8 	cmpnei	zero,zero,2775
   2ad0c:	0002b5d8 	cmpnei	zero,zero,2775
   2ad10:	0002b5d8 	cmpnei	zero,zero,2775
   2ad14:	0002b5d8 	cmpnei	zero,zero,2775
   2ad18:	0002b5d8 	cmpnei	zero,zero,2775
   2ad1c:	0002b5d8 	cmpnei	zero,zero,2775
   2ad20:	0002b5d8 	cmpnei	zero,zero,2775
   2ad24:	0002b5d8 	cmpnei	zero,zero,2775
   2ad28:	0002b5d8 	cmpnei	zero,zero,2775
   2ad2c:	0002b5d8 	cmpnei	zero,zero,2775
   2ad30:	0002b21c 	xori	zero,zero,2760
   2ad34:	0002b248 	cmpgei	zero,zero,2761
   2ad38:	0002b5d8 	cmpnei	zero,zero,2775
   2ad3c:	0002b5d8 	cmpnei	zero,zero,2775
   2ad40:	0002b5d8 	cmpnei	zero,zero,2775
   2ad44:	0002b580 	call	2b58 <__reset-0x1d4a8>
   2ad48:	0002b248 	cmpgei	zero,zero,2761
   2ad4c:	0002b5d8 	cmpnei	zero,zero,2775
   2ad50:	0002b5d8 	cmpnei	zero,zero,2775
   2ad54:	0002b0dc 	xori	zero,zero,2755
   2ad58:	0002b5d8 	cmpnei	zero,zero,2775
   2ad5c:	0002b0ec 	andhi	zero,zero,2755
   2ad60:	0002b128 	cmpgeui	zero,zero,2756
   2ad64:	0002ae24 	muli	zero,zero,2744
   2ad68:	0002b0d0 	cmplti	zero,zero,2755
   2ad6c:	0002b5d8 	cmpnei	zero,zero,2775
   2ad70:	0002b4ac 	andhi	zero,zero,2770
   2ad74:	0002b5d8 	cmpnei	zero,zero,2775
   2ad78:	0002b504 	movi	zero,2772
   2ad7c:	0002b5d8 	cmpnei	zero,zero,2775
   2ad80:	0002b5d8 	cmpnei	zero,zero,2775
   2ad84:	0002b1c8 	cmpgei	zero,zero,2759
   2ad88:	42000204 	addi	r8,r8,8
   2ad8c:	da802317 	ldw	r10,140(sp)
   2ad90:	5455883a 	add	r10,r10,r17
   2ad94:	da802315 	stw	r10,140(sp)
   2ad98:	003f8b06 	br	2abc8 <_gp+0xfffedb38>
   2ad9c:	d9002017 	ldw	r4,128(sp)
   2ada0:	a00b883a 	mov	r5,r20
   2ada4:	00261a40 	call	261a4 <__swsetup_r>
   2ada8:	1003b11e 	bne	r2,zero,2bc70 <___vfiprintf_internal_r+0x11ec>
   2adac:	a080030b 	ldhu	r2,12(r20)
   2adb0:	00c00284 	movi	r3,10
   2adb4:	1080068c 	andi	r2,r2,26
   2adb8:	10ff541e 	bne	r2,r3,2ab0c <_gp+0xfffeda7c>
   2adbc:	a080038f 	ldh	r2,14(r20)
   2adc0:	103f5216 	blt	r2,zero,2ab0c <_gp+0xfffeda7c>
   2adc4:	d9c02217 	ldw	r7,136(sp)
   2adc8:	d9002017 	ldw	r4,128(sp)
   2adcc:	e00d883a 	mov	r6,fp
   2add0:	a00b883a 	mov	r5,r20
   2add4:	002befc0 	call	2befc <__sbprintf>
   2add8:	dfc03617 	ldw	ra,216(sp)
   2addc:	df003517 	ldw	fp,212(sp)
   2ade0:	ddc03417 	ldw	r23,208(sp)
   2ade4:	dd803317 	ldw	r22,204(sp)
   2ade8:	dd403217 	ldw	r21,200(sp)
   2adec:	dd003117 	ldw	r20,196(sp)
   2adf0:	dcc03017 	ldw	r19,192(sp)
   2adf4:	dc802f17 	ldw	r18,188(sp)
   2adf8:	dc402e17 	ldw	r17,184(sp)
   2adfc:	dc002d17 	ldw	r16,180(sp)
   2ae00:	dec03704 	addi	sp,sp,220
   2ae04:	f800283a 	ret
   2ae08:	00281780 	call	28178 <__sinit>
   2ae0c:	003f2f06 	br	2aacc <_gp+0xfffeda3c>
   2ae10:	0463c83a 	sub	r17,zero,r17
   2ae14:	d8802215 	stw	r2,136(sp)
   2ae18:	a5000114 	ori	r20,r20,4
   2ae1c:	80c00007 	ldb	r3,0(r16)
   2ae20:	003f7706 	br	2ac00 <_gp+0xfffedb70>
   2ae24:	00800c04 	movi	r2,48
   2ae28:	da802217 	ldw	r10,136(sp)
   2ae2c:	d8801d05 	stb	r2,116(sp)
   2ae30:	00801e04 	movi	r2,120
   2ae34:	d8801d45 	stb	r2,117(sp)
   2ae38:	d8001d85 	stb	zero,118(sp)
   2ae3c:	50c00104 	addi	r3,r10,4
   2ae40:	54800017 	ldw	r18,0(r10)
   2ae44:	0027883a 	mov	r19,zero
   2ae48:	a0800094 	ori	r2,r20,2
   2ae4c:	48030b16 	blt	r9,zero,2ba7c <___vfiprintf_internal_r+0xff8>
   2ae50:	00bfdfc4 	movi	r2,-129
   2ae54:	a096703a 	and	r11,r20,r2
   2ae58:	d8c02215 	stw	r3,136(sp)
   2ae5c:	5d000094 	ori	r20,r11,2
   2ae60:	90032b1e 	bne	r18,zero,2bb10 <___vfiprintf_internal_r+0x108c>
   2ae64:	008000f4 	movhi	r2,3
   2ae68:	108c8e04 	addi	r2,r2,12856
   2ae6c:	d8802615 	stw	r2,152(sp)
   2ae70:	0039883a 	mov	fp,zero
   2ae74:	48017b1e 	bne	r9,zero,2b464 <___vfiprintf_internal_r+0x9e0>
   2ae78:	0013883a 	mov	r9,zero
   2ae7c:	0027883a 	mov	r19,zero
   2ae80:	dd401a04 	addi	r21,sp,104
   2ae84:	4825883a 	mov	r18,r9
   2ae88:	4cc0010e 	bge	r9,r19,2ae90 <___vfiprintf_internal_r+0x40c>
   2ae8c:	9825883a 	mov	r18,r19
   2ae90:	e7003fcc 	andi	fp,fp,255
   2ae94:	e700201c 	xori	fp,fp,128
   2ae98:	e73fe004 	addi	fp,fp,-128
   2ae9c:	e0000126 	beq	fp,zero,2aea4 <___vfiprintf_internal_r+0x420>
   2aea0:	94800044 	addi	r18,r18,1
   2aea4:	a380008c 	andi	r14,r20,2
   2aea8:	70000126 	beq	r14,zero,2aeb0 <___vfiprintf_internal_r+0x42c>
   2aeac:	94800084 	addi	r18,r18,2
   2aeb0:	a700210c 	andi	fp,r20,132
   2aeb4:	e001df1e 	bne	fp,zero,2b634 <___vfiprintf_internal_r+0xbb0>
   2aeb8:	8c87c83a 	sub	r3,r17,r18
   2aebc:	00c1dd0e 	bge	zero,r3,2b634 <___vfiprintf_internal_r+0xbb0>
   2aec0:	01c00404 	movi	r7,16
   2aec4:	d8801c17 	ldw	r2,112(sp)
   2aec8:	38c3ad0e 	bge	r7,r3,2bd80 <___vfiprintf_internal_r+0x12fc>
   2aecc:	028000f4 	movhi	r10,3
   2aed0:	528cf304 	addi	r10,r10,13260
   2aed4:	dc002915 	stw	r16,164(sp)
   2aed8:	d9801b17 	ldw	r6,108(sp)
   2aedc:	da802415 	stw	r10,144(sp)
   2aee0:	03c001c4 	movi	r15,7
   2aee4:	da402515 	stw	r9,148(sp)
   2aee8:	db802815 	stw	r14,160(sp)
   2aeec:	1821883a 	mov	r16,r3
   2aef0:	00000506 	br	2af08 <___vfiprintf_internal_r+0x484>
   2aef4:	31400084 	addi	r5,r6,2
   2aef8:	42000204 	addi	r8,r8,8
   2aefc:	200d883a 	mov	r6,r4
   2af00:	843ffc04 	addi	r16,r16,-16
   2af04:	3c000d0e 	bge	r7,r16,2af3c <___vfiprintf_internal_r+0x4b8>
   2af08:	10800404 	addi	r2,r2,16
   2af0c:	31000044 	addi	r4,r6,1
   2af10:	45800015 	stw	r22,0(r8)
   2af14:	41c00115 	stw	r7,4(r8)
   2af18:	d8801c15 	stw	r2,112(sp)
   2af1c:	d9001b15 	stw	r4,108(sp)
   2af20:	793ff40e 	bge	r15,r4,2aef4 <_gp+0xfffede64>
   2af24:	1001b51e 	bne	r2,zero,2b5fc <___vfiprintf_internal_r+0xb78>
   2af28:	843ffc04 	addi	r16,r16,-16
   2af2c:	000d883a 	mov	r6,zero
   2af30:	01400044 	movi	r5,1
   2af34:	d811883a 	mov	r8,sp
   2af38:	3c3ff316 	blt	r7,r16,2af08 <_gp+0xfffede78>
   2af3c:	8007883a 	mov	r3,r16
   2af40:	da402517 	ldw	r9,148(sp)
   2af44:	db802817 	ldw	r14,160(sp)
   2af48:	dc002917 	ldw	r16,164(sp)
   2af4c:	da802417 	ldw	r10,144(sp)
   2af50:	1885883a 	add	r2,r3,r2
   2af54:	40c00115 	stw	r3,4(r8)
   2af58:	42800015 	stw	r10,0(r8)
   2af5c:	d8801c15 	stw	r2,112(sp)
   2af60:	d9401b15 	stw	r5,108(sp)
   2af64:	00c001c4 	movi	r3,7
   2af68:	19426016 	blt	r3,r5,2b8ec <___vfiprintf_internal_r+0xe68>
   2af6c:	d8c01d87 	ldb	r3,118(sp)
   2af70:	42000204 	addi	r8,r8,8
   2af74:	29000044 	addi	r4,r5,1
   2af78:	1801b31e 	bne	r3,zero,2b648 <___vfiprintf_internal_r+0xbc4>
   2af7c:	7001c026 	beq	r14,zero,2b680 <___vfiprintf_internal_r+0xbfc>
   2af80:	d8c01d04 	addi	r3,sp,116
   2af84:	10800084 	addi	r2,r2,2
   2af88:	40c00015 	stw	r3,0(r8)
   2af8c:	00c00084 	movi	r3,2
   2af90:	40c00115 	stw	r3,4(r8)
   2af94:	d8801c15 	stw	r2,112(sp)
   2af98:	d9001b15 	stw	r4,108(sp)
   2af9c:	00c001c4 	movi	r3,7
   2afa0:	1902650e 	bge	r3,r4,2b938 <___vfiprintf_internal_r+0xeb4>
   2afa4:	10029a1e 	bne	r2,zero,2ba10 <___vfiprintf_internal_r+0xf8c>
   2afa8:	00c02004 	movi	r3,128
   2afac:	01000044 	movi	r4,1
   2afb0:	000b883a 	mov	r5,zero
   2afb4:	d811883a 	mov	r8,sp
   2afb8:	e0c1b31e 	bne	fp,r3,2b688 <___vfiprintf_internal_r+0xc04>
   2afbc:	8cb9c83a 	sub	fp,r17,r18
   2afc0:	0701b10e 	bge	zero,fp,2b688 <___vfiprintf_internal_r+0xc04>
   2afc4:	01c00404 	movi	r7,16
   2afc8:	3f03890e 	bge	r7,fp,2bdf0 <___vfiprintf_internal_r+0x136c>
   2afcc:	00c000f4 	movhi	r3,3
   2afd0:	18ccef04 	addi	r3,r3,13244
   2afd4:	d8c02415 	stw	r3,144(sp)
   2afd8:	8007883a 	mov	r3,r16
   2afdc:	034001c4 	movi	r13,7
   2afe0:	e021883a 	mov	r16,fp
   2afe4:	da402515 	stw	r9,148(sp)
   2afe8:	1839883a 	mov	fp,r3
   2afec:	00000506 	br	2b004 <___vfiprintf_internal_r+0x580>
   2aff0:	29800084 	addi	r6,r5,2
   2aff4:	42000204 	addi	r8,r8,8
   2aff8:	180b883a 	mov	r5,r3
   2affc:	843ffc04 	addi	r16,r16,-16
   2b000:	3c000d0e 	bge	r7,r16,2b038 <___vfiprintf_internal_r+0x5b4>
   2b004:	10800404 	addi	r2,r2,16
   2b008:	28c00044 	addi	r3,r5,1
   2b00c:	45c00015 	stw	r23,0(r8)
   2b010:	41c00115 	stw	r7,4(r8)
   2b014:	d8801c15 	stw	r2,112(sp)
   2b018:	d8c01b15 	stw	r3,108(sp)
   2b01c:	68fff40e 	bge	r13,r3,2aff0 <_gp+0xfffedf60>
   2b020:	1002241e 	bne	r2,zero,2b8b4 <___vfiprintf_internal_r+0xe30>
   2b024:	843ffc04 	addi	r16,r16,-16
   2b028:	01800044 	movi	r6,1
   2b02c:	000b883a 	mov	r5,zero
   2b030:	d811883a 	mov	r8,sp
   2b034:	3c3ff316 	blt	r7,r16,2b004 <_gp+0xfffedf74>
   2b038:	da402517 	ldw	r9,148(sp)
   2b03c:	e007883a 	mov	r3,fp
   2b040:	8039883a 	mov	fp,r16
   2b044:	1821883a 	mov	r16,r3
   2b048:	d8c02417 	ldw	r3,144(sp)
   2b04c:	1705883a 	add	r2,r2,fp
   2b050:	47000115 	stw	fp,4(r8)
   2b054:	40c00015 	stw	r3,0(r8)
   2b058:	d8801c15 	stw	r2,112(sp)
   2b05c:	d9801b15 	stw	r6,108(sp)
   2b060:	00c001c4 	movi	r3,7
   2b064:	19827616 	blt	r3,r6,2ba40 <___vfiprintf_internal_r+0xfbc>
   2b068:	4cf9c83a 	sub	fp,r9,r19
   2b06c:	42000204 	addi	r8,r8,8
   2b070:	31000044 	addi	r4,r6,1
   2b074:	300b883a 	mov	r5,r6
   2b078:	07018516 	blt	zero,fp,2b690 <___vfiprintf_internal_r+0xc0c>
   2b07c:	9885883a 	add	r2,r19,r2
   2b080:	45400015 	stw	r21,0(r8)
   2b084:	44c00115 	stw	r19,4(r8)
   2b088:	d8801c15 	stw	r2,112(sp)
   2b08c:	d9001b15 	stw	r4,108(sp)
   2b090:	00c001c4 	movi	r3,7
   2b094:	1901dd0e 	bge	r3,r4,2b80c <___vfiprintf_internal_r+0xd88>
   2b098:	1002401e 	bne	r2,zero,2b99c <___vfiprintf_internal_r+0xf18>
   2b09c:	d8001b15 	stw	zero,108(sp)
   2b0a0:	a2c0010c 	andi	r11,r20,4
   2b0a4:	58000226 	beq	r11,zero,2b0b0 <___vfiprintf_internal_r+0x62c>
   2b0a8:	8ca7c83a 	sub	r19,r17,r18
   2b0ac:	04c2f216 	blt	zero,r19,2bc78 <___vfiprintf_internal_r+0x11f4>
   2b0b0:	8c80010e 	bge	r17,r18,2b0b8 <___vfiprintf_internal_r+0x634>
   2b0b4:	9023883a 	mov	r17,r18
   2b0b8:	da802317 	ldw	r10,140(sp)
   2b0bc:	5455883a 	add	r10,r10,r17
   2b0c0:	da802315 	stw	r10,140(sp)
   2b0c4:	d8001b15 	stw	zero,108(sp)
   2b0c8:	d811883a 	mov	r8,sp
   2b0cc:	003ea206 	br	2ab58 <_gp+0xfffedac8>
   2b0d0:	a5000814 	ori	r20,r20,32
   2b0d4:	80c00007 	ldb	r3,0(r16)
   2b0d8:	003ec906 	br	2ac00 <_gp+0xfffedb70>
   2b0dc:	80c00007 	ldb	r3,0(r16)
   2b0e0:	1b030926 	beq	r3,r12,2bd08 <___vfiprintf_internal_r+0x1284>
   2b0e4:	a5000414 	ori	r20,r20,16
   2b0e8:	003ec506 	br	2ac00 <_gp+0xfffedb70>
   2b0ec:	21003fcc 	andi	r4,r4,255
   2b0f0:	20035e1e 	bne	r4,zero,2be6c <___vfiprintf_internal_r+0x13e8>
   2b0f4:	a080080c 	andi	r2,r20,32
   2b0f8:	1002a526 	beq	r2,zero,2bb90 <___vfiprintf_internal_r+0x110c>
   2b0fc:	da802217 	ldw	r10,136(sp)
   2b100:	50800017 	ldw	r2,0(r10)
   2b104:	da802317 	ldw	r10,140(sp)
   2b108:	5007d7fa 	srai	r3,r10,31
   2b10c:	da802217 	ldw	r10,136(sp)
   2b110:	10c00115 	stw	r3,4(r2)
   2b114:	52800104 	addi	r10,r10,4
   2b118:	da802215 	stw	r10,136(sp)
   2b11c:	da802317 	ldw	r10,140(sp)
   2b120:	12800015 	stw	r10,0(r2)
   2b124:	003e8c06 	br	2ab58 <_gp+0xfffedac8>
   2b128:	21003fcc 	andi	r4,r4,255
   2b12c:	2003511e 	bne	r4,zero,2be74 <___vfiprintf_internal_r+0x13f0>
   2b130:	a080080c 	andi	r2,r20,32
   2b134:	1000a126 	beq	r2,zero,2b3bc <___vfiprintf_internal_r+0x938>
   2b138:	da802217 	ldw	r10,136(sp)
   2b13c:	d8001d85 	stb	zero,118(sp)
   2b140:	50800204 	addi	r2,r10,8
   2b144:	54800017 	ldw	r18,0(r10)
   2b148:	54c00117 	ldw	r19,4(r10)
   2b14c:	4802b416 	blt	r9,zero,2bc20 <___vfiprintf_internal_r+0x119c>
   2b150:	013fdfc4 	movi	r4,-129
   2b154:	94c6b03a 	or	r3,r18,r19
   2b158:	d8802215 	stw	r2,136(sp)
   2b15c:	a128703a 	and	r20,r20,r4
   2b160:	1800a226 	beq	r3,zero,2b3ec <___vfiprintf_internal_r+0x968>
   2b164:	0039883a 	mov	fp,zero
   2b168:	dd401a04 	addi	r21,sp,104
   2b16c:	9006d0fa 	srli	r3,r18,3
   2b170:	9808977a 	slli	r4,r19,29
   2b174:	9826d0fa 	srli	r19,r19,3
   2b178:	948001cc 	andi	r18,r18,7
   2b17c:	90800c04 	addi	r2,r18,48
   2b180:	ad7fffc4 	addi	r21,r21,-1
   2b184:	20e4b03a 	or	r18,r4,r3
   2b188:	a8800005 	stb	r2,0(r21)
   2b18c:	94c6b03a 	or	r3,r18,r19
   2b190:	183ff61e 	bne	r3,zero,2b16c <_gp+0xfffee0dc>
   2b194:	a0c0004c 	andi	r3,r20,1
   2b198:	18005926 	beq	r3,zero,2b300 <___vfiprintf_internal_r+0x87c>
   2b19c:	10803fcc 	andi	r2,r2,255
   2b1a0:	1080201c 	xori	r2,r2,128
   2b1a4:	10bfe004 	addi	r2,r2,-128
   2b1a8:	00c00c04 	movi	r3,48
   2b1ac:	10c05426 	beq	r2,r3,2b300 <___vfiprintf_internal_r+0x87c>
   2b1b0:	da801e17 	ldw	r10,120(sp)
   2b1b4:	a8bfffc4 	addi	r2,r21,-1
   2b1b8:	a8ffffc5 	stb	r3,-1(r21)
   2b1bc:	50a7c83a 	sub	r19,r10,r2
   2b1c0:	102b883a 	mov	r21,r2
   2b1c4:	003f2f06 	br	2ae84 <_gp+0xfffeddf4>
   2b1c8:	21003fcc 	andi	r4,r4,255
   2b1cc:	2003421e 	bne	r4,zero,2bed8 <___vfiprintf_internal_r+0x1454>
   2b1d0:	008000f4 	movhi	r2,3
   2b1d4:	108c8e04 	addi	r2,r2,12856
   2b1d8:	d8802615 	stw	r2,152(sp)
   2b1dc:	a080080c 	andi	r2,r20,32
   2b1e0:	1000aa26 	beq	r2,zero,2b48c <___vfiprintf_internal_r+0xa08>
   2b1e4:	da802217 	ldw	r10,136(sp)
   2b1e8:	54800017 	ldw	r18,0(r10)
   2b1ec:	54c00117 	ldw	r19,4(r10)
   2b1f0:	52800204 	addi	r10,r10,8
   2b1f4:	da802215 	stw	r10,136(sp)
   2b1f8:	a080004c 	andi	r2,r20,1
   2b1fc:	1001d226 	beq	r2,zero,2b948 <___vfiprintf_internal_r+0xec4>
   2b200:	94c4b03a 	or	r2,r18,r19
   2b204:	1002351e 	bne	r2,zero,2badc <___vfiprintf_internal_r+0x1058>
   2b208:	d8001d85 	stb	zero,118(sp)
   2b20c:	48022216 	blt	r9,zero,2ba98 <___vfiprintf_internal_r+0x1014>
   2b210:	00bfdfc4 	movi	r2,-129
   2b214:	a0a8703a 	and	r20,r20,r2
   2b218:	003f1506 	br	2ae70 <_gp+0xfffedde0>
   2b21c:	da802217 	ldw	r10,136(sp)
   2b220:	04800044 	movi	r18,1
   2b224:	d8001d85 	stb	zero,118(sp)
   2b228:	50800017 	ldw	r2,0(r10)
   2b22c:	52800104 	addi	r10,r10,4
   2b230:	da802215 	stw	r10,136(sp)
   2b234:	d8801005 	stb	r2,64(sp)
   2b238:	9027883a 	mov	r19,r18
   2b23c:	dd401004 	addi	r21,sp,64
   2b240:	0013883a 	mov	r9,zero
   2b244:	003f1706 	br	2aea4 <_gp+0xfffede14>
   2b248:	21003fcc 	andi	r4,r4,255
   2b24c:	2003201e 	bne	r4,zero,2bed0 <___vfiprintf_internal_r+0x144c>
   2b250:	a080080c 	andi	r2,r20,32
   2b254:	10004b26 	beq	r2,zero,2b384 <___vfiprintf_internal_r+0x900>
   2b258:	da802217 	ldw	r10,136(sp)
   2b25c:	50800117 	ldw	r2,4(r10)
   2b260:	54800017 	ldw	r18,0(r10)
   2b264:	52800204 	addi	r10,r10,8
   2b268:	da802215 	stw	r10,136(sp)
   2b26c:	1027883a 	mov	r19,r2
   2b270:	10022c16 	blt	r2,zero,2bb24 <___vfiprintf_internal_r+0x10a0>
   2b274:	df001d83 	ldbu	fp,118(sp)
   2b278:	48007216 	blt	r9,zero,2b444 <___vfiprintf_internal_r+0x9c0>
   2b27c:	00ffdfc4 	movi	r3,-129
   2b280:	94c4b03a 	or	r2,r18,r19
   2b284:	a0e8703a 	and	r20,r20,r3
   2b288:	1000cc26 	beq	r2,zero,2b5bc <___vfiprintf_internal_r+0xb38>
   2b28c:	98021026 	beq	r19,zero,2bad0 <___vfiprintf_internal_r+0x104c>
   2b290:	dc402415 	stw	r17,144(sp)
   2b294:	dc002515 	stw	r16,148(sp)
   2b298:	9823883a 	mov	r17,r19
   2b29c:	9021883a 	mov	r16,r18
   2b2a0:	dd401a04 	addi	r21,sp,104
   2b2a4:	4825883a 	mov	r18,r9
   2b2a8:	4027883a 	mov	r19,r8
   2b2ac:	8009883a 	mov	r4,r16
   2b2b0:	880b883a 	mov	r5,r17
   2b2b4:	01800284 	movi	r6,10
   2b2b8:	000f883a 	mov	r7,zero
   2b2bc:	002ce640 	call	2ce64 <__umoddi3>
   2b2c0:	10800c04 	addi	r2,r2,48
   2b2c4:	ad7fffc4 	addi	r21,r21,-1
   2b2c8:	8009883a 	mov	r4,r16
   2b2cc:	880b883a 	mov	r5,r17
   2b2d0:	a8800005 	stb	r2,0(r21)
   2b2d4:	01800284 	movi	r6,10
   2b2d8:	000f883a 	mov	r7,zero
   2b2dc:	002c8ec0 	call	2c8ec <__udivdi3>
   2b2e0:	1021883a 	mov	r16,r2
   2b2e4:	10c4b03a 	or	r2,r2,r3
   2b2e8:	1823883a 	mov	r17,r3
   2b2ec:	103fef1e 	bne	r2,zero,2b2ac <_gp+0xfffee21c>
   2b2f0:	dc402417 	ldw	r17,144(sp)
   2b2f4:	dc002517 	ldw	r16,148(sp)
   2b2f8:	9013883a 	mov	r9,r18
   2b2fc:	9811883a 	mov	r8,r19
   2b300:	da801e17 	ldw	r10,120(sp)
   2b304:	5567c83a 	sub	r19,r10,r21
   2b308:	003ede06 	br	2ae84 <_gp+0xfffeddf4>
   2b30c:	38803fcc 	andi	r2,r7,255
   2b310:	1080201c 	xori	r2,r2,128
   2b314:	10bfe004 	addi	r2,r2,-128
   2b318:	1002371e 	bne	r2,zero,2bbf8 <___vfiprintf_internal_r+0x1174>
   2b31c:	01000044 	movi	r4,1
   2b320:	01c00804 	movi	r7,32
   2b324:	80c00007 	ldb	r3,0(r16)
   2b328:	003e3506 	br	2ac00 <_gp+0xfffedb70>
   2b32c:	a5000054 	ori	r20,r20,1
   2b330:	80c00007 	ldb	r3,0(r16)
   2b334:	003e3206 	br	2ac00 <_gp+0xfffedb70>
   2b338:	a5002014 	ori	r20,r20,128
   2b33c:	80c00007 	ldb	r3,0(r16)
   2b340:	003e2f06 	br	2ac00 <_gp+0xfffedb70>
   2b344:	8015883a 	mov	r10,r16
   2b348:	0023883a 	mov	r17,zero
   2b34c:	18bff404 	addi	r2,r3,-48
   2b350:	50c00007 	ldb	r3,0(r10)
   2b354:	8c4002a4 	muli	r17,r17,10
   2b358:	84000044 	addi	r16,r16,1
   2b35c:	8015883a 	mov	r10,r16
   2b360:	1463883a 	add	r17,r2,r17
   2b364:	18bff404 	addi	r2,r3,-48
   2b368:	30bff92e 	bgeu	r6,r2,2b350 <_gp+0xfffee2c0>
   2b36c:	003e2506 	br	2ac04 <_gp+0xfffedb74>
   2b370:	21003fcc 	andi	r4,r4,255
   2b374:	2002d41e 	bne	r4,zero,2bec8 <___vfiprintf_internal_r+0x1444>
   2b378:	a5000414 	ori	r20,r20,16
   2b37c:	a080080c 	andi	r2,r20,32
   2b380:	103fb51e 	bne	r2,zero,2b258 <_gp+0xfffee1c8>
   2b384:	a080040c 	andi	r2,r20,16
   2b388:	1001f826 	beq	r2,zero,2bb6c <___vfiprintf_internal_r+0x10e8>
   2b38c:	da802217 	ldw	r10,136(sp)
   2b390:	54800017 	ldw	r18,0(r10)
   2b394:	52800104 	addi	r10,r10,4
   2b398:	da802215 	stw	r10,136(sp)
   2b39c:	9027d7fa 	srai	r19,r18,31
   2b3a0:	9805883a 	mov	r2,r19
   2b3a4:	003fb206 	br	2b270 <_gp+0xfffee1e0>
   2b3a8:	21003fcc 	andi	r4,r4,255
   2b3ac:	2002c41e 	bne	r4,zero,2bec0 <___vfiprintf_internal_r+0x143c>
   2b3b0:	a5000414 	ori	r20,r20,16
   2b3b4:	a080080c 	andi	r2,r20,32
   2b3b8:	103f5f1e 	bne	r2,zero,2b138 <_gp+0xfffee0a8>
   2b3bc:	a080040c 	andi	r2,r20,16
   2b3c0:	10020f26 	beq	r2,zero,2bc00 <___vfiprintf_internal_r+0x117c>
   2b3c4:	da802217 	ldw	r10,136(sp)
   2b3c8:	d8001d85 	stb	zero,118(sp)
   2b3cc:	0027883a 	mov	r19,zero
   2b3d0:	50800104 	addi	r2,r10,4
   2b3d4:	54800017 	ldw	r18,0(r10)
   2b3d8:	48021116 	blt	r9,zero,2bc20 <___vfiprintf_internal_r+0x119c>
   2b3dc:	00ffdfc4 	movi	r3,-129
   2b3e0:	d8802215 	stw	r2,136(sp)
   2b3e4:	a0e8703a 	and	r20,r20,r3
   2b3e8:	903f5e1e 	bne	r18,zero,2b164 <_gp+0xfffee0d4>
   2b3ec:	0039883a 	mov	fp,zero
   2b3f0:	4802a626 	beq	r9,zero,2be8c <___vfiprintf_internal_r+0x1408>
   2b3f4:	0025883a 	mov	r18,zero
   2b3f8:	0027883a 	mov	r19,zero
   2b3fc:	003f5a06 	br	2b168 <_gp+0xfffee0d8>
   2b400:	21003fcc 	andi	r4,r4,255
   2b404:	20029f1e 	bne	r4,zero,2be84 <___vfiprintf_internal_r+0x1400>
   2b408:	a5000414 	ori	r20,r20,16
   2b40c:	a080080c 	andi	r2,r20,32
   2b410:	10005e1e 	bne	r2,zero,2b58c <___vfiprintf_internal_r+0xb08>
   2b414:	a080040c 	andi	r2,r20,16
   2b418:	1001a21e 	bne	r2,zero,2baa4 <___vfiprintf_internal_r+0x1020>
   2b41c:	a080100c 	andi	r2,r20,64
   2b420:	d8001d85 	stb	zero,118(sp)
   2b424:	da802217 	ldw	r10,136(sp)
   2b428:	1002231e 	bne	r2,zero,2bcb8 <___vfiprintf_internal_r+0x1234>
   2b42c:	50800104 	addi	r2,r10,4
   2b430:	54800017 	ldw	r18,0(r10)
   2b434:	0027883a 	mov	r19,zero
   2b438:	4801a00e 	bge	r9,zero,2babc <___vfiprintf_internal_r+0x1038>
   2b43c:	d8802215 	stw	r2,136(sp)
   2b440:	0039883a 	mov	fp,zero
   2b444:	94c4b03a 	or	r2,r18,r19
   2b448:	103f901e 	bne	r2,zero,2b28c <_gp+0xfffee1fc>
   2b44c:	00800044 	movi	r2,1
   2b450:	10803fcc 	andi	r2,r2,255
   2b454:	00c00044 	movi	r3,1
   2b458:	10c05926 	beq	r2,r3,2b5c0 <___vfiprintf_internal_r+0xb3c>
   2b45c:	00c00084 	movi	r3,2
   2b460:	10ffe41e 	bne	r2,r3,2b3f4 <_gp+0xfffee364>
   2b464:	0025883a 	mov	r18,zero
   2b468:	0027883a 	mov	r19,zero
   2b46c:	00013d06 	br	2b964 <___vfiprintf_internal_r+0xee0>
   2b470:	21003fcc 	andi	r4,r4,255
   2b474:	2002811e 	bne	r4,zero,2be7c <___vfiprintf_internal_r+0x13f8>
   2b478:	008000f4 	movhi	r2,3
   2b47c:	108c8904 	addi	r2,r2,12836
   2b480:	d8802615 	stw	r2,152(sp)
   2b484:	a080080c 	andi	r2,r20,32
   2b488:	103f561e 	bne	r2,zero,2b1e4 <_gp+0xfffee154>
   2b48c:	a080040c 	andi	r2,r20,16
   2b490:	1001d126 	beq	r2,zero,2bbd8 <___vfiprintf_internal_r+0x1154>
   2b494:	da802217 	ldw	r10,136(sp)
   2b498:	0027883a 	mov	r19,zero
   2b49c:	54800017 	ldw	r18,0(r10)
   2b4a0:	52800104 	addi	r10,r10,4
   2b4a4:	da802215 	stw	r10,136(sp)
   2b4a8:	003f5306 	br	2b1f8 <_gp+0xfffee168>
   2b4ac:	da802217 	ldw	r10,136(sp)
   2b4b0:	d8001d85 	stb	zero,118(sp)
   2b4b4:	55400017 	ldw	r21,0(r10)
   2b4b8:	50c00104 	addi	r3,r10,4
   2b4bc:	a8024226 	beq	r21,zero,2bdc8 <___vfiprintf_internal_r+0x1344>
   2b4c0:	48021816 	blt	r9,zero,2bd24 <___vfiprintf_internal_r+0x12a0>
   2b4c4:	480d883a 	mov	r6,r9
   2b4c8:	000b883a 	mov	r5,zero
   2b4cc:	a809883a 	mov	r4,r21
   2b4d0:	d8c02a15 	stw	r3,168(sp)
   2b4d4:	da002b15 	stw	r8,172(sp)
   2b4d8:	da402c15 	stw	r9,176(sp)
   2b4dc:	0028ed80 	call	28ed8 <memchr>
   2b4e0:	d8c02a17 	ldw	r3,168(sp)
   2b4e4:	da002b17 	ldw	r8,172(sp)
   2b4e8:	da402c17 	ldw	r9,176(sp)
   2b4ec:	10024826 	beq	r2,zero,2be10 <___vfiprintf_internal_r+0x138c>
   2b4f0:	1567c83a 	sub	r19,r2,r21
   2b4f4:	df001d83 	ldbu	fp,118(sp)
   2b4f8:	d8c02215 	stw	r3,136(sp)
   2b4fc:	0013883a 	mov	r9,zero
   2b500:	003e6006 	br	2ae84 <_gp+0xfffeddf4>
   2b504:	21003fcc 	andi	r4,r4,255
   2b508:	203fc026 	beq	r4,zero,2b40c <_gp+0xfffee37c>
   2b50c:	d9c01d85 	stb	r7,118(sp)
   2b510:	003fbe06 	br	2b40c <_gp+0xfffee37c>
   2b514:	da802217 	ldw	r10,136(sp)
   2b518:	54400017 	ldw	r17,0(r10)
   2b51c:	50800104 	addi	r2,r10,4
   2b520:	883e3b16 	blt	r17,zero,2ae10 <_gp+0xfffedd80>
   2b524:	d8802215 	stw	r2,136(sp)
   2b528:	80c00007 	ldb	r3,0(r16)
   2b52c:	003db406 	br	2ac00 <_gp+0xfffedb70>
   2b530:	01000044 	movi	r4,1
   2b534:	01c00ac4 	movi	r7,43
   2b538:	80c00007 	ldb	r3,0(r16)
   2b53c:	003db006 	br	2ac00 <_gp+0xfffedb70>
   2b540:	80c00007 	ldb	r3,0(r16)
   2b544:	82800044 	addi	r10,r16,1
   2b548:	1b423c26 	beq	r3,r13,2be3c <___vfiprintf_internal_r+0x13b8>
   2b54c:	18bff404 	addi	r2,r3,-48
   2b550:	0013883a 	mov	r9,zero
   2b554:	30822b36 	bltu	r6,r2,2be04 <___vfiprintf_internal_r+0x1380>
   2b558:	50c00007 	ldb	r3,0(r10)
   2b55c:	4a4002a4 	muli	r9,r9,10
   2b560:	54000044 	addi	r16,r10,1
   2b564:	8015883a 	mov	r10,r16
   2b568:	4893883a 	add	r9,r9,r2
   2b56c:	18bff404 	addi	r2,r3,-48
   2b570:	30bff92e 	bgeu	r6,r2,2b558 <_gp+0xfffee4c8>
   2b574:	483da30e 	bge	r9,zero,2ac04 <_gp+0xfffedb74>
   2b578:	027fffc4 	movi	r9,-1
   2b57c:	003da106 	br	2ac04 <_gp+0xfffedb74>
   2b580:	a5001014 	ori	r20,r20,64
   2b584:	80c00007 	ldb	r3,0(r16)
   2b588:	003d9d06 	br	2ac00 <_gp+0xfffedb70>
   2b58c:	da802217 	ldw	r10,136(sp)
   2b590:	d8001d85 	stb	zero,118(sp)
   2b594:	50c00204 	addi	r3,r10,8
   2b598:	54800017 	ldw	r18,0(r10)
   2b59c:	54c00117 	ldw	r19,4(r10)
   2b5a0:	4801ca16 	blt	r9,zero,2bccc <___vfiprintf_internal_r+0x1248>
   2b5a4:	013fdfc4 	movi	r4,-129
   2b5a8:	94c4b03a 	or	r2,r18,r19
   2b5ac:	d8c02215 	stw	r3,136(sp)
   2b5b0:	a128703a 	and	r20,r20,r4
   2b5b4:	0039883a 	mov	fp,zero
   2b5b8:	103f341e 	bne	r2,zero,2b28c <_gp+0xfffee1fc>
   2b5bc:	483e2e26 	beq	r9,zero,2ae78 <_gp+0xfffedde8>
   2b5c0:	0025883a 	mov	r18,zero
   2b5c4:	94800c04 	addi	r18,r18,48
   2b5c8:	dc8019c5 	stb	r18,103(sp)
   2b5cc:	dcc02717 	ldw	r19,156(sp)
   2b5d0:	dd4019c4 	addi	r21,sp,103
   2b5d4:	003e2b06 	br	2ae84 <_gp+0xfffeddf4>
   2b5d8:	21003fcc 	andi	r4,r4,255
   2b5dc:	2002361e 	bne	r4,zero,2beb8 <___vfiprintf_internal_r+0x1434>
   2b5e0:	1801c126 	beq	r3,zero,2bce8 <___vfiprintf_internal_r+0x1264>
   2b5e4:	04800044 	movi	r18,1
   2b5e8:	d8c01005 	stb	r3,64(sp)
   2b5ec:	d8001d85 	stb	zero,118(sp)
   2b5f0:	9027883a 	mov	r19,r18
   2b5f4:	dd401004 	addi	r21,sp,64
   2b5f8:	003f1106 	br	2b240 <_gp+0xfffee1b0>
   2b5fc:	d9402117 	ldw	r5,132(sp)
   2b600:	d9002017 	ldw	r4,128(sp)
   2b604:	d9801a04 	addi	r6,sp,104
   2b608:	d9c02b15 	stw	r7,172(sp)
   2b60c:	dbc02a15 	stw	r15,168(sp)
   2b610:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b614:	d9c02b17 	ldw	r7,172(sp)
   2b618:	dbc02a17 	ldw	r15,168(sp)
   2b61c:	10006d1e 	bne	r2,zero,2b7d4 <___vfiprintf_internal_r+0xd50>
   2b620:	d9801b17 	ldw	r6,108(sp)
   2b624:	d8801c17 	ldw	r2,112(sp)
   2b628:	d811883a 	mov	r8,sp
   2b62c:	31400044 	addi	r5,r6,1
   2b630:	003e3306 	br	2af00 <_gp+0xfffede70>
   2b634:	d9401b17 	ldw	r5,108(sp)
   2b638:	d8801c17 	ldw	r2,112(sp)
   2b63c:	29000044 	addi	r4,r5,1
   2b640:	d8c01d87 	ldb	r3,118(sp)
   2b644:	183e4d26 	beq	r3,zero,2af7c <_gp+0xfffedeec>
   2b648:	00c00044 	movi	r3,1
   2b64c:	d9401d84 	addi	r5,sp,118
   2b650:	10c5883a 	add	r2,r2,r3
   2b654:	41400015 	stw	r5,0(r8)
   2b658:	40c00115 	stw	r3,4(r8)
   2b65c:	d8801c15 	stw	r2,112(sp)
   2b660:	d9001b15 	stw	r4,108(sp)
   2b664:	014001c4 	movi	r5,7
   2b668:	2900a90e 	bge	r5,r4,2b910 <___vfiprintf_internal_r+0xe8c>
   2b66c:	1000da1e 	bne	r2,zero,2b9d8 <___vfiprintf_internal_r+0xf54>
   2b670:	7000ab1e 	bne	r14,zero,2b920 <___vfiprintf_internal_r+0xe9c>
   2b674:	000b883a 	mov	r5,zero
   2b678:	1809883a 	mov	r4,r3
   2b67c:	d811883a 	mov	r8,sp
   2b680:	00c02004 	movi	r3,128
   2b684:	e0fe4d26 	beq	fp,r3,2afbc <_gp+0xfffedf2c>
   2b688:	4cf9c83a 	sub	fp,r9,r19
   2b68c:	073e7b0e 	bge	zero,fp,2b07c <_gp+0xfffedfec>
   2b690:	01c00404 	movi	r7,16
   2b694:	3f01900e 	bge	r7,fp,2bcd8 <___vfiprintf_internal_r+0x1254>
   2b698:	00c000f4 	movhi	r3,3
   2b69c:	18ccef04 	addi	r3,r3,13244
   2b6a0:	d8c02415 	stw	r3,144(sp)
   2b6a4:	034001c4 	movi	r13,7
   2b6a8:	00000506 	br	2b6c0 <___vfiprintf_internal_r+0xc3c>
   2b6ac:	29000084 	addi	r4,r5,2
   2b6b0:	42000204 	addi	r8,r8,8
   2b6b4:	180b883a 	mov	r5,r3
   2b6b8:	e73ffc04 	addi	fp,fp,-16
   2b6bc:	3f000d0e 	bge	r7,fp,2b6f4 <___vfiprintf_internal_r+0xc70>
   2b6c0:	10800404 	addi	r2,r2,16
   2b6c4:	28c00044 	addi	r3,r5,1
   2b6c8:	45c00015 	stw	r23,0(r8)
   2b6cc:	41c00115 	stw	r7,4(r8)
   2b6d0:	d8801c15 	stw	r2,112(sp)
   2b6d4:	d8c01b15 	stw	r3,108(sp)
   2b6d8:	68fff40e 	bge	r13,r3,2b6ac <_gp+0xfffee61c>
   2b6dc:	1000101e 	bne	r2,zero,2b720 <___vfiprintf_internal_r+0xc9c>
   2b6e0:	e73ffc04 	addi	fp,fp,-16
   2b6e4:	01000044 	movi	r4,1
   2b6e8:	000b883a 	mov	r5,zero
   2b6ec:	d811883a 	mov	r8,sp
   2b6f0:	3f3ff316 	blt	r7,fp,2b6c0 <_gp+0xfffee630>
   2b6f4:	da802417 	ldw	r10,144(sp)
   2b6f8:	1705883a 	add	r2,r2,fp
   2b6fc:	47000115 	stw	fp,4(r8)
   2b700:	42800015 	stw	r10,0(r8)
   2b704:	d8801c15 	stw	r2,112(sp)
   2b708:	d9001b15 	stw	r4,108(sp)
   2b70c:	00c001c4 	movi	r3,7
   2b710:	19003616 	blt	r3,r4,2b7ec <___vfiprintf_internal_r+0xd68>
   2b714:	42000204 	addi	r8,r8,8
   2b718:	21000044 	addi	r4,r4,1
   2b71c:	003e5706 	br	2b07c <_gp+0xfffedfec>
   2b720:	d9402117 	ldw	r5,132(sp)
   2b724:	d9002017 	ldw	r4,128(sp)
   2b728:	d9801a04 	addi	r6,sp,104
   2b72c:	d9c02b15 	stw	r7,172(sp)
   2b730:	db402a15 	stw	r13,168(sp)
   2b734:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b738:	d9c02b17 	ldw	r7,172(sp)
   2b73c:	db402a17 	ldw	r13,168(sp)
   2b740:	1000241e 	bne	r2,zero,2b7d4 <___vfiprintf_internal_r+0xd50>
   2b744:	d9401b17 	ldw	r5,108(sp)
   2b748:	d8801c17 	ldw	r2,112(sp)
   2b74c:	d811883a 	mov	r8,sp
   2b750:	29000044 	addi	r4,r5,1
   2b754:	003fd806 	br	2b6b8 <_gp+0xfffee628>
   2b758:	d9401b17 	ldw	r5,108(sp)
   2b75c:	00c000f4 	movhi	r3,3
   2b760:	18ccf304 	addi	r3,r3,13260
   2b764:	d8c02415 	stw	r3,144(sp)
   2b768:	29400044 	addi	r5,r5,1
   2b76c:	d8c02417 	ldw	r3,144(sp)
   2b770:	14c5883a 	add	r2,r2,r19
   2b774:	44c00115 	stw	r19,4(r8)
   2b778:	40c00015 	stw	r3,0(r8)
   2b77c:	d8801c15 	stw	r2,112(sp)
   2b780:	d9401b15 	stw	r5,108(sp)
   2b784:	00c001c4 	movi	r3,7
   2b788:	1940070e 	bge	r3,r5,2b7a8 <___vfiprintf_internal_r+0xd24>
   2b78c:	103e4826 	beq	r2,zero,2b0b0 <_gp+0xfffee020>
   2b790:	d9402117 	ldw	r5,132(sp)
   2b794:	d9002017 	ldw	r4,128(sp)
   2b798:	d9801a04 	addi	r6,sp,104
   2b79c:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b7a0:	10000c1e 	bne	r2,zero,2b7d4 <___vfiprintf_internal_r+0xd50>
   2b7a4:	d8801c17 	ldw	r2,112(sp)
   2b7a8:	8c80010e 	bge	r17,r18,2b7b0 <___vfiprintf_internal_r+0xd2c>
   2b7ac:	9023883a 	mov	r17,r18
   2b7b0:	da802317 	ldw	r10,140(sp)
   2b7b4:	5455883a 	add	r10,r10,r17
   2b7b8:	da802315 	stw	r10,140(sp)
   2b7bc:	103e4126 	beq	r2,zero,2b0c4 <_gp+0xfffee034>
   2b7c0:	d9402117 	ldw	r5,132(sp)
   2b7c4:	d9002017 	ldw	r4,128(sp)
   2b7c8:	d9801a04 	addi	r6,sp,104
   2b7cc:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b7d0:	103e3c26 	beq	r2,zero,2b0c4 <_gp+0xfffee034>
   2b7d4:	dd002117 	ldw	r20,132(sp)
   2b7d8:	a080030b 	ldhu	r2,12(r20)
   2b7dc:	1080100c 	andi	r2,r2,64
   2b7e0:	1001231e 	bne	r2,zero,2bc70 <___vfiprintf_internal_r+0x11ec>
   2b7e4:	d8802317 	ldw	r2,140(sp)
   2b7e8:	003d7b06 	br	2add8 <_gp+0xfffedd48>
   2b7ec:	1000991e 	bne	r2,zero,2ba54 <___vfiprintf_internal_r+0xfd0>
   2b7f0:	00c00044 	movi	r3,1
   2b7f4:	9805883a 	mov	r2,r19
   2b7f8:	dd400015 	stw	r21,0(sp)
   2b7fc:	dcc00115 	stw	r19,4(sp)
   2b800:	dcc01c15 	stw	r19,112(sp)
   2b804:	d8c01b15 	stw	r3,108(sp)
   2b808:	d811883a 	mov	r8,sp
   2b80c:	42000204 	addi	r8,r8,8
   2b810:	a2c0010c 	andi	r11,r20,4
   2b814:	583fe426 	beq	r11,zero,2b7a8 <_gp+0xfffee718>
   2b818:	8ca7c83a 	sub	r19,r17,r18
   2b81c:	04ffe20e 	bge	zero,r19,2b7a8 <_gp+0xfffee718>
   2b820:	01c00404 	movi	r7,16
   2b824:	3cffcc0e 	bge	r7,r19,2b758 <_gp+0xfffee6c8>
   2b828:	028000f4 	movhi	r10,3
   2b82c:	528cf304 	addi	r10,r10,13260
   2b830:	d9001b17 	ldw	r4,108(sp)
   2b834:	da802415 	stw	r10,144(sp)
   2b838:	382b883a 	mov	r21,r7
   2b83c:	050001c4 	movi	r20,7
   2b840:	df002017 	ldw	fp,128(sp)
   2b844:	00000506 	br	2b85c <___vfiprintf_internal_r+0xdd8>
   2b848:	21400084 	addi	r5,r4,2
   2b84c:	42000204 	addi	r8,r8,8
   2b850:	1809883a 	mov	r4,r3
   2b854:	9cfffc04 	addi	r19,r19,-16
   2b858:	acffc40e 	bge	r21,r19,2b76c <_gp+0xfffee6dc>
   2b85c:	10800404 	addi	r2,r2,16
   2b860:	20c00044 	addi	r3,r4,1
   2b864:	45800015 	stw	r22,0(r8)
   2b868:	45400115 	stw	r21,4(r8)
   2b86c:	d8801c15 	stw	r2,112(sp)
   2b870:	d8c01b15 	stw	r3,108(sp)
   2b874:	a0fff40e 	bge	r20,r3,2b848 <_gp+0xfffee7b8>
   2b878:	1000041e 	bne	r2,zero,2b88c <___vfiprintf_internal_r+0xe08>
   2b87c:	01400044 	movi	r5,1
   2b880:	0009883a 	mov	r4,zero
   2b884:	d811883a 	mov	r8,sp
   2b888:	003ff206 	br	2b854 <_gp+0xfffee7c4>
   2b88c:	d9402117 	ldw	r5,132(sp)
   2b890:	d9801a04 	addi	r6,sp,104
   2b894:	e009883a 	mov	r4,fp
   2b898:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b89c:	103fcd1e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2b8a0:	d9001b17 	ldw	r4,108(sp)
   2b8a4:	d8801c17 	ldw	r2,112(sp)
   2b8a8:	d811883a 	mov	r8,sp
   2b8ac:	21400044 	addi	r5,r4,1
   2b8b0:	003fe806 	br	2b854 <_gp+0xfffee7c4>
   2b8b4:	d9402117 	ldw	r5,132(sp)
   2b8b8:	d9002017 	ldw	r4,128(sp)
   2b8bc:	d9801a04 	addi	r6,sp,104
   2b8c0:	d9c02b15 	stw	r7,172(sp)
   2b8c4:	db402a15 	stw	r13,168(sp)
   2b8c8:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b8cc:	d9c02b17 	ldw	r7,172(sp)
   2b8d0:	db402a17 	ldw	r13,168(sp)
   2b8d4:	103fbf1e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2b8d8:	d9401b17 	ldw	r5,108(sp)
   2b8dc:	d8801c17 	ldw	r2,112(sp)
   2b8e0:	d811883a 	mov	r8,sp
   2b8e4:	29800044 	addi	r6,r5,1
   2b8e8:	003dc406 	br	2affc <_gp+0xfffedf6c>
   2b8ec:	1000d21e 	bne	r2,zero,2bc38 <___vfiprintf_internal_r+0x11b4>
   2b8f0:	d8c01d87 	ldb	r3,118(sp)
   2b8f4:	18009526 	beq	r3,zero,2bb4c <___vfiprintf_internal_r+0x10c8>
   2b8f8:	00800044 	movi	r2,1
   2b8fc:	d8c01d84 	addi	r3,sp,118
   2b900:	1009883a 	mov	r4,r2
   2b904:	d8c00015 	stw	r3,0(sp)
   2b908:	d8800115 	stw	r2,4(sp)
   2b90c:	d811883a 	mov	r8,sp
   2b910:	200b883a 	mov	r5,r4
   2b914:	42000204 	addi	r8,r8,8
   2b918:	21000044 	addi	r4,r4,1
   2b91c:	003d9706 	br	2af7c <_gp+0xfffedeec>
   2b920:	d9001d04 	addi	r4,sp,116
   2b924:	00800084 	movi	r2,2
   2b928:	d9000015 	stw	r4,0(sp)
   2b92c:	d8800115 	stw	r2,4(sp)
   2b930:	1809883a 	mov	r4,r3
   2b934:	d811883a 	mov	r8,sp
   2b938:	200b883a 	mov	r5,r4
   2b93c:	42000204 	addi	r8,r8,8
   2b940:	21000044 	addi	r4,r4,1
   2b944:	003f4e06 	br	2b680 <_gp+0xfffee5f0>
   2b948:	d8001d85 	stb	zero,118(sp)
   2b94c:	48005016 	blt	r9,zero,2ba90 <___vfiprintf_internal_r+0x100c>
   2b950:	00ffdfc4 	movi	r3,-129
   2b954:	94c4b03a 	or	r2,r18,r19
   2b958:	a0e8703a 	and	r20,r20,r3
   2b95c:	103d4426 	beq	r2,zero,2ae70 <_gp+0xfffedde0>
   2b960:	0039883a 	mov	fp,zero
   2b964:	d9002617 	ldw	r4,152(sp)
   2b968:	dd401a04 	addi	r21,sp,104
   2b96c:	908003cc 	andi	r2,r18,15
   2b970:	9806973a 	slli	r3,r19,28
   2b974:	2085883a 	add	r2,r4,r2
   2b978:	9024d13a 	srli	r18,r18,4
   2b97c:	10800003 	ldbu	r2,0(r2)
   2b980:	9826d13a 	srli	r19,r19,4
   2b984:	ad7fffc4 	addi	r21,r21,-1
   2b988:	1ca4b03a 	or	r18,r3,r18
   2b98c:	a8800005 	stb	r2,0(r21)
   2b990:	94c4b03a 	or	r2,r18,r19
   2b994:	103ff51e 	bne	r2,zero,2b96c <_gp+0xfffee8dc>
   2b998:	003e5906 	br	2b300 <_gp+0xfffee270>
   2b99c:	d9402117 	ldw	r5,132(sp)
   2b9a0:	d9002017 	ldw	r4,128(sp)
   2b9a4:	d9801a04 	addi	r6,sp,104
   2b9a8:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b9ac:	103f891e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2b9b0:	d8801c17 	ldw	r2,112(sp)
   2b9b4:	d811883a 	mov	r8,sp
   2b9b8:	003f9506 	br	2b810 <_gp+0xfffee780>
   2b9bc:	d9402117 	ldw	r5,132(sp)
   2b9c0:	d9002017 	ldw	r4,128(sp)
   2b9c4:	d9801a04 	addi	r6,sp,104
   2b9c8:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b9cc:	103f811e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2b9d0:	d811883a 	mov	r8,sp
   2b9d4:	003ced06 	br	2ad8c <_gp+0xfffedcfc>
   2b9d8:	d9402117 	ldw	r5,132(sp)
   2b9dc:	d9002017 	ldw	r4,128(sp)
   2b9e0:	d9801a04 	addi	r6,sp,104
   2b9e4:	da402c15 	stw	r9,176(sp)
   2b9e8:	db802a15 	stw	r14,168(sp)
   2b9ec:	002a9700 	call	2a970 <__sprint_r.part.0>
   2b9f0:	da402c17 	ldw	r9,176(sp)
   2b9f4:	db802a17 	ldw	r14,168(sp)
   2b9f8:	103f761e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2b9fc:	d9401b17 	ldw	r5,108(sp)
   2ba00:	d8801c17 	ldw	r2,112(sp)
   2ba04:	d811883a 	mov	r8,sp
   2ba08:	29000044 	addi	r4,r5,1
   2ba0c:	003d5b06 	br	2af7c <_gp+0xfffedeec>
   2ba10:	d9402117 	ldw	r5,132(sp)
   2ba14:	d9002017 	ldw	r4,128(sp)
   2ba18:	d9801a04 	addi	r6,sp,104
   2ba1c:	da402c15 	stw	r9,176(sp)
   2ba20:	002a9700 	call	2a970 <__sprint_r.part.0>
   2ba24:	da402c17 	ldw	r9,176(sp)
   2ba28:	103f6a1e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2ba2c:	d9401b17 	ldw	r5,108(sp)
   2ba30:	d8801c17 	ldw	r2,112(sp)
   2ba34:	d811883a 	mov	r8,sp
   2ba38:	29000044 	addi	r4,r5,1
   2ba3c:	003f1006 	br	2b680 <_gp+0xfffee5f0>
   2ba40:	1000c31e 	bne	r2,zero,2bd50 <___vfiprintf_internal_r+0x12cc>
   2ba44:	01000044 	movi	r4,1
   2ba48:	000b883a 	mov	r5,zero
   2ba4c:	d811883a 	mov	r8,sp
   2ba50:	003f0d06 	br	2b688 <_gp+0xfffee5f8>
   2ba54:	d9402117 	ldw	r5,132(sp)
   2ba58:	d9002017 	ldw	r4,128(sp)
   2ba5c:	d9801a04 	addi	r6,sp,104
   2ba60:	002a9700 	call	2a970 <__sprint_r.part.0>
   2ba64:	103f5b1e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2ba68:	d9001b17 	ldw	r4,108(sp)
   2ba6c:	d8801c17 	ldw	r2,112(sp)
   2ba70:	d811883a 	mov	r8,sp
   2ba74:	21000044 	addi	r4,r4,1
   2ba78:	003d8006 	br	2b07c <_gp+0xfffedfec>
   2ba7c:	010000f4 	movhi	r4,3
   2ba80:	210c8e04 	addi	r4,r4,12856
   2ba84:	d9002615 	stw	r4,152(sp)
   2ba88:	d8c02215 	stw	r3,136(sp)
   2ba8c:	1029883a 	mov	r20,r2
   2ba90:	94c4b03a 	or	r2,r18,r19
   2ba94:	103fb21e 	bne	r2,zero,2b960 <_gp+0xfffee8d0>
   2ba98:	0039883a 	mov	fp,zero
   2ba9c:	00800084 	movi	r2,2
   2baa0:	003e6b06 	br	2b450 <_gp+0xfffee3c0>
   2baa4:	da802217 	ldw	r10,136(sp)
   2baa8:	d8001d85 	stb	zero,118(sp)
   2baac:	0027883a 	mov	r19,zero
   2bab0:	50800104 	addi	r2,r10,4
   2bab4:	54800017 	ldw	r18,0(r10)
   2bab8:	483e6016 	blt	r9,zero,2b43c <_gp+0xfffee3ac>
   2babc:	00ffdfc4 	movi	r3,-129
   2bac0:	d8802215 	stw	r2,136(sp)
   2bac4:	a0e8703a 	and	r20,r20,r3
   2bac8:	0039883a 	mov	fp,zero
   2bacc:	903ebb26 	beq	r18,zero,2b5bc <_gp+0xfffee52c>
   2bad0:	00800244 	movi	r2,9
   2bad4:	14bdee36 	bltu	r2,r18,2b290 <_gp+0xfffee200>
   2bad8:	003eba06 	br	2b5c4 <_gp+0xfffee534>
   2badc:	00800c04 	movi	r2,48
   2bae0:	d8c01d45 	stb	r3,117(sp)
   2bae4:	d8801d05 	stb	r2,116(sp)
   2bae8:	d8001d85 	stb	zero,118(sp)
   2baec:	a0c00094 	ori	r3,r20,2
   2baf0:	4800a916 	blt	r9,zero,2bd98 <___vfiprintf_internal_r+0x1314>
   2baf4:	00bfdfc4 	movi	r2,-129
   2baf8:	a096703a 	and	r11,r20,r2
   2bafc:	5d000094 	ori	r20,r11,2
   2bb00:	0039883a 	mov	fp,zero
   2bb04:	003f9706 	br	2b964 <_gp+0xfffee8d4>
   2bb08:	8025883a 	mov	r18,r16
   2bb0c:	003c2e06 	br	2abc8 <_gp+0xfffedb38>
   2bb10:	008000f4 	movhi	r2,3
   2bb14:	108c8e04 	addi	r2,r2,12856
   2bb18:	0039883a 	mov	fp,zero
   2bb1c:	d8802615 	stw	r2,152(sp)
   2bb20:	003f9006 	br	2b964 <_gp+0xfffee8d4>
   2bb24:	04a5c83a 	sub	r18,zero,r18
   2bb28:	07000b44 	movi	fp,45
   2bb2c:	9004c03a 	cmpne	r2,r18,zero
   2bb30:	04e7c83a 	sub	r19,zero,r19
   2bb34:	df001d85 	stb	fp,118(sp)
   2bb38:	98a7c83a 	sub	r19,r19,r2
   2bb3c:	48009f16 	blt	r9,zero,2bdbc <___vfiprintf_internal_r+0x1338>
   2bb40:	00bfdfc4 	movi	r2,-129
   2bb44:	a0a8703a 	and	r20,r20,r2
   2bb48:	003dd006 	br	2b28c <_gp+0xfffee1fc>
   2bb4c:	70004c26 	beq	r14,zero,2bc80 <___vfiprintf_internal_r+0x11fc>
   2bb50:	00800084 	movi	r2,2
   2bb54:	d8c01d04 	addi	r3,sp,116
   2bb58:	d8c00015 	stw	r3,0(sp)
   2bb5c:	d8800115 	stw	r2,4(sp)
   2bb60:	01000044 	movi	r4,1
   2bb64:	d811883a 	mov	r8,sp
   2bb68:	003f7306 	br	2b938 <_gp+0xfffee8a8>
   2bb6c:	a080100c 	andi	r2,r20,64
   2bb70:	da802217 	ldw	r10,136(sp)
   2bb74:	103e0626 	beq	r2,zero,2b390 <_gp+0xfffee300>
   2bb78:	5480000f 	ldh	r18,0(r10)
   2bb7c:	52800104 	addi	r10,r10,4
   2bb80:	da802215 	stw	r10,136(sp)
   2bb84:	9027d7fa 	srai	r19,r18,31
   2bb88:	9805883a 	mov	r2,r19
   2bb8c:	003db806 	br	2b270 <_gp+0xfffee1e0>
   2bb90:	a080040c 	andi	r2,r20,16
   2bb94:	1000091e 	bne	r2,zero,2bbbc <___vfiprintf_internal_r+0x1138>
   2bb98:	a2c0100c 	andi	r11,r20,64
   2bb9c:	58000726 	beq	r11,zero,2bbbc <___vfiprintf_internal_r+0x1138>
   2bba0:	da802217 	ldw	r10,136(sp)
   2bba4:	50800017 	ldw	r2,0(r10)
   2bba8:	52800104 	addi	r10,r10,4
   2bbac:	da802215 	stw	r10,136(sp)
   2bbb0:	da802317 	ldw	r10,140(sp)
   2bbb4:	1280000d 	sth	r10,0(r2)
   2bbb8:	003be706 	br	2ab58 <_gp+0xfffedac8>
   2bbbc:	da802217 	ldw	r10,136(sp)
   2bbc0:	50800017 	ldw	r2,0(r10)
   2bbc4:	52800104 	addi	r10,r10,4
   2bbc8:	da802215 	stw	r10,136(sp)
   2bbcc:	da802317 	ldw	r10,140(sp)
   2bbd0:	12800015 	stw	r10,0(r2)
   2bbd4:	003be006 	br	2ab58 <_gp+0xfffedac8>
   2bbd8:	a080100c 	andi	r2,r20,64
   2bbdc:	da802217 	ldw	r10,136(sp)
   2bbe0:	10003026 	beq	r2,zero,2bca4 <___vfiprintf_internal_r+0x1220>
   2bbe4:	5480000b 	ldhu	r18,0(r10)
   2bbe8:	52800104 	addi	r10,r10,4
   2bbec:	0027883a 	mov	r19,zero
   2bbf0:	da802215 	stw	r10,136(sp)
   2bbf4:	003d8006 	br	2b1f8 <_gp+0xfffee168>
   2bbf8:	80c00007 	ldb	r3,0(r16)
   2bbfc:	003c0006 	br	2ac00 <_gp+0xfffedb70>
   2bc00:	a080100c 	andi	r2,r20,64
   2bc04:	d8001d85 	stb	zero,118(sp)
   2bc08:	da802217 	ldw	r10,136(sp)
   2bc0c:	1000201e 	bne	r2,zero,2bc90 <___vfiprintf_internal_r+0x120c>
   2bc10:	50800104 	addi	r2,r10,4
   2bc14:	54800017 	ldw	r18,0(r10)
   2bc18:	0027883a 	mov	r19,zero
   2bc1c:	483def0e 	bge	r9,zero,2b3dc <_gp+0xfffee34c>
   2bc20:	94c6b03a 	or	r3,r18,r19
   2bc24:	d8802215 	stw	r2,136(sp)
   2bc28:	183d4e1e 	bne	r3,zero,2b164 <_gp+0xfffee0d4>
   2bc2c:	0039883a 	mov	fp,zero
   2bc30:	0005883a 	mov	r2,zero
   2bc34:	003e0606 	br	2b450 <_gp+0xfffee3c0>
   2bc38:	d9402117 	ldw	r5,132(sp)
   2bc3c:	d9002017 	ldw	r4,128(sp)
   2bc40:	d9801a04 	addi	r6,sp,104
   2bc44:	da402c15 	stw	r9,176(sp)
   2bc48:	db802a15 	stw	r14,168(sp)
   2bc4c:	002a9700 	call	2a970 <__sprint_r.part.0>
   2bc50:	da402c17 	ldw	r9,176(sp)
   2bc54:	db802a17 	ldw	r14,168(sp)
   2bc58:	103ede1e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2bc5c:	d9401b17 	ldw	r5,108(sp)
   2bc60:	d8801c17 	ldw	r2,112(sp)
   2bc64:	d811883a 	mov	r8,sp
   2bc68:	29000044 	addi	r4,r5,1
   2bc6c:	003e7406 	br	2b640 <_gp+0xfffee5b0>
   2bc70:	00bfffc4 	movi	r2,-1
   2bc74:	003c5806 	br	2add8 <_gp+0xfffedd48>
   2bc78:	d811883a 	mov	r8,sp
   2bc7c:	003ee806 	br	2b820 <_gp+0xfffee790>
   2bc80:	000b883a 	mov	r5,zero
   2bc84:	01000044 	movi	r4,1
   2bc88:	d811883a 	mov	r8,sp
   2bc8c:	003e7c06 	br	2b680 <_gp+0xfffee5f0>
   2bc90:	50800104 	addi	r2,r10,4
   2bc94:	5480000b 	ldhu	r18,0(r10)
   2bc98:	0027883a 	mov	r19,zero
   2bc9c:	483dcf0e 	bge	r9,zero,2b3dc <_gp+0xfffee34c>
   2bca0:	003fdf06 	br	2bc20 <_gp+0xfffeeb90>
   2bca4:	54800017 	ldw	r18,0(r10)
   2bca8:	52800104 	addi	r10,r10,4
   2bcac:	0027883a 	mov	r19,zero
   2bcb0:	da802215 	stw	r10,136(sp)
   2bcb4:	003d5006 	br	2b1f8 <_gp+0xfffee168>
   2bcb8:	50800104 	addi	r2,r10,4
   2bcbc:	5480000b 	ldhu	r18,0(r10)
   2bcc0:	0027883a 	mov	r19,zero
   2bcc4:	483f7d0e 	bge	r9,zero,2babc <_gp+0xfffeea2c>
   2bcc8:	003ddc06 	br	2b43c <_gp+0xfffee3ac>
   2bccc:	d8c02215 	stw	r3,136(sp)
   2bcd0:	0039883a 	mov	fp,zero
   2bcd4:	003ddb06 	br	2b444 <_gp+0xfffee3b4>
   2bcd8:	028000f4 	movhi	r10,3
   2bcdc:	528cef04 	addi	r10,r10,13244
   2bce0:	da802415 	stw	r10,144(sp)
   2bce4:	003e8306 	br	2b6f4 <_gp+0xfffee664>
   2bce8:	d8801c17 	ldw	r2,112(sp)
   2bcec:	dd002117 	ldw	r20,132(sp)
   2bcf0:	103eb926 	beq	r2,zero,2b7d8 <_gp+0xfffee748>
   2bcf4:	d9002017 	ldw	r4,128(sp)
   2bcf8:	d9801a04 	addi	r6,sp,104
   2bcfc:	a00b883a 	mov	r5,r20
   2bd00:	002a9700 	call	2a970 <__sprint_r.part.0>
   2bd04:	003eb406 	br	2b7d8 <_gp+0xfffee748>
   2bd08:	80c00043 	ldbu	r3,1(r16)
   2bd0c:	a5000814 	ori	r20,r20,32
   2bd10:	84000044 	addi	r16,r16,1
   2bd14:	18c03fcc 	andi	r3,r3,255
   2bd18:	18c0201c 	xori	r3,r3,128
   2bd1c:	18ffe004 	addi	r3,r3,-128
   2bd20:	003bb706 	br	2ac00 <_gp+0xfffedb70>
   2bd24:	a809883a 	mov	r4,r21
   2bd28:	d8c02a15 	stw	r3,168(sp)
   2bd2c:	da002b15 	stw	r8,172(sp)
   2bd30:	0023e3c0 	call	23e3c <strlen>
   2bd34:	d8c02a17 	ldw	r3,168(sp)
   2bd38:	1027883a 	mov	r19,r2
   2bd3c:	df001d83 	ldbu	fp,118(sp)
   2bd40:	d8c02215 	stw	r3,136(sp)
   2bd44:	0013883a 	mov	r9,zero
   2bd48:	da002b17 	ldw	r8,172(sp)
   2bd4c:	003c4d06 	br	2ae84 <_gp+0xfffeddf4>
   2bd50:	d9402117 	ldw	r5,132(sp)
   2bd54:	d9002017 	ldw	r4,128(sp)
   2bd58:	d9801a04 	addi	r6,sp,104
   2bd5c:	da402c15 	stw	r9,176(sp)
   2bd60:	002a9700 	call	2a970 <__sprint_r.part.0>
   2bd64:	da402c17 	ldw	r9,176(sp)
   2bd68:	103e9a1e 	bne	r2,zero,2b7d4 <_gp+0xfffee744>
   2bd6c:	d9401b17 	ldw	r5,108(sp)
   2bd70:	d8801c17 	ldw	r2,112(sp)
   2bd74:	d811883a 	mov	r8,sp
   2bd78:	29000044 	addi	r4,r5,1
   2bd7c:	003e4206 	br	2b688 <_gp+0xfffee5f8>
   2bd80:	d9401b17 	ldw	r5,108(sp)
   2bd84:	010000f4 	movhi	r4,3
   2bd88:	210cf304 	addi	r4,r4,13260
   2bd8c:	d9002415 	stw	r4,144(sp)
   2bd90:	29400044 	addi	r5,r5,1
   2bd94:	003c6d06 	br	2af4c <_gp+0xfffedebc>
   2bd98:	0039883a 	mov	fp,zero
   2bd9c:	00800084 	movi	r2,2
   2bda0:	10803fcc 	andi	r2,r2,255
   2bda4:	01000044 	movi	r4,1
   2bda8:	11001e26 	beq	r2,r4,2be24 <___vfiprintf_internal_r+0x13a0>
   2bdac:	01000084 	movi	r4,2
   2bdb0:	11001e1e 	bne	r2,r4,2be2c <___vfiprintf_internal_r+0x13a8>
   2bdb4:	1829883a 	mov	r20,r3
   2bdb8:	003eea06 	br	2b964 <_gp+0xfffee8d4>
   2bdbc:	a007883a 	mov	r3,r20
   2bdc0:	00800044 	movi	r2,1
   2bdc4:	003ff606 	br	2bda0 <_gp+0xfffeed10>
   2bdc8:	00800184 	movi	r2,6
   2bdcc:	1240012e 	bgeu	r2,r9,2bdd4 <___vfiprintf_internal_r+0x1350>
   2bdd0:	1013883a 	mov	r9,r2
   2bdd4:	4827883a 	mov	r19,r9
   2bdd8:	4825883a 	mov	r18,r9
   2bddc:	48001516 	blt	r9,zero,2be34 <___vfiprintf_internal_r+0x13b0>
   2bde0:	054000f4 	movhi	r21,3
   2bde4:	d8c02215 	stw	r3,136(sp)
   2bde8:	ad4c9304 	addi	r21,r21,12876
   2bdec:	003d1406 	br	2b240 <_gp+0xfffee1b0>
   2bdf0:	028000f4 	movhi	r10,3
   2bdf4:	528cef04 	addi	r10,r10,13244
   2bdf8:	da802415 	stw	r10,144(sp)
   2bdfc:	200d883a 	mov	r6,r4
   2be00:	003c9106 	br	2b048 <_gp+0xfffedfb8>
   2be04:	5021883a 	mov	r16,r10
   2be08:	0013883a 	mov	r9,zero
   2be0c:	003b7d06 	br	2ac04 <_gp+0xfffedb74>
   2be10:	4827883a 	mov	r19,r9
   2be14:	df001d83 	ldbu	fp,118(sp)
   2be18:	d8c02215 	stw	r3,136(sp)
   2be1c:	0013883a 	mov	r9,zero
   2be20:	003c1806 	br	2ae84 <_gp+0xfffeddf4>
   2be24:	1829883a 	mov	r20,r3
   2be28:	003d1806 	br	2b28c <_gp+0xfffee1fc>
   2be2c:	1829883a 	mov	r20,r3
   2be30:	003ccd06 	br	2b168 <_gp+0xfffee0d8>
   2be34:	0025883a 	mov	r18,zero
   2be38:	003fe906 	br	2bde0 <_gp+0xfffeed50>
   2be3c:	d8802217 	ldw	r2,136(sp)
   2be40:	80c00043 	ldbu	r3,1(r16)
   2be44:	5021883a 	mov	r16,r10
   2be48:	12400017 	ldw	r9,0(r2)
   2be4c:	10800104 	addi	r2,r2,4
   2be50:	d8802215 	stw	r2,136(sp)
   2be54:	483faf0e 	bge	r9,zero,2bd14 <_gp+0xfffeec84>
   2be58:	18c03fcc 	andi	r3,r3,255
   2be5c:	18c0201c 	xori	r3,r3,128
   2be60:	027fffc4 	movi	r9,-1
   2be64:	18ffe004 	addi	r3,r3,-128
   2be68:	003b6506 	br	2ac00 <_gp+0xfffedb70>
   2be6c:	d9c01d85 	stb	r7,118(sp)
   2be70:	003ca006 	br	2b0f4 <_gp+0xfffee064>
   2be74:	d9c01d85 	stb	r7,118(sp)
   2be78:	003cad06 	br	2b130 <_gp+0xfffee0a0>
   2be7c:	d9c01d85 	stb	r7,118(sp)
   2be80:	003d7d06 	br	2b478 <_gp+0xfffee3e8>
   2be84:	d9c01d85 	stb	r7,118(sp)
   2be88:	003d5f06 	br	2b408 <_gp+0xfffee378>
   2be8c:	a080004c 	andi	r2,r20,1
   2be90:	0039883a 	mov	fp,zero
   2be94:	10000526 	beq	r2,zero,2beac <___vfiprintf_internal_r+0x1428>
   2be98:	00800c04 	movi	r2,48
   2be9c:	d88019c5 	stb	r2,103(sp)
   2bea0:	dcc02717 	ldw	r19,156(sp)
   2bea4:	dd4019c4 	addi	r21,sp,103
   2bea8:	003bf606 	br	2ae84 <_gp+0xfffeddf4>
   2beac:	0027883a 	mov	r19,zero
   2beb0:	dd401a04 	addi	r21,sp,104
   2beb4:	003bf306 	br	2ae84 <_gp+0xfffeddf4>
   2beb8:	d9c01d85 	stb	r7,118(sp)
   2bebc:	003dc806 	br	2b5e0 <_gp+0xfffee550>
   2bec0:	d9c01d85 	stb	r7,118(sp)
   2bec4:	003d3a06 	br	2b3b0 <_gp+0xfffee320>
   2bec8:	d9c01d85 	stb	r7,118(sp)
   2becc:	003d2a06 	br	2b378 <_gp+0xfffee2e8>
   2bed0:	d9c01d85 	stb	r7,118(sp)
   2bed4:	003cde06 	br	2b250 <_gp+0xfffee1c0>
   2bed8:	d9c01d85 	stb	r7,118(sp)
   2bedc:	003cbc06 	br	2b1d0 <_gp+0xfffee140>

0002bee0 <__vfiprintf_internal>:
   2bee0:	008000f4 	movhi	r2,3
   2bee4:	10943504 	addi	r2,r2,20692
   2bee8:	300f883a 	mov	r7,r6
   2beec:	280d883a 	mov	r6,r5
   2bef0:	200b883a 	mov	r5,r4
   2bef4:	11000017 	ldw	r4,0(r2)
   2bef8:	002aa841 	jmpi	2aa84 <___vfiprintf_internal_r>

0002befc <__sbprintf>:
   2befc:	2880030b 	ldhu	r2,12(r5)
   2bf00:	2ac01917 	ldw	r11,100(r5)
   2bf04:	2a80038b 	ldhu	r10,14(r5)
   2bf08:	2a400717 	ldw	r9,28(r5)
   2bf0c:	2a000917 	ldw	r8,36(r5)
   2bf10:	defee204 	addi	sp,sp,-1144
   2bf14:	00c10004 	movi	r3,1024
   2bf18:	dc011a15 	stw	r16,1128(sp)
   2bf1c:	10bfff4c 	andi	r2,r2,65533
   2bf20:	2821883a 	mov	r16,r5
   2bf24:	d8cb883a 	add	r5,sp,r3
   2bf28:	dc811c15 	stw	r18,1136(sp)
   2bf2c:	dc411b15 	stw	r17,1132(sp)
   2bf30:	dfc11d15 	stw	ra,1140(sp)
   2bf34:	2025883a 	mov	r18,r4
   2bf38:	d881030d 	sth	r2,1036(sp)
   2bf3c:	dac11915 	stw	r11,1124(sp)
   2bf40:	da81038d 	sth	r10,1038(sp)
   2bf44:	da410715 	stw	r9,1052(sp)
   2bf48:	da010915 	stw	r8,1060(sp)
   2bf4c:	dec10015 	stw	sp,1024(sp)
   2bf50:	dec10415 	stw	sp,1040(sp)
   2bf54:	d8c10215 	stw	r3,1032(sp)
   2bf58:	d8c10515 	stw	r3,1044(sp)
   2bf5c:	d8010615 	stw	zero,1048(sp)
   2bf60:	002aa840 	call	2aa84 <___vfiprintf_internal_r>
   2bf64:	1023883a 	mov	r17,r2
   2bf68:	10000416 	blt	r2,zero,2bf7c <__sbprintf+0x80>
   2bf6c:	d9410004 	addi	r5,sp,1024
   2bf70:	9009883a 	mov	r4,r18
   2bf74:	0027d9c0 	call	27d9c <_fflush_r>
   2bf78:	10000d1e 	bne	r2,zero,2bfb0 <__sbprintf+0xb4>
   2bf7c:	d881030b 	ldhu	r2,1036(sp)
   2bf80:	1080100c 	andi	r2,r2,64
   2bf84:	10000326 	beq	r2,zero,2bf94 <__sbprintf+0x98>
   2bf88:	8080030b 	ldhu	r2,12(r16)
   2bf8c:	10801014 	ori	r2,r2,64
   2bf90:	8080030d 	sth	r2,12(r16)
   2bf94:	8805883a 	mov	r2,r17
   2bf98:	dfc11d17 	ldw	ra,1140(sp)
   2bf9c:	dc811c17 	ldw	r18,1136(sp)
   2bfa0:	dc411b17 	ldw	r17,1132(sp)
   2bfa4:	dc011a17 	ldw	r16,1128(sp)
   2bfa8:	dec11e04 	addi	sp,sp,1144
   2bfac:	f800283a 	ret
   2bfb0:	047fffc4 	movi	r17,-1
   2bfb4:	003ff106 	br	2bf7c <_gp+0xfffeeeec>

0002bfb8 <_write_r>:
   2bfb8:	defffd04 	addi	sp,sp,-12
   2bfbc:	2805883a 	mov	r2,r5
   2bfc0:	dc000015 	stw	r16,0(sp)
   2bfc4:	040000f4 	movhi	r16,3
   2bfc8:	dc400115 	stw	r17,4(sp)
   2bfcc:	300b883a 	mov	r5,r6
   2bfd0:	841b4204 	addi	r16,r16,27912
   2bfd4:	2023883a 	mov	r17,r4
   2bfd8:	380d883a 	mov	r6,r7
   2bfdc:	1009883a 	mov	r4,r2
   2bfe0:	dfc00215 	stw	ra,8(sp)
   2bfe4:	80000015 	stw	zero,0(r16)
   2bfe8:	00309940 	call	30994 <write>
   2bfec:	00ffffc4 	movi	r3,-1
   2bff0:	10c00526 	beq	r2,r3,2c008 <_write_r+0x50>
   2bff4:	dfc00217 	ldw	ra,8(sp)
   2bff8:	dc400117 	ldw	r17,4(sp)
   2bffc:	dc000017 	ldw	r16,0(sp)
   2c000:	dec00304 	addi	sp,sp,12
   2c004:	f800283a 	ret
   2c008:	80c00017 	ldw	r3,0(r16)
   2c00c:	183ff926 	beq	r3,zero,2bff4 <_gp+0xfffeef64>
   2c010:	88c00015 	stw	r3,0(r17)
   2c014:	003ff706 	br	2bff4 <_gp+0xfffeef64>

0002c018 <_close_r>:
   2c018:	defffd04 	addi	sp,sp,-12
   2c01c:	dc000015 	stw	r16,0(sp)
   2c020:	040000f4 	movhi	r16,3
   2c024:	dc400115 	stw	r17,4(sp)
   2c028:	841b4204 	addi	r16,r16,27912
   2c02c:	2023883a 	mov	r17,r4
   2c030:	2809883a 	mov	r4,r5
   2c034:	dfc00215 	stw	ra,8(sp)
   2c038:	80000015 	stw	zero,0(r16)
   2c03c:	002fa400 	call	2fa40 <close>
   2c040:	00ffffc4 	movi	r3,-1
   2c044:	10c00526 	beq	r2,r3,2c05c <_close_r+0x44>
   2c048:	dfc00217 	ldw	ra,8(sp)
   2c04c:	dc400117 	ldw	r17,4(sp)
   2c050:	dc000017 	ldw	r16,0(sp)
   2c054:	dec00304 	addi	sp,sp,12
   2c058:	f800283a 	ret
   2c05c:	80c00017 	ldw	r3,0(r16)
   2c060:	183ff926 	beq	r3,zero,2c048 <_gp+0xfffeefb8>
   2c064:	88c00015 	stw	r3,0(r17)
   2c068:	003ff706 	br	2c048 <_gp+0xfffeefb8>

0002c06c <_calloc_r>:
   2c06c:	298b383a 	mul	r5,r5,r6
   2c070:	defffe04 	addi	sp,sp,-8
   2c074:	dfc00115 	stw	ra,4(sp)
   2c078:	dc000015 	stw	r16,0(sp)
   2c07c:	0022f940 	call	22f94 <_malloc_r>
   2c080:	10002926 	beq	r2,zero,2c128 <_calloc_r+0xbc>
   2c084:	11bfff17 	ldw	r6,-4(r2)
   2c088:	1021883a 	mov	r16,r2
   2c08c:	00bfff04 	movi	r2,-4
   2c090:	308c703a 	and	r6,r6,r2
   2c094:	00c00904 	movi	r3,36
   2c098:	308d883a 	add	r6,r6,r2
   2c09c:	19801636 	bltu	r3,r6,2c0f8 <_calloc_r+0x8c>
   2c0a0:	008004c4 	movi	r2,19
   2c0a4:	11800b2e 	bgeu	r2,r6,2c0d4 <_calloc_r+0x68>
   2c0a8:	80000015 	stw	zero,0(r16)
   2c0ac:	80000115 	stw	zero,4(r16)
   2c0b0:	008006c4 	movi	r2,27
   2c0b4:	11801a2e 	bgeu	r2,r6,2c120 <_calloc_r+0xb4>
   2c0b8:	80000215 	stw	zero,8(r16)
   2c0bc:	80000315 	stw	zero,12(r16)
   2c0c0:	30c0151e 	bne	r6,r3,2c118 <_calloc_r+0xac>
   2c0c4:	80000415 	stw	zero,16(r16)
   2c0c8:	80800604 	addi	r2,r16,24
   2c0cc:	80000515 	stw	zero,20(r16)
   2c0d0:	00000106 	br	2c0d8 <_calloc_r+0x6c>
   2c0d4:	8005883a 	mov	r2,r16
   2c0d8:	10000015 	stw	zero,0(r2)
   2c0dc:	10000115 	stw	zero,4(r2)
   2c0e0:	10000215 	stw	zero,8(r2)
   2c0e4:	8005883a 	mov	r2,r16
   2c0e8:	dfc00117 	ldw	ra,4(sp)
   2c0ec:	dc000017 	ldw	r16,0(sp)
   2c0f0:	dec00204 	addi	sp,sp,8
   2c0f4:	f800283a 	ret
   2c0f8:	000b883a 	mov	r5,zero
   2c0fc:	8009883a 	mov	r4,r16
   2c100:	00237a00 	call	237a0 <memset>
   2c104:	8005883a 	mov	r2,r16
   2c108:	dfc00117 	ldw	ra,4(sp)
   2c10c:	dc000017 	ldw	r16,0(sp)
   2c110:	dec00204 	addi	sp,sp,8
   2c114:	f800283a 	ret
   2c118:	80800404 	addi	r2,r16,16
   2c11c:	003fee06 	br	2c0d8 <_gp+0xfffef048>
   2c120:	80800204 	addi	r2,r16,8
   2c124:	003fec06 	br	2c0d8 <_gp+0xfffef048>
   2c128:	0005883a 	mov	r2,zero
   2c12c:	003fee06 	br	2c0e8 <_gp+0xfffef058>

0002c130 <_fclose_r>:
   2c130:	28003926 	beq	r5,zero,2c218 <_fclose_r+0xe8>
   2c134:	defffc04 	addi	sp,sp,-16
   2c138:	dc400115 	stw	r17,4(sp)
   2c13c:	dc000015 	stw	r16,0(sp)
   2c140:	dfc00315 	stw	ra,12(sp)
   2c144:	dc800215 	stw	r18,8(sp)
   2c148:	2023883a 	mov	r17,r4
   2c14c:	2821883a 	mov	r16,r5
   2c150:	20000226 	beq	r4,zero,2c15c <_fclose_r+0x2c>
   2c154:	20800e17 	ldw	r2,56(r4)
   2c158:	10002726 	beq	r2,zero,2c1f8 <_fclose_r+0xc8>
   2c15c:	8080030f 	ldh	r2,12(r16)
   2c160:	1000071e 	bne	r2,zero,2c180 <_fclose_r+0x50>
   2c164:	0005883a 	mov	r2,zero
   2c168:	dfc00317 	ldw	ra,12(sp)
   2c16c:	dc800217 	ldw	r18,8(sp)
   2c170:	dc400117 	ldw	r17,4(sp)
   2c174:	dc000017 	ldw	r16,0(sp)
   2c178:	dec00404 	addi	sp,sp,16
   2c17c:	f800283a 	ret
   2c180:	800b883a 	mov	r5,r16
   2c184:	8809883a 	mov	r4,r17
   2c188:	0027b800 	call	27b80 <__sflush_r>
   2c18c:	1025883a 	mov	r18,r2
   2c190:	80800b17 	ldw	r2,44(r16)
   2c194:	10000426 	beq	r2,zero,2c1a8 <_fclose_r+0x78>
   2c198:	81400717 	ldw	r5,28(r16)
   2c19c:	8809883a 	mov	r4,r17
   2c1a0:	103ee83a 	callr	r2
   2c1a4:	10001616 	blt	r2,zero,2c200 <_fclose_r+0xd0>
   2c1a8:	8080030b 	ldhu	r2,12(r16)
   2c1ac:	1080200c 	andi	r2,r2,128
   2c1b0:	1000151e 	bne	r2,zero,2c208 <_fclose_r+0xd8>
   2c1b4:	81400c17 	ldw	r5,48(r16)
   2c1b8:	28000526 	beq	r5,zero,2c1d0 <_fclose_r+0xa0>
   2c1bc:	80801004 	addi	r2,r16,64
   2c1c0:	28800226 	beq	r5,r2,2c1cc <_fclose_r+0x9c>
   2c1c4:	8809883a 	mov	r4,r17
   2c1c8:	00282ec0 	call	282ec <_free_r>
   2c1cc:	80000c15 	stw	zero,48(r16)
   2c1d0:	81401117 	ldw	r5,68(r16)
   2c1d4:	28000326 	beq	r5,zero,2c1e4 <_fclose_r+0xb4>
   2c1d8:	8809883a 	mov	r4,r17
   2c1dc:	00282ec0 	call	282ec <_free_r>
   2c1e0:	80001115 	stw	zero,68(r16)
   2c1e4:	00281880 	call	28188 <__sfp_lock_acquire>
   2c1e8:	8000030d 	sth	zero,12(r16)
   2c1ec:	002818c0 	call	2818c <__sfp_lock_release>
   2c1f0:	9005883a 	mov	r2,r18
   2c1f4:	003fdc06 	br	2c168 <_gp+0xfffef0d8>
   2c1f8:	00281780 	call	28178 <__sinit>
   2c1fc:	003fd706 	br	2c15c <_gp+0xfffef0cc>
   2c200:	04bfffc4 	movi	r18,-1
   2c204:	003fe806 	br	2c1a8 <_gp+0xfffef118>
   2c208:	81400417 	ldw	r5,16(r16)
   2c20c:	8809883a 	mov	r4,r17
   2c210:	00282ec0 	call	282ec <_free_r>
   2c214:	003fe706 	br	2c1b4 <_gp+0xfffef124>
   2c218:	0005883a 	mov	r2,zero
   2c21c:	f800283a 	ret

0002c220 <fclose>:
   2c220:	008000f4 	movhi	r2,3
   2c224:	10943504 	addi	r2,r2,20692
   2c228:	200b883a 	mov	r5,r4
   2c22c:	11000017 	ldw	r4,0(r2)
   2c230:	002c1301 	jmpi	2c130 <_fclose_r>

0002c234 <__fputwc>:
   2c234:	defff804 	addi	sp,sp,-32
   2c238:	dcc00415 	stw	r19,16(sp)
   2c23c:	dc800315 	stw	r18,12(sp)
   2c240:	dc000115 	stw	r16,4(sp)
   2c244:	dfc00715 	stw	ra,28(sp)
   2c248:	dd400615 	stw	r21,24(sp)
   2c24c:	dd000515 	stw	r20,20(sp)
   2c250:	dc400215 	stw	r17,8(sp)
   2c254:	2027883a 	mov	r19,r4
   2c258:	2825883a 	mov	r18,r5
   2c25c:	3021883a 	mov	r16,r6
   2c260:	0028cc80 	call	28cc8 <__locale_mb_cur_max>
   2c264:	00c00044 	movi	r3,1
   2c268:	10c03e26 	beq	r2,r3,2c364 <__fputwc+0x130>
   2c26c:	81c01704 	addi	r7,r16,92
   2c270:	900d883a 	mov	r6,r18
   2c274:	d80b883a 	mov	r5,sp
   2c278:	9809883a 	mov	r4,r19
   2c27c:	002c7040 	call	2c704 <_wcrtomb_r>
   2c280:	1029883a 	mov	r20,r2
   2c284:	00bfffc4 	movi	r2,-1
   2c288:	a0802026 	beq	r20,r2,2c30c <__fputwc+0xd8>
   2c28c:	d9400003 	ldbu	r5,0(sp)
   2c290:	a0001c26 	beq	r20,zero,2c304 <__fputwc+0xd0>
   2c294:	0023883a 	mov	r17,zero
   2c298:	05400284 	movi	r21,10
   2c29c:	00000906 	br	2c2c4 <__fputwc+0x90>
   2c2a0:	80800017 	ldw	r2,0(r16)
   2c2a4:	11400005 	stb	r5,0(r2)
   2c2a8:	80c00017 	ldw	r3,0(r16)
   2c2ac:	18c00044 	addi	r3,r3,1
   2c2b0:	80c00015 	stw	r3,0(r16)
   2c2b4:	8c400044 	addi	r17,r17,1
   2c2b8:	dc45883a 	add	r2,sp,r17
   2c2bc:	8d00112e 	bgeu	r17,r20,2c304 <__fputwc+0xd0>
   2c2c0:	11400003 	ldbu	r5,0(r2)
   2c2c4:	80c00217 	ldw	r3,8(r16)
   2c2c8:	18ffffc4 	addi	r3,r3,-1
   2c2cc:	80c00215 	stw	r3,8(r16)
   2c2d0:	183ff30e 	bge	r3,zero,2c2a0 <_gp+0xfffef210>
   2c2d4:	80800617 	ldw	r2,24(r16)
   2c2d8:	18801916 	blt	r3,r2,2c340 <__fputwc+0x10c>
   2c2dc:	80800017 	ldw	r2,0(r16)
   2c2e0:	11400005 	stb	r5,0(r2)
   2c2e4:	80800017 	ldw	r2,0(r16)
   2c2e8:	10c00003 	ldbu	r3,0(r2)
   2c2ec:	10800044 	addi	r2,r2,1
   2c2f0:	1d402326 	beq	r3,r21,2c380 <__fputwc+0x14c>
   2c2f4:	80800015 	stw	r2,0(r16)
   2c2f8:	8c400044 	addi	r17,r17,1
   2c2fc:	dc45883a 	add	r2,sp,r17
   2c300:	8d3fef36 	bltu	r17,r20,2c2c0 <_gp+0xfffef230>
   2c304:	9005883a 	mov	r2,r18
   2c308:	00000406 	br	2c31c <__fputwc+0xe8>
   2c30c:	80c0030b 	ldhu	r3,12(r16)
   2c310:	a005883a 	mov	r2,r20
   2c314:	18c01014 	ori	r3,r3,64
   2c318:	80c0030d 	sth	r3,12(r16)
   2c31c:	dfc00717 	ldw	ra,28(sp)
   2c320:	dd400617 	ldw	r21,24(sp)
   2c324:	dd000517 	ldw	r20,20(sp)
   2c328:	dcc00417 	ldw	r19,16(sp)
   2c32c:	dc800317 	ldw	r18,12(sp)
   2c330:	dc400217 	ldw	r17,8(sp)
   2c334:	dc000117 	ldw	r16,4(sp)
   2c338:	dec00804 	addi	sp,sp,32
   2c33c:	f800283a 	ret
   2c340:	800d883a 	mov	r6,r16
   2c344:	29403fcc 	andi	r5,r5,255
   2c348:	9809883a 	mov	r4,r19
   2c34c:	002c5ac0 	call	2c5ac <__swbuf_r>
   2c350:	10bfffe0 	cmpeqi	r2,r2,-1
   2c354:	10803fcc 	andi	r2,r2,255
   2c358:	103fd626 	beq	r2,zero,2c2b4 <_gp+0xfffef224>
   2c35c:	00bfffc4 	movi	r2,-1
   2c360:	003fee06 	br	2c31c <_gp+0xfffef28c>
   2c364:	90ffffc4 	addi	r3,r18,-1
   2c368:	01003f84 	movi	r4,254
   2c36c:	20ffbf36 	bltu	r4,r3,2c26c <_gp+0xfffef1dc>
   2c370:	900b883a 	mov	r5,r18
   2c374:	dc800005 	stb	r18,0(sp)
   2c378:	1029883a 	mov	r20,r2
   2c37c:	003fc506 	br	2c294 <_gp+0xfffef204>
   2c380:	800d883a 	mov	r6,r16
   2c384:	a80b883a 	mov	r5,r21
   2c388:	9809883a 	mov	r4,r19
   2c38c:	002c5ac0 	call	2c5ac <__swbuf_r>
   2c390:	10bfffe0 	cmpeqi	r2,r2,-1
   2c394:	003fef06 	br	2c354 <_gp+0xfffef2c4>

0002c398 <_fputwc_r>:
   2c398:	3080030b 	ldhu	r2,12(r6)
   2c39c:	10c8000c 	andi	r3,r2,8192
   2c3a0:	1800051e 	bne	r3,zero,2c3b8 <_fputwc_r+0x20>
   2c3a4:	30c01917 	ldw	r3,100(r6)
   2c3a8:	10880014 	ori	r2,r2,8192
   2c3ac:	3080030d 	sth	r2,12(r6)
   2c3b0:	18880014 	ori	r2,r3,8192
   2c3b4:	30801915 	stw	r2,100(r6)
   2c3b8:	002c2341 	jmpi	2c234 <__fputwc>

0002c3bc <fputwc>:
   2c3bc:	008000f4 	movhi	r2,3
   2c3c0:	defffc04 	addi	sp,sp,-16
   2c3c4:	10943504 	addi	r2,r2,20692
   2c3c8:	dc000115 	stw	r16,4(sp)
   2c3cc:	14000017 	ldw	r16,0(r2)
   2c3d0:	dc400215 	stw	r17,8(sp)
   2c3d4:	dfc00315 	stw	ra,12(sp)
   2c3d8:	2023883a 	mov	r17,r4
   2c3dc:	80000226 	beq	r16,zero,2c3e8 <fputwc+0x2c>
   2c3e0:	80800e17 	ldw	r2,56(r16)
   2c3e4:	10001026 	beq	r2,zero,2c428 <fputwc+0x6c>
   2c3e8:	2880030b 	ldhu	r2,12(r5)
   2c3ec:	10c8000c 	andi	r3,r2,8192
   2c3f0:	1800051e 	bne	r3,zero,2c408 <fputwc+0x4c>
   2c3f4:	28c01917 	ldw	r3,100(r5)
   2c3f8:	10880014 	ori	r2,r2,8192
   2c3fc:	2880030d 	sth	r2,12(r5)
   2c400:	18880014 	ori	r2,r3,8192
   2c404:	28801915 	stw	r2,100(r5)
   2c408:	280d883a 	mov	r6,r5
   2c40c:	8009883a 	mov	r4,r16
   2c410:	880b883a 	mov	r5,r17
   2c414:	dfc00317 	ldw	ra,12(sp)
   2c418:	dc400217 	ldw	r17,8(sp)
   2c41c:	dc000117 	ldw	r16,4(sp)
   2c420:	dec00404 	addi	sp,sp,16
   2c424:	002c2341 	jmpi	2c234 <__fputwc>
   2c428:	8009883a 	mov	r4,r16
   2c42c:	d9400015 	stw	r5,0(sp)
   2c430:	00281780 	call	28178 <__sinit>
   2c434:	d9400017 	ldw	r5,0(sp)
   2c438:	003feb06 	br	2c3e8 <_gp+0xfffef358>

0002c43c <_fstat_r>:
   2c43c:	defffd04 	addi	sp,sp,-12
   2c440:	2805883a 	mov	r2,r5
   2c444:	dc000015 	stw	r16,0(sp)
   2c448:	040000f4 	movhi	r16,3
   2c44c:	dc400115 	stw	r17,4(sp)
   2c450:	841b4204 	addi	r16,r16,27912
   2c454:	2023883a 	mov	r17,r4
   2c458:	300b883a 	mov	r5,r6
   2c45c:	1009883a 	mov	r4,r2
   2c460:	dfc00215 	stw	ra,8(sp)
   2c464:	80000015 	stw	zero,0(r16)
   2c468:	002fd080 	call	2fd08 <fstat>
   2c46c:	00ffffc4 	movi	r3,-1
   2c470:	10c00526 	beq	r2,r3,2c488 <_fstat_r+0x4c>
   2c474:	dfc00217 	ldw	ra,8(sp)
   2c478:	dc400117 	ldw	r17,4(sp)
   2c47c:	dc000017 	ldw	r16,0(sp)
   2c480:	dec00304 	addi	sp,sp,12
   2c484:	f800283a 	ret
   2c488:	80c00017 	ldw	r3,0(r16)
   2c48c:	183ff926 	beq	r3,zero,2c474 <_gp+0xfffef3e4>
   2c490:	88c00015 	stw	r3,0(r17)
   2c494:	003ff706 	br	2c474 <_gp+0xfffef3e4>

0002c498 <_isatty_r>:
   2c498:	defffd04 	addi	sp,sp,-12
   2c49c:	dc000015 	stw	r16,0(sp)
   2c4a0:	040000f4 	movhi	r16,3
   2c4a4:	dc400115 	stw	r17,4(sp)
   2c4a8:	841b4204 	addi	r16,r16,27912
   2c4ac:	2023883a 	mov	r17,r4
   2c4b0:	2809883a 	mov	r4,r5
   2c4b4:	dfc00215 	stw	ra,8(sp)
   2c4b8:	80000015 	stw	zero,0(r16)
   2c4bc:	002fe140 	call	2fe14 <isatty>
   2c4c0:	00ffffc4 	movi	r3,-1
   2c4c4:	10c00526 	beq	r2,r3,2c4dc <_isatty_r+0x44>
   2c4c8:	dfc00217 	ldw	ra,8(sp)
   2c4cc:	dc400117 	ldw	r17,4(sp)
   2c4d0:	dc000017 	ldw	r16,0(sp)
   2c4d4:	dec00304 	addi	sp,sp,12
   2c4d8:	f800283a 	ret
   2c4dc:	80c00017 	ldw	r3,0(r16)
   2c4e0:	183ff926 	beq	r3,zero,2c4c8 <_gp+0xfffef438>
   2c4e4:	88c00015 	stw	r3,0(r17)
   2c4e8:	003ff706 	br	2c4c8 <_gp+0xfffef438>

0002c4ec <_lseek_r>:
   2c4ec:	defffd04 	addi	sp,sp,-12
   2c4f0:	2805883a 	mov	r2,r5
   2c4f4:	dc000015 	stw	r16,0(sp)
   2c4f8:	040000f4 	movhi	r16,3
   2c4fc:	dc400115 	stw	r17,4(sp)
   2c500:	300b883a 	mov	r5,r6
   2c504:	841b4204 	addi	r16,r16,27912
   2c508:	2023883a 	mov	r17,r4
   2c50c:	380d883a 	mov	r6,r7
   2c510:	1009883a 	mov	r4,r2
   2c514:	dfc00215 	stw	ra,8(sp)
   2c518:	80000015 	stw	zero,0(r16)
   2c51c:	003014c0 	call	3014c <lseek>
   2c520:	00ffffc4 	movi	r3,-1
   2c524:	10c00526 	beq	r2,r3,2c53c <_lseek_r+0x50>
   2c528:	dfc00217 	ldw	ra,8(sp)
   2c52c:	dc400117 	ldw	r17,4(sp)
   2c530:	dc000017 	ldw	r16,0(sp)
   2c534:	dec00304 	addi	sp,sp,12
   2c538:	f800283a 	ret
   2c53c:	80c00017 	ldw	r3,0(r16)
   2c540:	183ff926 	beq	r3,zero,2c528 <_gp+0xfffef498>
   2c544:	88c00015 	stw	r3,0(r17)
   2c548:	003ff706 	br	2c528 <_gp+0xfffef498>

0002c54c <_read_r>:
   2c54c:	defffd04 	addi	sp,sp,-12
   2c550:	2805883a 	mov	r2,r5
   2c554:	dc000015 	stw	r16,0(sp)
   2c558:	040000f4 	movhi	r16,3
   2c55c:	dc400115 	stw	r17,4(sp)
   2c560:	300b883a 	mov	r5,r6
   2c564:	841b4204 	addi	r16,r16,27912
   2c568:	2023883a 	mov	r17,r4
   2c56c:	380d883a 	mov	r6,r7
   2c570:	1009883a 	mov	r4,r2
   2c574:	dfc00215 	stw	ra,8(sp)
   2c578:	80000015 	stw	zero,0(r16)
   2c57c:	00305740 	call	30574 <read>
   2c580:	00ffffc4 	movi	r3,-1
   2c584:	10c00526 	beq	r2,r3,2c59c <_read_r+0x50>
   2c588:	dfc00217 	ldw	ra,8(sp)
   2c58c:	dc400117 	ldw	r17,4(sp)
   2c590:	dc000017 	ldw	r16,0(sp)
   2c594:	dec00304 	addi	sp,sp,12
   2c598:	f800283a 	ret
   2c59c:	80c00017 	ldw	r3,0(r16)
   2c5a0:	183ff926 	beq	r3,zero,2c588 <_gp+0xfffef4f8>
   2c5a4:	88c00015 	stw	r3,0(r17)
   2c5a8:	003ff706 	br	2c588 <_gp+0xfffef4f8>

0002c5ac <__swbuf_r>:
   2c5ac:	defffb04 	addi	sp,sp,-20
   2c5b0:	dcc00315 	stw	r19,12(sp)
   2c5b4:	dc800215 	stw	r18,8(sp)
   2c5b8:	dc000015 	stw	r16,0(sp)
   2c5bc:	dfc00415 	stw	ra,16(sp)
   2c5c0:	dc400115 	stw	r17,4(sp)
   2c5c4:	2025883a 	mov	r18,r4
   2c5c8:	2827883a 	mov	r19,r5
   2c5cc:	3021883a 	mov	r16,r6
   2c5d0:	20000226 	beq	r4,zero,2c5dc <__swbuf_r+0x30>
   2c5d4:	20800e17 	ldw	r2,56(r4)
   2c5d8:	10004226 	beq	r2,zero,2c6e4 <__swbuf_r+0x138>
   2c5dc:	80800617 	ldw	r2,24(r16)
   2c5e0:	8100030b 	ldhu	r4,12(r16)
   2c5e4:	80800215 	stw	r2,8(r16)
   2c5e8:	2080020c 	andi	r2,r4,8
   2c5ec:	10003626 	beq	r2,zero,2c6c8 <__swbuf_r+0x11c>
   2c5f0:	80c00417 	ldw	r3,16(r16)
   2c5f4:	18003426 	beq	r3,zero,2c6c8 <__swbuf_r+0x11c>
   2c5f8:	2088000c 	andi	r2,r4,8192
   2c5fc:	9c403fcc 	andi	r17,r19,255
   2c600:	10001a26 	beq	r2,zero,2c66c <__swbuf_r+0xc0>
   2c604:	80800017 	ldw	r2,0(r16)
   2c608:	81000517 	ldw	r4,20(r16)
   2c60c:	10c7c83a 	sub	r3,r2,r3
   2c610:	1900200e 	bge	r3,r4,2c694 <__swbuf_r+0xe8>
   2c614:	18c00044 	addi	r3,r3,1
   2c618:	81000217 	ldw	r4,8(r16)
   2c61c:	11400044 	addi	r5,r2,1
   2c620:	81400015 	stw	r5,0(r16)
   2c624:	213fffc4 	addi	r4,r4,-1
   2c628:	81000215 	stw	r4,8(r16)
   2c62c:	14c00005 	stb	r19,0(r2)
   2c630:	80800517 	ldw	r2,20(r16)
   2c634:	10c01e26 	beq	r2,r3,2c6b0 <__swbuf_r+0x104>
   2c638:	8080030b 	ldhu	r2,12(r16)
   2c63c:	1080004c 	andi	r2,r2,1
   2c640:	10000226 	beq	r2,zero,2c64c <__swbuf_r+0xa0>
   2c644:	00800284 	movi	r2,10
   2c648:	88801926 	beq	r17,r2,2c6b0 <__swbuf_r+0x104>
   2c64c:	8805883a 	mov	r2,r17
   2c650:	dfc00417 	ldw	ra,16(sp)
   2c654:	dcc00317 	ldw	r19,12(sp)
   2c658:	dc800217 	ldw	r18,8(sp)
   2c65c:	dc400117 	ldw	r17,4(sp)
   2c660:	dc000017 	ldw	r16,0(sp)
   2c664:	dec00504 	addi	sp,sp,20
   2c668:	f800283a 	ret
   2c66c:	81401917 	ldw	r5,100(r16)
   2c670:	00b7ffc4 	movi	r2,-8193
   2c674:	21080014 	ori	r4,r4,8192
   2c678:	2884703a 	and	r2,r5,r2
   2c67c:	80801915 	stw	r2,100(r16)
   2c680:	80800017 	ldw	r2,0(r16)
   2c684:	8100030d 	sth	r4,12(r16)
   2c688:	81000517 	ldw	r4,20(r16)
   2c68c:	10c7c83a 	sub	r3,r2,r3
   2c690:	193fe016 	blt	r3,r4,2c614 <_gp+0xfffef584>
   2c694:	800b883a 	mov	r5,r16
   2c698:	9009883a 	mov	r4,r18
   2c69c:	0027d9c0 	call	27d9c <_fflush_r>
   2c6a0:	1000071e 	bne	r2,zero,2c6c0 <__swbuf_r+0x114>
   2c6a4:	80800017 	ldw	r2,0(r16)
   2c6a8:	00c00044 	movi	r3,1
   2c6ac:	003fda06 	br	2c618 <_gp+0xfffef588>
   2c6b0:	800b883a 	mov	r5,r16
   2c6b4:	9009883a 	mov	r4,r18
   2c6b8:	0027d9c0 	call	27d9c <_fflush_r>
   2c6bc:	103fe326 	beq	r2,zero,2c64c <_gp+0xfffef5bc>
   2c6c0:	00bfffc4 	movi	r2,-1
   2c6c4:	003fe206 	br	2c650 <_gp+0xfffef5c0>
   2c6c8:	800b883a 	mov	r5,r16
   2c6cc:	9009883a 	mov	r4,r18
   2c6d0:	00261a40 	call	261a4 <__swsetup_r>
   2c6d4:	103ffa1e 	bne	r2,zero,2c6c0 <_gp+0xfffef630>
   2c6d8:	8100030b 	ldhu	r4,12(r16)
   2c6dc:	80c00417 	ldw	r3,16(r16)
   2c6e0:	003fc506 	br	2c5f8 <_gp+0xfffef568>
   2c6e4:	00281780 	call	28178 <__sinit>
   2c6e8:	003fbc06 	br	2c5dc <_gp+0xfffef54c>

0002c6ec <__swbuf>:
   2c6ec:	008000f4 	movhi	r2,3
   2c6f0:	10943504 	addi	r2,r2,20692
   2c6f4:	280d883a 	mov	r6,r5
   2c6f8:	200b883a 	mov	r5,r4
   2c6fc:	11000017 	ldw	r4,0(r2)
   2c700:	002c5ac1 	jmpi	2c5ac <__swbuf_r>

0002c704 <_wcrtomb_r>:
   2c704:	defff604 	addi	sp,sp,-40
   2c708:	008000f4 	movhi	r2,3
   2c70c:	dc800815 	stw	r18,32(sp)
   2c710:	dc400715 	stw	r17,28(sp)
   2c714:	dc000615 	stw	r16,24(sp)
   2c718:	10943704 	addi	r2,r2,20700
   2c71c:	dfc00915 	stw	ra,36(sp)
   2c720:	2021883a 	mov	r16,r4
   2c724:	3823883a 	mov	r17,r7
   2c728:	14800017 	ldw	r18,0(r2)
   2c72c:	28001426 	beq	r5,zero,2c780 <_wcrtomb_r+0x7c>
   2c730:	d9400415 	stw	r5,16(sp)
   2c734:	d9800515 	stw	r6,20(sp)
   2c738:	0028cbc0 	call	28cbc <__locale_charset>
   2c73c:	d9800517 	ldw	r6,20(sp)
   2c740:	d9400417 	ldw	r5,16(sp)
   2c744:	100f883a 	mov	r7,r2
   2c748:	dc400015 	stw	r17,0(sp)
   2c74c:	8009883a 	mov	r4,r16
   2c750:	903ee83a 	callr	r18
   2c754:	00ffffc4 	movi	r3,-1
   2c758:	10c0031e 	bne	r2,r3,2c768 <_wcrtomb_r+0x64>
   2c75c:	88000015 	stw	zero,0(r17)
   2c760:	00c02284 	movi	r3,138
   2c764:	80c00015 	stw	r3,0(r16)
   2c768:	dfc00917 	ldw	ra,36(sp)
   2c76c:	dc800817 	ldw	r18,32(sp)
   2c770:	dc400717 	ldw	r17,28(sp)
   2c774:	dc000617 	ldw	r16,24(sp)
   2c778:	dec00a04 	addi	sp,sp,40
   2c77c:	f800283a 	ret
   2c780:	0028cbc0 	call	28cbc <__locale_charset>
   2c784:	100f883a 	mov	r7,r2
   2c788:	dc400015 	stw	r17,0(sp)
   2c78c:	000d883a 	mov	r6,zero
   2c790:	d9400104 	addi	r5,sp,4
   2c794:	8009883a 	mov	r4,r16
   2c798:	903ee83a 	callr	r18
   2c79c:	003fed06 	br	2c754 <_gp+0xfffef6c4>

0002c7a0 <wcrtomb>:
   2c7a0:	defff604 	addi	sp,sp,-40
   2c7a4:	008000f4 	movhi	r2,3
   2c7a8:	dc800615 	stw	r18,24(sp)
   2c7ac:	dc400515 	stw	r17,20(sp)
   2c7b0:	10943504 	addi	r2,r2,20692
   2c7b4:	dfc00915 	stw	ra,36(sp)
   2c7b8:	dd000815 	stw	r20,32(sp)
   2c7bc:	dcc00715 	stw	r19,28(sp)
   2c7c0:	dc000415 	stw	r16,16(sp)
   2c7c4:	3025883a 	mov	r18,r6
   2c7c8:	14400017 	ldw	r17,0(r2)
   2c7cc:	20001926 	beq	r4,zero,2c834 <wcrtomb+0x94>
   2c7d0:	008000f4 	movhi	r2,3
   2c7d4:	10943704 	addi	r2,r2,20700
   2c7d8:	15000017 	ldw	r20,0(r2)
   2c7dc:	2021883a 	mov	r16,r4
   2c7e0:	2827883a 	mov	r19,r5
   2c7e4:	0028cbc0 	call	28cbc <__locale_charset>
   2c7e8:	100f883a 	mov	r7,r2
   2c7ec:	dc800015 	stw	r18,0(sp)
   2c7f0:	980d883a 	mov	r6,r19
   2c7f4:	800b883a 	mov	r5,r16
   2c7f8:	8809883a 	mov	r4,r17
   2c7fc:	a03ee83a 	callr	r20
   2c800:	00ffffc4 	movi	r3,-1
   2c804:	10c0031e 	bne	r2,r3,2c814 <wcrtomb+0x74>
   2c808:	90000015 	stw	zero,0(r18)
   2c80c:	00c02284 	movi	r3,138
   2c810:	88c00015 	stw	r3,0(r17)
   2c814:	dfc00917 	ldw	ra,36(sp)
   2c818:	dd000817 	ldw	r20,32(sp)
   2c81c:	dcc00717 	ldw	r19,28(sp)
   2c820:	dc800617 	ldw	r18,24(sp)
   2c824:	dc400517 	ldw	r17,20(sp)
   2c828:	dc000417 	ldw	r16,16(sp)
   2c82c:	dec00a04 	addi	sp,sp,40
   2c830:	f800283a 	ret
   2c834:	008000f4 	movhi	r2,3
   2c838:	10943704 	addi	r2,r2,20700
   2c83c:	14000017 	ldw	r16,0(r2)
   2c840:	0028cbc0 	call	28cbc <__locale_charset>
   2c844:	100f883a 	mov	r7,r2
   2c848:	dc800015 	stw	r18,0(sp)
   2c84c:	000d883a 	mov	r6,zero
   2c850:	d9400104 	addi	r5,sp,4
   2c854:	8809883a 	mov	r4,r17
   2c858:	803ee83a 	callr	r16
   2c85c:	003fe806 	br	2c800 <_gp+0xfffef770>

0002c860 <__ascii_wctomb>:
   2c860:	28000526 	beq	r5,zero,2c878 <__ascii_wctomb+0x18>
   2c864:	00803fc4 	movi	r2,255
   2c868:	11800536 	bltu	r2,r6,2c880 <__ascii_wctomb+0x20>
   2c86c:	29800005 	stb	r6,0(r5)
   2c870:	00800044 	movi	r2,1
   2c874:	f800283a 	ret
   2c878:	0005883a 	mov	r2,zero
   2c87c:	f800283a 	ret
   2c880:	00802284 	movi	r2,138
   2c884:	20800015 	stw	r2,0(r4)
   2c888:	00bfffc4 	movi	r2,-1
   2c88c:	f800283a 	ret

0002c890 <_wctomb_r>:
   2c890:	008000f4 	movhi	r2,3
   2c894:	defff904 	addi	sp,sp,-28
   2c898:	10943704 	addi	r2,r2,20700
   2c89c:	dfc00615 	stw	ra,24(sp)
   2c8a0:	dc400515 	stw	r17,20(sp)
   2c8a4:	dc000415 	stw	r16,16(sp)
   2c8a8:	3823883a 	mov	r17,r7
   2c8ac:	14000017 	ldw	r16,0(r2)
   2c8b0:	d9000115 	stw	r4,4(sp)
   2c8b4:	d9400215 	stw	r5,8(sp)
   2c8b8:	d9800315 	stw	r6,12(sp)
   2c8bc:	0028cbc0 	call	28cbc <__locale_charset>
   2c8c0:	d9800317 	ldw	r6,12(sp)
   2c8c4:	d9400217 	ldw	r5,8(sp)
   2c8c8:	d9000117 	ldw	r4,4(sp)
   2c8cc:	100f883a 	mov	r7,r2
   2c8d0:	dc400015 	stw	r17,0(sp)
   2c8d4:	803ee83a 	callr	r16
   2c8d8:	dfc00617 	ldw	ra,24(sp)
   2c8dc:	dc400517 	ldw	r17,20(sp)
   2c8e0:	dc000417 	ldw	r16,16(sp)
   2c8e4:	dec00704 	addi	sp,sp,28
   2c8e8:	f800283a 	ret

0002c8ec <__udivdi3>:
   2c8ec:	defff504 	addi	sp,sp,-44
   2c8f0:	dcc00415 	stw	r19,16(sp)
   2c8f4:	dc000115 	stw	r16,4(sp)
   2c8f8:	dfc00a15 	stw	ra,40(sp)
   2c8fc:	df000915 	stw	fp,36(sp)
   2c900:	ddc00815 	stw	r23,32(sp)
   2c904:	dd800715 	stw	r22,28(sp)
   2c908:	dd400615 	stw	r21,24(sp)
   2c90c:	dd000515 	stw	r20,20(sp)
   2c910:	dc800315 	stw	r18,12(sp)
   2c914:	dc400215 	stw	r17,8(sp)
   2c918:	2027883a 	mov	r19,r4
   2c91c:	2821883a 	mov	r16,r5
   2c920:	3800411e 	bne	r7,zero,2ca28 <__udivdi3+0x13c>
   2c924:	3023883a 	mov	r17,r6
   2c928:	2025883a 	mov	r18,r4
   2c92c:	2980522e 	bgeu	r5,r6,2ca78 <__udivdi3+0x18c>
   2c930:	00bfffd4 	movui	r2,65535
   2c934:	282d883a 	mov	r22,r5
   2c938:	1180a836 	bltu	r2,r6,2cbdc <__udivdi3+0x2f0>
   2c93c:	00803fc4 	movi	r2,255
   2c940:	1185803a 	cmpltu	r2,r2,r6
   2c944:	100490fa 	slli	r2,r2,3
   2c948:	3086d83a 	srl	r3,r6,r2
   2c94c:	010000f4 	movhi	r4,3
   2c950:	210cf704 	addi	r4,r4,13276
   2c954:	20c7883a 	add	r3,r4,r3
   2c958:	18c00003 	ldbu	r3,0(r3)
   2c95c:	1885883a 	add	r2,r3,r2
   2c960:	00c00804 	movi	r3,32
   2c964:	1887c83a 	sub	r3,r3,r2
   2c968:	18000526 	beq	r3,zero,2c980 <__udivdi3+0x94>
   2c96c:	80e0983a 	sll	r16,r16,r3
   2c970:	9884d83a 	srl	r2,r19,r2
   2c974:	30e2983a 	sll	r17,r6,r3
   2c978:	98e4983a 	sll	r18,r19,r3
   2c97c:	142cb03a 	or	r22,r2,r16
   2c980:	882ad43a 	srli	r21,r17,16
   2c984:	b009883a 	mov	r4,r22
   2c988:	8d3fffcc 	andi	r20,r17,65535
   2c98c:	a80b883a 	mov	r5,r21
   2c990:	00229dc0 	call	229dc <__umodsi3>
   2c994:	b009883a 	mov	r4,r22
   2c998:	a80b883a 	mov	r5,r21
   2c99c:	1027883a 	mov	r19,r2
   2c9a0:	00229780 	call	22978 <__udivsi3>
   2c9a4:	102d883a 	mov	r22,r2
   2c9a8:	9826943a 	slli	r19,r19,16
   2c9ac:	9004d43a 	srli	r2,r18,16
   2c9b0:	a5a1383a 	mul	r16,r20,r22
   2c9b4:	14c4b03a 	or	r2,r2,r19
   2c9b8:	1400052e 	bgeu	r2,r16,2c9d0 <__udivdi3+0xe4>
   2c9bc:	1445883a 	add	r2,r2,r17
   2c9c0:	b0ffffc4 	addi	r3,r22,-1
   2c9c4:	14400136 	bltu	r2,r17,2c9cc <__udivdi3+0xe0>
   2c9c8:	14012336 	bltu	r2,r16,2ce58 <__udivdi3+0x56c>
   2c9cc:	182d883a 	mov	r22,r3
   2c9d0:	1421c83a 	sub	r16,r2,r16
   2c9d4:	a80b883a 	mov	r5,r21
   2c9d8:	8009883a 	mov	r4,r16
   2c9dc:	00229dc0 	call	229dc <__umodsi3>
   2c9e0:	1027883a 	mov	r19,r2
   2c9e4:	a80b883a 	mov	r5,r21
   2c9e8:	8009883a 	mov	r4,r16
   2c9ec:	00229780 	call	22978 <__udivsi3>
   2c9f0:	9826943a 	slli	r19,r19,16
   2c9f4:	a0a9383a 	mul	r20,r20,r2
   2c9f8:	94bfffcc 	andi	r18,r18,65535
   2c9fc:	94e4b03a 	or	r18,r18,r19
   2ca00:	9500052e 	bgeu	r18,r20,2ca18 <__udivdi3+0x12c>
   2ca04:	8ca5883a 	add	r18,r17,r18
   2ca08:	10ffffc4 	addi	r3,r2,-1
   2ca0c:	9440f136 	bltu	r18,r17,2cdd4 <__udivdi3+0x4e8>
   2ca10:	9500f02e 	bgeu	r18,r20,2cdd4 <__udivdi3+0x4e8>
   2ca14:	10bfff84 	addi	r2,r2,-2
   2ca18:	b00c943a 	slli	r6,r22,16
   2ca1c:	0007883a 	mov	r3,zero
   2ca20:	3084b03a 	or	r2,r6,r2
   2ca24:	00005906 	br	2cb8c <__udivdi3+0x2a0>
   2ca28:	29c05636 	bltu	r5,r7,2cb84 <__udivdi3+0x298>
   2ca2c:	00bfffd4 	movui	r2,65535
   2ca30:	11c0622e 	bgeu	r2,r7,2cbbc <__udivdi3+0x2d0>
   2ca34:	00804034 	movhi	r2,256
   2ca38:	10bfffc4 	addi	r2,r2,-1
   2ca3c:	11c0ee36 	bltu	r2,r7,2cdf8 <__udivdi3+0x50c>
   2ca40:	00800404 	movi	r2,16
   2ca44:	3886d83a 	srl	r3,r7,r2
   2ca48:	010000f4 	movhi	r4,3
   2ca4c:	210cf704 	addi	r4,r4,13276
   2ca50:	20c7883a 	add	r3,r4,r3
   2ca54:	18c00003 	ldbu	r3,0(r3)
   2ca58:	05400804 	movi	r21,32
   2ca5c:	1885883a 	add	r2,r3,r2
   2ca60:	a8abc83a 	sub	r21,r21,r2
   2ca64:	a800621e 	bne	r21,zero,2cbf0 <__udivdi3+0x304>
   2ca68:	3c00e936 	bltu	r7,r16,2ce10 <__udivdi3+0x524>
   2ca6c:	9985403a 	cmpgeu	r2,r19,r6
   2ca70:	0007883a 	mov	r3,zero
   2ca74:	00004506 	br	2cb8c <__udivdi3+0x2a0>
   2ca78:	3000041e 	bne	r6,zero,2ca8c <__udivdi3+0x1a0>
   2ca7c:	000b883a 	mov	r5,zero
   2ca80:	01000044 	movi	r4,1
   2ca84:	00229780 	call	22978 <__udivsi3>
   2ca88:	1023883a 	mov	r17,r2
   2ca8c:	00bfffd4 	movui	r2,65535
   2ca90:	14404e2e 	bgeu	r2,r17,2cbcc <__udivdi3+0x2e0>
   2ca94:	00804034 	movhi	r2,256
   2ca98:	10bfffc4 	addi	r2,r2,-1
   2ca9c:	1440d836 	bltu	r2,r17,2ce00 <__udivdi3+0x514>
   2caa0:	00800404 	movi	r2,16
   2caa4:	8886d83a 	srl	r3,r17,r2
   2caa8:	010000f4 	movhi	r4,3
   2caac:	210cf704 	addi	r4,r4,13276
   2cab0:	20c7883a 	add	r3,r4,r3
   2cab4:	18c00003 	ldbu	r3,0(r3)
   2cab8:	1885883a 	add	r2,r3,r2
   2cabc:	00c00804 	movi	r3,32
   2cac0:	1887c83a 	sub	r3,r3,r2
   2cac4:	18008f1e 	bne	r3,zero,2cd04 <__udivdi3+0x418>
   2cac8:	882ad43a 	srli	r21,r17,16
   2cacc:	8461c83a 	sub	r16,r16,r17
   2cad0:	8d3fffcc 	andi	r20,r17,65535
   2cad4:	00c00044 	movi	r3,1
   2cad8:	8009883a 	mov	r4,r16
   2cadc:	a80b883a 	mov	r5,r21
   2cae0:	d8c00015 	stw	r3,0(sp)
   2cae4:	00229dc0 	call	229dc <__umodsi3>
   2cae8:	8009883a 	mov	r4,r16
   2caec:	a80b883a 	mov	r5,r21
   2caf0:	1027883a 	mov	r19,r2
   2caf4:	00229780 	call	22978 <__udivsi3>
   2caf8:	9826943a 	slli	r19,r19,16
   2cafc:	9008d43a 	srli	r4,r18,16
   2cb00:	1521383a 	mul	r16,r2,r20
   2cb04:	102d883a 	mov	r22,r2
   2cb08:	24c8b03a 	or	r4,r4,r19
   2cb0c:	d8c00017 	ldw	r3,0(sp)
   2cb10:	2400052e 	bgeu	r4,r16,2cb28 <__udivdi3+0x23c>
   2cb14:	2449883a 	add	r4,r4,r17
   2cb18:	b0bfffc4 	addi	r2,r22,-1
   2cb1c:	24400136 	bltu	r4,r17,2cb24 <__udivdi3+0x238>
   2cb20:	2400ca36 	bltu	r4,r16,2ce4c <__udivdi3+0x560>
   2cb24:	102d883a 	mov	r22,r2
   2cb28:	2421c83a 	sub	r16,r4,r16
   2cb2c:	a80b883a 	mov	r5,r21
   2cb30:	8009883a 	mov	r4,r16
   2cb34:	d8c00015 	stw	r3,0(sp)
   2cb38:	00229dc0 	call	229dc <__umodsi3>
   2cb3c:	1027883a 	mov	r19,r2
   2cb40:	a80b883a 	mov	r5,r21
   2cb44:	8009883a 	mov	r4,r16
   2cb48:	00229780 	call	22978 <__udivsi3>
   2cb4c:	9826943a 	slli	r19,r19,16
   2cb50:	1529383a 	mul	r20,r2,r20
   2cb54:	94bfffcc 	andi	r18,r18,65535
   2cb58:	94e4b03a 	or	r18,r18,r19
   2cb5c:	d8c00017 	ldw	r3,0(sp)
   2cb60:	9500052e 	bgeu	r18,r20,2cb78 <__udivdi3+0x28c>
   2cb64:	8ca5883a 	add	r18,r17,r18
   2cb68:	113fffc4 	addi	r4,r2,-1
   2cb6c:	94409736 	bltu	r18,r17,2cdcc <__udivdi3+0x4e0>
   2cb70:	9500962e 	bgeu	r18,r20,2cdcc <__udivdi3+0x4e0>
   2cb74:	10bfff84 	addi	r2,r2,-2
   2cb78:	b00c943a 	slli	r6,r22,16
   2cb7c:	3084b03a 	or	r2,r6,r2
   2cb80:	00000206 	br	2cb8c <__udivdi3+0x2a0>
   2cb84:	0007883a 	mov	r3,zero
   2cb88:	0005883a 	mov	r2,zero
   2cb8c:	dfc00a17 	ldw	ra,40(sp)
   2cb90:	df000917 	ldw	fp,36(sp)
   2cb94:	ddc00817 	ldw	r23,32(sp)
   2cb98:	dd800717 	ldw	r22,28(sp)
   2cb9c:	dd400617 	ldw	r21,24(sp)
   2cba0:	dd000517 	ldw	r20,20(sp)
   2cba4:	dcc00417 	ldw	r19,16(sp)
   2cba8:	dc800317 	ldw	r18,12(sp)
   2cbac:	dc400217 	ldw	r17,8(sp)
   2cbb0:	dc000117 	ldw	r16,4(sp)
   2cbb4:	dec00b04 	addi	sp,sp,44
   2cbb8:	f800283a 	ret
   2cbbc:	00803fc4 	movi	r2,255
   2cbc0:	11c5803a 	cmpltu	r2,r2,r7
   2cbc4:	100490fa 	slli	r2,r2,3
   2cbc8:	003f9e06 	br	2ca44 <_gp+0xfffef9b4>
   2cbcc:	00803fc4 	movi	r2,255
   2cbd0:	1445803a 	cmpltu	r2,r2,r17
   2cbd4:	100490fa 	slli	r2,r2,3
   2cbd8:	003fb206 	br	2caa4 <_gp+0xfffefa14>
   2cbdc:	00804034 	movhi	r2,256
   2cbe0:	10bfffc4 	addi	r2,r2,-1
   2cbe4:	11808836 	bltu	r2,r6,2ce08 <__udivdi3+0x51c>
   2cbe8:	00800404 	movi	r2,16
   2cbec:	003f5606 	br	2c948 <_gp+0xfffef8b8>
   2cbf0:	30aed83a 	srl	r23,r6,r2
   2cbf4:	3d4e983a 	sll	r7,r7,r21
   2cbf8:	80acd83a 	srl	r22,r16,r2
   2cbfc:	9884d83a 	srl	r2,r19,r2
   2cc00:	3deeb03a 	or	r23,r7,r23
   2cc04:	b824d43a 	srli	r18,r23,16
   2cc08:	8560983a 	sll	r16,r16,r21
   2cc0c:	b009883a 	mov	r4,r22
   2cc10:	900b883a 	mov	r5,r18
   2cc14:	3568983a 	sll	r20,r6,r21
   2cc18:	1420b03a 	or	r16,r2,r16
   2cc1c:	00229dc0 	call	229dc <__umodsi3>
   2cc20:	b009883a 	mov	r4,r22
   2cc24:	900b883a 	mov	r5,r18
   2cc28:	1023883a 	mov	r17,r2
   2cc2c:	00229780 	call	22978 <__udivsi3>
   2cc30:	8808943a 	slli	r4,r17,16
   2cc34:	bf3fffcc 	andi	fp,r23,65535
   2cc38:	8006d43a 	srli	r3,r16,16
   2cc3c:	e0a3383a 	mul	r17,fp,r2
   2cc40:	100d883a 	mov	r6,r2
   2cc44:	1906b03a 	or	r3,r3,r4
   2cc48:	1c40042e 	bgeu	r3,r17,2cc5c <__udivdi3+0x370>
   2cc4c:	1dc7883a 	add	r3,r3,r23
   2cc50:	10bfffc4 	addi	r2,r2,-1
   2cc54:	1dc0752e 	bgeu	r3,r23,2ce2c <__udivdi3+0x540>
   2cc58:	100d883a 	mov	r6,r2
   2cc5c:	1c63c83a 	sub	r17,r3,r17
   2cc60:	900b883a 	mov	r5,r18
   2cc64:	8809883a 	mov	r4,r17
   2cc68:	d9800015 	stw	r6,0(sp)
   2cc6c:	00229dc0 	call	229dc <__umodsi3>
   2cc70:	102d883a 	mov	r22,r2
   2cc74:	8809883a 	mov	r4,r17
   2cc78:	900b883a 	mov	r5,r18
   2cc7c:	00229780 	call	22978 <__udivsi3>
   2cc80:	b02c943a 	slli	r22,r22,16
   2cc84:	e089383a 	mul	r4,fp,r2
   2cc88:	843fffcc 	andi	r16,r16,65535
   2cc8c:	85a0b03a 	or	r16,r16,r22
   2cc90:	d9800017 	ldw	r6,0(sp)
   2cc94:	8100042e 	bgeu	r16,r4,2cca8 <__udivdi3+0x3bc>
   2cc98:	85e1883a 	add	r16,r16,r23
   2cc9c:	10ffffc4 	addi	r3,r2,-1
   2cca0:	85c05e2e 	bgeu	r16,r23,2ce1c <__udivdi3+0x530>
   2cca4:	1805883a 	mov	r2,r3
   2cca8:	300c943a 	slli	r6,r6,16
   2ccac:	a17fffcc 	andi	r5,r20,65535
   2ccb0:	a028d43a 	srli	r20,r20,16
   2ccb4:	3084b03a 	or	r2,r6,r2
   2ccb8:	10ffffcc 	andi	r3,r2,65535
   2ccbc:	100cd43a 	srli	r6,r2,16
   2ccc0:	194f383a 	mul	r7,r3,r5
   2ccc4:	1d07383a 	mul	r3,r3,r20
   2ccc8:	314b383a 	mul	r5,r6,r5
   2cccc:	3810d43a 	srli	r8,r7,16
   2ccd0:	8121c83a 	sub	r16,r16,r4
   2ccd4:	1947883a 	add	r3,r3,r5
   2ccd8:	40c7883a 	add	r3,r8,r3
   2ccdc:	350d383a 	mul	r6,r6,r20
   2cce0:	1940022e 	bgeu	r3,r5,2ccec <__udivdi3+0x400>
   2cce4:	01000074 	movhi	r4,1
   2cce8:	310d883a 	add	r6,r6,r4
   2ccec:	1828d43a 	srli	r20,r3,16
   2ccf0:	a18d883a 	add	r6,r20,r6
   2ccf4:	81803e36 	bltu	r16,r6,2cdf0 <__udivdi3+0x504>
   2ccf8:	81803826 	beq	r16,r6,2cddc <__udivdi3+0x4f0>
   2ccfc:	0007883a 	mov	r3,zero
   2cd00:	003fa206 	br	2cb8c <_gp+0xfffefafc>
   2cd04:	88e2983a 	sll	r17,r17,r3
   2cd08:	80a8d83a 	srl	r20,r16,r2
   2cd0c:	80e0983a 	sll	r16,r16,r3
   2cd10:	882ad43a 	srli	r21,r17,16
   2cd14:	9884d83a 	srl	r2,r19,r2
   2cd18:	a009883a 	mov	r4,r20
   2cd1c:	a80b883a 	mov	r5,r21
   2cd20:	142eb03a 	or	r23,r2,r16
   2cd24:	98e4983a 	sll	r18,r19,r3
   2cd28:	00229dc0 	call	229dc <__umodsi3>
   2cd2c:	a009883a 	mov	r4,r20
   2cd30:	a80b883a 	mov	r5,r21
   2cd34:	1021883a 	mov	r16,r2
   2cd38:	00229780 	call	22978 <__udivsi3>
   2cd3c:	1039883a 	mov	fp,r2
   2cd40:	8d3fffcc 	andi	r20,r17,65535
   2cd44:	8020943a 	slli	r16,r16,16
   2cd48:	b804d43a 	srli	r2,r23,16
   2cd4c:	a72d383a 	mul	r22,r20,fp
   2cd50:	1404b03a 	or	r2,r2,r16
   2cd54:	1580062e 	bgeu	r2,r22,2cd70 <__udivdi3+0x484>
   2cd58:	1445883a 	add	r2,r2,r17
   2cd5c:	e0ffffc4 	addi	r3,fp,-1
   2cd60:	14403836 	bltu	r2,r17,2ce44 <__udivdi3+0x558>
   2cd64:	1580372e 	bgeu	r2,r22,2ce44 <__udivdi3+0x558>
   2cd68:	e73fff84 	addi	fp,fp,-2
   2cd6c:	1445883a 	add	r2,r2,r17
   2cd70:	15adc83a 	sub	r22,r2,r22
   2cd74:	a80b883a 	mov	r5,r21
   2cd78:	b009883a 	mov	r4,r22
   2cd7c:	00229dc0 	call	229dc <__umodsi3>
   2cd80:	1027883a 	mov	r19,r2
   2cd84:	b009883a 	mov	r4,r22
   2cd88:	a80b883a 	mov	r5,r21
   2cd8c:	00229780 	call	22978 <__udivsi3>
   2cd90:	9826943a 	slli	r19,r19,16
   2cd94:	a0a1383a 	mul	r16,r20,r2
   2cd98:	b93fffcc 	andi	r4,r23,65535
   2cd9c:	24c8b03a 	or	r4,r4,r19
   2cda0:	2400062e 	bgeu	r4,r16,2cdbc <__udivdi3+0x4d0>
   2cda4:	2449883a 	add	r4,r4,r17
   2cda8:	10ffffc4 	addi	r3,r2,-1
   2cdac:	24402336 	bltu	r4,r17,2ce3c <__udivdi3+0x550>
   2cdb0:	2400222e 	bgeu	r4,r16,2ce3c <__udivdi3+0x550>
   2cdb4:	10bfff84 	addi	r2,r2,-2
   2cdb8:	2449883a 	add	r4,r4,r17
   2cdbc:	e038943a 	slli	fp,fp,16
   2cdc0:	2421c83a 	sub	r16,r4,r16
   2cdc4:	e086b03a 	or	r3,fp,r2
   2cdc8:	003f4306 	br	2cad8 <_gp+0xfffefa48>
   2cdcc:	2005883a 	mov	r2,r4
   2cdd0:	003f6906 	br	2cb78 <_gp+0xfffefae8>
   2cdd4:	1805883a 	mov	r2,r3
   2cdd8:	003f0f06 	br	2ca18 <_gp+0xfffef988>
   2cddc:	1806943a 	slli	r3,r3,16
   2cde0:	9d66983a 	sll	r19,r19,r21
   2cde4:	39ffffcc 	andi	r7,r7,65535
   2cde8:	19c7883a 	add	r3,r3,r7
   2cdec:	98ffc32e 	bgeu	r19,r3,2ccfc <_gp+0xfffefc6c>
   2cdf0:	10bfffc4 	addi	r2,r2,-1
   2cdf4:	003fc106 	br	2ccfc <_gp+0xfffefc6c>
   2cdf8:	00800604 	movi	r2,24
   2cdfc:	003f1106 	br	2ca44 <_gp+0xfffef9b4>
   2ce00:	00800604 	movi	r2,24
   2ce04:	003f2706 	br	2caa4 <_gp+0xfffefa14>
   2ce08:	00800604 	movi	r2,24
   2ce0c:	003ece06 	br	2c948 <_gp+0xfffef8b8>
   2ce10:	0007883a 	mov	r3,zero
   2ce14:	00800044 	movi	r2,1
   2ce18:	003f5c06 	br	2cb8c <_gp+0xfffefafc>
   2ce1c:	813fa12e 	bgeu	r16,r4,2cca4 <_gp+0xfffefc14>
   2ce20:	10bfff84 	addi	r2,r2,-2
   2ce24:	85e1883a 	add	r16,r16,r23
   2ce28:	003f9f06 	br	2cca8 <_gp+0xfffefc18>
   2ce2c:	1c7f8a2e 	bgeu	r3,r17,2cc58 <_gp+0xfffefbc8>
   2ce30:	31bfff84 	addi	r6,r6,-2
   2ce34:	1dc7883a 	add	r3,r3,r23
   2ce38:	003f8806 	br	2cc5c <_gp+0xfffefbcc>
   2ce3c:	1805883a 	mov	r2,r3
   2ce40:	003fde06 	br	2cdbc <_gp+0xfffefd2c>
   2ce44:	1839883a 	mov	fp,r3
   2ce48:	003fc906 	br	2cd70 <_gp+0xfffefce0>
   2ce4c:	b5bfff84 	addi	r22,r22,-2
   2ce50:	2449883a 	add	r4,r4,r17
   2ce54:	003f3406 	br	2cb28 <_gp+0xfffefa98>
   2ce58:	b5bfff84 	addi	r22,r22,-2
   2ce5c:	1445883a 	add	r2,r2,r17
   2ce60:	003edb06 	br	2c9d0 <_gp+0xfffef940>

0002ce64 <__umoddi3>:
   2ce64:	defff404 	addi	sp,sp,-48
   2ce68:	df000a15 	stw	fp,40(sp)
   2ce6c:	dc400315 	stw	r17,12(sp)
   2ce70:	dc000215 	stw	r16,8(sp)
   2ce74:	dfc00b15 	stw	ra,44(sp)
   2ce78:	ddc00915 	stw	r23,36(sp)
   2ce7c:	dd800815 	stw	r22,32(sp)
   2ce80:	dd400715 	stw	r21,28(sp)
   2ce84:	dd000615 	stw	r20,24(sp)
   2ce88:	dcc00515 	stw	r19,20(sp)
   2ce8c:	dc800415 	stw	r18,16(sp)
   2ce90:	2021883a 	mov	r16,r4
   2ce94:	2823883a 	mov	r17,r5
   2ce98:	2839883a 	mov	fp,r5
   2ce9c:	38003c1e 	bne	r7,zero,2cf90 <__umoddi3+0x12c>
   2cea0:	3027883a 	mov	r19,r6
   2cea4:	2029883a 	mov	r20,r4
   2cea8:	2980512e 	bgeu	r5,r6,2cff0 <__umoddi3+0x18c>
   2ceac:	00bfffd4 	movui	r2,65535
   2ceb0:	11809a36 	bltu	r2,r6,2d11c <__umoddi3+0x2b8>
   2ceb4:	01003fc4 	movi	r4,255
   2ceb8:	2189803a 	cmpltu	r4,r4,r6
   2cebc:	200890fa 	slli	r4,r4,3
   2cec0:	3104d83a 	srl	r2,r6,r4
   2cec4:	00c000f4 	movhi	r3,3
   2cec8:	18ccf704 	addi	r3,r3,13276
   2cecc:	1885883a 	add	r2,r3,r2
   2ced0:	10c00003 	ldbu	r3,0(r2)
   2ced4:	00800804 	movi	r2,32
   2ced8:	1909883a 	add	r4,r3,r4
   2cedc:	1125c83a 	sub	r18,r2,r4
   2cee0:	90000526 	beq	r18,zero,2cef8 <__umoddi3+0x94>
   2cee4:	8ca2983a 	sll	r17,r17,r18
   2cee8:	8108d83a 	srl	r4,r16,r4
   2ceec:	34a6983a 	sll	r19,r6,r18
   2cef0:	84a8983a 	sll	r20,r16,r18
   2cef4:	2478b03a 	or	fp,r4,r17
   2cef8:	982ed43a 	srli	r23,r19,16
   2cefc:	e009883a 	mov	r4,fp
   2cf00:	9dbfffcc 	andi	r22,r19,65535
   2cf04:	b80b883a 	mov	r5,r23
   2cf08:	00229dc0 	call	229dc <__umodsi3>
   2cf0c:	e009883a 	mov	r4,fp
   2cf10:	b80b883a 	mov	r5,r23
   2cf14:	102b883a 	mov	r21,r2
   2cf18:	00229780 	call	22978 <__udivsi3>
   2cf1c:	a806943a 	slli	r3,r21,16
   2cf20:	a008d43a 	srli	r4,r20,16
   2cf24:	b085383a 	mul	r2,r22,r2
   2cf28:	20c8b03a 	or	r4,r4,r3
   2cf2c:	2080032e 	bgeu	r4,r2,2cf3c <__umoddi3+0xd8>
   2cf30:	24c9883a 	add	r4,r4,r19
   2cf34:	24c00136 	bltu	r4,r19,2cf3c <__umoddi3+0xd8>
   2cf38:	20811036 	bltu	r4,r2,2d37c <__umoddi3+0x518>
   2cf3c:	20abc83a 	sub	r21,r4,r2
   2cf40:	b80b883a 	mov	r5,r23
   2cf44:	a809883a 	mov	r4,r21
   2cf48:	00229dc0 	call	229dc <__umodsi3>
   2cf4c:	1023883a 	mov	r17,r2
   2cf50:	b80b883a 	mov	r5,r23
   2cf54:	a809883a 	mov	r4,r21
   2cf58:	00229780 	call	22978 <__udivsi3>
   2cf5c:	8822943a 	slli	r17,r17,16
   2cf60:	b085383a 	mul	r2,r22,r2
   2cf64:	a0ffffcc 	andi	r3,r20,65535
   2cf68:	1c46b03a 	or	r3,r3,r17
   2cf6c:	1880042e 	bgeu	r3,r2,2cf80 <__umoddi3+0x11c>
   2cf70:	1cc7883a 	add	r3,r3,r19
   2cf74:	1cc00236 	bltu	r3,r19,2cf80 <__umoddi3+0x11c>
   2cf78:	1880012e 	bgeu	r3,r2,2cf80 <__umoddi3+0x11c>
   2cf7c:	1cc7883a 	add	r3,r3,r19
   2cf80:	1885c83a 	sub	r2,r3,r2
   2cf84:	1484d83a 	srl	r2,r2,r18
   2cf88:	0007883a 	mov	r3,zero
   2cf8c:	00004f06 	br	2d0cc <__umoddi3+0x268>
   2cf90:	29c04c36 	bltu	r5,r7,2d0c4 <__umoddi3+0x260>
   2cf94:	00bfffd4 	movui	r2,65535
   2cf98:	11c0582e 	bgeu	r2,r7,2d0fc <__umoddi3+0x298>
   2cf9c:	00804034 	movhi	r2,256
   2cfa0:	10bfffc4 	addi	r2,r2,-1
   2cfa4:	11c0e736 	bltu	r2,r7,2d344 <__umoddi3+0x4e0>
   2cfa8:	01000404 	movi	r4,16
   2cfac:	3904d83a 	srl	r2,r7,r4
   2cfb0:	00c000f4 	movhi	r3,3
   2cfb4:	18ccf704 	addi	r3,r3,13276
   2cfb8:	1885883a 	add	r2,r3,r2
   2cfbc:	14c00003 	ldbu	r19,0(r2)
   2cfc0:	00c00804 	movi	r3,32
   2cfc4:	9927883a 	add	r19,r19,r4
   2cfc8:	1ce9c83a 	sub	r20,r3,r19
   2cfcc:	a000581e 	bne	r20,zero,2d130 <__umoddi3+0x2cc>
   2cfd0:	3c400136 	bltu	r7,r17,2cfd8 <__umoddi3+0x174>
   2cfd4:	8180eb36 	bltu	r16,r6,2d384 <__umoddi3+0x520>
   2cfd8:	8185c83a 	sub	r2,r16,r6
   2cfdc:	89e3c83a 	sub	r17,r17,r7
   2cfe0:	8089803a 	cmpltu	r4,r16,r2
   2cfe4:	8939c83a 	sub	fp,r17,r4
   2cfe8:	e007883a 	mov	r3,fp
   2cfec:	00003706 	br	2d0cc <__umoddi3+0x268>
   2cff0:	3000041e 	bne	r6,zero,2d004 <__umoddi3+0x1a0>
   2cff4:	000b883a 	mov	r5,zero
   2cff8:	01000044 	movi	r4,1
   2cffc:	00229780 	call	22978 <__udivsi3>
   2d000:	1027883a 	mov	r19,r2
   2d004:	00bfffd4 	movui	r2,65535
   2d008:	14c0402e 	bgeu	r2,r19,2d10c <__umoddi3+0x2a8>
   2d00c:	00804034 	movhi	r2,256
   2d010:	10bfffc4 	addi	r2,r2,-1
   2d014:	14c0cd36 	bltu	r2,r19,2d34c <__umoddi3+0x4e8>
   2d018:	00800404 	movi	r2,16
   2d01c:	9886d83a 	srl	r3,r19,r2
   2d020:	010000f4 	movhi	r4,3
   2d024:	210cf704 	addi	r4,r4,13276
   2d028:	20c7883a 	add	r3,r4,r3
   2d02c:	18c00003 	ldbu	r3,0(r3)
   2d030:	1887883a 	add	r3,r3,r2
   2d034:	00800804 	movi	r2,32
   2d038:	10e5c83a 	sub	r18,r2,r3
   2d03c:	9000901e 	bne	r18,zero,2d280 <__umoddi3+0x41c>
   2d040:	982cd43a 	srli	r22,r19,16
   2d044:	8ce3c83a 	sub	r17,r17,r19
   2d048:	9d7fffcc 	andi	r21,r19,65535
   2d04c:	b00b883a 	mov	r5,r22
   2d050:	8809883a 	mov	r4,r17
   2d054:	00229dc0 	call	229dc <__umodsi3>
   2d058:	8809883a 	mov	r4,r17
   2d05c:	b00b883a 	mov	r5,r22
   2d060:	1021883a 	mov	r16,r2
   2d064:	00229780 	call	22978 <__udivsi3>
   2d068:	8006943a 	slli	r3,r16,16
   2d06c:	a008d43a 	srli	r4,r20,16
   2d070:	1545383a 	mul	r2,r2,r21
   2d074:	20c8b03a 	or	r4,r4,r3
   2d078:	2080042e 	bgeu	r4,r2,2d08c <__umoddi3+0x228>
   2d07c:	24c9883a 	add	r4,r4,r19
   2d080:	24c00236 	bltu	r4,r19,2d08c <__umoddi3+0x228>
   2d084:	2080012e 	bgeu	r4,r2,2d08c <__umoddi3+0x228>
   2d088:	24c9883a 	add	r4,r4,r19
   2d08c:	20a1c83a 	sub	r16,r4,r2
   2d090:	b00b883a 	mov	r5,r22
   2d094:	8009883a 	mov	r4,r16
   2d098:	00229dc0 	call	229dc <__umodsi3>
   2d09c:	1023883a 	mov	r17,r2
   2d0a0:	b00b883a 	mov	r5,r22
   2d0a4:	8009883a 	mov	r4,r16
   2d0a8:	00229780 	call	22978 <__udivsi3>
   2d0ac:	8822943a 	slli	r17,r17,16
   2d0b0:	1545383a 	mul	r2,r2,r21
   2d0b4:	a53fffcc 	andi	r20,r20,65535
   2d0b8:	a446b03a 	or	r3,r20,r17
   2d0bc:	18bfb02e 	bgeu	r3,r2,2cf80 <_gp+0xfffefef0>
   2d0c0:	003fab06 	br	2cf70 <_gp+0xfffefee0>
   2d0c4:	2005883a 	mov	r2,r4
   2d0c8:	2807883a 	mov	r3,r5
   2d0cc:	dfc00b17 	ldw	ra,44(sp)
   2d0d0:	df000a17 	ldw	fp,40(sp)
   2d0d4:	ddc00917 	ldw	r23,36(sp)
   2d0d8:	dd800817 	ldw	r22,32(sp)
   2d0dc:	dd400717 	ldw	r21,28(sp)
   2d0e0:	dd000617 	ldw	r20,24(sp)
   2d0e4:	dcc00517 	ldw	r19,20(sp)
   2d0e8:	dc800417 	ldw	r18,16(sp)
   2d0ec:	dc400317 	ldw	r17,12(sp)
   2d0f0:	dc000217 	ldw	r16,8(sp)
   2d0f4:	dec00c04 	addi	sp,sp,48
   2d0f8:	f800283a 	ret
   2d0fc:	04c03fc4 	movi	r19,255
   2d100:	99c9803a 	cmpltu	r4,r19,r7
   2d104:	200890fa 	slli	r4,r4,3
   2d108:	003fa806 	br	2cfac <_gp+0xfffeff1c>
   2d10c:	00803fc4 	movi	r2,255
   2d110:	14c5803a 	cmpltu	r2,r2,r19
   2d114:	100490fa 	slli	r2,r2,3
   2d118:	003fc006 	br	2d01c <_gp+0xfffeff8c>
   2d11c:	00804034 	movhi	r2,256
   2d120:	10bfffc4 	addi	r2,r2,-1
   2d124:	11808b36 	bltu	r2,r6,2d354 <__umoddi3+0x4f0>
   2d128:	01000404 	movi	r4,16
   2d12c:	003f6406 	br	2cec0 <_gp+0xfffefe30>
   2d130:	34c4d83a 	srl	r2,r6,r19
   2d134:	3d0e983a 	sll	r7,r7,r20
   2d138:	8cf8d83a 	srl	fp,r17,r19
   2d13c:	8d10983a 	sll	r8,r17,r20
   2d140:	38aab03a 	or	r21,r7,r2
   2d144:	a82cd43a 	srli	r22,r21,16
   2d148:	84e2d83a 	srl	r17,r16,r19
   2d14c:	e009883a 	mov	r4,fp
   2d150:	b00b883a 	mov	r5,r22
   2d154:	8a22b03a 	or	r17,r17,r8
   2d158:	3524983a 	sll	r18,r6,r20
   2d15c:	00229dc0 	call	229dc <__umodsi3>
   2d160:	e009883a 	mov	r4,fp
   2d164:	b00b883a 	mov	r5,r22
   2d168:	102f883a 	mov	r23,r2
   2d16c:	00229780 	call	22978 <__udivsi3>
   2d170:	100d883a 	mov	r6,r2
   2d174:	b808943a 	slli	r4,r23,16
   2d178:	aa3fffcc 	andi	r8,r21,65535
   2d17c:	8804d43a 	srli	r2,r17,16
   2d180:	41af383a 	mul	r23,r8,r6
   2d184:	8520983a 	sll	r16,r16,r20
   2d188:	1104b03a 	or	r2,r2,r4
   2d18c:	15c0042e 	bgeu	r2,r23,2d1a0 <__umoddi3+0x33c>
   2d190:	1545883a 	add	r2,r2,r21
   2d194:	30ffffc4 	addi	r3,r6,-1
   2d198:	1540742e 	bgeu	r2,r21,2d36c <__umoddi3+0x508>
   2d19c:	180d883a 	mov	r6,r3
   2d1a0:	15efc83a 	sub	r23,r2,r23
   2d1a4:	b00b883a 	mov	r5,r22
   2d1a8:	b809883a 	mov	r4,r23
   2d1ac:	d9800115 	stw	r6,4(sp)
   2d1b0:	da000015 	stw	r8,0(sp)
   2d1b4:	00229dc0 	call	229dc <__umodsi3>
   2d1b8:	b00b883a 	mov	r5,r22
   2d1bc:	b809883a 	mov	r4,r23
   2d1c0:	1039883a 	mov	fp,r2
   2d1c4:	00229780 	call	22978 <__udivsi3>
   2d1c8:	da000017 	ldw	r8,0(sp)
   2d1cc:	e038943a 	slli	fp,fp,16
   2d1d0:	100b883a 	mov	r5,r2
   2d1d4:	4089383a 	mul	r4,r8,r2
   2d1d8:	8a3fffcc 	andi	r8,r17,65535
   2d1dc:	4710b03a 	or	r8,r8,fp
   2d1e0:	d9800117 	ldw	r6,4(sp)
   2d1e4:	4100042e 	bgeu	r8,r4,2d1f8 <__umoddi3+0x394>
   2d1e8:	4551883a 	add	r8,r8,r21
   2d1ec:	10bfffc4 	addi	r2,r2,-1
   2d1f0:	45405a2e 	bgeu	r8,r21,2d35c <__umoddi3+0x4f8>
   2d1f4:	100b883a 	mov	r5,r2
   2d1f8:	300c943a 	slli	r6,r6,16
   2d1fc:	91ffffcc 	andi	r7,r18,65535
   2d200:	9004d43a 	srli	r2,r18,16
   2d204:	314cb03a 	or	r6,r6,r5
   2d208:	317fffcc 	andi	r5,r6,65535
   2d20c:	300cd43a 	srli	r6,r6,16
   2d210:	29d3383a 	mul	r9,r5,r7
   2d214:	288b383a 	mul	r5,r5,r2
   2d218:	31cf383a 	mul	r7,r6,r7
   2d21c:	4806d43a 	srli	r3,r9,16
   2d220:	4111c83a 	sub	r8,r8,r4
   2d224:	29cb883a 	add	r5,r5,r7
   2d228:	194b883a 	add	r5,r3,r5
   2d22c:	3085383a 	mul	r2,r6,r2
   2d230:	29c0022e 	bgeu	r5,r7,2d23c <__umoddi3+0x3d8>
   2d234:	00c00074 	movhi	r3,1
   2d238:	10c5883a 	add	r2,r2,r3
   2d23c:	2808d43a 	srli	r4,r5,16
   2d240:	280a943a 	slli	r5,r5,16
   2d244:	4a7fffcc 	andi	r9,r9,65535
   2d248:	2085883a 	add	r2,r4,r2
   2d24c:	2a4b883a 	add	r5,r5,r9
   2d250:	40803636 	bltu	r8,r2,2d32c <__umoddi3+0x4c8>
   2d254:	40804d26 	beq	r8,r2,2d38c <__umoddi3+0x528>
   2d258:	4089c83a 	sub	r4,r8,r2
   2d25c:	280f883a 	mov	r7,r5
   2d260:	81cfc83a 	sub	r7,r16,r7
   2d264:	81c7803a 	cmpltu	r3,r16,r7
   2d268:	20c7c83a 	sub	r3,r4,r3
   2d26c:	1cc4983a 	sll	r2,r3,r19
   2d270:	3d0ed83a 	srl	r7,r7,r20
   2d274:	1d06d83a 	srl	r3,r3,r20
   2d278:	11c4b03a 	or	r2,r2,r7
   2d27c:	003f9306 	br	2d0cc <_gp+0xffff003c>
   2d280:	9ca6983a 	sll	r19,r19,r18
   2d284:	88e8d83a 	srl	r20,r17,r3
   2d288:	80c4d83a 	srl	r2,r16,r3
   2d28c:	982cd43a 	srli	r22,r19,16
   2d290:	8ca2983a 	sll	r17,r17,r18
   2d294:	a009883a 	mov	r4,r20
   2d298:	b00b883a 	mov	r5,r22
   2d29c:	1478b03a 	or	fp,r2,r17
   2d2a0:	00229dc0 	call	229dc <__umodsi3>
   2d2a4:	a009883a 	mov	r4,r20
   2d2a8:	b00b883a 	mov	r5,r22
   2d2ac:	1023883a 	mov	r17,r2
   2d2b0:	00229780 	call	22978 <__udivsi3>
   2d2b4:	9d7fffcc 	andi	r21,r19,65535
   2d2b8:	880a943a 	slli	r5,r17,16
   2d2bc:	e008d43a 	srli	r4,fp,16
   2d2c0:	a885383a 	mul	r2,r21,r2
   2d2c4:	84a8983a 	sll	r20,r16,r18
   2d2c8:	2148b03a 	or	r4,r4,r5
   2d2cc:	2080042e 	bgeu	r4,r2,2d2e0 <__umoddi3+0x47c>
   2d2d0:	24c9883a 	add	r4,r4,r19
   2d2d4:	24c00236 	bltu	r4,r19,2d2e0 <__umoddi3+0x47c>
   2d2d8:	2080012e 	bgeu	r4,r2,2d2e0 <__umoddi3+0x47c>
   2d2dc:	24c9883a 	add	r4,r4,r19
   2d2e0:	20a3c83a 	sub	r17,r4,r2
   2d2e4:	b00b883a 	mov	r5,r22
   2d2e8:	8809883a 	mov	r4,r17
   2d2ec:	00229dc0 	call	229dc <__umodsi3>
   2d2f0:	102f883a 	mov	r23,r2
   2d2f4:	8809883a 	mov	r4,r17
   2d2f8:	b00b883a 	mov	r5,r22
   2d2fc:	00229780 	call	22978 <__udivsi3>
   2d300:	b82e943a 	slli	r23,r23,16
   2d304:	a885383a 	mul	r2,r21,r2
   2d308:	e13fffcc 	andi	r4,fp,65535
   2d30c:	25c8b03a 	or	r4,r4,r23
   2d310:	2080042e 	bgeu	r4,r2,2d324 <__umoddi3+0x4c0>
   2d314:	24c9883a 	add	r4,r4,r19
   2d318:	24c00236 	bltu	r4,r19,2d324 <__umoddi3+0x4c0>
   2d31c:	2080012e 	bgeu	r4,r2,2d324 <__umoddi3+0x4c0>
   2d320:	24c9883a 	add	r4,r4,r19
   2d324:	20a3c83a 	sub	r17,r4,r2
   2d328:	003f4806 	br	2d04c <_gp+0xfffeffbc>
   2d32c:	2c8fc83a 	sub	r7,r5,r18
   2d330:	1545c83a 	sub	r2,r2,r21
   2d334:	29cb803a 	cmpltu	r5,r5,r7
   2d338:	1145c83a 	sub	r2,r2,r5
   2d33c:	4089c83a 	sub	r4,r8,r2
   2d340:	003fc706 	br	2d260 <_gp+0xffff01d0>
   2d344:	01000604 	movi	r4,24
   2d348:	003f1806 	br	2cfac <_gp+0xfffeff1c>
   2d34c:	00800604 	movi	r2,24
   2d350:	003f3206 	br	2d01c <_gp+0xfffeff8c>
   2d354:	01000604 	movi	r4,24
   2d358:	003ed906 	br	2cec0 <_gp+0xfffefe30>
   2d35c:	413fa52e 	bgeu	r8,r4,2d1f4 <_gp+0xffff0164>
   2d360:	297fff84 	addi	r5,r5,-2
   2d364:	4551883a 	add	r8,r8,r21
   2d368:	003fa306 	br	2d1f8 <_gp+0xffff0168>
   2d36c:	15ff8b2e 	bgeu	r2,r23,2d19c <_gp+0xffff010c>
   2d370:	31bfff84 	addi	r6,r6,-2
   2d374:	1545883a 	add	r2,r2,r21
   2d378:	003f8906 	br	2d1a0 <_gp+0xffff0110>
   2d37c:	24c9883a 	add	r4,r4,r19
   2d380:	003eee06 	br	2cf3c <_gp+0xfffefeac>
   2d384:	8005883a 	mov	r2,r16
   2d388:	003f1706 	br	2cfe8 <_gp+0xfffeff58>
   2d38c:	817fe736 	bltu	r16,r5,2d32c <_gp+0xffff029c>
   2d390:	280f883a 	mov	r7,r5
   2d394:	0009883a 	mov	r4,zero
   2d398:	003fb106 	br	2d260 <_gp+0xffff01d0>

0002d39c <__adddf3>:
   2d39c:	02c00434 	movhi	r11,16
   2d3a0:	5affffc4 	addi	r11,r11,-1
   2d3a4:	2806d7fa 	srli	r3,r5,31
   2d3a8:	2ad4703a 	and	r10,r5,r11
   2d3ac:	3ad2703a 	and	r9,r7,r11
   2d3b0:	3804d53a 	srli	r2,r7,20
   2d3b4:	3018d77a 	srli	r12,r6,29
   2d3b8:	280ad53a 	srli	r5,r5,20
   2d3bc:	501490fa 	slli	r10,r10,3
   2d3c0:	2010d77a 	srli	r8,r4,29
   2d3c4:	481290fa 	slli	r9,r9,3
   2d3c8:	380ed7fa 	srli	r7,r7,31
   2d3cc:	defffb04 	addi	sp,sp,-20
   2d3d0:	dc800215 	stw	r18,8(sp)
   2d3d4:	dc400115 	stw	r17,4(sp)
   2d3d8:	dc000015 	stw	r16,0(sp)
   2d3dc:	dfc00415 	stw	ra,16(sp)
   2d3e0:	dcc00315 	stw	r19,12(sp)
   2d3e4:	1c803fcc 	andi	r18,r3,255
   2d3e8:	2c01ffcc 	andi	r16,r5,2047
   2d3ec:	5210b03a 	or	r8,r10,r8
   2d3f0:	202290fa 	slli	r17,r4,3
   2d3f4:	1081ffcc 	andi	r2,r2,2047
   2d3f8:	4b12b03a 	or	r9,r9,r12
   2d3fc:	300c90fa 	slli	r6,r6,3
   2d400:	91c07526 	beq	r18,r7,2d5d8 <__adddf3+0x23c>
   2d404:	8087c83a 	sub	r3,r16,r2
   2d408:	00c0ab0e 	bge	zero,r3,2d6b8 <__adddf3+0x31c>
   2d40c:	10002a1e 	bne	r2,zero,2d4b8 <__adddf3+0x11c>
   2d410:	4984b03a 	or	r2,r9,r6
   2d414:	1000961e 	bne	r2,zero,2d670 <__adddf3+0x2d4>
   2d418:	888001cc 	andi	r2,r17,7
   2d41c:	10000726 	beq	r2,zero,2d43c <__adddf3+0xa0>
   2d420:	888003cc 	andi	r2,r17,15
   2d424:	00c00104 	movi	r3,4
   2d428:	10c00426 	beq	r2,r3,2d43c <__adddf3+0xa0>
   2d42c:	88c7883a 	add	r3,r17,r3
   2d430:	1c63803a 	cmpltu	r17,r3,r17
   2d434:	4451883a 	add	r8,r8,r17
   2d438:	1823883a 	mov	r17,r3
   2d43c:	4080202c 	andhi	r2,r8,128
   2d440:	10005926 	beq	r2,zero,2d5a8 <__adddf3+0x20c>
   2d444:	84000044 	addi	r16,r16,1
   2d448:	0081ffc4 	movi	r2,2047
   2d44c:	8080ba26 	beq	r16,r2,2d738 <__adddf3+0x39c>
   2d450:	00bfe034 	movhi	r2,65408
   2d454:	10bfffc4 	addi	r2,r2,-1
   2d458:	4090703a 	and	r8,r8,r2
   2d45c:	4004977a 	slli	r2,r8,29
   2d460:	4010927a 	slli	r8,r8,9
   2d464:	8822d0fa 	srli	r17,r17,3
   2d468:	8401ffcc 	andi	r16,r16,2047
   2d46c:	4010d33a 	srli	r8,r8,12
   2d470:	9007883a 	mov	r3,r18
   2d474:	1444b03a 	or	r2,r2,r17
   2d478:	8401ffcc 	andi	r16,r16,2047
   2d47c:	8020953a 	slli	r16,r16,20
   2d480:	18c03fcc 	andi	r3,r3,255
   2d484:	01000434 	movhi	r4,16
   2d488:	213fffc4 	addi	r4,r4,-1
   2d48c:	180697fa 	slli	r3,r3,31
   2d490:	4110703a 	and	r8,r8,r4
   2d494:	4410b03a 	or	r8,r8,r16
   2d498:	40c6b03a 	or	r3,r8,r3
   2d49c:	dfc00417 	ldw	ra,16(sp)
   2d4a0:	dcc00317 	ldw	r19,12(sp)
   2d4a4:	dc800217 	ldw	r18,8(sp)
   2d4a8:	dc400117 	ldw	r17,4(sp)
   2d4ac:	dc000017 	ldw	r16,0(sp)
   2d4b0:	dec00504 	addi	sp,sp,20
   2d4b4:	f800283a 	ret
   2d4b8:	0081ffc4 	movi	r2,2047
   2d4bc:	80bfd626 	beq	r16,r2,2d418 <_gp+0xffff0388>
   2d4c0:	4a402034 	orhi	r9,r9,128
   2d4c4:	00800e04 	movi	r2,56
   2d4c8:	10c09f16 	blt	r2,r3,2d748 <__adddf3+0x3ac>
   2d4cc:	008007c4 	movi	r2,31
   2d4d0:	10c0c216 	blt	r2,r3,2d7dc <__adddf3+0x440>
   2d4d4:	00800804 	movi	r2,32
   2d4d8:	10c5c83a 	sub	r2,r2,r3
   2d4dc:	488a983a 	sll	r5,r9,r2
   2d4e0:	30c8d83a 	srl	r4,r6,r3
   2d4e4:	3084983a 	sll	r2,r6,r2
   2d4e8:	48c6d83a 	srl	r3,r9,r3
   2d4ec:	290cb03a 	or	r6,r5,r4
   2d4f0:	1004c03a 	cmpne	r2,r2,zero
   2d4f4:	308cb03a 	or	r6,r6,r2
   2d4f8:	898dc83a 	sub	r6,r17,r6
   2d4fc:	89a3803a 	cmpltu	r17,r17,r6
   2d500:	40d1c83a 	sub	r8,r8,r3
   2d504:	4451c83a 	sub	r8,r8,r17
   2d508:	3023883a 	mov	r17,r6
   2d50c:	4080202c 	andhi	r2,r8,128
   2d510:	10002326 	beq	r2,zero,2d5a0 <__adddf3+0x204>
   2d514:	04c02034 	movhi	r19,128
   2d518:	9cffffc4 	addi	r19,r19,-1
   2d51c:	44e6703a 	and	r19,r8,r19
   2d520:	98007626 	beq	r19,zero,2d6fc <__adddf3+0x360>
   2d524:	9809883a 	mov	r4,r19
   2d528:	002f9a00 	call	2f9a0 <__clzsi2>
   2d52c:	10fffe04 	addi	r3,r2,-8
   2d530:	010007c4 	movi	r4,31
   2d534:	20c07716 	blt	r4,r3,2d714 <__adddf3+0x378>
   2d538:	00800804 	movi	r2,32
   2d53c:	10c5c83a 	sub	r2,r2,r3
   2d540:	8884d83a 	srl	r2,r17,r2
   2d544:	98d0983a 	sll	r8,r19,r3
   2d548:	88e2983a 	sll	r17,r17,r3
   2d54c:	1204b03a 	or	r2,r2,r8
   2d550:	1c007416 	blt	r3,r16,2d724 <__adddf3+0x388>
   2d554:	1c21c83a 	sub	r16,r3,r16
   2d558:	82000044 	addi	r8,r16,1
   2d55c:	00c007c4 	movi	r3,31
   2d560:	1a009116 	blt	r3,r8,2d7a8 <__adddf3+0x40c>
   2d564:	00c00804 	movi	r3,32
   2d568:	1a07c83a 	sub	r3,r3,r8
   2d56c:	8a08d83a 	srl	r4,r17,r8
   2d570:	88e2983a 	sll	r17,r17,r3
   2d574:	10c6983a 	sll	r3,r2,r3
   2d578:	1210d83a 	srl	r8,r2,r8
   2d57c:	8804c03a 	cmpne	r2,r17,zero
   2d580:	1906b03a 	or	r3,r3,r4
   2d584:	18a2b03a 	or	r17,r3,r2
   2d588:	0021883a 	mov	r16,zero
   2d58c:	003fa206 	br	2d418 <_gp+0xffff0388>
   2d590:	1890b03a 	or	r8,r3,r2
   2d594:	40017d26 	beq	r8,zero,2db8c <__adddf3+0x7f0>
   2d598:	1011883a 	mov	r8,r2
   2d59c:	1823883a 	mov	r17,r3
   2d5a0:	888001cc 	andi	r2,r17,7
   2d5a4:	103f9e1e 	bne	r2,zero,2d420 <_gp+0xffff0390>
   2d5a8:	4004977a 	slli	r2,r8,29
   2d5ac:	8822d0fa 	srli	r17,r17,3
   2d5b0:	4010d0fa 	srli	r8,r8,3
   2d5b4:	9007883a 	mov	r3,r18
   2d5b8:	1444b03a 	or	r2,r2,r17
   2d5bc:	0101ffc4 	movi	r4,2047
   2d5c0:	81002426 	beq	r16,r4,2d654 <__adddf3+0x2b8>
   2d5c4:	8120703a 	and	r16,r16,r4
   2d5c8:	01000434 	movhi	r4,16
   2d5cc:	213fffc4 	addi	r4,r4,-1
   2d5d0:	4110703a 	and	r8,r8,r4
   2d5d4:	003fa806 	br	2d478 <_gp+0xffff03e8>
   2d5d8:	8089c83a 	sub	r4,r16,r2
   2d5dc:	01005e0e 	bge	zero,r4,2d758 <__adddf3+0x3bc>
   2d5e0:	10002b26 	beq	r2,zero,2d690 <__adddf3+0x2f4>
   2d5e4:	0081ffc4 	movi	r2,2047
   2d5e8:	80bf8b26 	beq	r16,r2,2d418 <_gp+0xffff0388>
   2d5ec:	4a402034 	orhi	r9,r9,128
   2d5f0:	00800e04 	movi	r2,56
   2d5f4:	1100a40e 	bge	r2,r4,2d888 <__adddf3+0x4ec>
   2d5f8:	498cb03a 	or	r6,r9,r6
   2d5fc:	300ac03a 	cmpne	r5,r6,zero
   2d600:	0013883a 	mov	r9,zero
   2d604:	2c4b883a 	add	r5,r5,r17
   2d608:	2c63803a 	cmpltu	r17,r5,r17
   2d60c:	4a11883a 	add	r8,r9,r8
   2d610:	8a11883a 	add	r8,r17,r8
   2d614:	2823883a 	mov	r17,r5
   2d618:	4080202c 	andhi	r2,r8,128
   2d61c:	103fe026 	beq	r2,zero,2d5a0 <_gp+0xffff0510>
   2d620:	84000044 	addi	r16,r16,1
   2d624:	0081ffc4 	movi	r2,2047
   2d628:	8080d226 	beq	r16,r2,2d974 <__adddf3+0x5d8>
   2d62c:	00bfe034 	movhi	r2,65408
   2d630:	10bfffc4 	addi	r2,r2,-1
   2d634:	4090703a 	and	r8,r8,r2
   2d638:	880ad07a 	srli	r5,r17,1
   2d63c:	400897fa 	slli	r4,r8,31
   2d640:	88c0004c 	andi	r3,r17,1
   2d644:	28e2b03a 	or	r17,r5,r3
   2d648:	4010d07a 	srli	r8,r8,1
   2d64c:	2462b03a 	or	r17,r4,r17
   2d650:	003f7106 	br	2d418 <_gp+0xffff0388>
   2d654:	4088b03a 	or	r4,r8,r2
   2d658:	20014526 	beq	r4,zero,2db70 <__adddf3+0x7d4>
   2d65c:	01000434 	movhi	r4,16
   2d660:	42000234 	orhi	r8,r8,8
   2d664:	213fffc4 	addi	r4,r4,-1
   2d668:	4110703a 	and	r8,r8,r4
   2d66c:	003f8206 	br	2d478 <_gp+0xffff03e8>
   2d670:	18ffffc4 	addi	r3,r3,-1
   2d674:	1800491e 	bne	r3,zero,2d79c <__adddf3+0x400>
   2d678:	898bc83a 	sub	r5,r17,r6
   2d67c:	8963803a 	cmpltu	r17,r17,r5
   2d680:	4251c83a 	sub	r8,r8,r9
   2d684:	4451c83a 	sub	r8,r8,r17
   2d688:	2823883a 	mov	r17,r5
   2d68c:	003f9f06 	br	2d50c <_gp+0xffff047c>
   2d690:	4984b03a 	or	r2,r9,r6
   2d694:	103f6026 	beq	r2,zero,2d418 <_gp+0xffff0388>
   2d698:	213fffc4 	addi	r4,r4,-1
   2d69c:	2000931e 	bne	r4,zero,2d8ec <__adddf3+0x550>
   2d6a0:	898d883a 	add	r6,r17,r6
   2d6a4:	3463803a 	cmpltu	r17,r6,r17
   2d6a8:	4251883a 	add	r8,r8,r9
   2d6ac:	8a11883a 	add	r8,r17,r8
   2d6b0:	3023883a 	mov	r17,r6
   2d6b4:	003fd806 	br	2d618 <_gp+0xffff0588>
   2d6b8:	1800541e 	bne	r3,zero,2d80c <__adddf3+0x470>
   2d6bc:	80800044 	addi	r2,r16,1
   2d6c0:	1081ffcc 	andi	r2,r2,2047
   2d6c4:	00c00044 	movi	r3,1
   2d6c8:	1880a00e 	bge	r3,r2,2d94c <__adddf3+0x5b0>
   2d6cc:	8989c83a 	sub	r4,r17,r6
   2d6d0:	8905803a 	cmpltu	r2,r17,r4
   2d6d4:	4267c83a 	sub	r19,r8,r9
   2d6d8:	98a7c83a 	sub	r19,r19,r2
   2d6dc:	9880202c 	andhi	r2,r19,128
   2d6e0:	10006326 	beq	r2,zero,2d870 <__adddf3+0x4d4>
   2d6e4:	3463c83a 	sub	r17,r6,r17
   2d6e8:	4a07c83a 	sub	r3,r9,r8
   2d6ec:	344d803a 	cmpltu	r6,r6,r17
   2d6f0:	19a7c83a 	sub	r19,r3,r6
   2d6f4:	3825883a 	mov	r18,r7
   2d6f8:	983f8a1e 	bne	r19,zero,2d524 <_gp+0xffff0494>
   2d6fc:	8809883a 	mov	r4,r17
   2d700:	002f9a00 	call	2f9a0 <__clzsi2>
   2d704:	10800804 	addi	r2,r2,32
   2d708:	10fffe04 	addi	r3,r2,-8
   2d70c:	010007c4 	movi	r4,31
   2d710:	20ff890e 	bge	r4,r3,2d538 <_gp+0xffff04a8>
   2d714:	10bff604 	addi	r2,r2,-40
   2d718:	8884983a 	sll	r2,r17,r2
   2d71c:	0023883a 	mov	r17,zero
   2d720:	1c3f8c0e 	bge	r3,r16,2d554 <_gp+0xffff04c4>
   2d724:	023fe034 	movhi	r8,65408
   2d728:	423fffc4 	addi	r8,r8,-1
   2d72c:	80e1c83a 	sub	r16,r16,r3
   2d730:	1210703a 	and	r8,r2,r8
   2d734:	003f3806 	br	2d418 <_gp+0xffff0388>
   2d738:	9007883a 	mov	r3,r18
   2d73c:	0011883a 	mov	r8,zero
   2d740:	0005883a 	mov	r2,zero
   2d744:	003f4c06 	br	2d478 <_gp+0xffff03e8>
   2d748:	498cb03a 	or	r6,r9,r6
   2d74c:	300cc03a 	cmpne	r6,r6,zero
   2d750:	0007883a 	mov	r3,zero
   2d754:	003f6806 	br	2d4f8 <_gp+0xffff0468>
   2d758:	20009c1e 	bne	r4,zero,2d9cc <__adddf3+0x630>
   2d75c:	80800044 	addi	r2,r16,1
   2d760:	1141ffcc 	andi	r5,r2,2047
   2d764:	01000044 	movi	r4,1
   2d768:	2140670e 	bge	r4,r5,2d908 <__adddf3+0x56c>
   2d76c:	0101ffc4 	movi	r4,2047
   2d770:	11007f26 	beq	r2,r4,2d970 <__adddf3+0x5d4>
   2d774:	898d883a 	add	r6,r17,r6
   2d778:	4247883a 	add	r3,r8,r9
   2d77c:	3451803a 	cmpltu	r8,r6,r17
   2d780:	40d1883a 	add	r8,r8,r3
   2d784:	402297fa 	slli	r17,r8,31
   2d788:	300cd07a 	srli	r6,r6,1
   2d78c:	4010d07a 	srli	r8,r8,1
   2d790:	1021883a 	mov	r16,r2
   2d794:	89a2b03a 	or	r17,r17,r6
   2d798:	003f1f06 	br	2d418 <_gp+0xffff0388>
   2d79c:	0081ffc4 	movi	r2,2047
   2d7a0:	80bf481e 	bne	r16,r2,2d4c4 <_gp+0xffff0434>
   2d7a4:	003f1c06 	br	2d418 <_gp+0xffff0388>
   2d7a8:	843ff844 	addi	r16,r16,-31
   2d7ac:	01000804 	movi	r4,32
   2d7b0:	1406d83a 	srl	r3,r2,r16
   2d7b4:	41005026 	beq	r8,r4,2d8f8 <__adddf3+0x55c>
   2d7b8:	01001004 	movi	r4,64
   2d7bc:	2211c83a 	sub	r8,r4,r8
   2d7c0:	1204983a 	sll	r2,r2,r8
   2d7c4:	88a2b03a 	or	r17,r17,r2
   2d7c8:	8822c03a 	cmpne	r17,r17,zero
   2d7cc:	1c62b03a 	or	r17,r3,r17
   2d7d0:	0011883a 	mov	r8,zero
   2d7d4:	0021883a 	mov	r16,zero
   2d7d8:	003f7106 	br	2d5a0 <_gp+0xffff0510>
   2d7dc:	193ff804 	addi	r4,r3,-32
   2d7e0:	00800804 	movi	r2,32
   2d7e4:	4908d83a 	srl	r4,r9,r4
   2d7e8:	18804526 	beq	r3,r2,2d900 <__adddf3+0x564>
   2d7ec:	00801004 	movi	r2,64
   2d7f0:	10c5c83a 	sub	r2,r2,r3
   2d7f4:	4886983a 	sll	r3,r9,r2
   2d7f8:	198cb03a 	or	r6,r3,r6
   2d7fc:	300cc03a 	cmpne	r6,r6,zero
   2d800:	218cb03a 	or	r6,r4,r6
   2d804:	0007883a 	mov	r3,zero
   2d808:	003f3b06 	br	2d4f8 <_gp+0xffff0468>
   2d80c:	80002a26 	beq	r16,zero,2d8b8 <__adddf3+0x51c>
   2d810:	0101ffc4 	movi	r4,2047
   2d814:	11006826 	beq	r2,r4,2d9b8 <__adddf3+0x61c>
   2d818:	00c7c83a 	sub	r3,zero,r3
   2d81c:	42002034 	orhi	r8,r8,128
   2d820:	01000e04 	movi	r4,56
   2d824:	20c07c16 	blt	r4,r3,2da18 <__adddf3+0x67c>
   2d828:	010007c4 	movi	r4,31
   2d82c:	20c0da16 	blt	r4,r3,2db98 <__adddf3+0x7fc>
   2d830:	01000804 	movi	r4,32
   2d834:	20c9c83a 	sub	r4,r4,r3
   2d838:	4114983a 	sll	r10,r8,r4
   2d83c:	88cad83a 	srl	r5,r17,r3
   2d840:	8908983a 	sll	r4,r17,r4
   2d844:	40c6d83a 	srl	r3,r8,r3
   2d848:	5162b03a 	or	r17,r10,r5
   2d84c:	2008c03a 	cmpne	r4,r4,zero
   2d850:	8922b03a 	or	r17,r17,r4
   2d854:	3463c83a 	sub	r17,r6,r17
   2d858:	48c7c83a 	sub	r3,r9,r3
   2d85c:	344d803a 	cmpltu	r6,r6,r17
   2d860:	1991c83a 	sub	r8,r3,r6
   2d864:	1021883a 	mov	r16,r2
   2d868:	3825883a 	mov	r18,r7
   2d86c:	003f2706 	br	2d50c <_gp+0xffff047c>
   2d870:	24d0b03a 	or	r8,r4,r19
   2d874:	40001b1e 	bne	r8,zero,2d8e4 <__adddf3+0x548>
   2d878:	0005883a 	mov	r2,zero
   2d87c:	0007883a 	mov	r3,zero
   2d880:	0021883a 	mov	r16,zero
   2d884:	003f4d06 	br	2d5bc <_gp+0xffff052c>
   2d888:	008007c4 	movi	r2,31
   2d88c:	11003c16 	blt	r2,r4,2d980 <__adddf3+0x5e4>
   2d890:	00800804 	movi	r2,32
   2d894:	1105c83a 	sub	r2,r2,r4
   2d898:	488e983a 	sll	r7,r9,r2
   2d89c:	310ad83a 	srl	r5,r6,r4
   2d8a0:	3084983a 	sll	r2,r6,r2
   2d8a4:	4912d83a 	srl	r9,r9,r4
   2d8a8:	394ab03a 	or	r5,r7,r5
   2d8ac:	1004c03a 	cmpne	r2,r2,zero
   2d8b0:	288ab03a 	or	r5,r5,r2
   2d8b4:	003f5306 	br	2d604 <_gp+0xffff0574>
   2d8b8:	4448b03a 	or	r4,r8,r17
   2d8bc:	20003e26 	beq	r4,zero,2d9b8 <__adddf3+0x61c>
   2d8c0:	00c6303a 	nor	r3,zero,r3
   2d8c4:	18003a1e 	bne	r3,zero,2d9b0 <__adddf3+0x614>
   2d8c8:	3463c83a 	sub	r17,r6,r17
   2d8cc:	4a07c83a 	sub	r3,r9,r8
   2d8d0:	344d803a 	cmpltu	r6,r6,r17
   2d8d4:	1991c83a 	sub	r8,r3,r6
   2d8d8:	1021883a 	mov	r16,r2
   2d8dc:	3825883a 	mov	r18,r7
   2d8e0:	003f0a06 	br	2d50c <_gp+0xffff047c>
   2d8e4:	2023883a 	mov	r17,r4
   2d8e8:	003f0d06 	br	2d520 <_gp+0xffff0490>
   2d8ec:	0081ffc4 	movi	r2,2047
   2d8f0:	80bf3f1e 	bne	r16,r2,2d5f0 <_gp+0xffff0560>
   2d8f4:	003ec806 	br	2d418 <_gp+0xffff0388>
   2d8f8:	0005883a 	mov	r2,zero
   2d8fc:	003fb106 	br	2d7c4 <_gp+0xffff0734>
   2d900:	0007883a 	mov	r3,zero
   2d904:	003fbc06 	br	2d7f8 <_gp+0xffff0768>
   2d908:	4444b03a 	or	r2,r8,r17
   2d90c:	8000871e 	bne	r16,zero,2db2c <__adddf3+0x790>
   2d910:	1000ba26 	beq	r2,zero,2dbfc <__adddf3+0x860>
   2d914:	4984b03a 	or	r2,r9,r6
   2d918:	103ebf26 	beq	r2,zero,2d418 <_gp+0xffff0388>
   2d91c:	8985883a 	add	r2,r17,r6
   2d920:	4247883a 	add	r3,r8,r9
   2d924:	1451803a 	cmpltu	r8,r2,r17
   2d928:	40d1883a 	add	r8,r8,r3
   2d92c:	40c0202c 	andhi	r3,r8,128
   2d930:	1023883a 	mov	r17,r2
   2d934:	183f1a26 	beq	r3,zero,2d5a0 <_gp+0xffff0510>
   2d938:	00bfe034 	movhi	r2,65408
   2d93c:	10bfffc4 	addi	r2,r2,-1
   2d940:	2021883a 	mov	r16,r4
   2d944:	4090703a 	and	r8,r8,r2
   2d948:	003eb306 	br	2d418 <_gp+0xffff0388>
   2d94c:	4444b03a 	or	r2,r8,r17
   2d950:	8000291e 	bne	r16,zero,2d9f8 <__adddf3+0x65c>
   2d954:	10004b1e 	bne	r2,zero,2da84 <__adddf3+0x6e8>
   2d958:	4990b03a 	or	r8,r9,r6
   2d95c:	40008b26 	beq	r8,zero,2db8c <__adddf3+0x7f0>
   2d960:	4811883a 	mov	r8,r9
   2d964:	3023883a 	mov	r17,r6
   2d968:	3825883a 	mov	r18,r7
   2d96c:	003eaa06 	br	2d418 <_gp+0xffff0388>
   2d970:	1021883a 	mov	r16,r2
   2d974:	0011883a 	mov	r8,zero
   2d978:	0005883a 	mov	r2,zero
   2d97c:	003f0f06 	br	2d5bc <_gp+0xffff052c>
   2d980:	217ff804 	addi	r5,r4,-32
   2d984:	00800804 	movi	r2,32
   2d988:	494ad83a 	srl	r5,r9,r5
   2d98c:	20807d26 	beq	r4,r2,2db84 <__adddf3+0x7e8>
   2d990:	00801004 	movi	r2,64
   2d994:	1109c83a 	sub	r4,r2,r4
   2d998:	4912983a 	sll	r9,r9,r4
   2d99c:	498cb03a 	or	r6,r9,r6
   2d9a0:	300cc03a 	cmpne	r6,r6,zero
   2d9a4:	298ab03a 	or	r5,r5,r6
   2d9a8:	0013883a 	mov	r9,zero
   2d9ac:	003f1506 	br	2d604 <_gp+0xffff0574>
   2d9b0:	0101ffc4 	movi	r4,2047
   2d9b4:	113f9a1e 	bne	r2,r4,2d820 <_gp+0xffff0790>
   2d9b8:	4811883a 	mov	r8,r9
   2d9bc:	3023883a 	mov	r17,r6
   2d9c0:	1021883a 	mov	r16,r2
   2d9c4:	3825883a 	mov	r18,r7
   2d9c8:	003e9306 	br	2d418 <_gp+0xffff0388>
   2d9cc:	8000161e 	bne	r16,zero,2da28 <__adddf3+0x68c>
   2d9d0:	444ab03a 	or	r5,r8,r17
   2d9d4:	28005126 	beq	r5,zero,2db1c <__adddf3+0x780>
   2d9d8:	0108303a 	nor	r4,zero,r4
   2d9dc:	20004d1e 	bne	r4,zero,2db14 <__adddf3+0x778>
   2d9e0:	89a3883a 	add	r17,r17,r6
   2d9e4:	4253883a 	add	r9,r8,r9
   2d9e8:	898d803a 	cmpltu	r6,r17,r6
   2d9ec:	3251883a 	add	r8,r6,r9
   2d9f0:	1021883a 	mov	r16,r2
   2d9f4:	003f0806 	br	2d618 <_gp+0xffff0588>
   2d9f8:	1000301e 	bne	r2,zero,2dabc <__adddf3+0x720>
   2d9fc:	4984b03a 	or	r2,r9,r6
   2da00:	10007126 	beq	r2,zero,2dbc8 <__adddf3+0x82c>
   2da04:	4811883a 	mov	r8,r9
   2da08:	3023883a 	mov	r17,r6
   2da0c:	3825883a 	mov	r18,r7
   2da10:	0401ffc4 	movi	r16,2047
   2da14:	003e8006 	br	2d418 <_gp+0xffff0388>
   2da18:	4462b03a 	or	r17,r8,r17
   2da1c:	8822c03a 	cmpne	r17,r17,zero
   2da20:	0007883a 	mov	r3,zero
   2da24:	003f8b06 	br	2d854 <_gp+0xffff07c4>
   2da28:	0141ffc4 	movi	r5,2047
   2da2c:	11403b26 	beq	r2,r5,2db1c <__adddf3+0x780>
   2da30:	0109c83a 	sub	r4,zero,r4
   2da34:	42002034 	orhi	r8,r8,128
   2da38:	01400e04 	movi	r5,56
   2da3c:	29006716 	blt	r5,r4,2dbdc <__adddf3+0x840>
   2da40:	014007c4 	movi	r5,31
   2da44:	29007016 	blt	r5,r4,2dc08 <__adddf3+0x86c>
   2da48:	01400804 	movi	r5,32
   2da4c:	290bc83a 	sub	r5,r5,r4
   2da50:	4154983a 	sll	r10,r8,r5
   2da54:	890ed83a 	srl	r7,r17,r4
   2da58:	894a983a 	sll	r5,r17,r5
   2da5c:	4108d83a 	srl	r4,r8,r4
   2da60:	51e2b03a 	or	r17,r10,r7
   2da64:	280ac03a 	cmpne	r5,r5,zero
   2da68:	8962b03a 	or	r17,r17,r5
   2da6c:	89a3883a 	add	r17,r17,r6
   2da70:	2253883a 	add	r9,r4,r9
   2da74:	898d803a 	cmpltu	r6,r17,r6
   2da78:	3251883a 	add	r8,r6,r9
   2da7c:	1021883a 	mov	r16,r2
   2da80:	003ee506 	br	2d618 <_gp+0xffff0588>
   2da84:	4984b03a 	or	r2,r9,r6
   2da88:	103e6326 	beq	r2,zero,2d418 <_gp+0xffff0388>
   2da8c:	8987c83a 	sub	r3,r17,r6
   2da90:	88c9803a 	cmpltu	r4,r17,r3
   2da94:	4245c83a 	sub	r2,r8,r9
   2da98:	1105c83a 	sub	r2,r2,r4
   2da9c:	1100202c 	andhi	r4,r2,128
   2daa0:	203ebb26 	beq	r4,zero,2d590 <_gp+0xffff0500>
   2daa4:	3463c83a 	sub	r17,r6,r17
   2daa8:	4a07c83a 	sub	r3,r9,r8
   2daac:	344d803a 	cmpltu	r6,r6,r17
   2dab0:	1991c83a 	sub	r8,r3,r6
   2dab4:	3825883a 	mov	r18,r7
   2dab8:	003e5706 	br	2d418 <_gp+0xffff0388>
   2dabc:	4984b03a 	or	r2,r9,r6
   2dac0:	10002e26 	beq	r2,zero,2db7c <__adddf3+0x7e0>
   2dac4:	4004d0fa 	srli	r2,r8,3
   2dac8:	8822d0fa 	srli	r17,r17,3
   2dacc:	4010977a 	slli	r8,r8,29
   2dad0:	10c0022c 	andhi	r3,r2,8
   2dad4:	4462b03a 	or	r17,r8,r17
   2dad8:	18000826 	beq	r3,zero,2dafc <__adddf3+0x760>
   2dadc:	4808d0fa 	srli	r4,r9,3
   2dae0:	20c0022c 	andhi	r3,r4,8
   2dae4:	1800051e 	bne	r3,zero,2dafc <__adddf3+0x760>
   2dae8:	300cd0fa 	srli	r6,r6,3
   2daec:	4806977a 	slli	r3,r9,29
   2daf0:	2005883a 	mov	r2,r4
   2daf4:	3825883a 	mov	r18,r7
   2daf8:	19a2b03a 	or	r17,r3,r6
   2dafc:	8810d77a 	srli	r8,r17,29
   2db00:	100490fa 	slli	r2,r2,3
   2db04:	882290fa 	slli	r17,r17,3
   2db08:	0401ffc4 	movi	r16,2047
   2db0c:	4090b03a 	or	r8,r8,r2
   2db10:	003e4106 	br	2d418 <_gp+0xffff0388>
   2db14:	0141ffc4 	movi	r5,2047
   2db18:	117fc71e 	bne	r2,r5,2da38 <_gp+0xffff09a8>
   2db1c:	4811883a 	mov	r8,r9
   2db20:	3023883a 	mov	r17,r6
   2db24:	1021883a 	mov	r16,r2
   2db28:	003e3b06 	br	2d418 <_gp+0xffff0388>
   2db2c:	10002f26 	beq	r2,zero,2dbec <__adddf3+0x850>
   2db30:	4984b03a 	or	r2,r9,r6
   2db34:	10001126 	beq	r2,zero,2db7c <__adddf3+0x7e0>
   2db38:	4004d0fa 	srli	r2,r8,3
   2db3c:	8822d0fa 	srli	r17,r17,3
   2db40:	4010977a 	slli	r8,r8,29
   2db44:	10c0022c 	andhi	r3,r2,8
   2db48:	4462b03a 	or	r17,r8,r17
   2db4c:	183feb26 	beq	r3,zero,2dafc <_gp+0xffff0a6c>
   2db50:	4808d0fa 	srli	r4,r9,3
   2db54:	20c0022c 	andhi	r3,r4,8
   2db58:	183fe81e 	bne	r3,zero,2dafc <_gp+0xffff0a6c>
   2db5c:	300cd0fa 	srli	r6,r6,3
   2db60:	4806977a 	slli	r3,r9,29
   2db64:	2005883a 	mov	r2,r4
   2db68:	19a2b03a 	or	r17,r3,r6
   2db6c:	003fe306 	br	2dafc <_gp+0xffff0a6c>
   2db70:	0011883a 	mov	r8,zero
   2db74:	0005883a 	mov	r2,zero
   2db78:	003e3f06 	br	2d478 <_gp+0xffff03e8>
   2db7c:	0401ffc4 	movi	r16,2047
   2db80:	003e2506 	br	2d418 <_gp+0xffff0388>
   2db84:	0013883a 	mov	r9,zero
   2db88:	003f8406 	br	2d99c <_gp+0xffff090c>
   2db8c:	0005883a 	mov	r2,zero
   2db90:	0007883a 	mov	r3,zero
   2db94:	003e8906 	br	2d5bc <_gp+0xffff052c>
   2db98:	197ff804 	addi	r5,r3,-32
   2db9c:	01000804 	movi	r4,32
   2dba0:	414ad83a 	srl	r5,r8,r5
   2dba4:	19002426 	beq	r3,r4,2dc38 <__adddf3+0x89c>
   2dba8:	01001004 	movi	r4,64
   2dbac:	20c7c83a 	sub	r3,r4,r3
   2dbb0:	40c6983a 	sll	r3,r8,r3
   2dbb4:	1c46b03a 	or	r3,r3,r17
   2dbb8:	1806c03a 	cmpne	r3,r3,zero
   2dbbc:	28e2b03a 	or	r17,r5,r3
   2dbc0:	0007883a 	mov	r3,zero
   2dbc4:	003f2306 	br	2d854 <_gp+0xffff07c4>
   2dbc8:	0007883a 	mov	r3,zero
   2dbcc:	5811883a 	mov	r8,r11
   2dbd0:	00bfffc4 	movi	r2,-1
   2dbd4:	0401ffc4 	movi	r16,2047
   2dbd8:	003e7806 	br	2d5bc <_gp+0xffff052c>
   2dbdc:	4462b03a 	or	r17,r8,r17
   2dbe0:	8822c03a 	cmpne	r17,r17,zero
   2dbe4:	0009883a 	mov	r4,zero
   2dbe8:	003fa006 	br	2da6c <_gp+0xffff09dc>
   2dbec:	4811883a 	mov	r8,r9
   2dbf0:	3023883a 	mov	r17,r6
   2dbf4:	0401ffc4 	movi	r16,2047
   2dbf8:	003e0706 	br	2d418 <_gp+0xffff0388>
   2dbfc:	4811883a 	mov	r8,r9
   2dc00:	3023883a 	mov	r17,r6
   2dc04:	003e0406 	br	2d418 <_gp+0xffff0388>
   2dc08:	21fff804 	addi	r7,r4,-32
   2dc0c:	01400804 	movi	r5,32
   2dc10:	41ced83a 	srl	r7,r8,r7
   2dc14:	21400a26 	beq	r4,r5,2dc40 <__adddf3+0x8a4>
   2dc18:	01401004 	movi	r5,64
   2dc1c:	2909c83a 	sub	r4,r5,r4
   2dc20:	4108983a 	sll	r4,r8,r4
   2dc24:	2448b03a 	or	r4,r4,r17
   2dc28:	2008c03a 	cmpne	r4,r4,zero
   2dc2c:	3922b03a 	or	r17,r7,r4
   2dc30:	0009883a 	mov	r4,zero
   2dc34:	003f8d06 	br	2da6c <_gp+0xffff09dc>
   2dc38:	0007883a 	mov	r3,zero
   2dc3c:	003fdd06 	br	2dbb4 <_gp+0xffff0b24>
   2dc40:	0009883a 	mov	r4,zero
   2dc44:	003ff706 	br	2dc24 <_gp+0xffff0b94>

0002dc48 <__divdf3>:
   2dc48:	defff204 	addi	sp,sp,-56
   2dc4c:	dd400915 	stw	r21,36(sp)
   2dc50:	282ad53a 	srli	r21,r5,20
   2dc54:	dd000815 	stw	r20,32(sp)
   2dc58:	2828d7fa 	srli	r20,r5,31
   2dc5c:	dc000415 	stw	r16,16(sp)
   2dc60:	04000434 	movhi	r16,16
   2dc64:	df000c15 	stw	fp,48(sp)
   2dc68:	843fffc4 	addi	r16,r16,-1
   2dc6c:	dfc00d15 	stw	ra,52(sp)
   2dc70:	ddc00b15 	stw	r23,44(sp)
   2dc74:	dd800a15 	stw	r22,40(sp)
   2dc78:	dcc00715 	stw	r19,28(sp)
   2dc7c:	dc800615 	stw	r18,24(sp)
   2dc80:	dc400515 	stw	r17,20(sp)
   2dc84:	ad41ffcc 	andi	r21,r21,2047
   2dc88:	2c20703a 	and	r16,r5,r16
   2dc8c:	a7003fcc 	andi	fp,r20,255
   2dc90:	a8006126 	beq	r21,zero,2de18 <__divdf3+0x1d0>
   2dc94:	0081ffc4 	movi	r2,2047
   2dc98:	2025883a 	mov	r18,r4
   2dc9c:	a8803726 	beq	r21,r2,2dd7c <__divdf3+0x134>
   2dca0:	80800434 	orhi	r2,r16,16
   2dca4:	100490fa 	slli	r2,r2,3
   2dca8:	2020d77a 	srli	r16,r4,29
   2dcac:	202490fa 	slli	r18,r4,3
   2dcb0:	ad7f0044 	addi	r21,r21,-1023
   2dcb4:	80a0b03a 	or	r16,r16,r2
   2dcb8:	0027883a 	mov	r19,zero
   2dcbc:	0013883a 	mov	r9,zero
   2dcc0:	3804d53a 	srli	r2,r7,20
   2dcc4:	382cd7fa 	srli	r22,r7,31
   2dcc8:	04400434 	movhi	r17,16
   2dccc:	8c7fffc4 	addi	r17,r17,-1
   2dcd0:	1081ffcc 	andi	r2,r2,2047
   2dcd4:	3011883a 	mov	r8,r6
   2dcd8:	3c62703a 	and	r17,r7,r17
   2dcdc:	b5c03fcc 	andi	r23,r22,255
   2dce0:	10006c26 	beq	r2,zero,2de94 <__divdf3+0x24c>
   2dce4:	00c1ffc4 	movi	r3,2047
   2dce8:	10c06426 	beq	r2,r3,2de7c <__divdf3+0x234>
   2dcec:	88c00434 	orhi	r3,r17,16
   2dcf0:	180690fa 	slli	r3,r3,3
   2dcf4:	3022d77a 	srli	r17,r6,29
   2dcf8:	301090fa 	slli	r8,r6,3
   2dcfc:	10bf0044 	addi	r2,r2,-1023
   2dd00:	88e2b03a 	or	r17,r17,r3
   2dd04:	000f883a 	mov	r7,zero
   2dd08:	a58cf03a 	xor	r6,r20,r22
   2dd0c:	3cc8b03a 	or	r4,r7,r19
   2dd10:	a8abc83a 	sub	r21,r21,r2
   2dd14:	008003c4 	movi	r2,15
   2dd18:	3007883a 	mov	r3,r6
   2dd1c:	34c03fcc 	andi	r19,r6,255
   2dd20:	11009036 	bltu	r2,r4,2df64 <__divdf3+0x31c>
   2dd24:	200890ba 	slli	r4,r4,2
   2dd28:	008000f4 	movhi	r2,3
   2dd2c:	10b74f04 	addi	r2,r2,-8900
   2dd30:	2089883a 	add	r4,r4,r2
   2dd34:	20800017 	ldw	r2,0(r4)
   2dd38:	1000683a 	jmp	r2
   2dd3c:	0002df64 	muli	zero,zero,2941
   2dd40:	0002ddb4 	movhi	zero,2934
   2dd44:	0002df54 	movui	zero,2941
   2dd48:	0002dda8 	cmpgeui	zero,zero,2934
   2dd4c:	0002df54 	movui	zero,2941
   2dd50:	0002df28 	cmpgeui	zero,zero,2940
   2dd54:	0002df54 	movui	zero,2941
   2dd58:	0002dda8 	cmpgeui	zero,zero,2934
   2dd5c:	0002ddb4 	movhi	zero,2934
   2dd60:	0002ddb4 	movhi	zero,2934
   2dd64:	0002df28 	cmpgeui	zero,zero,2940
   2dd68:	0002dda8 	cmpgeui	zero,zero,2934
   2dd6c:	0002dd98 	cmpnei	zero,zero,2934
   2dd70:	0002dd98 	cmpnei	zero,zero,2934
   2dd74:	0002dd98 	cmpnei	zero,zero,2934
   2dd78:	0002e248 	cmpgei	zero,zero,2953
   2dd7c:	2404b03a 	or	r2,r4,r16
   2dd80:	1000661e 	bne	r2,zero,2df1c <__divdf3+0x2d4>
   2dd84:	04c00204 	movi	r19,8
   2dd88:	0021883a 	mov	r16,zero
   2dd8c:	0025883a 	mov	r18,zero
   2dd90:	02400084 	movi	r9,2
   2dd94:	003fca06 	br	2dcc0 <_gp+0xffff0c30>
   2dd98:	8023883a 	mov	r17,r16
   2dd9c:	9011883a 	mov	r8,r18
   2dda0:	e02f883a 	mov	r23,fp
   2dda4:	480f883a 	mov	r7,r9
   2dda8:	00800084 	movi	r2,2
   2ddac:	3881311e 	bne	r7,r2,2e274 <__divdf3+0x62c>
   2ddb0:	b827883a 	mov	r19,r23
   2ddb4:	98c0004c 	andi	r3,r19,1
   2ddb8:	0081ffc4 	movi	r2,2047
   2ddbc:	000b883a 	mov	r5,zero
   2ddc0:	0025883a 	mov	r18,zero
   2ddc4:	1004953a 	slli	r2,r2,20
   2ddc8:	18c03fcc 	andi	r3,r3,255
   2ddcc:	04400434 	movhi	r17,16
   2ddd0:	8c7fffc4 	addi	r17,r17,-1
   2ddd4:	180697fa 	slli	r3,r3,31
   2ddd8:	2c4a703a 	and	r5,r5,r17
   2dddc:	288ab03a 	or	r5,r5,r2
   2dde0:	28c6b03a 	or	r3,r5,r3
   2dde4:	9005883a 	mov	r2,r18
   2dde8:	dfc00d17 	ldw	ra,52(sp)
   2ddec:	df000c17 	ldw	fp,48(sp)
   2ddf0:	ddc00b17 	ldw	r23,44(sp)
   2ddf4:	dd800a17 	ldw	r22,40(sp)
   2ddf8:	dd400917 	ldw	r21,36(sp)
   2ddfc:	dd000817 	ldw	r20,32(sp)
   2de00:	dcc00717 	ldw	r19,28(sp)
   2de04:	dc800617 	ldw	r18,24(sp)
   2de08:	dc400517 	ldw	r17,20(sp)
   2de0c:	dc000417 	ldw	r16,16(sp)
   2de10:	dec00e04 	addi	sp,sp,56
   2de14:	f800283a 	ret
   2de18:	2404b03a 	or	r2,r4,r16
   2de1c:	2027883a 	mov	r19,r4
   2de20:	10003926 	beq	r2,zero,2df08 <__divdf3+0x2c0>
   2de24:	80012e26 	beq	r16,zero,2e2e0 <__divdf3+0x698>
   2de28:	8009883a 	mov	r4,r16
   2de2c:	d9800315 	stw	r6,12(sp)
   2de30:	d9c00215 	stw	r7,8(sp)
   2de34:	002f9a00 	call	2f9a0 <__clzsi2>
   2de38:	d9800317 	ldw	r6,12(sp)
   2de3c:	d9c00217 	ldw	r7,8(sp)
   2de40:	113ffd44 	addi	r4,r2,-11
   2de44:	00c00704 	movi	r3,28
   2de48:	19012116 	blt	r3,r4,2e2d0 <__divdf3+0x688>
   2de4c:	00c00744 	movi	r3,29
   2de50:	147ffe04 	addi	r17,r2,-8
   2de54:	1907c83a 	sub	r3,r3,r4
   2de58:	8460983a 	sll	r16,r16,r17
   2de5c:	98c6d83a 	srl	r3,r19,r3
   2de60:	9c64983a 	sll	r18,r19,r17
   2de64:	1c20b03a 	or	r16,r3,r16
   2de68:	1080fcc4 	addi	r2,r2,1011
   2de6c:	00abc83a 	sub	r21,zero,r2
   2de70:	0027883a 	mov	r19,zero
   2de74:	0013883a 	mov	r9,zero
   2de78:	003f9106 	br	2dcc0 <_gp+0xffff0c30>
   2de7c:	3446b03a 	or	r3,r6,r17
   2de80:	18001f1e 	bne	r3,zero,2df00 <__divdf3+0x2b8>
   2de84:	0023883a 	mov	r17,zero
   2de88:	0011883a 	mov	r8,zero
   2de8c:	01c00084 	movi	r7,2
   2de90:	003f9d06 	br	2dd08 <_gp+0xffff0c78>
   2de94:	3446b03a 	or	r3,r6,r17
   2de98:	18001526 	beq	r3,zero,2def0 <__divdf3+0x2a8>
   2de9c:	88011b26 	beq	r17,zero,2e30c <__divdf3+0x6c4>
   2dea0:	8809883a 	mov	r4,r17
   2dea4:	d9800315 	stw	r6,12(sp)
   2dea8:	da400115 	stw	r9,4(sp)
   2deac:	002f9a00 	call	2f9a0 <__clzsi2>
   2deb0:	d9800317 	ldw	r6,12(sp)
   2deb4:	da400117 	ldw	r9,4(sp)
   2deb8:	113ffd44 	addi	r4,r2,-11
   2debc:	00c00704 	movi	r3,28
   2dec0:	19010e16 	blt	r3,r4,2e2fc <__divdf3+0x6b4>
   2dec4:	00c00744 	movi	r3,29
   2dec8:	123ffe04 	addi	r8,r2,-8
   2decc:	1907c83a 	sub	r3,r3,r4
   2ded0:	8a22983a 	sll	r17,r17,r8
   2ded4:	30c6d83a 	srl	r3,r6,r3
   2ded8:	3210983a 	sll	r8,r6,r8
   2dedc:	1c62b03a 	or	r17,r3,r17
   2dee0:	1080fcc4 	addi	r2,r2,1011
   2dee4:	0085c83a 	sub	r2,zero,r2
   2dee8:	000f883a 	mov	r7,zero
   2deec:	003f8606 	br	2dd08 <_gp+0xffff0c78>
   2def0:	0023883a 	mov	r17,zero
   2def4:	0011883a 	mov	r8,zero
   2def8:	01c00044 	movi	r7,1
   2defc:	003f8206 	br	2dd08 <_gp+0xffff0c78>
   2df00:	01c000c4 	movi	r7,3
   2df04:	003f8006 	br	2dd08 <_gp+0xffff0c78>
   2df08:	04c00104 	movi	r19,4
   2df0c:	0021883a 	mov	r16,zero
   2df10:	0025883a 	mov	r18,zero
   2df14:	02400044 	movi	r9,1
   2df18:	003f6906 	br	2dcc0 <_gp+0xffff0c30>
   2df1c:	04c00304 	movi	r19,12
   2df20:	024000c4 	movi	r9,3
   2df24:	003f6606 	br	2dcc0 <_gp+0xffff0c30>
   2df28:	01400434 	movhi	r5,16
   2df2c:	0007883a 	mov	r3,zero
   2df30:	297fffc4 	addi	r5,r5,-1
   2df34:	04bfffc4 	movi	r18,-1
   2df38:	0081ffc4 	movi	r2,2047
   2df3c:	003fa106 	br	2ddc4 <_gp+0xffff0d34>
   2df40:	00c00044 	movi	r3,1
   2df44:	1887c83a 	sub	r3,r3,r2
   2df48:	01000e04 	movi	r4,56
   2df4c:	20c1210e 	bge	r4,r3,2e3d4 <__divdf3+0x78c>
   2df50:	98c0004c 	andi	r3,r19,1
   2df54:	0005883a 	mov	r2,zero
   2df58:	000b883a 	mov	r5,zero
   2df5c:	0025883a 	mov	r18,zero
   2df60:	003f9806 	br	2ddc4 <_gp+0xffff0d34>
   2df64:	8c00fd36 	bltu	r17,r16,2e35c <__divdf3+0x714>
   2df68:	8440fb26 	beq	r16,r17,2e358 <__divdf3+0x710>
   2df6c:	8007883a 	mov	r3,r16
   2df70:	ad7fffc4 	addi	r21,r21,-1
   2df74:	0021883a 	mov	r16,zero
   2df78:	4004d63a 	srli	r2,r8,24
   2df7c:	8822923a 	slli	r17,r17,8
   2df80:	1809883a 	mov	r4,r3
   2df84:	402c923a 	slli	r22,r8,8
   2df88:	88b8b03a 	or	fp,r17,r2
   2df8c:	e028d43a 	srli	r20,fp,16
   2df90:	d8c00015 	stw	r3,0(sp)
   2df94:	e5ffffcc 	andi	r23,fp,65535
   2df98:	a00b883a 	mov	r5,r20
   2df9c:	00229780 	call	22978 <__udivsi3>
   2dfa0:	d8c00017 	ldw	r3,0(sp)
   2dfa4:	a00b883a 	mov	r5,r20
   2dfa8:	d8800315 	stw	r2,12(sp)
   2dfac:	1809883a 	mov	r4,r3
   2dfb0:	00229dc0 	call	229dc <__umodsi3>
   2dfb4:	d9800317 	ldw	r6,12(sp)
   2dfb8:	1006943a 	slli	r3,r2,16
   2dfbc:	9004d43a 	srli	r2,r18,16
   2dfc0:	b9a3383a 	mul	r17,r23,r6
   2dfc4:	10c4b03a 	or	r2,r2,r3
   2dfc8:	1440062e 	bgeu	r2,r17,2dfe4 <__divdf3+0x39c>
   2dfcc:	1705883a 	add	r2,r2,fp
   2dfd0:	30ffffc4 	addi	r3,r6,-1
   2dfd4:	1700ee36 	bltu	r2,fp,2e390 <__divdf3+0x748>
   2dfd8:	1440ed2e 	bgeu	r2,r17,2e390 <__divdf3+0x748>
   2dfdc:	31bfff84 	addi	r6,r6,-2
   2dfe0:	1705883a 	add	r2,r2,fp
   2dfe4:	1463c83a 	sub	r17,r2,r17
   2dfe8:	a00b883a 	mov	r5,r20
   2dfec:	8809883a 	mov	r4,r17
   2dff0:	d9800315 	stw	r6,12(sp)
   2dff4:	00229780 	call	22978 <__udivsi3>
   2dff8:	a00b883a 	mov	r5,r20
   2dffc:	8809883a 	mov	r4,r17
   2e000:	d8800215 	stw	r2,8(sp)
   2e004:	00229dc0 	call	229dc <__umodsi3>
   2e008:	d9c00217 	ldw	r7,8(sp)
   2e00c:	1004943a 	slli	r2,r2,16
   2e010:	94bfffcc 	andi	r18,r18,65535
   2e014:	b9d1383a 	mul	r8,r23,r7
   2e018:	90a4b03a 	or	r18,r18,r2
   2e01c:	d9800317 	ldw	r6,12(sp)
   2e020:	9200062e 	bgeu	r18,r8,2e03c <__divdf3+0x3f4>
   2e024:	9725883a 	add	r18,r18,fp
   2e028:	38bfffc4 	addi	r2,r7,-1
   2e02c:	9700d636 	bltu	r18,fp,2e388 <__divdf3+0x740>
   2e030:	9200d52e 	bgeu	r18,r8,2e388 <__divdf3+0x740>
   2e034:	39ffff84 	addi	r7,r7,-2
   2e038:	9725883a 	add	r18,r18,fp
   2e03c:	3004943a 	slli	r2,r6,16
   2e040:	b012d43a 	srli	r9,r22,16
   2e044:	b1bfffcc 	andi	r6,r22,65535
   2e048:	11e2b03a 	or	r17,r2,r7
   2e04c:	8806d43a 	srli	r3,r17,16
   2e050:	893fffcc 	andi	r4,r17,65535
   2e054:	218b383a 	mul	r5,r4,r6
   2e058:	30c5383a 	mul	r2,r6,r3
   2e05c:	2249383a 	mul	r4,r4,r9
   2e060:	280ed43a 	srli	r7,r5,16
   2e064:	9225c83a 	sub	r18,r18,r8
   2e068:	2089883a 	add	r4,r4,r2
   2e06c:	3909883a 	add	r4,r7,r4
   2e070:	1a47383a 	mul	r3,r3,r9
   2e074:	2080022e 	bgeu	r4,r2,2e080 <__divdf3+0x438>
   2e078:	00800074 	movhi	r2,1
   2e07c:	1887883a 	add	r3,r3,r2
   2e080:	2004d43a 	srli	r2,r4,16
   2e084:	2008943a 	slli	r4,r4,16
   2e088:	297fffcc 	andi	r5,r5,65535
   2e08c:	10c7883a 	add	r3,r2,r3
   2e090:	2149883a 	add	r4,r4,r5
   2e094:	90c0a536 	bltu	r18,r3,2e32c <__divdf3+0x6e4>
   2e098:	90c0bf26 	beq	r18,r3,2e398 <__divdf3+0x750>
   2e09c:	90c7c83a 	sub	r3,r18,r3
   2e0a0:	810fc83a 	sub	r7,r16,r4
   2e0a4:	81e5803a 	cmpltu	r18,r16,r7
   2e0a8:	1ca5c83a 	sub	r18,r3,r18
   2e0ac:	e480c126 	beq	fp,r18,2e3b4 <__divdf3+0x76c>
   2e0b0:	a00b883a 	mov	r5,r20
   2e0b4:	9009883a 	mov	r4,r18
   2e0b8:	d9800315 	stw	r6,12(sp)
   2e0bc:	d9c00215 	stw	r7,8(sp)
   2e0c0:	da400115 	stw	r9,4(sp)
   2e0c4:	00229780 	call	22978 <__udivsi3>
   2e0c8:	a00b883a 	mov	r5,r20
   2e0cc:	9009883a 	mov	r4,r18
   2e0d0:	d8800015 	stw	r2,0(sp)
   2e0d4:	00229dc0 	call	229dc <__umodsi3>
   2e0d8:	d9c00217 	ldw	r7,8(sp)
   2e0dc:	da000017 	ldw	r8,0(sp)
   2e0e0:	1006943a 	slli	r3,r2,16
   2e0e4:	3804d43a 	srli	r2,r7,16
   2e0e8:	ba21383a 	mul	r16,r23,r8
   2e0ec:	d9800317 	ldw	r6,12(sp)
   2e0f0:	10c4b03a 	or	r2,r2,r3
   2e0f4:	da400117 	ldw	r9,4(sp)
   2e0f8:	1400062e 	bgeu	r2,r16,2e114 <__divdf3+0x4cc>
   2e0fc:	1705883a 	add	r2,r2,fp
   2e100:	40ffffc4 	addi	r3,r8,-1
   2e104:	1700ad36 	bltu	r2,fp,2e3bc <__divdf3+0x774>
   2e108:	1400ac2e 	bgeu	r2,r16,2e3bc <__divdf3+0x774>
   2e10c:	423fff84 	addi	r8,r8,-2
   2e110:	1705883a 	add	r2,r2,fp
   2e114:	1421c83a 	sub	r16,r2,r16
   2e118:	a00b883a 	mov	r5,r20
   2e11c:	8009883a 	mov	r4,r16
   2e120:	d9800315 	stw	r6,12(sp)
   2e124:	d9c00215 	stw	r7,8(sp)
   2e128:	da000015 	stw	r8,0(sp)
   2e12c:	da400115 	stw	r9,4(sp)
   2e130:	00229780 	call	22978 <__udivsi3>
   2e134:	8009883a 	mov	r4,r16
   2e138:	a00b883a 	mov	r5,r20
   2e13c:	1025883a 	mov	r18,r2
   2e140:	00229dc0 	call	229dc <__umodsi3>
   2e144:	d9c00217 	ldw	r7,8(sp)
   2e148:	1004943a 	slli	r2,r2,16
   2e14c:	bcaf383a 	mul	r23,r23,r18
   2e150:	393fffcc 	andi	r4,r7,65535
   2e154:	2088b03a 	or	r4,r4,r2
   2e158:	d9800317 	ldw	r6,12(sp)
   2e15c:	da000017 	ldw	r8,0(sp)
   2e160:	da400117 	ldw	r9,4(sp)
   2e164:	25c0062e 	bgeu	r4,r23,2e180 <__divdf3+0x538>
   2e168:	2709883a 	add	r4,r4,fp
   2e16c:	90bfffc4 	addi	r2,r18,-1
   2e170:	27009436 	bltu	r4,fp,2e3c4 <__divdf3+0x77c>
   2e174:	25c0932e 	bgeu	r4,r23,2e3c4 <__divdf3+0x77c>
   2e178:	94bfff84 	addi	r18,r18,-2
   2e17c:	2709883a 	add	r4,r4,fp
   2e180:	4004943a 	slli	r2,r8,16
   2e184:	25efc83a 	sub	r23,r4,r23
   2e188:	1490b03a 	or	r8,r2,r18
   2e18c:	4008d43a 	srli	r4,r8,16
   2e190:	40ffffcc 	andi	r3,r8,65535
   2e194:	30c5383a 	mul	r2,r6,r3
   2e198:	1a47383a 	mul	r3,r3,r9
   2e19c:	310d383a 	mul	r6,r6,r4
   2e1a0:	100ad43a 	srli	r5,r2,16
   2e1a4:	4913383a 	mul	r9,r9,r4
   2e1a8:	1987883a 	add	r3,r3,r6
   2e1ac:	28c7883a 	add	r3,r5,r3
   2e1b0:	1980022e 	bgeu	r3,r6,2e1bc <__divdf3+0x574>
   2e1b4:	01000074 	movhi	r4,1
   2e1b8:	4913883a 	add	r9,r9,r4
   2e1bc:	1808d43a 	srli	r4,r3,16
   2e1c0:	1806943a 	slli	r3,r3,16
   2e1c4:	10bfffcc 	andi	r2,r2,65535
   2e1c8:	2253883a 	add	r9,r4,r9
   2e1cc:	1887883a 	add	r3,r3,r2
   2e1d0:	ba403836 	bltu	r23,r9,2e2b4 <__divdf3+0x66c>
   2e1d4:	ba403626 	beq	r23,r9,2e2b0 <__divdf3+0x668>
   2e1d8:	42000054 	ori	r8,r8,1
   2e1dc:	a880ffc4 	addi	r2,r21,1023
   2e1e0:	00bf570e 	bge	zero,r2,2df40 <_gp+0xffff0eb0>
   2e1e4:	40c001cc 	andi	r3,r8,7
   2e1e8:	18000726 	beq	r3,zero,2e208 <__divdf3+0x5c0>
   2e1ec:	40c003cc 	andi	r3,r8,15
   2e1f0:	01000104 	movi	r4,4
   2e1f4:	19000426 	beq	r3,r4,2e208 <__divdf3+0x5c0>
   2e1f8:	4107883a 	add	r3,r8,r4
   2e1fc:	1a11803a 	cmpltu	r8,r3,r8
   2e200:	8a23883a 	add	r17,r17,r8
   2e204:	1811883a 	mov	r8,r3
   2e208:	88c0402c 	andhi	r3,r17,256
   2e20c:	18000426 	beq	r3,zero,2e220 <__divdf3+0x5d8>
   2e210:	00ffc034 	movhi	r3,65280
   2e214:	18ffffc4 	addi	r3,r3,-1
   2e218:	a8810004 	addi	r2,r21,1024
   2e21c:	88e2703a 	and	r17,r17,r3
   2e220:	00c1ff84 	movi	r3,2046
   2e224:	18bee316 	blt	r3,r2,2ddb4 <_gp+0xffff0d24>
   2e228:	8824977a 	slli	r18,r17,29
   2e22c:	4010d0fa 	srli	r8,r8,3
   2e230:	8822927a 	slli	r17,r17,9
   2e234:	1081ffcc 	andi	r2,r2,2047
   2e238:	9224b03a 	or	r18,r18,r8
   2e23c:	880ad33a 	srli	r5,r17,12
   2e240:	98c0004c 	andi	r3,r19,1
   2e244:	003edf06 	br	2ddc4 <_gp+0xffff0d34>
   2e248:	8080022c 	andhi	r2,r16,8
   2e24c:	10001226 	beq	r2,zero,2e298 <__divdf3+0x650>
   2e250:	8880022c 	andhi	r2,r17,8
   2e254:	1000101e 	bne	r2,zero,2e298 <__divdf3+0x650>
   2e258:	00800434 	movhi	r2,16
   2e25c:	89400234 	orhi	r5,r17,8
   2e260:	10bfffc4 	addi	r2,r2,-1
   2e264:	b007883a 	mov	r3,r22
   2e268:	288a703a 	and	r5,r5,r2
   2e26c:	4025883a 	mov	r18,r8
   2e270:	003f3106 	br	2df38 <_gp+0xffff0ea8>
   2e274:	008000c4 	movi	r2,3
   2e278:	3880a626 	beq	r7,r2,2e514 <__divdf3+0x8cc>
   2e27c:	00800044 	movi	r2,1
   2e280:	3880521e 	bne	r7,r2,2e3cc <__divdf3+0x784>
   2e284:	b807883a 	mov	r3,r23
   2e288:	0005883a 	mov	r2,zero
   2e28c:	000b883a 	mov	r5,zero
   2e290:	0025883a 	mov	r18,zero
   2e294:	003ecb06 	br	2ddc4 <_gp+0xffff0d34>
   2e298:	00800434 	movhi	r2,16
   2e29c:	81400234 	orhi	r5,r16,8
   2e2a0:	10bfffc4 	addi	r2,r2,-1
   2e2a4:	a007883a 	mov	r3,r20
   2e2a8:	288a703a 	and	r5,r5,r2
   2e2ac:	003f2206 	br	2df38 <_gp+0xffff0ea8>
   2e2b0:	183fca26 	beq	r3,zero,2e1dc <_gp+0xffff114c>
   2e2b4:	e5ef883a 	add	r23,fp,r23
   2e2b8:	40bfffc4 	addi	r2,r8,-1
   2e2bc:	bf00392e 	bgeu	r23,fp,2e3a4 <__divdf3+0x75c>
   2e2c0:	1011883a 	mov	r8,r2
   2e2c4:	ba7fc41e 	bne	r23,r9,2e1d8 <_gp+0xffff1148>
   2e2c8:	b0ffc31e 	bne	r22,r3,2e1d8 <_gp+0xffff1148>
   2e2cc:	003fc306 	br	2e1dc <_gp+0xffff114c>
   2e2d0:	143ff604 	addi	r16,r2,-40
   2e2d4:	9c20983a 	sll	r16,r19,r16
   2e2d8:	0025883a 	mov	r18,zero
   2e2dc:	003ee206 	br	2de68 <_gp+0xffff0dd8>
   2e2e0:	d9800315 	stw	r6,12(sp)
   2e2e4:	d9c00215 	stw	r7,8(sp)
   2e2e8:	002f9a00 	call	2f9a0 <__clzsi2>
   2e2ec:	10800804 	addi	r2,r2,32
   2e2f0:	d9c00217 	ldw	r7,8(sp)
   2e2f4:	d9800317 	ldw	r6,12(sp)
   2e2f8:	003ed106 	br	2de40 <_gp+0xffff0db0>
   2e2fc:	147ff604 	addi	r17,r2,-40
   2e300:	3462983a 	sll	r17,r6,r17
   2e304:	0011883a 	mov	r8,zero
   2e308:	003ef506 	br	2dee0 <_gp+0xffff0e50>
   2e30c:	3009883a 	mov	r4,r6
   2e310:	d9800315 	stw	r6,12(sp)
   2e314:	da400115 	stw	r9,4(sp)
   2e318:	002f9a00 	call	2f9a0 <__clzsi2>
   2e31c:	10800804 	addi	r2,r2,32
   2e320:	da400117 	ldw	r9,4(sp)
   2e324:	d9800317 	ldw	r6,12(sp)
   2e328:	003ee306 	br	2deb8 <_gp+0xffff0e28>
   2e32c:	85a1883a 	add	r16,r16,r22
   2e330:	8585803a 	cmpltu	r2,r16,r22
   2e334:	1705883a 	add	r2,r2,fp
   2e338:	14a5883a 	add	r18,r2,r18
   2e33c:	88bfffc4 	addi	r2,r17,-1
   2e340:	e4800c2e 	bgeu	fp,r18,2e374 <__divdf3+0x72c>
   2e344:	90c03e36 	bltu	r18,r3,2e440 <__divdf3+0x7f8>
   2e348:	1c806926 	beq	r3,r18,2e4f0 <__divdf3+0x8a8>
   2e34c:	90c7c83a 	sub	r3,r18,r3
   2e350:	1023883a 	mov	r17,r2
   2e354:	003f5206 	br	2e0a0 <_gp+0xffff1010>
   2e358:	923f0436 	bltu	r18,r8,2df6c <_gp+0xffff0edc>
   2e35c:	800897fa 	slli	r4,r16,31
   2e360:	9004d07a 	srli	r2,r18,1
   2e364:	8006d07a 	srli	r3,r16,1
   2e368:	902097fa 	slli	r16,r18,31
   2e36c:	20a4b03a 	or	r18,r4,r2
   2e370:	003f0106 	br	2df78 <_gp+0xffff0ee8>
   2e374:	e4bff51e 	bne	fp,r18,2e34c <_gp+0xffff12bc>
   2e378:	85bff22e 	bgeu	r16,r22,2e344 <_gp+0xffff12b4>
   2e37c:	e0c7c83a 	sub	r3,fp,r3
   2e380:	1023883a 	mov	r17,r2
   2e384:	003f4606 	br	2e0a0 <_gp+0xffff1010>
   2e388:	100f883a 	mov	r7,r2
   2e38c:	003f2b06 	br	2e03c <_gp+0xffff0fac>
   2e390:	180d883a 	mov	r6,r3
   2e394:	003f1306 	br	2dfe4 <_gp+0xffff0f54>
   2e398:	813fe436 	bltu	r16,r4,2e32c <_gp+0xffff129c>
   2e39c:	0007883a 	mov	r3,zero
   2e3a0:	003f3f06 	br	2e0a0 <_gp+0xffff1010>
   2e3a4:	ba402c36 	bltu	r23,r9,2e458 <__divdf3+0x810>
   2e3a8:	4dc05426 	beq	r9,r23,2e4fc <__divdf3+0x8b4>
   2e3ac:	1011883a 	mov	r8,r2
   2e3b0:	003f8906 	br	2e1d8 <_gp+0xffff1148>
   2e3b4:	023fffc4 	movi	r8,-1
   2e3b8:	003f8806 	br	2e1dc <_gp+0xffff114c>
   2e3bc:	1811883a 	mov	r8,r3
   2e3c0:	003f5406 	br	2e114 <_gp+0xffff1084>
   2e3c4:	1025883a 	mov	r18,r2
   2e3c8:	003f6d06 	br	2e180 <_gp+0xffff10f0>
   2e3cc:	b827883a 	mov	r19,r23
   2e3d0:	003f8206 	br	2e1dc <_gp+0xffff114c>
   2e3d4:	010007c4 	movi	r4,31
   2e3d8:	20c02616 	blt	r4,r3,2e474 <__divdf3+0x82c>
   2e3dc:	00800804 	movi	r2,32
   2e3e0:	10c5c83a 	sub	r2,r2,r3
   2e3e4:	888a983a 	sll	r5,r17,r2
   2e3e8:	40c8d83a 	srl	r4,r8,r3
   2e3ec:	4084983a 	sll	r2,r8,r2
   2e3f0:	88e2d83a 	srl	r17,r17,r3
   2e3f4:	2906b03a 	or	r3,r5,r4
   2e3f8:	1004c03a 	cmpne	r2,r2,zero
   2e3fc:	1886b03a 	or	r3,r3,r2
   2e400:	188001cc 	andi	r2,r3,7
   2e404:	10000726 	beq	r2,zero,2e424 <__divdf3+0x7dc>
   2e408:	188003cc 	andi	r2,r3,15
   2e40c:	01000104 	movi	r4,4
   2e410:	11000426 	beq	r2,r4,2e424 <__divdf3+0x7dc>
   2e414:	1805883a 	mov	r2,r3
   2e418:	10c00104 	addi	r3,r2,4
   2e41c:	1885803a 	cmpltu	r2,r3,r2
   2e420:	88a3883a 	add	r17,r17,r2
   2e424:	8880202c 	andhi	r2,r17,128
   2e428:	10002726 	beq	r2,zero,2e4c8 <__divdf3+0x880>
   2e42c:	98c0004c 	andi	r3,r19,1
   2e430:	00800044 	movi	r2,1
   2e434:	000b883a 	mov	r5,zero
   2e438:	0025883a 	mov	r18,zero
   2e43c:	003e6106 	br	2ddc4 <_gp+0xffff0d34>
   2e440:	85a1883a 	add	r16,r16,r22
   2e444:	8585803a 	cmpltu	r2,r16,r22
   2e448:	1705883a 	add	r2,r2,fp
   2e44c:	14a5883a 	add	r18,r2,r18
   2e450:	8c7fff84 	addi	r17,r17,-2
   2e454:	003f1106 	br	2e09c <_gp+0xffff100c>
   2e458:	b589883a 	add	r4,r22,r22
   2e45c:	25ad803a 	cmpltu	r22,r4,r22
   2e460:	b739883a 	add	fp,r22,fp
   2e464:	40bfff84 	addi	r2,r8,-2
   2e468:	bf2f883a 	add	r23,r23,fp
   2e46c:	202d883a 	mov	r22,r4
   2e470:	003f9306 	br	2e2c0 <_gp+0xffff1230>
   2e474:	013ff844 	movi	r4,-31
   2e478:	2085c83a 	sub	r2,r4,r2
   2e47c:	8888d83a 	srl	r4,r17,r2
   2e480:	00800804 	movi	r2,32
   2e484:	18802126 	beq	r3,r2,2e50c <__divdf3+0x8c4>
   2e488:	00801004 	movi	r2,64
   2e48c:	10c5c83a 	sub	r2,r2,r3
   2e490:	8884983a 	sll	r2,r17,r2
   2e494:	1204b03a 	or	r2,r2,r8
   2e498:	1004c03a 	cmpne	r2,r2,zero
   2e49c:	2084b03a 	or	r2,r4,r2
   2e4a0:	144001cc 	andi	r17,r2,7
   2e4a4:	88000d1e 	bne	r17,zero,2e4dc <__divdf3+0x894>
   2e4a8:	000b883a 	mov	r5,zero
   2e4ac:	1024d0fa 	srli	r18,r2,3
   2e4b0:	98c0004c 	andi	r3,r19,1
   2e4b4:	0005883a 	mov	r2,zero
   2e4b8:	9464b03a 	or	r18,r18,r17
   2e4bc:	003e4106 	br	2ddc4 <_gp+0xffff0d34>
   2e4c0:	1007883a 	mov	r3,r2
   2e4c4:	0023883a 	mov	r17,zero
   2e4c8:	880a927a 	slli	r5,r17,9
   2e4cc:	1805883a 	mov	r2,r3
   2e4d0:	8822977a 	slli	r17,r17,29
   2e4d4:	280ad33a 	srli	r5,r5,12
   2e4d8:	003ff406 	br	2e4ac <_gp+0xffff141c>
   2e4dc:	10c003cc 	andi	r3,r2,15
   2e4e0:	01000104 	movi	r4,4
   2e4e4:	193ff626 	beq	r3,r4,2e4c0 <_gp+0xffff1430>
   2e4e8:	0023883a 	mov	r17,zero
   2e4ec:	003fca06 	br	2e418 <_gp+0xffff1388>
   2e4f0:	813fd336 	bltu	r16,r4,2e440 <_gp+0xffff13b0>
   2e4f4:	1023883a 	mov	r17,r2
   2e4f8:	003fa806 	br	2e39c <_gp+0xffff130c>
   2e4fc:	b0ffd636 	bltu	r22,r3,2e458 <_gp+0xffff13c8>
   2e500:	1011883a 	mov	r8,r2
   2e504:	b0ff341e 	bne	r22,r3,2e1d8 <_gp+0xffff1148>
   2e508:	003f3406 	br	2e1dc <_gp+0xffff114c>
   2e50c:	0005883a 	mov	r2,zero
   2e510:	003fe006 	br	2e494 <_gp+0xffff1404>
   2e514:	00800434 	movhi	r2,16
   2e518:	89400234 	orhi	r5,r17,8
   2e51c:	10bfffc4 	addi	r2,r2,-1
   2e520:	b807883a 	mov	r3,r23
   2e524:	288a703a 	and	r5,r5,r2
   2e528:	4025883a 	mov	r18,r8
   2e52c:	003e8206 	br	2df38 <_gp+0xffff0ea8>

0002e530 <__eqdf2>:
   2e530:	2804d53a 	srli	r2,r5,20
   2e534:	3806d53a 	srli	r3,r7,20
   2e538:	02000434 	movhi	r8,16
   2e53c:	423fffc4 	addi	r8,r8,-1
   2e540:	1081ffcc 	andi	r2,r2,2047
   2e544:	0281ffc4 	movi	r10,2047
   2e548:	2a12703a 	and	r9,r5,r8
   2e54c:	18c1ffcc 	andi	r3,r3,2047
   2e550:	3a10703a 	and	r8,r7,r8
   2e554:	280ad7fa 	srli	r5,r5,31
   2e558:	380ed7fa 	srli	r7,r7,31
   2e55c:	12801026 	beq	r2,r10,2e5a0 <__eqdf2+0x70>
   2e560:	0281ffc4 	movi	r10,2047
   2e564:	1a800a26 	beq	r3,r10,2e590 <__eqdf2+0x60>
   2e568:	10c00226 	beq	r2,r3,2e574 <__eqdf2+0x44>
   2e56c:	00800044 	movi	r2,1
   2e570:	f800283a 	ret
   2e574:	4a3ffd1e 	bne	r9,r8,2e56c <_gp+0xffff14dc>
   2e578:	21bffc1e 	bne	r4,r6,2e56c <_gp+0xffff14dc>
   2e57c:	29c00c26 	beq	r5,r7,2e5b0 <__eqdf2+0x80>
   2e580:	103ffa1e 	bne	r2,zero,2e56c <_gp+0xffff14dc>
   2e584:	2244b03a 	or	r2,r4,r9
   2e588:	1004c03a 	cmpne	r2,r2,zero
   2e58c:	f800283a 	ret
   2e590:	3214b03a 	or	r10,r6,r8
   2e594:	503ff426 	beq	r10,zero,2e568 <_gp+0xffff14d8>
   2e598:	00800044 	movi	r2,1
   2e59c:	f800283a 	ret
   2e5a0:	2254b03a 	or	r10,r4,r9
   2e5a4:	503fee26 	beq	r10,zero,2e560 <_gp+0xffff14d0>
   2e5a8:	00800044 	movi	r2,1
   2e5ac:	f800283a 	ret
   2e5b0:	0005883a 	mov	r2,zero
   2e5b4:	f800283a 	ret

0002e5b8 <__gedf2>:
   2e5b8:	2804d53a 	srli	r2,r5,20
   2e5bc:	3806d53a 	srli	r3,r7,20
   2e5c0:	02000434 	movhi	r8,16
   2e5c4:	423fffc4 	addi	r8,r8,-1
   2e5c8:	1081ffcc 	andi	r2,r2,2047
   2e5cc:	0241ffc4 	movi	r9,2047
   2e5d0:	2a14703a 	and	r10,r5,r8
   2e5d4:	18c1ffcc 	andi	r3,r3,2047
   2e5d8:	3a10703a 	and	r8,r7,r8
   2e5dc:	280ad7fa 	srli	r5,r5,31
   2e5e0:	380ed7fa 	srli	r7,r7,31
   2e5e4:	12401d26 	beq	r2,r9,2e65c <__gedf2+0xa4>
   2e5e8:	0241ffc4 	movi	r9,2047
   2e5ec:	1a401226 	beq	r3,r9,2e638 <__gedf2+0x80>
   2e5f0:	1000081e 	bne	r2,zero,2e614 <__gedf2+0x5c>
   2e5f4:	2296b03a 	or	r11,r4,r10
   2e5f8:	5813003a 	cmpeq	r9,r11,zero
   2e5fc:	1800091e 	bne	r3,zero,2e624 <__gedf2+0x6c>
   2e600:	3218b03a 	or	r12,r6,r8
   2e604:	6000071e 	bne	r12,zero,2e624 <__gedf2+0x6c>
   2e608:	0005883a 	mov	r2,zero
   2e60c:	5800101e 	bne	r11,zero,2e650 <__gedf2+0x98>
   2e610:	f800283a 	ret
   2e614:	18000c1e 	bne	r3,zero,2e648 <__gedf2+0x90>
   2e618:	3212b03a 	or	r9,r6,r8
   2e61c:	48000c26 	beq	r9,zero,2e650 <__gedf2+0x98>
   2e620:	0013883a 	mov	r9,zero
   2e624:	39c03fcc 	andi	r7,r7,255
   2e628:	48000826 	beq	r9,zero,2e64c <__gedf2+0x94>
   2e62c:	38000926 	beq	r7,zero,2e654 <__gedf2+0x9c>
   2e630:	00800044 	movi	r2,1
   2e634:	f800283a 	ret
   2e638:	3212b03a 	or	r9,r6,r8
   2e63c:	483fec26 	beq	r9,zero,2e5f0 <_gp+0xffff1560>
   2e640:	00bfff84 	movi	r2,-2
   2e644:	f800283a 	ret
   2e648:	39c03fcc 	andi	r7,r7,255
   2e64c:	29c00626 	beq	r5,r7,2e668 <__gedf2+0xb0>
   2e650:	283ff726 	beq	r5,zero,2e630 <_gp+0xffff15a0>
   2e654:	00bfffc4 	movi	r2,-1
   2e658:	f800283a 	ret
   2e65c:	2292b03a 	or	r9,r4,r10
   2e660:	483fe126 	beq	r9,zero,2e5e8 <_gp+0xffff1558>
   2e664:	003ff606 	br	2e640 <_gp+0xffff15b0>
   2e668:	18bff916 	blt	r3,r2,2e650 <_gp+0xffff15c0>
   2e66c:	10c00316 	blt	r2,r3,2e67c <__gedf2+0xc4>
   2e670:	42bff736 	bltu	r8,r10,2e650 <_gp+0xffff15c0>
   2e674:	52000326 	beq	r10,r8,2e684 <__gedf2+0xcc>
   2e678:	5200042e 	bgeu	r10,r8,2e68c <__gedf2+0xd4>
   2e67c:	283fec1e 	bne	r5,zero,2e630 <_gp+0xffff15a0>
   2e680:	003ff406 	br	2e654 <_gp+0xffff15c4>
   2e684:	313ff236 	bltu	r6,r4,2e650 <_gp+0xffff15c0>
   2e688:	21bffc36 	bltu	r4,r6,2e67c <_gp+0xffff15ec>
   2e68c:	0005883a 	mov	r2,zero
   2e690:	f800283a 	ret

0002e694 <__ledf2>:
   2e694:	2804d53a 	srli	r2,r5,20
   2e698:	3810d53a 	srli	r8,r7,20
   2e69c:	00c00434 	movhi	r3,16
   2e6a0:	18ffffc4 	addi	r3,r3,-1
   2e6a4:	1081ffcc 	andi	r2,r2,2047
   2e6a8:	0241ffc4 	movi	r9,2047
   2e6ac:	28d4703a 	and	r10,r5,r3
   2e6b0:	4201ffcc 	andi	r8,r8,2047
   2e6b4:	38c6703a 	and	r3,r7,r3
   2e6b8:	280ad7fa 	srli	r5,r5,31
   2e6bc:	380ed7fa 	srli	r7,r7,31
   2e6c0:	12401f26 	beq	r2,r9,2e740 <__ledf2+0xac>
   2e6c4:	0241ffc4 	movi	r9,2047
   2e6c8:	42401426 	beq	r8,r9,2e71c <__ledf2+0x88>
   2e6cc:	1000091e 	bne	r2,zero,2e6f4 <__ledf2+0x60>
   2e6d0:	2296b03a 	or	r11,r4,r10
   2e6d4:	5813003a 	cmpeq	r9,r11,zero
   2e6d8:	29403fcc 	andi	r5,r5,255
   2e6dc:	40000a1e 	bne	r8,zero,2e708 <__ledf2+0x74>
   2e6e0:	30d8b03a 	or	r12,r6,r3
   2e6e4:	6000081e 	bne	r12,zero,2e708 <__ledf2+0x74>
   2e6e8:	0005883a 	mov	r2,zero
   2e6ec:	5800111e 	bne	r11,zero,2e734 <__ledf2+0xa0>
   2e6f0:	f800283a 	ret
   2e6f4:	29403fcc 	andi	r5,r5,255
   2e6f8:	40000c1e 	bne	r8,zero,2e72c <__ledf2+0x98>
   2e6fc:	30d2b03a 	or	r9,r6,r3
   2e700:	48000c26 	beq	r9,zero,2e734 <__ledf2+0xa0>
   2e704:	0013883a 	mov	r9,zero
   2e708:	39c03fcc 	andi	r7,r7,255
   2e70c:	48000826 	beq	r9,zero,2e730 <__ledf2+0x9c>
   2e710:	38001126 	beq	r7,zero,2e758 <__ledf2+0xc4>
   2e714:	00800044 	movi	r2,1
   2e718:	f800283a 	ret
   2e71c:	30d2b03a 	or	r9,r6,r3
   2e720:	483fea26 	beq	r9,zero,2e6cc <_gp+0xffff163c>
   2e724:	00800084 	movi	r2,2
   2e728:	f800283a 	ret
   2e72c:	39c03fcc 	andi	r7,r7,255
   2e730:	39400726 	beq	r7,r5,2e750 <__ledf2+0xbc>
   2e734:	2800081e 	bne	r5,zero,2e758 <__ledf2+0xc4>
   2e738:	00800044 	movi	r2,1
   2e73c:	f800283a 	ret
   2e740:	2292b03a 	or	r9,r4,r10
   2e744:	483fdf26 	beq	r9,zero,2e6c4 <_gp+0xffff1634>
   2e748:	00800084 	movi	r2,2
   2e74c:	f800283a 	ret
   2e750:	4080030e 	bge	r8,r2,2e760 <__ledf2+0xcc>
   2e754:	383fef26 	beq	r7,zero,2e714 <_gp+0xffff1684>
   2e758:	00bfffc4 	movi	r2,-1
   2e75c:	f800283a 	ret
   2e760:	123feb16 	blt	r2,r8,2e710 <_gp+0xffff1680>
   2e764:	1abff336 	bltu	r3,r10,2e734 <_gp+0xffff16a4>
   2e768:	50c00326 	beq	r10,r3,2e778 <__ledf2+0xe4>
   2e76c:	50c0042e 	bgeu	r10,r3,2e780 <__ledf2+0xec>
   2e770:	283fe81e 	bne	r5,zero,2e714 <_gp+0xffff1684>
   2e774:	003ff806 	br	2e758 <_gp+0xffff16c8>
   2e778:	313fee36 	bltu	r6,r4,2e734 <_gp+0xffff16a4>
   2e77c:	21bffc36 	bltu	r4,r6,2e770 <_gp+0xffff16e0>
   2e780:	0005883a 	mov	r2,zero
   2e784:	f800283a 	ret

0002e788 <__muldf3>:
   2e788:	defff304 	addi	sp,sp,-52
   2e78c:	2804d53a 	srli	r2,r5,20
   2e790:	dd800915 	stw	r22,36(sp)
   2e794:	282cd7fa 	srli	r22,r5,31
   2e798:	dc000315 	stw	r16,12(sp)
   2e79c:	04000434 	movhi	r16,16
   2e7a0:	dd400815 	stw	r21,32(sp)
   2e7a4:	dc800515 	stw	r18,20(sp)
   2e7a8:	843fffc4 	addi	r16,r16,-1
   2e7ac:	dfc00c15 	stw	ra,48(sp)
   2e7b0:	df000b15 	stw	fp,44(sp)
   2e7b4:	ddc00a15 	stw	r23,40(sp)
   2e7b8:	dd000715 	stw	r20,28(sp)
   2e7bc:	dcc00615 	stw	r19,24(sp)
   2e7c0:	dc400415 	stw	r17,16(sp)
   2e7c4:	1481ffcc 	andi	r18,r2,2047
   2e7c8:	2c20703a 	and	r16,r5,r16
   2e7cc:	b02b883a 	mov	r21,r22
   2e7d0:	b2403fcc 	andi	r9,r22,255
   2e7d4:	90006026 	beq	r18,zero,2e958 <__muldf3+0x1d0>
   2e7d8:	0081ffc4 	movi	r2,2047
   2e7dc:	2029883a 	mov	r20,r4
   2e7e0:	90803626 	beq	r18,r2,2e8bc <__muldf3+0x134>
   2e7e4:	80800434 	orhi	r2,r16,16
   2e7e8:	100490fa 	slli	r2,r2,3
   2e7ec:	2020d77a 	srli	r16,r4,29
   2e7f0:	202890fa 	slli	r20,r4,3
   2e7f4:	94bf0044 	addi	r18,r18,-1023
   2e7f8:	80a0b03a 	or	r16,r16,r2
   2e7fc:	0027883a 	mov	r19,zero
   2e800:	0039883a 	mov	fp,zero
   2e804:	3804d53a 	srli	r2,r7,20
   2e808:	382ed7fa 	srli	r23,r7,31
   2e80c:	04400434 	movhi	r17,16
   2e810:	8c7fffc4 	addi	r17,r17,-1
   2e814:	1081ffcc 	andi	r2,r2,2047
   2e818:	3011883a 	mov	r8,r6
   2e81c:	3c62703a 	and	r17,r7,r17
   2e820:	ba803fcc 	andi	r10,r23,255
   2e824:	10006d26 	beq	r2,zero,2e9dc <__muldf3+0x254>
   2e828:	00c1ffc4 	movi	r3,2047
   2e82c:	10c06526 	beq	r2,r3,2e9c4 <__muldf3+0x23c>
   2e830:	88c00434 	orhi	r3,r17,16
   2e834:	180690fa 	slli	r3,r3,3
   2e838:	3022d77a 	srli	r17,r6,29
   2e83c:	301090fa 	slli	r8,r6,3
   2e840:	10bf0044 	addi	r2,r2,-1023
   2e844:	88e2b03a 	or	r17,r17,r3
   2e848:	000b883a 	mov	r5,zero
   2e84c:	9085883a 	add	r2,r18,r2
   2e850:	2cc8b03a 	or	r4,r5,r19
   2e854:	00c003c4 	movi	r3,15
   2e858:	bdacf03a 	xor	r22,r23,r22
   2e85c:	12c00044 	addi	r11,r2,1
   2e860:	19009936 	bltu	r3,r4,2eac8 <__muldf3+0x340>
   2e864:	200890ba 	slli	r4,r4,2
   2e868:	00c000f4 	movhi	r3,3
   2e86c:	18fa1f04 	addi	r3,r3,-6020
   2e870:	20c9883a 	add	r4,r4,r3
   2e874:	20c00017 	ldw	r3,0(r4)
   2e878:	1800683a 	jmp	r3
   2e87c:	0002eac8 	cmpgei	zero,zero,2987
   2e880:	0002e8dc 	xori	zero,zero,2979
   2e884:	0002e8dc 	xori	zero,zero,2979
   2e888:	0002e8d8 	cmpnei	zero,zero,2979
   2e88c:	0002eaa4 	muli	zero,zero,2986
   2e890:	0002eaa4 	muli	zero,zero,2986
   2e894:	0002ea8c 	andi	zero,zero,2986
   2e898:	0002e8d8 	cmpnei	zero,zero,2979
   2e89c:	0002eaa4 	muli	zero,zero,2986
   2e8a0:	0002ea8c 	andi	zero,zero,2986
   2e8a4:	0002eaa4 	muli	zero,zero,2986
   2e8a8:	0002e8d8 	cmpnei	zero,zero,2979
   2e8ac:	0002eab4 	movhi	zero,2986
   2e8b0:	0002eab4 	movhi	zero,2986
   2e8b4:	0002eab4 	movhi	zero,2986
   2e8b8:	0002ecd0 	cmplti	zero,zero,2995
   2e8bc:	2404b03a 	or	r2,r4,r16
   2e8c0:	10006f1e 	bne	r2,zero,2ea80 <__muldf3+0x2f8>
   2e8c4:	04c00204 	movi	r19,8
   2e8c8:	0021883a 	mov	r16,zero
   2e8cc:	0029883a 	mov	r20,zero
   2e8d0:	07000084 	movi	fp,2
   2e8d4:	003fcb06 	br	2e804 <_gp+0xffff1774>
   2e8d8:	502d883a 	mov	r22,r10
   2e8dc:	00800084 	movi	r2,2
   2e8e0:	28805726 	beq	r5,r2,2ea40 <__muldf3+0x2b8>
   2e8e4:	008000c4 	movi	r2,3
   2e8e8:	28816626 	beq	r5,r2,2ee84 <__muldf3+0x6fc>
   2e8ec:	00800044 	movi	r2,1
   2e8f0:	2881411e 	bne	r5,r2,2edf8 <__muldf3+0x670>
   2e8f4:	b02b883a 	mov	r21,r22
   2e8f8:	0005883a 	mov	r2,zero
   2e8fc:	000b883a 	mov	r5,zero
   2e900:	0029883a 	mov	r20,zero
   2e904:	1004953a 	slli	r2,r2,20
   2e908:	a8c03fcc 	andi	r3,r21,255
   2e90c:	04400434 	movhi	r17,16
   2e910:	8c7fffc4 	addi	r17,r17,-1
   2e914:	180697fa 	slli	r3,r3,31
   2e918:	2c4a703a 	and	r5,r5,r17
   2e91c:	288ab03a 	or	r5,r5,r2
   2e920:	28c6b03a 	or	r3,r5,r3
   2e924:	a005883a 	mov	r2,r20
   2e928:	dfc00c17 	ldw	ra,48(sp)
   2e92c:	df000b17 	ldw	fp,44(sp)
   2e930:	ddc00a17 	ldw	r23,40(sp)
   2e934:	dd800917 	ldw	r22,36(sp)
   2e938:	dd400817 	ldw	r21,32(sp)
   2e93c:	dd000717 	ldw	r20,28(sp)
   2e940:	dcc00617 	ldw	r19,24(sp)
   2e944:	dc800517 	ldw	r18,20(sp)
   2e948:	dc400417 	ldw	r17,16(sp)
   2e94c:	dc000317 	ldw	r16,12(sp)
   2e950:	dec00d04 	addi	sp,sp,52
   2e954:	f800283a 	ret
   2e958:	2404b03a 	or	r2,r4,r16
   2e95c:	2027883a 	mov	r19,r4
   2e960:	10004226 	beq	r2,zero,2ea6c <__muldf3+0x2e4>
   2e964:	8000fc26 	beq	r16,zero,2ed58 <__muldf3+0x5d0>
   2e968:	8009883a 	mov	r4,r16
   2e96c:	d9800215 	stw	r6,8(sp)
   2e970:	d9c00015 	stw	r7,0(sp)
   2e974:	da400115 	stw	r9,4(sp)
   2e978:	002f9a00 	call	2f9a0 <__clzsi2>
   2e97c:	d9800217 	ldw	r6,8(sp)
   2e980:	d9c00017 	ldw	r7,0(sp)
   2e984:	da400117 	ldw	r9,4(sp)
   2e988:	113ffd44 	addi	r4,r2,-11
   2e98c:	00c00704 	movi	r3,28
   2e990:	1900ed16 	blt	r3,r4,2ed48 <__muldf3+0x5c0>
   2e994:	00c00744 	movi	r3,29
   2e998:	147ffe04 	addi	r17,r2,-8
   2e99c:	1907c83a 	sub	r3,r3,r4
   2e9a0:	8460983a 	sll	r16,r16,r17
   2e9a4:	98c6d83a 	srl	r3,r19,r3
   2e9a8:	9c68983a 	sll	r20,r19,r17
   2e9ac:	1c20b03a 	or	r16,r3,r16
   2e9b0:	1080fcc4 	addi	r2,r2,1011
   2e9b4:	00a5c83a 	sub	r18,zero,r2
   2e9b8:	0027883a 	mov	r19,zero
   2e9bc:	0039883a 	mov	fp,zero
   2e9c0:	003f9006 	br	2e804 <_gp+0xffff1774>
   2e9c4:	3446b03a 	or	r3,r6,r17
   2e9c8:	1800261e 	bne	r3,zero,2ea64 <__muldf3+0x2dc>
   2e9cc:	0023883a 	mov	r17,zero
   2e9d0:	0011883a 	mov	r8,zero
   2e9d4:	01400084 	movi	r5,2
   2e9d8:	003f9c06 	br	2e84c <_gp+0xffff17bc>
   2e9dc:	3446b03a 	or	r3,r6,r17
   2e9e0:	18001c26 	beq	r3,zero,2ea54 <__muldf3+0x2cc>
   2e9e4:	8800ce26 	beq	r17,zero,2ed20 <__muldf3+0x598>
   2e9e8:	8809883a 	mov	r4,r17
   2e9ec:	d9800215 	stw	r6,8(sp)
   2e9f0:	da400115 	stw	r9,4(sp)
   2e9f4:	da800015 	stw	r10,0(sp)
   2e9f8:	002f9a00 	call	2f9a0 <__clzsi2>
   2e9fc:	d9800217 	ldw	r6,8(sp)
   2ea00:	da400117 	ldw	r9,4(sp)
   2ea04:	da800017 	ldw	r10,0(sp)
   2ea08:	113ffd44 	addi	r4,r2,-11
   2ea0c:	00c00704 	movi	r3,28
   2ea10:	1900bf16 	blt	r3,r4,2ed10 <__muldf3+0x588>
   2ea14:	00c00744 	movi	r3,29
   2ea18:	123ffe04 	addi	r8,r2,-8
   2ea1c:	1907c83a 	sub	r3,r3,r4
   2ea20:	8a22983a 	sll	r17,r17,r8
   2ea24:	30c6d83a 	srl	r3,r6,r3
   2ea28:	3210983a 	sll	r8,r6,r8
   2ea2c:	1c62b03a 	or	r17,r3,r17
   2ea30:	1080fcc4 	addi	r2,r2,1011
   2ea34:	0085c83a 	sub	r2,zero,r2
   2ea38:	000b883a 	mov	r5,zero
   2ea3c:	003f8306 	br	2e84c <_gp+0xffff17bc>
   2ea40:	b02b883a 	mov	r21,r22
   2ea44:	0081ffc4 	movi	r2,2047
   2ea48:	000b883a 	mov	r5,zero
   2ea4c:	0029883a 	mov	r20,zero
   2ea50:	003fac06 	br	2e904 <_gp+0xffff1874>
   2ea54:	0023883a 	mov	r17,zero
   2ea58:	0011883a 	mov	r8,zero
   2ea5c:	01400044 	movi	r5,1
   2ea60:	003f7a06 	br	2e84c <_gp+0xffff17bc>
   2ea64:	014000c4 	movi	r5,3
   2ea68:	003f7806 	br	2e84c <_gp+0xffff17bc>
   2ea6c:	04c00104 	movi	r19,4
   2ea70:	0021883a 	mov	r16,zero
   2ea74:	0029883a 	mov	r20,zero
   2ea78:	07000044 	movi	fp,1
   2ea7c:	003f6106 	br	2e804 <_gp+0xffff1774>
   2ea80:	04c00304 	movi	r19,12
   2ea84:	070000c4 	movi	fp,3
   2ea88:	003f5e06 	br	2e804 <_gp+0xffff1774>
   2ea8c:	01400434 	movhi	r5,16
   2ea90:	002b883a 	mov	r21,zero
   2ea94:	297fffc4 	addi	r5,r5,-1
   2ea98:	053fffc4 	movi	r20,-1
   2ea9c:	0081ffc4 	movi	r2,2047
   2eaa0:	003f9806 	br	2e904 <_gp+0xffff1874>
   2eaa4:	8023883a 	mov	r17,r16
   2eaa8:	a011883a 	mov	r8,r20
   2eaac:	e00b883a 	mov	r5,fp
   2eab0:	003f8a06 	br	2e8dc <_gp+0xffff184c>
   2eab4:	8023883a 	mov	r17,r16
   2eab8:	a011883a 	mov	r8,r20
   2eabc:	482d883a 	mov	r22,r9
   2eac0:	e00b883a 	mov	r5,fp
   2eac4:	003f8506 	br	2e8dc <_gp+0xffff184c>
   2eac8:	a00ad43a 	srli	r5,r20,16
   2eacc:	401ad43a 	srli	r13,r8,16
   2ead0:	a53fffcc 	andi	r20,r20,65535
   2ead4:	423fffcc 	andi	r8,r8,65535
   2ead8:	4519383a 	mul	r12,r8,r20
   2eadc:	4147383a 	mul	r3,r8,r5
   2eae0:	6d09383a 	mul	r4,r13,r20
   2eae4:	600cd43a 	srli	r6,r12,16
   2eae8:	2b5d383a 	mul	r14,r5,r13
   2eaec:	20c9883a 	add	r4,r4,r3
   2eaf0:	310d883a 	add	r6,r6,r4
   2eaf4:	30c0022e 	bgeu	r6,r3,2eb00 <__muldf3+0x378>
   2eaf8:	00c00074 	movhi	r3,1
   2eafc:	70dd883a 	add	r14,r14,r3
   2eb00:	8826d43a 	srli	r19,r17,16
   2eb04:	8bffffcc 	andi	r15,r17,65535
   2eb08:	7d23383a 	mul	r17,r15,r20
   2eb0c:	7949383a 	mul	r4,r15,r5
   2eb10:	9d29383a 	mul	r20,r19,r20
   2eb14:	8814d43a 	srli	r10,r17,16
   2eb18:	3012943a 	slli	r9,r6,16
   2eb1c:	a129883a 	add	r20,r20,r4
   2eb20:	633fffcc 	andi	r12,r12,65535
   2eb24:	5515883a 	add	r10,r10,r20
   2eb28:	3006d43a 	srli	r3,r6,16
   2eb2c:	4b13883a 	add	r9,r9,r12
   2eb30:	2ccb383a 	mul	r5,r5,r19
   2eb34:	5100022e 	bgeu	r10,r4,2eb40 <__muldf3+0x3b8>
   2eb38:	01000074 	movhi	r4,1
   2eb3c:	290b883a 	add	r5,r5,r4
   2eb40:	802ad43a 	srli	r21,r16,16
   2eb44:	843fffcc 	andi	r16,r16,65535
   2eb48:	440d383a 	mul	r6,r8,r16
   2eb4c:	4565383a 	mul	r18,r8,r21
   2eb50:	8349383a 	mul	r4,r16,r13
   2eb54:	500e943a 	slli	r7,r10,16
   2eb58:	3010d43a 	srli	r8,r6,16
   2eb5c:	5028d43a 	srli	r20,r10,16
   2eb60:	2489883a 	add	r4,r4,r18
   2eb64:	8abfffcc 	andi	r10,r17,65535
   2eb68:	3a95883a 	add	r10,r7,r10
   2eb6c:	4119883a 	add	r12,r8,r4
   2eb70:	a169883a 	add	r20,r20,r5
   2eb74:	1a87883a 	add	r3,r3,r10
   2eb78:	6d5b383a 	mul	r13,r13,r21
   2eb7c:	6480022e 	bgeu	r12,r18,2eb88 <__muldf3+0x400>
   2eb80:	01000074 	movhi	r4,1
   2eb84:	691b883a 	add	r13,r13,r4
   2eb88:	7c25383a 	mul	r18,r15,r16
   2eb8c:	7d4b383a 	mul	r5,r15,r21
   2eb90:	84cf383a 	mul	r7,r16,r19
   2eb94:	901ed43a 	srli	r15,r18,16
   2eb98:	6008d43a 	srli	r4,r12,16
   2eb9c:	6010943a 	slli	r8,r12,16
   2eba0:	394f883a 	add	r7,r7,r5
   2eba4:	333fffcc 	andi	r12,r6,65535
   2eba8:	79df883a 	add	r15,r15,r7
   2ebac:	235b883a 	add	r13,r4,r13
   2ebb0:	9d63383a 	mul	r17,r19,r21
   2ebb4:	4309883a 	add	r4,r8,r12
   2ebb8:	7940022e 	bgeu	r15,r5,2ebc4 <__muldf3+0x43c>
   2ebbc:	01400074 	movhi	r5,1
   2ebc0:	8963883a 	add	r17,r17,r5
   2ebc4:	780a943a 	slli	r5,r15,16
   2ebc8:	91bfffcc 	andi	r6,r18,65535
   2ebcc:	70c7883a 	add	r3,r14,r3
   2ebd0:	298d883a 	add	r6,r5,r6
   2ebd4:	1a8f803a 	cmpltu	r7,r3,r10
   2ebd8:	350b883a 	add	r5,r6,r20
   2ebdc:	20c7883a 	add	r3,r4,r3
   2ebe0:	3955883a 	add	r10,r7,r5
   2ebe4:	1909803a 	cmpltu	r4,r3,r4
   2ebe8:	6a91883a 	add	r8,r13,r10
   2ebec:	780cd43a 	srli	r6,r15,16
   2ebf0:	2219883a 	add	r12,r4,r8
   2ebf4:	2d0b803a 	cmpltu	r5,r5,r20
   2ebf8:	51cf803a 	cmpltu	r7,r10,r7
   2ebfc:	29ceb03a 	or	r7,r5,r7
   2ec00:	4351803a 	cmpltu	r8,r8,r13
   2ec04:	610b803a 	cmpltu	r5,r12,r4
   2ec08:	4148b03a 	or	r4,r8,r5
   2ec0c:	398f883a 	add	r7,r7,r6
   2ec10:	3909883a 	add	r4,r7,r4
   2ec14:	1810927a 	slli	r8,r3,9
   2ec18:	2449883a 	add	r4,r4,r17
   2ec1c:	2008927a 	slli	r4,r4,9
   2ec20:	6022d5fa 	srli	r17,r12,23
   2ec24:	1806d5fa 	srli	r3,r3,23
   2ec28:	4252b03a 	or	r9,r8,r9
   2ec2c:	600a927a 	slli	r5,r12,9
   2ec30:	4810c03a 	cmpne	r8,r9,zero
   2ec34:	2462b03a 	or	r17,r4,r17
   2ec38:	40c6b03a 	or	r3,r8,r3
   2ec3c:	8900402c 	andhi	r4,r17,256
   2ec40:	1950b03a 	or	r8,r3,r5
   2ec44:	20000726 	beq	r4,zero,2ec64 <__muldf3+0x4dc>
   2ec48:	4006d07a 	srli	r3,r8,1
   2ec4c:	880497fa 	slli	r2,r17,31
   2ec50:	4200004c 	andi	r8,r8,1
   2ec54:	8822d07a 	srli	r17,r17,1
   2ec58:	1a10b03a 	or	r8,r3,r8
   2ec5c:	1210b03a 	or	r8,r2,r8
   2ec60:	5805883a 	mov	r2,r11
   2ec64:	1140ffc4 	addi	r5,r2,1023
   2ec68:	0140440e 	bge	zero,r5,2ed7c <__muldf3+0x5f4>
   2ec6c:	40c001cc 	andi	r3,r8,7
   2ec70:	18000726 	beq	r3,zero,2ec90 <__muldf3+0x508>
   2ec74:	40c003cc 	andi	r3,r8,15
   2ec78:	01000104 	movi	r4,4
   2ec7c:	19000426 	beq	r3,r4,2ec90 <__muldf3+0x508>
   2ec80:	4107883a 	add	r3,r8,r4
   2ec84:	1a11803a 	cmpltu	r8,r3,r8
   2ec88:	8a23883a 	add	r17,r17,r8
   2ec8c:	1811883a 	mov	r8,r3
   2ec90:	88c0402c 	andhi	r3,r17,256
   2ec94:	18000426 	beq	r3,zero,2eca8 <__muldf3+0x520>
   2ec98:	11410004 	addi	r5,r2,1024
   2ec9c:	00bfc034 	movhi	r2,65280
   2eca0:	10bfffc4 	addi	r2,r2,-1
   2eca4:	88a2703a 	and	r17,r17,r2
   2eca8:	0081ff84 	movi	r2,2046
   2ecac:	117f6416 	blt	r2,r5,2ea40 <_gp+0xffff19b0>
   2ecb0:	8828977a 	slli	r20,r17,29
   2ecb4:	4010d0fa 	srli	r8,r8,3
   2ecb8:	8822927a 	slli	r17,r17,9
   2ecbc:	2881ffcc 	andi	r2,r5,2047
   2ecc0:	a228b03a 	or	r20,r20,r8
   2ecc4:	880ad33a 	srli	r5,r17,12
   2ecc8:	b02b883a 	mov	r21,r22
   2eccc:	003f0d06 	br	2e904 <_gp+0xffff1874>
   2ecd0:	8080022c 	andhi	r2,r16,8
   2ecd4:	10000926 	beq	r2,zero,2ecfc <__muldf3+0x574>
   2ecd8:	8880022c 	andhi	r2,r17,8
   2ecdc:	1000071e 	bne	r2,zero,2ecfc <__muldf3+0x574>
   2ece0:	00800434 	movhi	r2,16
   2ece4:	89400234 	orhi	r5,r17,8
   2ece8:	10bfffc4 	addi	r2,r2,-1
   2ecec:	b82b883a 	mov	r21,r23
   2ecf0:	288a703a 	and	r5,r5,r2
   2ecf4:	4029883a 	mov	r20,r8
   2ecf8:	003f6806 	br	2ea9c <_gp+0xffff1a0c>
   2ecfc:	00800434 	movhi	r2,16
   2ed00:	81400234 	orhi	r5,r16,8
   2ed04:	10bfffc4 	addi	r2,r2,-1
   2ed08:	288a703a 	and	r5,r5,r2
   2ed0c:	003f6306 	br	2ea9c <_gp+0xffff1a0c>
   2ed10:	147ff604 	addi	r17,r2,-40
   2ed14:	3462983a 	sll	r17,r6,r17
   2ed18:	0011883a 	mov	r8,zero
   2ed1c:	003f4406 	br	2ea30 <_gp+0xffff19a0>
   2ed20:	3009883a 	mov	r4,r6
   2ed24:	d9800215 	stw	r6,8(sp)
   2ed28:	da400115 	stw	r9,4(sp)
   2ed2c:	da800015 	stw	r10,0(sp)
   2ed30:	002f9a00 	call	2f9a0 <__clzsi2>
   2ed34:	10800804 	addi	r2,r2,32
   2ed38:	da800017 	ldw	r10,0(sp)
   2ed3c:	da400117 	ldw	r9,4(sp)
   2ed40:	d9800217 	ldw	r6,8(sp)
   2ed44:	003f3006 	br	2ea08 <_gp+0xffff1978>
   2ed48:	143ff604 	addi	r16,r2,-40
   2ed4c:	9c20983a 	sll	r16,r19,r16
   2ed50:	0029883a 	mov	r20,zero
   2ed54:	003f1606 	br	2e9b0 <_gp+0xffff1920>
   2ed58:	d9800215 	stw	r6,8(sp)
   2ed5c:	d9c00015 	stw	r7,0(sp)
   2ed60:	da400115 	stw	r9,4(sp)
   2ed64:	002f9a00 	call	2f9a0 <__clzsi2>
   2ed68:	10800804 	addi	r2,r2,32
   2ed6c:	da400117 	ldw	r9,4(sp)
   2ed70:	d9c00017 	ldw	r7,0(sp)
   2ed74:	d9800217 	ldw	r6,8(sp)
   2ed78:	003f0306 	br	2e988 <_gp+0xffff18f8>
   2ed7c:	00c00044 	movi	r3,1
   2ed80:	1947c83a 	sub	r3,r3,r5
   2ed84:	00800e04 	movi	r2,56
   2ed88:	10feda16 	blt	r2,r3,2e8f4 <_gp+0xffff1864>
   2ed8c:	008007c4 	movi	r2,31
   2ed90:	10c01b16 	blt	r2,r3,2ee00 <__muldf3+0x678>
   2ed94:	00800804 	movi	r2,32
   2ed98:	10c5c83a 	sub	r2,r2,r3
   2ed9c:	888a983a 	sll	r5,r17,r2
   2eda0:	40c8d83a 	srl	r4,r8,r3
   2eda4:	4084983a 	sll	r2,r8,r2
   2eda8:	88e2d83a 	srl	r17,r17,r3
   2edac:	2906b03a 	or	r3,r5,r4
   2edb0:	1004c03a 	cmpne	r2,r2,zero
   2edb4:	1886b03a 	or	r3,r3,r2
   2edb8:	188001cc 	andi	r2,r3,7
   2edbc:	10000726 	beq	r2,zero,2eddc <__muldf3+0x654>
   2edc0:	188003cc 	andi	r2,r3,15
   2edc4:	01000104 	movi	r4,4
   2edc8:	11000426 	beq	r2,r4,2eddc <__muldf3+0x654>
   2edcc:	1805883a 	mov	r2,r3
   2edd0:	10c00104 	addi	r3,r2,4
   2edd4:	1885803a 	cmpltu	r2,r3,r2
   2edd8:	88a3883a 	add	r17,r17,r2
   2eddc:	8880202c 	andhi	r2,r17,128
   2ede0:	10001c26 	beq	r2,zero,2ee54 <__muldf3+0x6cc>
   2ede4:	b02b883a 	mov	r21,r22
   2ede8:	00800044 	movi	r2,1
   2edec:	000b883a 	mov	r5,zero
   2edf0:	0029883a 	mov	r20,zero
   2edf4:	003ec306 	br	2e904 <_gp+0xffff1874>
   2edf8:	5805883a 	mov	r2,r11
   2edfc:	003f9906 	br	2ec64 <_gp+0xffff1bd4>
   2ee00:	00bff844 	movi	r2,-31
   2ee04:	1145c83a 	sub	r2,r2,r5
   2ee08:	8888d83a 	srl	r4,r17,r2
   2ee0c:	00800804 	movi	r2,32
   2ee10:	18801a26 	beq	r3,r2,2ee7c <__muldf3+0x6f4>
   2ee14:	00801004 	movi	r2,64
   2ee18:	10c5c83a 	sub	r2,r2,r3
   2ee1c:	8884983a 	sll	r2,r17,r2
   2ee20:	1204b03a 	or	r2,r2,r8
   2ee24:	1004c03a 	cmpne	r2,r2,zero
   2ee28:	2084b03a 	or	r2,r4,r2
   2ee2c:	144001cc 	andi	r17,r2,7
   2ee30:	88000d1e 	bne	r17,zero,2ee68 <__muldf3+0x6e0>
   2ee34:	000b883a 	mov	r5,zero
   2ee38:	1028d0fa 	srli	r20,r2,3
   2ee3c:	b02b883a 	mov	r21,r22
   2ee40:	0005883a 	mov	r2,zero
   2ee44:	a468b03a 	or	r20,r20,r17
   2ee48:	003eae06 	br	2e904 <_gp+0xffff1874>
   2ee4c:	1007883a 	mov	r3,r2
   2ee50:	0023883a 	mov	r17,zero
   2ee54:	880a927a 	slli	r5,r17,9
   2ee58:	1805883a 	mov	r2,r3
   2ee5c:	8822977a 	slli	r17,r17,29
   2ee60:	280ad33a 	srli	r5,r5,12
   2ee64:	003ff406 	br	2ee38 <_gp+0xffff1da8>
   2ee68:	10c003cc 	andi	r3,r2,15
   2ee6c:	01000104 	movi	r4,4
   2ee70:	193ff626 	beq	r3,r4,2ee4c <_gp+0xffff1dbc>
   2ee74:	0023883a 	mov	r17,zero
   2ee78:	003fd506 	br	2edd0 <_gp+0xffff1d40>
   2ee7c:	0005883a 	mov	r2,zero
   2ee80:	003fe706 	br	2ee20 <_gp+0xffff1d90>
   2ee84:	00800434 	movhi	r2,16
   2ee88:	89400234 	orhi	r5,r17,8
   2ee8c:	10bfffc4 	addi	r2,r2,-1
   2ee90:	b02b883a 	mov	r21,r22
   2ee94:	288a703a 	and	r5,r5,r2
   2ee98:	4029883a 	mov	r20,r8
   2ee9c:	003eff06 	br	2ea9c <_gp+0xffff1a0c>

0002eea0 <__subdf3>:
   2eea0:	02000434 	movhi	r8,16
   2eea4:	423fffc4 	addi	r8,r8,-1
   2eea8:	defffb04 	addi	sp,sp,-20
   2eeac:	2a14703a 	and	r10,r5,r8
   2eeb0:	3812d53a 	srli	r9,r7,20
   2eeb4:	3a10703a 	and	r8,r7,r8
   2eeb8:	2006d77a 	srli	r3,r4,29
   2eebc:	3004d77a 	srli	r2,r6,29
   2eec0:	dc000015 	stw	r16,0(sp)
   2eec4:	501490fa 	slli	r10,r10,3
   2eec8:	2820d53a 	srli	r16,r5,20
   2eecc:	401090fa 	slli	r8,r8,3
   2eed0:	dc800215 	stw	r18,8(sp)
   2eed4:	dc400115 	stw	r17,4(sp)
   2eed8:	dfc00415 	stw	ra,16(sp)
   2eedc:	202290fa 	slli	r17,r4,3
   2eee0:	dcc00315 	stw	r19,12(sp)
   2eee4:	4a41ffcc 	andi	r9,r9,2047
   2eee8:	0101ffc4 	movi	r4,2047
   2eeec:	2824d7fa 	srli	r18,r5,31
   2eef0:	8401ffcc 	andi	r16,r16,2047
   2eef4:	50c6b03a 	or	r3,r10,r3
   2eef8:	380ed7fa 	srli	r7,r7,31
   2eefc:	408ab03a 	or	r5,r8,r2
   2ef00:	300c90fa 	slli	r6,r6,3
   2ef04:	49009626 	beq	r9,r4,2f160 <__subdf3+0x2c0>
   2ef08:	39c0005c 	xori	r7,r7,1
   2ef0c:	8245c83a 	sub	r2,r16,r9
   2ef10:	3c807426 	beq	r7,r18,2f0e4 <__subdf3+0x244>
   2ef14:	0080af0e 	bge	zero,r2,2f1d4 <__subdf3+0x334>
   2ef18:	48002a1e 	bne	r9,zero,2efc4 <__subdf3+0x124>
   2ef1c:	2988b03a 	or	r4,r5,r6
   2ef20:	20009a1e 	bne	r4,zero,2f18c <__subdf3+0x2ec>
   2ef24:	888001cc 	andi	r2,r17,7
   2ef28:	10000726 	beq	r2,zero,2ef48 <__subdf3+0xa8>
   2ef2c:	888003cc 	andi	r2,r17,15
   2ef30:	01000104 	movi	r4,4
   2ef34:	11000426 	beq	r2,r4,2ef48 <__subdf3+0xa8>
   2ef38:	890b883a 	add	r5,r17,r4
   2ef3c:	2c63803a 	cmpltu	r17,r5,r17
   2ef40:	1c47883a 	add	r3,r3,r17
   2ef44:	2823883a 	mov	r17,r5
   2ef48:	1880202c 	andhi	r2,r3,128
   2ef4c:	10005926 	beq	r2,zero,2f0b4 <__subdf3+0x214>
   2ef50:	84000044 	addi	r16,r16,1
   2ef54:	0081ffc4 	movi	r2,2047
   2ef58:	8080be26 	beq	r16,r2,2f254 <__subdf3+0x3b4>
   2ef5c:	017fe034 	movhi	r5,65408
   2ef60:	297fffc4 	addi	r5,r5,-1
   2ef64:	1946703a 	and	r3,r3,r5
   2ef68:	1804977a 	slli	r2,r3,29
   2ef6c:	1806927a 	slli	r3,r3,9
   2ef70:	8822d0fa 	srli	r17,r17,3
   2ef74:	8401ffcc 	andi	r16,r16,2047
   2ef78:	180ad33a 	srli	r5,r3,12
   2ef7c:	9100004c 	andi	r4,r18,1
   2ef80:	1444b03a 	or	r2,r2,r17
   2ef84:	80c1ffcc 	andi	r3,r16,2047
   2ef88:	1820953a 	slli	r16,r3,20
   2ef8c:	20c03fcc 	andi	r3,r4,255
   2ef90:	180897fa 	slli	r4,r3,31
   2ef94:	00c00434 	movhi	r3,16
   2ef98:	18ffffc4 	addi	r3,r3,-1
   2ef9c:	28c6703a 	and	r3,r5,r3
   2efa0:	1c06b03a 	or	r3,r3,r16
   2efa4:	1906b03a 	or	r3,r3,r4
   2efa8:	dfc00417 	ldw	ra,16(sp)
   2efac:	dcc00317 	ldw	r19,12(sp)
   2efb0:	dc800217 	ldw	r18,8(sp)
   2efb4:	dc400117 	ldw	r17,4(sp)
   2efb8:	dc000017 	ldw	r16,0(sp)
   2efbc:	dec00504 	addi	sp,sp,20
   2efc0:	f800283a 	ret
   2efc4:	0101ffc4 	movi	r4,2047
   2efc8:	813fd626 	beq	r16,r4,2ef24 <_gp+0xffff1e94>
   2efcc:	29402034 	orhi	r5,r5,128
   2efd0:	01000e04 	movi	r4,56
   2efd4:	2080a316 	blt	r4,r2,2f264 <__subdf3+0x3c4>
   2efd8:	010007c4 	movi	r4,31
   2efdc:	2080c616 	blt	r4,r2,2f2f8 <__subdf3+0x458>
   2efe0:	01000804 	movi	r4,32
   2efe4:	2089c83a 	sub	r4,r4,r2
   2efe8:	2910983a 	sll	r8,r5,r4
   2efec:	308ed83a 	srl	r7,r6,r2
   2eff0:	3108983a 	sll	r4,r6,r4
   2eff4:	2884d83a 	srl	r2,r5,r2
   2eff8:	41ccb03a 	or	r6,r8,r7
   2effc:	2008c03a 	cmpne	r4,r4,zero
   2f000:	310cb03a 	or	r6,r6,r4
   2f004:	898dc83a 	sub	r6,r17,r6
   2f008:	89a3803a 	cmpltu	r17,r17,r6
   2f00c:	1887c83a 	sub	r3,r3,r2
   2f010:	1c47c83a 	sub	r3,r3,r17
   2f014:	3023883a 	mov	r17,r6
   2f018:	1880202c 	andhi	r2,r3,128
   2f01c:	10002326 	beq	r2,zero,2f0ac <__subdf3+0x20c>
   2f020:	04c02034 	movhi	r19,128
   2f024:	9cffffc4 	addi	r19,r19,-1
   2f028:	1ce6703a 	and	r19,r3,r19
   2f02c:	98007a26 	beq	r19,zero,2f218 <__subdf3+0x378>
   2f030:	9809883a 	mov	r4,r19
   2f034:	002f9a00 	call	2f9a0 <__clzsi2>
   2f038:	113ffe04 	addi	r4,r2,-8
   2f03c:	00c007c4 	movi	r3,31
   2f040:	19007b16 	blt	r3,r4,2f230 <__subdf3+0x390>
   2f044:	00800804 	movi	r2,32
   2f048:	1105c83a 	sub	r2,r2,r4
   2f04c:	8884d83a 	srl	r2,r17,r2
   2f050:	9906983a 	sll	r3,r19,r4
   2f054:	8922983a 	sll	r17,r17,r4
   2f058:	10c4b03a 	or	r2,r2,r3
   2f05c:	24007816 	blt	r4,r16,2f240 <__subdf3+0x3a0>
   2f060:	2421c83a 	sub	r16,r4,r16
   2f064:	80c00044 	addi	r3,r16,1
   2f068:	010007c4 	movi	r4,31
   2f06c:	20c09516 	blt	r4,r3,2f2c4 <__subdf3+0x424>
   2f070:	01400804 	movi	r5,32
   2f074:	28cbc83a 	sub	r5,r5,r3
   2f078:	88c8d83a 	srl	r4,r17,r3
   2f07c:	8962983a 	sll	r17,r17,r5
   2f080:	114a983a 	sll	r5,r2,r5
   2f084:	10c6d83a 	srl	r3,r2,r3
   2f088:	8804c03a 	cmpne	r2,r17,zero
   2f08c:	290ab03a 	or	r5,r5,r4
   2f090:	28a2b03a 	or	r17,r5,r2
   2f094:	0021883a 	mov	r16,zero
   2f098:	003fa206 	br	2ef24 <_gp+0xffff1e94>
   2f09c:	2090b03a 	or	r8,r4,r2
   2f0a0:	40018e26 	beq	r8,zero,2f6dc <__subdf3+0x83c>
   2f0a4:	1007883a 	mov	r3,r2
   2f0a8:	2023883a 	mov	r17,r4
   2f0ac:	888001cc 	andi	r2,r17,7
   2f0b0:	103f9e1e 	bne	r2,zero,2ef2c <_gp+0xffff1e9c>
   2f0b4:	1804977a 	slli	r2,r3,29
   2f0b8:	8822d0fa 	srli	r17,r17,3
   2f0bc:	1810d0fa 	srli	r8,r3,3
   2f0c0:	9100004c 	andi	r4,r18,1
   2f0c4:	1444b03a 	or	r2,r2,r17
   2f0c8:	00c1ffc4 	movi	r3,2047
   2f0cc:	80c02826 	beq	r16,r3,2f170 <__subdf3+0x2d0>
   2f0d0:	01400434 	movhi	r5,16
   2f0d4:	297fffc4 	addi	r5,r5,-1
   2f0d8:	80e0703a 	and	r16,r16,r3
   2f0dc:	414a703a 	and	r5,r8,r5
   2f0e0:	003fa806 	br	2ef84 <_gp+0xffff1ef4>
   2f0e4:	0080630e 	bge	zero,r2,2f274 <__subdf3+0x3d4>
   2f0e8:	48003026 	beq	r9,zero,2f1ac <__subdf3+0x30c>
   2f0ec:	0101ffc4 	movi	r4,2047
   2f0f0:	813f8c26 	beq	r16,r4,2ef24 <_gp+0xffff1e94>
   2f0f4:	29402034 	orhi	r5,r5,128
   2f0f8:	01000e04 	movi	r4,56
   2f0fc:	2080a90e 	bge	r4,r2,2f3a4 <__subdf3+0x504>
   2f100:	298cb03a 	or	r6,r5,r6
   2f104:	3012c03a 	cmpne	r9,r6,zero
   2f108:	0005883a 	mov	r2,zero
   2f10c:	4c53883a 	add	r9,r9,r17
   2f110:	4c63803a 	cmpltu	r17,r9,r17
   2f114:	10c7883a 	add	r3,r2,r3
   2f118:	88c7883a 	add	r3,r17,r3
   2f11c:	4823883a 	mov	r17,r9
   2f120:	1880202c 	andhi	r2,r3,128
   2f124:	1000d026 	beq	r2,zero,2f468 <__subdf3+0x5c8>
   2f128:	84000044 	addi	r16,r16,1
   2f12c:	0081ffc4 	movi	r2,2047
   2f130:	8080fe26 	beq	r16,r2,2f52c <__subdf3+0x68c>
   2f134:	00bfe034 	movhi	r2,65408
   2f138:	10bfffc4 	addi	r2,r2,-1
   2f13c:	1886703a 	and	r3,r3,r2
   2f140:	880ad07a 	srli	r5,r17,1
   2f144:	180497fa 	slli	r2,r3,31
   2f148:	8900004c 	andi	r4,r17,1
   2f14c:	2922b03a 	or	r17,r5,r4
   2f150:	1806d07a 	srli	r3,r3,1
   2f154:	1462b03a 	or	r17,r2,r17
   2f158:	3825883a 	mov	r18,r7
   2f15c:	003f7106 	br	2ef24 <_gp+0xffff1e94>
   2f160:	2984b03a 	or	r2,r5,r6
   2f164:	103f6826 	beq	r2,zero,2ef08 <_gp+0xffff1e78>
   2f168:	39c03fcc 	andi	r7,r7,255
   2f16c:	003f6706 	br	2ef0c <_gp+0xffff1e7c>
   2f170:	4086b03a 	or	r3,r8,r2
   2f174:	18015226 	beq	r3,zero,2f6c0 <__subdf3+0x820>
   2f178:	00c00434 	movhi	r3,16
   2f17c:	41400234 	orhi	r5,r8,8
   2f180:	18ffffc4 	addi	r3,r3,-1
   2f184:	28ca703a 	and	r5,r5,r3
   2f188:	003f7e06 	br	2ef84 <_gp+0xffff1ef4>
   2f18c:	10bfffc4 	addi	r2,r2,-1
   2f190:	1000491e 	bne	r2,zero,2f2b8 <__subdf3+0x418>
   2f194:	898fc83a 	sub	r7,r17,r6
   2f198:	89e3803a 	cmpltu	r17,r17,r7
   2f19c:	1947c83a 	sub	r3,r3,r5
   2f1a0:	1c47c83a 	sub	r3,r3,r17
   2f1a4:	3823883a 	mov	r17,r7
   2f1a8:	003f9b06 	br	2f018 <_gp+0xffff1f88>
   2f1ac:	2988b03a 	or	r4,r5,r6
   2f1b0:	203f5c26 	beq	r4,zero,2ef24 <_gp+0xffff1e94>
   2f1b4:	10bfffc4 	addi	r2,r2,-1
   2f1b8:	1000931e 	bne	r2,zero,2f408 <__subdf3+0x568>
   2f1bc:	898d883a 	add	r6,r17,r6
   2f1c0:	3463803a 	cmpltu	r17,r6,r17
   2f1c4:	1947883a 	add	r3,r3,r5
   2f1c8:	88c7883a 	add	r3,r17,r3
   2f1cc:	3023883a 	mov	r17,r6
   2f1d0:	003fd306 	br	2f120 <_gp+0xffff2090>
   2f1d4:	1000541e 	bne	r2,zero,2f328 <__subdf3+0x488>
   2f1d8:	80800044 	addi	r2,r16,1
   2f1dc:	1081ffcc 	andi	r2,r2,2047
   2f1e0:	01000044 	movi	r4,1
   2f1e4:	2080a20e 	bge	r4,r2,2f470 <__subdf3+0x5d0>
   2f1e8:	8989c83a 	sub	r4,r17,r6
   2f1ec:	8905803a 	cmpltu	r2,r17,r4
   2f1f0:	1967c83a 	sub	r19,r3,r5
   2f1f4:	98a7c83a 	sub	r19,r19,r2
   2f1f8:	9880202c 	andhi	r2,r19,128
   2f1fc:	10006326 	beq	r2,zero,2f38c <__subdf3+0x4ec>
   2f200:	3463c83a 	sub	r17,r6,r17
   2f204:	28c7c83a 	sub	r3,r5,r3
   2f208:	344d803a 	cmpltu	r6,r6,r17
   2f20c:	19a7c83a 	sub	r19,r3,r6
   2f210:	3825883a 	mov	r18,r7
   2f214:	983f861e 	bne	r19,zero,2f030 <_gp+0xffff1fa0>
   2f218:	8809883a 	mov	r4,r17
   2f21c:	002f9a00 	call	2f9a0 <__clzsi2>
   2f220:	10800804 	addi	r2,r2,32
   2f224:	113ffe04 	addi	r4,r2,-8
   2f228:	00c007c4 	movi	r3,31
   2f22c:	193f850e 	bge	r3,r4,2f044 <_gp+0xffff1fb4>
   2f230:	10bff604 	addi	r2,r2,-40
   2f234:	8884983a 	sll	r2,r17,r2
   2f238:	0023883a 	mov	r17,zero
   2f23c:	243f880e 	bge	r4,r16,2f060 <_gp+0xffff1fd0>
   2f240:	00ffe034 	movhi	r3,65408
   2f244:	18ffffc4 	addi	r3,r3,-1
   2f248:	8121c83a 	sub	r16,r16,r4
   2f24c:	10c6703a 	and	r3,r2,r3
   2f250:	003f3406 	br	2ef24 <_gp+0xffff1e94>
   2f254:	9100004c 	andi	r4,r18,1
   2f258:	000b883a 	mov	r5,zero
   2f25c:	0005883a 	mov	r2,zero
   2f260:	003f4806 	br	2ef84 <_gp+0xffff1ef4>
   2f264:	298cb03a 	or	r6,r5,r6
   2f268:	300cc03a 	cmpne	r6,r6,zero
   2f26c:	0005883a 	mov	r2,zero
   2f270:	003f6406 	br	2f004 <_gp+0xffff1f74>
   2f274:	10009a1e 	bne	r2,zero,2f4e0 <__subdf3+0x640>
   2f278:	82400044 	addi	r9,r16,1
   2f27c:	4881ffcc 	andi	r2,r9,2047
   2f280:	02800044 	movi	r10,1
   2f284:	5080670e 	bge	r10,r2,2f424 <__subdf3+0x584>
   2f288:	0081ffc4 	movi	r2,2047
   2f28c:	4880af26 	beq	r9,r2,2f54c <__subdf3+0x6ac>
   2f290:	898d883a 	add	r6,r17,r6
   2f294:	1945883a 	add	r2,r3,r5
   2f298:	3447803a 	cmpltu	r3,r6,r17
   2f29c:	1887883a 	add	r3,r3,r2
   2f2a0:	182297fa 	slli	r17,r3,31
   2f2a4:	300cd07a 	srli	r6,r6,1
   2f2a8:	1806d07a 	srli	r3,r3,1
   2f2ac:	4821883a 	mov	r16,r9
   2f2b0:	89a2b03a 	or	r17,r17,r6
   2f2b4:	003f1b06 	br	2ef24 <_gp+0xffff1e94>
   2f2b8:	0101ffc4 	movi	r4,2047
   2f2bc:	813f441e 	bne	r16,r4,2efd0 <_gp+0xffff1f40>
   2f2c0:	003f1806 	br	2ef24 <_gp+0xffff1e94>
   2f2c4:	843ff844 	addi	r16,r16,-31
   2f2c8:	01400804 	movi	r5,32
   2f2cc:	1408d83a 	srl	r4,r2,r16
   2f2d0:	19405026 	beq	r3,r5,2f414 <__subdf3+0x574>
   2f2d4:	01401004 	movi	r5,64
   2f2d8:	28c7c83a 	sub	r3,r5,r3
   2f2dc:	10c4983a 	sll	r2,r2,r3
   2f2e0:	88a2b03a 	or	r17,r17,r2
   2f2e4:	8822c03a 	cmpne	r17,r17,zero
   2f2e8:	2462b03a 	or	r17,r4,r17
   2f2ec:	0007883a 	mov	r3,zero
   2f2f0:	0021883a 	mov	r16,zero
   2f2f4:	003f6d06 	br	2f0ac <_gp+0xffff201c>
   2f2f8:	11fff804 	addi	r7,r2,-32
   2f2fc:	01000804 	movi	r4,32
   2f300:	29ced83a 	srl	r7,r5,r7
   2f304:	11004526 	beq	r2,r4,2f41c <__subdf3+0x57c>
   2f308:	01001004 	movi	r4,64
   2f30c:	2089c83a 	sub	r4,r4,r2
   2f310:	2904983a 	sll	r2,r5,r4
   2f314:	118cb03a 	or	r6,r2,r6
   2f318:	300cc03a 	cmpne	r6,r6,zero
   2f31c:	398cb03a 	or	r6,r7,r6
   2f320:	0005883a 	mov	r2,zero
   2f324:	003f3706 	br	2f004 <_gp+0xffff1f74>
   2f328:	80002a26 	beq	r16,zero,2f3d4 <__subdf3+0x534>
   2f32c:	0101ffc4 	movi	r4,2047
   2f330:	49006626 	beq	r9,r4,2f4cc <__subdf3+0x62c>
   2f334:	0085c83a 	sub	r2,zero,r2
   2f338:	18c02034 	orhi	r3,r3,128
   2f33c:	01000e04 	movi	r4,56
   2f340:	20807e16 	blt	r4,r2,2f53c <__subdf3+0x69c>
   2f344:	010007c4 	movi	r4,31
   2f348:	2080e716 	blt	r4,r2,2f6e8 <__subdf3+0x848>
   2f34c:	01000804 	movi	r4,32
   2f350:	2089c83a 	sub	r4,r4,r2
   2f354:	1914983a 	sll	r10,r3,r4
   2f358:	8890d83a 	srl	r8,r17,r2
   2f35c:	8908983a 	sll	r4,r17,r4
   2f360:	1884d83a 	srl	r2,r3,r2
   2f364:	5222b03a 	or	r17,r10,r8
   2f368:	2006c03a 	cmpne	r3,r4,zero
   2f36c:	88e2b03a 	or	r17,r17,r3
   2f370:	3463c83a 	sub	r17,r6,r17
   2f374:	2885c83a 	sub	r2,r5,r2
   2f378:	344d803a 	cmpltu	r6,r6,r17
   2f37c:	1187c83a 	sub	r3,r2,r6
   2f380:	4821883a 	mov	r16,r9
   2f384:	3825883a 	mov	r18,r7
   2f388:	003f2306 	br	2f018 <_gp+0xffff1f88>
   2f38c:	24d0b03a 	or	r8,r4,r19
   2f390:	40001b1e 	bne	r8,zero,2f400 <__subdf3+0x560>
   2f394:	0005883a 	mov	r2,zero
   2f398:	0009883a 	mov	r4,zero
   2f39c:	0021883a 	mov	r16,zero
   2f3a0:	003f4906 	br	2f0c8 <_gp+0xffff2038>
   2f3a4:	010007c4 	movi	r4,31
   2f3a8:	20803a16 	blt	r4,r2,2f494 <__subdf3+0x5f4>
   2f3ac:	01000804 	movi	r4,32
   2f3b0:	2089c83a 	sub	r4,r4,r2
   2f3b4:	2912983a 	sll	r9,r5,r4
   2f3b8:	3090d83a 	srl	r8,r6,r2
   2f3bc:	3108983a 	sll	r4,r6,r4
   2f3c0:	2884d83a 	srl	r2,r5,r2
   2f3c4:	4a12b03a 	or	r9,r9,r8
   2f3c8:	2008c03a 	cmpne	r4,r4,zero
   2f3cc:	4912b03a 	or	r9,r9,r4
   2f3d0:	003f4e06 	br	2f10c <_gp+0xffff207c>
   2f3d4:	1c48b03a 	or	r4,r3,r17
   2f3d8:	20003c26 	beq	r4,zero,2f4cc <__subdf3+0x62c>
   2f3dc:	0084303a 	nor	r2,zero,r2
   2f3e0:	1000381e 	bne	r2,zero,2f4c4 <__subdf3+0x624>
   2f3e4:	3463c83a 	sub	r17,r6,r17
   2f3e8:	28c5c83a 	sub	r2,r5,r3
   2f3ec:	344d803a 	cmpltu	r6,r6,r17
   2f3f0:	1187c83a 	sub	r3,r2,r6
   2f3f4:	4821883a 	mov	r16,r9
   2f3f8:	3825883a 	mov	r18,r7
   2f3fc:	003f0606 	br	2f018 <_gp+0xffff1f88>
   2f400:	2023883a 	mov	r17,r4
   2f404:	003f0906 	br	2f02c <_gp+0xffff1f9c>
   2f408:	0101ffc4 	movi	r4,2047
   2f40c:	813f3a1e 	bne	r16,r4,2f0f8 <_gp+0xffff2068>
   2f410:	003ec406 	br	2ef24 <_gp+0xffff1e94>
   2f414:	0005883a 	mov	r2,zero
   2f418:	003fb106 	br	2f2e0 <_gp+0xffff2250>
   2f41c:	0005883a 	mov	r2,zero
   2f420:	003fbc06 	br	2f314 <_gp+0xffff2284>
   2f424:	1c44b03a 	or	r2,r3,r17
   2f428:	80008e1e 	bne	r16,zero,2f664 <__subdf3+0x7c4>
   2f42c:	1000c826 	beq	r2,zero,2f750 <__subdf3+0x8b0>
   2f430:	2984b03a 	or	r2,r5,r6
   2f434:	103ebb26 	beq	r2,zero,2ef24 <_gp+0xffff1e94>
   2f438:	8989883a 	add	r4,r17,r6
   2f43c:	1945883a 	add	r2,r3,r5
   2f440:	2447803a 	cmpltu	r3,r4,r17
   2f444:	1887883a 	add	r3,r3,r2
   2f448:	1880202c 	andhi	r2,r3,128
   2f44c:	2023883a 	mov	r17,r4
   2f450:	103f1626 	beq	r2,zero,2f0ac <_gp+0xffff201c>
   2f454:	00bfe034 	movhi	r2,65408
   2f458:	10bfffc4 	addi	r2,r2,-1
   2f45c:	5021883a 	mov	r16,r10
   2f460:	1886703a 	and	r3,r3,r2
   2f464:	003eaf06 	br	2ef24 <_gp+0xffff1e94>
   2f468:	3825883a 	mov	r18,r7
   2f46c:	003f0f06 	br	2f0ac <_gp+0xffff201c>
   2f470:	1c44b03a 	or	r2,r3,r17
   2f474:	8000251e 	bne	r16,zero,2f50c <__subdf3+0x66c>
   2f478:	1000661e 	bne	r2,zero,2f614 <__subdf3+0x774>
   2f47c:	2990b03a 	or	r8,r5,r6
   2f480:	40009626 	beq	r8,zero,2f6dc <__subdf3+0x83c>
   2f484:	2807883a 	mov	r3,r5
   2f488:	3023883a 	mov	r17,r6
   2f48c:	3825883a 	mov	r18,r7
   2f490:	003ea406 	br	2ef24 <_gp+0xffff1e94>
   2f494:	127ff804 	addi	r9,r2,-32
   2f498:	01000804 	movi	r4,32
   2f49c:	2a52d83a 	srl	r9,r5,r9
   2f4a0:	11008c26 	beq	r2,r4,2f6d4 <__subdf3+0x834>
   2f4a4:	01001004 	movi	r4,64
   2f4a8:	2085c83a 	sub	r2,r4,r2
   2f4ac:	2884983a 	sll	r2,r5,r2
   2f4b0:	118cb03a 	or	r6,r2,r6
   2f4b4:	300cc03a 	cmpne	r6,r6,zero
   2f4b8:	4992b03a 	or	r9,r9,r6
   2f4bc:	0005883a 	mov	r2,zero
   2f4c0:	003f1206 	br	2f10c <_gp+0xffff207c>
   2f4c4:	0101ffc4 	movi	r4,2047
   2f4c8:	493f9c1e 	bne	r9,r4,2f33c <_gp+0xffff22ac>
   2f4cc:	2807883a 	mov	r3,r5
   2f4d0:	3023883a 	mov	r17,r6
   2f4d4:	4821883a 	mov	r16,r9
   2f4d8:	3825883a 	mov	r18,r7
   2f4dc:	003e9106 	br	2ef24 <_gp+0xffff1e94>
   2f4e0:	80001f1e 	bne	r16,zero,2f560 <__subdf3+0x6c0>
   2f4e4:	1c48b03a 	or	r4,r3,r17
   2f4e8:	20005a26 	beq	r4,zero,2f654 <__subdf3+0x7b4>
   2f4ec:	0084303a 	nor	r2,zero,r2
   2f4f0:	1000561e 	bne	r2,zero,2f64c <__subdf3+0x7ac>
   2f4f4:	89a3883a 	add	r17,r17,r6
   2f4f8:	1945883a 	add	r2,r3,r5
   2f4fc:	898d803a 	cmpltu	r6,r17,r6
   2f500:	3087883a 	add	r3,r6,r2
   2f504:	4821883a 	mov	r16,r9
   2f508:	003f0506 	br	2f120 <_gp+0xffff2090>
   2f50c:	10002b1e 	bne	r2,zero,2f5bc <__subdf3+0x71c>
   2f510:	2984b03a 	or	r2,r5,r6
   2f514:	10008026 	beq	r2,zero,2f718 <__subdf3+0x878>
   2f518:	2807883a 	mov	r3,r5
   2f51c:	3023883a 	mov	r17,r6
   2f520:	3825883a 	mov	r18,r7
   2f524:	0401ffc4 	movi	r16,2047
   2f528:	003e7e06 	br	2ef24 <_gp+0xffff1e94>
   2f52c:	3809883a 	mov	r4,r7
   2f530:	0011883a 	mov	r8,zero
   2f534:	0005883a 	mov	r2,zero
   2f538:	003ee306 	br	2f0c8 <_gp+0xffff2038>
   2f53c:	1c62b03a 	or	r17,r3,r17
   2f540:	8822c03a 	cmpne	r17,r17,zero
   2f544:	0005883a 	mov	r2,zero
   2f548:	003f8906 	br	2f370 <_gp+0xffff22e0>
   2f54c:	3809883a 	mov	r4,r7
   2f550:	4821883a 	mov	r16,r9
   2f554:	0011883a 	mov	r8,zero
   2f558:	0005883a 	mov	r2,zero
   2f55c:	003eda06 	br	2f0c8 <_gp+0xffff2038>
   2f560:	0101ffc4 	movi	r4,2047
   2f564:	49003b26 	beq	r9,r4,2f654 <__subdf3+0x7b4>
   2f568:	0085c83a 	sub	r2,zero,r2
   2f56c:	18c02034 	orhi	r3,r3,128
   2f570:	01000e04 	movi	r4,56
   2f574:	20806e16 	blt	r4,r2,2f730 <__subdf3+0x890>
   2f578:	010007c4 	movi	r4,31
   2f57c:	20807716 	blt	r4,r2,2f75c <__subdf3+0x8bc>
   2f580:	01000804 	movi	r4,32
   2f584:	2089c83a 	sub	r4,r4,r2
   2f588:	1914983a 	sll	r10,r3,r4
   2f58c:	8890d83a 	srl	r8,r17,r2
   2f590:	8908983a 	sll	r4,r17,r4
   2f594:	1884d83a 	srl	r2,r3,r2
   2f598:	5222b03a 	or	r17,r10,r8
   2f59c:	2006c03a 	cmpne	r3,r4,zero
   2f5a0:	88e2b03a 	or	r17,r17,r3
   2f5a4:	89a3883a 	add	r17,r17,r6
   2f5a8:	1145883a 	add	r2,r2,r5
   2f5ac:	898d803a 	cmpltu	r6,r17,r6
   2f5b0:	3087883a 	add	r3,r6,r2
   2f5b4:	4821883a 	mov	r16,r9
   2f5b8:	003ed906 	br	2f120 <_gp+0xffff2090>
   2f5bc:	2984b03a 	or	r2,r5,r6
   2f5c0:	10004226 	beq	r2,zero,2f6cc <__subdf3+0x82c>
   2f5c4:	1808d0fa 	srli	r4,r3,3
   2f5c8:	8822d0fa 	srli	r17,r17,3
   2f5cc:	1806977a 	slli	r3,r3,29
   2f5d0:	2080022c 	andhi	r2,r4,8
   2f5d4:	1c62b03a 	or	r17,r3,r17
   2f5d8:	10000826 	beq	r2,zero,2f5fc <__subdf3+0x75c>
   2f5dc:	2812d0fa 	srli	r9,r5,3
   2f5e0:	4880022c 	andhi	r2,r9,8
   2f5e4:	1000051e 	bne	r2,zero,2f5fc <__subdf3+0x75c>
   2f5e8:	300cd0fa 	srli	r6,r6,3
   2f5ec:	2804977a 	slli	r2,r5,29
   2f5f0:	4809883a 	mov	r4,r9
   2f5f4:	3825883a 	mov	r18,r7
   2f5f8:	11a2b03a 	or	r17,r2,r6
   2f5fc:	8806d77a 	srli	r3,r17,29
   2f600:	200890fa 	slli	r4,r4,3
   2f604:	882290fa 	slli	r17,r17,3
   2f608:	0401ffc4 	movi	r16,2047
   2f60c:	1906b03a 	or	r3,r3,r4
   2f610:	003e4406 	br	2ef24 <_gp+0xffff1e94>
   2f614:	2984b03a 	or	r2,r5,r6
   2f618:	103e4226 	beq	r2,zero,2ef24 <_gp+0xffff1e94>
   2f61c:	8989c83a 	sub	r4,r17,r6
   2f620:	8911803a 	cmpltu	r8,r17,r4
   2f624:	1945c83a 	sub	r2,r3,r5
   2f628:	1205c83a 	sub	r2,r2,r8
   2f62c:	1200202c 	andhi	r8,r2,128
   2f630:	403e9a26 	beq	r8,zero,2f09c <_gp+0xffff200c>
   2f634:	3463c83a 	sub	r17,r6,r17
   2f638:	28c5c83a 	sub	r2,r5,r3
   2f63c:	344d803a 	cmpltu	r6,r6,r17
   2f640:	1187c83a 	sub	r3,r2,r6
   2f644:	3825883a 	mov	r18,r7
   2f648:	003e3606 	br	2ef24 <_gp+0xffff1e94>
   2f64c:	0101ffc4 	movi	r4,2047
   2f650:	493fc71e 	bne	r9,r4,2f570 <_gp+0xffff24e0>
   2f654:	2807883a 	mov	r3,r5
   2f658:	3023883a 	mov	r17,r6
   2f65c:	4821883a 	mov	r16,r9
   2f660:	003e3006 	br	2ef24 <_gp+0xffff1e94>
   2f664:	10003626 	beq	r2,zero,2f740 <__subdf3+0x8a0>
   2f668:	2984b03a 	or	r2,r5,r6
   2f66c:	10001726 	beq	r2,zero,2f6cc <__subdf3+0x82c>
   2f670:	1808d0fa 	srli	r4,r3,3
   2f674:	8822d0fa 	srli	r17,r17,3
   2f678:	1806977a 	slli	r3,r3,29
   2f67c:	2080022c 	andhi	r2,r4,8
   2f680:	1c62b03a 	or	r17,r3,r17
   2f684:	10000726 	beq	r2,zero,2f6a4 <__subdf3+0x804>
   2f688:	2812d0fa 	srli	r9,r5,3
   2f68c:	4880022c 	andhi	r2,r9,8
   2f690:	1000041e 	bne	r2,zero,2f6a4 <__subdf3+0x804>
   2f694:	300cd0fa 	srli	r6,r6,3
   2f698:	2804977a 	slli	r2,r5,29
   2f69c:	4809883a 	mov	r4,r9
   2f6a0:	11a2b03a 	or	r17,r2,r6
   2f6a4:	8806d77a 	srli	r3,r17,29
   2f6a8:	200890fa 	slli	r4,r4,3
   2f6ac:	882290fa 	slli	r17,r17,3
   2f6b0:	3825883a 	mov	r18,r7
   2f6b4:	1906b03a 	or	r3,r3,r4
   2f6b8:	0401ffc4 	movi	r16,2047
   2f6bc:	003e1906 	br	2ef24 <_gp+0xffff1e94>
   2f6c0:	000b883a 	mov	r5,zero
   2f6c4:	0005883a 	mov	r2,zero
   2f6c8:	003e2e06 	br	2ef84 <_gp+0xffff1ef4>
   2f6cc:	0401ffc4 	movi	r16,2047
   2f6d0:	003e1406 	br	2ef24 <_gp+0xffff1e94>
   2f6d4:	0005883a 	mov	r2,zero
   2f6d8:	003f7506 	br	2f4b0 <_gp+0xffff2420>
   2f6dc:	0005883a 	mov	r2,zero
   2f6e0:	0009883a 	mov	r4,zero
   2f6e4:	003e7806 	br	2f0c8 <_gp+0xffff2038>
   2f6e8:	123ff804 	addi	r8,r2,-32
   2f6ec:	01000804 	movi	r4,32
   2f6f0:	1a10d83a 	srl	r8,r3,r8
   2f6f4:	11002526 	beq	r2,r4,2f78c <__subdf3+0x8ec>
   2f6f8:	01001004 	movi	r4,64
   2f6fc:	2085c83a 	sub	r2,r4,r2
   2f700:	1884983a 	sll	r2,r3,r2
   2f704:	1444b03a 	or	r2,r2,r17
   2f708:	1004c03a 	cmpne	r2,r2,zero
   2f70c:	40a2b03a 	or	r17,r8,r2
   2f710:	0005883a 	mov	r2,zero
   2f714:	003f1606 	br	2f370 <_gp+0xffff22e0>
   2f718:	02000434 	movhi	r8,16
   2f71c:	0009883a 	mov	r4,zero
   2f720:	423fffc4 	addi	r8,r8,-1
   2f724:	00bfffc4 	movi	r2,-1
   2f728:	0401ffc4 	movi	r16,2047
   2f72c:	003e6606 	br	2f0c8 <_gp+0xffff2038>
   2f730:	1c62b03a 	or	r17,r3,r17
   2f734:	8822c03a 	cmpne	r17,r17,zero
   2f738:	0005883a 	mov	r2,zero
   2f73c:	003f9906 	br	2f5a4 <_gp+0xffff2514>
   2f740:	2807883a 	mov	r3,r5
   2f744:	3023883a 	mov	r17,r6
   2f748:	0401ffc4 	movi	r16,2047
   2f74c:	003df506 	br	2ef24 <_gp+0xffff1e94>
   2f750:	2807883a 	mov	r3,r5
   2f754:	3023883a 	mov	r17,r6
   2f758:	003df206 	br	2ef24 <_gp+0xffff1e94>
   2f75c:	123ff804 	addi	r8,r2,-32
   2f760:	01000804 	movi	r4,32
   2f764:	1a10d83a 	srl	r8,r3,r8
   2f768:	11000a26 	beq	r2,r4,2f794 <__subdf3+0x8f4>
   2f76c:	01001004 	movi	r4,64
   2f770:	2085c83a 	sub	r2,r4,r2
   2f774:	1884983a 	sll	r2,r3,r2
   2f778:	1444b03a 	or	r2,r2,r17
   2f77c:	1004c03a 	cmpne	r2,r2,zero
   2f780:	40a2b03a 	or	r17,r8,r2
   2f784:	0005883a 	mov	r2,zero
   2f788:	003f8606 	br	2f5a4 <_gp+0xffff2514>
   2f78c:	0005883a 	mov	r2,zero
   2f790:	003fdc06 	br	2f704 <_gp+0xffff2674>
   2f794:	0005883a 	mov	r2,zero
   2f798:	003ff706 	br	2f778 <_gp+0xffff26e8>

0002f79c <__fixdfsi>:
   2f79c:	280cd53a 	srli	r6,r5,20
   2f7a0:	00c00434 	movhi	r3,16
   2f7a4:	18ffffc4 	addi	r3,r3,-1
   2f7a8:	3181ffcc 	andi	r6,r6,2047
   2f7ac:	01c0ff84 	movi	r7,1022
   2f7b0:	28c6703a 	and	r3,r5,r3
   2f7b4:	280ad7fa 	srli	r5,r5,31
   2f7b8:	3980120e 	bge	r7,r6,2f804 <__fixdfsi+0x68>
   2f7bc:	00810744 	movi	r2,1053
   2f7c0:	11800c16 	blt	r2,r6,2f7f4 <__fixdfsi+0x58>
   2f7c4:	00810cc4 	movi	r2,1075
   2f7c8:	1185c83a 	sub	r2,r2,r6
   2f7cc:	01c007c4 	movi	r7,31
   2f7d0:	18c00434 	orhi	r3,r3,16
   2f7d4:	38800d16 	blt	r7,r2,2f80c <__fixdfsi+0x70>
   2f7d8:	31befb44 	addi	r6,r6,-1043
   2f7dc:	2084d83a 	srl	r2,r4,r2
   2f7e0:	1986983a 	sll	r3,r3,r6
   2f7e4:	1884b03a 	or	r2,r3,r2
   2f7e8:	28000726 	beq	r5,zero,2f808 <__fixdfsi+0x6c>
   2f7ec:	0085c83a 	sub	r2,zero,r2
   2f7f0:	f800283a 	ret
   2f7f4:	00a00034 	movhi	r2,32768
   2f7f8:	10bfffc4 	addi	r2,r2,-1
   2f7fc:	2885883a 	add	r2,r5,r2
   2f800:	f800283a 	ret
   2f804:	0005883a 	mov	r2,zero
   2f808:	f800283a 	ret
   2f80c:	008104c4 	movi	r2,1043
   2f810:	1185c83a 	sub	r2,r2,r6
   2f814:	1884d83a 	srl	r2,r3,r2
   2f818:	003ff306 	br	2f7e8 <_gp+0xffff2758>

0002f81c <__floatsidf>:
   2f81c:	defffd04 	addi	sp,sp,-12
   2f820:	dfc00215 	stw	ra,8(sp)
   2f824:	dc400115 	stw	r17,4(sp)
   2f828:	dc000015 	stw	r16,0(sp)
   2f82c:	20002b26 	beq	r4,zero,2f8dc <__floatsidf+0xc0>
   2f830:	2023883a 	mov	r17,r4
   2f834:	2020d7fa 	srli	r16,r4,31
   2f838:	20002d16 	blt	r4,zero,2f8f0 <__floatsidf+0xd4>
   2f83c:	8809883a 	mov	r4,r17
   2f840:	002f9a00 	call	2f9a0 <__clzsi2>
   2f844:	01410784 	movi	r5,1054
   2f848:	288bc83a 	sub	r5,r5,r2
   2f84c:	01010cc4 	movi	r4,1075
   2f850:	2149c83a 	sub	r4,r4,r5
   2f854:	00c007c4 	movi	r3,31
   2f858:	1900160e 	bge	r3,r4,2f8b4 <__floatsidf+0x98>
   2f85c:	00c104c4 	movi	r3,1043
   2f860:	1947c83a 	sub	r3,r3,r5
   2f864:	88c6983a 	sll	r3,r17,r3
   2f868:	00800434 	movhi	r2,16
   2f86c:	10bfffc4 	addi	r2,r2,-1
   2f870:	1886703a 	and	r3,r3,r2
   2f874:	2941ffcc 	andi	r5,r5,2047
   2f878:	800d883a 	mov	r6,r16
   2f87c:	0005883a 	mov	r2,zero
   2f880:	280a953a 	slli	r5,r5,20
   2f884:	31803fcc 	andi	r6,r6,255
   2f888:	01000434 	movhi	r4,16
   2f88c:	300c97fa 	slli	r6,r6,31
   2f890:	213fffc4 	addi	r4,r4,-1
   2f894:	1906703a 	and	r3,r3,r4
   2f898:	1946b03a 	or	r3,r3,r5
   2f89c:	1986b03a 	or	r3,r3,r6
   2f8a0:	dfc00217 	ldw	ra,8(sp)
   2f8a4:	dc400117 	ldw	r17,4(sp)
   2f8a8:	dc000017 	ldw	r16,0(sp)
   2f8ac:	dec00304 	addi	sp,sp,12
   2f8b0:	f800283a 	ret
   2f8b4:	00c002c4 	movi	r3,11
   2f8b8:	1887c83a 	sub	r3,r3,r2
   2f8bc:	88c6d83a 	srl	r3,r17,r3
   2f8c0:	8904983a 	sll	r2,r17,r4
   2f8c4:	01000434 	movhi	r4,16
   2f8c8:	213fffc4 	addi	r4,r4,-1
   2f8cc:	2941ffcc 	andi	r5,r5,2047
   2f8d0:	1906703a 	and	r3,r3,r4
   2f8d4:	800d883a 	mov	r6,r16
   2f8d8:	003fe906 	br	2f880 <_gp+0xffff27f0>
   2f8dc:	000d883a 	mov	r6,zero
   2f8e0:	000b883a 	mov	r5,zero
   2f8e4:	0007883a 	mov	r3,zero
   2f8e8:	0005883a 	mov	r2,zero
   2f8ec:	003fe406 	br	2f880 <_gp+0xffff27f0>
   2f8f0:	0123c83a 	sub	r17,zero,r4
   2f8f4:	003fd106 	br	2f83c <_gp+0xffff27ac>

0002f8f8 <__floatunsidf>:
   2f8f8:	defffe04 	addi	sp,sp,-8
   2f8fc:	dc000015 	stw	r16,0(sp)
   2f900:	dfc00115 	stw	ra,4(sp)
   2f904:	2021883a 	mov	r16,r4
   2f908:	20002226 	beq	r4,zero,2f994 <__floatunsidf+0x9c>
   2f90c:	002f9a00 	call	2f9a0 <__clzsi2>
   2f910:	01010784 	movi	r4,1054
   2f914:	2089c83a 	sub	r4,r4,r2
   2f918:	01810cc4 	movi	r6,1075
   2f91c:	310dc83a 	sub	r6,r6,r4
   2f920:	00c007c4 	movi	r3,31
   2f924:	1980120e 	bge	r3,r6,2f970 <__floatunsidf+0x78>
   2f928:	00c104c4 	movi	r3,1043
   2f92c:	1907c83a 	sub	r3,r3,r4
   2f930:	80ca983a 	sll	r5,r16,r3
   2f934:	00800434 	movhi	r2,16
   2f938:	10bfffc4 	addi	r2,r2,-1
   2f93c:	2101ffcc 	andi	r4,r4,2047
   2f940:	0021883a 	mov	r16,zero
   2f944:	288a703a 	and	r5,r5,r2
   2f948:	2008953a 	slli	r4,r4,20
   2f94c:	00c00434 	movhi	r3,16
   2f950:	18ffffc4 	addi	r3,r3,-1
   2f954:	28c6703a 	and	r3,r5,r3
   2f958:	8005883a 	mov	r2,r16
   2f95c:	1906b03a 	or	r3,r3,r4
   2f960:	dfc00117 	ldw	ra,4(sp)
   2f964:	dc000017 	ldw	r16,0(sp)
   2f968:	dec00204 	addi	sp,sp,8
   2f96c:	f800283a 	ret
   2f970:	00c002c4 	movi	r3,11
   2f974:	188bc83a 	sub	r5,r3,r2
   2f978:	814ad83a 	srl	r5,r16,r5
   2f97c:	00c00434 	movhi	r3,16
   2f980:	18ffffc4 	addi	r3,r3,-1
   2f984:	81a0983a 	sll	r16,r16,r6
   2f988:	2101ffcc 	andi	r4,r4,2047
   2f98c:	28ca703a 	and	r5,r5,r3
   2f990:	003fed06 	br	2f948 <_gp+0xffff28b8>
   2f994:	0009883a 	mov	r4,zero
   2f998:	000b883a 	mov	r5,zero
   2f99c:	003fea06 	br	2f948 <_gp+0xffff28b8>

0002f9a0 <__clzsi2>:
   2f9a0:	00bfffd4 	movui	r2,65535
   2f9a4:	11000536 	bltu	r2,r4,2f9bc <__clzsi2+0x1c>
   2f9a8:	00803fc4 	movi	r2,255
   2f9ac:	11000f36 	bltu	r2,r4,2f9ec <__clzsi2+0x4c>
   2f9b0:	00800804 	movi	r2,32
   2f9b4:	0007883a 	mov	r3,zero
   2f9b8:	00000506 	br	2f9d0 <__clzsi2+0x30>
   2f9bc:	00804034 	movhi	r2,256
   2f9c0:	10bfffc4 	addi	r2,r2,-1
   2f9c4:	11000c2e 	bgeu	r2,r4,2f9f8 <__clzsi2+0x58>
   2f9c8:	00800204 	movi	r2,8
   2f9cc:	00c00604 	movi	r3,24
   2f9d0:	20c8d83a 	srl	r4,r4,r3
   2f9d4:	00c000f4 	movhi	r3,3
   2f9d8:	18ccf704 	addi	r3,r3,13276
   2f9dc:	1909883a 	add	r4,r3,r4
   2f9e0:	20c00003 	ldbu	r3,0(r4)
   2f9e4:	10c5c83a 	sub	r2,r2,r3
   2f9e8:	f800283a 	ret
   2f9ec:	00800604 	movi	r2,24
   2f9f0:	00c00204 	movi	r3,8
   2f9f4:	003ff606 	br	2f9d0 <_gp+0xffff2940>
   2f9f8:	00800404 	movi	r2,16
   2f9fc:	1007883a 	mov	r3,r2
   2fa00:	003ff306 	br	2f9d0 <_gp+0xffff2940>

0002fa04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fa04:	defffe04 	addi	sp,sp,-8
   2fa08:	dfc00115 	stw	ra,4(sp)
   2fa0c:	df000015 	stw	fp,0(sp)
   2fa10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fa14:	d0a01917 	ldw	r2,-32668(gp)
   2fa18:	10000326 	beq	r2,zero,2fa28 <alt_get_errno+0x24>
   2fa1c:	d0a01917 	ldw	r2,-32668(gp)
   2fa20:	103ee83a 	callr	r2
   2fa24:	00000106 	br	2fa2c <alt_get_errno+0x28>
   2fa28:	d0a71e04 	addi	r2,gp,-25480
}
   2fa2c:	e037883a 	mov	sp,fp
   2fa30:	dfc00117 	ldw	ra,4(sp)
   2fa34:	df000017 	ldw	fp,0(sp)
   2fa38:	dec00204 	addi	sp,sp,8
   2fa3c:	f800283a 	ret

0002fa40 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2fa40:	defffb04 	addi	sp,sp,-20
   2fa44:	dfc00415 	stw	ra,16(sp)
   2fa48:	df000315 	stw	fp,12(sp)
   2fa4c:	df000304 	addi	fp,sp,12
   2fa50:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2fa54:	e0bfff17 	ldw	r2,-4(fp)
   2fa58:	10000616 	blt	r2,zero,2fa74 <close+0x34>
   2fa5c:	e0bfff17 	ldw	r2,-4(fp)
   2fa60:	10c00324 	muli	r3,r2,12
   2fa64:	008000f4 	movhi	r2,3
   2fa68:	108f7b04 	addi	r2,r2,15852
   2fa6c:	1885883a 	add	r2,r3,r2
   2fa70:	00000106 	br	2fa78 <close+0x38>
   2fa74:	0005883a 	mov	r2,zero
   2fa78:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2fa7c:	e0bffd17 	ldw	r2,-12(fp)
   2fa80:	10001926 	beq	r2,zero,2fae8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2fa84:	e0bffd17 	ldw	r2,-12(fp)
   2fa88:	10800017 	ldw	r2,0(r2)
   2fa8c:	10800417 	ldw	r2,16(r2)
   2fa90:	10000626 	beq	r2,zero,2faac <close+0x6c>
   2fa94:	e0bffd17 	ldw	r2,-12(fp)
   2fa98:	10800017 	ldw	r2,0(r2)
   2fa9c:	10800417 	ldw	r2,16(r2)
   2faa0:	e13ffd17 	ldw	r4,-12(fp)
   2faa4:	103ee83a 	callr	r2
   2faa8:	00000106 	br	2fab0 <close+0x70>
   2faac:	0005883a 	mov	r2,zero
   2fab0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2fab4:	e13fff17 	ldw	r4,-4(fp)
   2fab8:	00306700 	call	30670 <alt_release_fd>
    if (rval < 0)
   2fabc:	e0bffe17 	ldw	r2,-8(fp)
   2fac0:	1000070e 	bge	r2,zero,2fae0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2fac4:	002fa040 	call	2fa04 <alt_get_errno>
   2fac8:	1007883a 	mov	r3,r2
   2facc:	e0bffe17 	ldw	r2,-8(fp)
   2fad0:	0085c83a 	sub	r2,zero,r2
   2fad4:	18800015 	stw	r2,0(r3)
      return -1;
   2fad8:	00bfffc4 	movi	r2,-1
   2fadc:	00000706 	br	2fafc <close+0xbc>
    }
    return 0;
   2fae0:	0005883a 	mov	r2,zero
   2fae4:	00000506 	br	2fafc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fae8:	002fa040 	call	2fa04 <alt_get_errno>
   2faec:	1007883a 	mov	r3,r2
   2faf0:	00801444 	movi	r2,81
   2faf4:	18800015 	stw	r2,0(r3)
    return -1;
   2faf8:	00bfffc4 	movi	r2,-1
  }
}
   2fafc:	e037883a 	mov	sp,fp
   2fb00:	dfc00117 	ldw	ra,4(sp)
   2fb04:	df000017 	ldw	fp,0(sp)
   2fb08:	dec00204 	addi	sp,sp,8
   2fb0c:	f800283a 	ret

0002fb10 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2fb10:	defffc04 	addi	sp,sp,-16
   2fb14:	df000315 	stw	fp,12(sp)
   2fb18:	df000304 	addi	fp,sp,12
   2fb1c:	e13ffd15 	stw	r4,-12(fp)
   2fb20:	e17ffe15 	stw	r5,-8(fp)
   2fb24:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2fb28:	e0bfff17 	ldw	r2,-4(fp)
}
   2fb2c:	e037883a 	mov	sp,fp
   2fb30:	df000017 	ldw	fp,0(sp)
   2fb34:	dec00104 	addi	sp,sp,4
   2fb38:	f800283a 	ret

0002fb3c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2fb3c:	defffd04 	addi	sp,sp,-12
   2fb40:	df000215 	stw	fp,8(sp)
   2fb44:	df000204 	addi	fp,sp,8
   2fb48:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2fb4c:	0001883a 	nop
   2fb50:	e0bfff17 	ldw	r2,-4(fp)
   2fb54:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2fb58:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2fb5c:	10000226 	beq	r2,zero,2fb68 <_exit+0x2c>
    ALT_SIM_FAIL();
   2fb60:	002af070 	cmpltui	zero,zero,43969
   2fb64:	00000106 	br	2fb6c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2fb68:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2fb6c:	003fff06 	br	2fb6c <_gp+0xffff2adc>

0002fb70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fb70:	defffe04 	addi	sp,sp,-8
   2fb74:	dfc00115 	stw	ra,4(sp)
   2fb78:	df000015 	stw	fp,0(sp)
   2fb7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fb80:	d0a01917 	ldw	r2,-32668(gp)
   2fb84:	10000326 	beq	r2,zero,2fb94 <alt_get_errno+0x24>
   2fb88:	d0a01917 	ldw	r2,-32668(gp)
   2fb8c:	103ee83a 	callr	r2
   2fb90:	00000106 	br	2fb98 <alt_get_errno+0x28>
   2fb94:	d0a71e04 	addi	r2,gp,-25480
}
   2fb98:	e037883a 	mov	sp,fp
   2fb9c:	dfc00117 	ldw	ra,4(sp)
   2fba0:	df000017 	ldw	fp,0(sp)
   2fba4:	dec00204 	addi	sp,sp,8
   2fba8:	f800283a 	ret

0002fbac <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
   2fbac:	defff704 	addi	sp,sp,-36
   2fbb0:	dfc00615 	stw	ra,24(sp)
   2fbb4:	df000515 	stw	fp,20(sp)
   2fbb8:	df000504 	addi	fp,sp,20
   2fbbc:	e13ffe15 	stw	r4,-8(fp)
   2fbc0:	e17fff15 	stw	r5,-4(fp)
   2fbc4:	e1800215 	stw	r6,8(fp)
   2fbc8:	e1c00315 	stw	r7,12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2fbcc:	e0bffe17 	ldw	r2,-8(fp)
   2fbd0:	10000616 	blt	r2,zero,2fbec <fcntl+0x40>
   2fbd4:	e0bffe17 	ldw	r2,-8(fp)
   2fbd8:	10c00324 	muli	r3,r2,12
   2fbdc:	008000f4 	movhi	r2,3
   2fbe0:	108f7b04 	addi	r2,r2,15852
   2fbe4:	1885883a 	add	r2,r3,r2
   2fbe8:	00000106 	br	2fbf0 <fcntl+0x44>
   2fbec:	0005883a 	mov	r2,zero
   2fbf0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2fbf4:	e0bffb17 	ldw	r2,-20(fp)
   2fbf8:	10002a26 	beq	r2,zero,2fca4 <fcntl+0xf8>
  {
    switch (cmd)
   2fbfc:	e0bfff17 	ldw	r2,-4(fp)
   2fc00:	10c000e0 	cmpeqi	r3,r2,3
   2fc04:	1800031e 	bne	r3,zero,2fc14 <fcntl+0x68>
   2fc08:	10800120 	cmpeqi	r2,r2,4
   2fc0c:	1000071e 	bne	r2,zero,2fc2c <fcntl+0x80>
   2fc10:	00001e06 	br	2fc8c <fcntl+0xe0>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
   2fc14:	e0bffb17 	ldw	r2,-20(fp)
   2fc18:	10c00217 	ldw	r3,8(r2)
   2fc1c:	00900034 	movhi	r2,16384
   2fc20:	10bfffc4 	addi	r2,r2,-1
   2fc24:	1884703a 	and	r2,r3,r2
   2fc28:	00002306 	br	2fcb8 <fcntl+0x10c>
    case F_SETFL:
      va_start(argp, cmd);
   2fc2c:	e0800204 	addi	r2,fp,8
   2fc30:	e0bffd15 	stw	r2,-12(fp)
      flags = va_arg(argp, long);
   2fc34:	e0bffd17 	ldw	r2,-12(fp)
   2fc38:	10c00104 	addi	r3,r2,4
   2fc3c:	e0fffd15 	stw	r3,-12(fp)
   2fc40:	10800017 	ldw	r2,0(r2)
   2fc44:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
   2fc48:	e0bffb17 	ldw	r2,-20(fp)
   2fc4c:	10c00217 	ldw	r3,8(r2)
   2fc50:	00affdc4 	movi	r2,-16393
   2fc54:	1886703a 	and	r3,r3,r2
   2fc58:	e0bffb17 	ldw	r2,-20(fp)
   2fc5c:	10c00215 	stw	r3,8(r2)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
   2fc60:	e0bffb17 	ldw	r2,-20(fp)
   2fc64:	10800217 	ldw	r2,8(r2)
   2fc68:	1007883a 	mov	r3,r2
   2fc6c:	e0bffc17 	ldw	r2,-16(fp)
   2fc70:	1090020c 	andi	r2,r2,16392
   2fc74:	1884b03a 	or	r2,r3,r2
   2fc78:	1007883a 	mov	r3,r2
   2fc7c:	e0bffb17 	ldw	r2,-20(fp)
   2fc80:	10c00215 	stw	r3,8(r2)
      va_end(argp);
      return 0;
   2fc84:	0005883a 	mov	r2,zero
   2fc88:	00000b06 	br	2fcb8 <fcntl+0x10c>
    default:
      ALT_ERRNO = EINVAL;
   2fc8c:	002fb700 	call	2fb70 <alt_get_errno>
   2fc90:	1007883a 	mov	r3,r2
   2fc94:	00800584 	movi	r2,22
   2fc98:	18800015 	stw	r2,0(r3)
      return -1;
   2fc9c:	00bfffc4 	movi	r2,-1
   2fca0:	00000506 	br	2fcb8 <fcntl+0x10c>
    }
  }

  ALT_ERRNO = EBADFD;
   2fca4:	002fb700 	call	2fb70 <alt_get_errno>
   2fca8:	1007883a 	mov	r3,r2
   2fcac:	00801444 	movi	r2,81
   2fcb0:	18800015 	stw	r2,0(r3)
  return -1;
   2fcb4:	00bfffc4 	movi	r2,-1
}
   2fcb8:	e037883a 	mov	sp,fp
   2fcbc:	dfc00117 	ldw	ra,4(sp)
   2fcc0:	df000017 	ldw	fp,0(sp)
   2fcc4:	dec00404 	addi	sp,sp,16
   2fcc8:	f800283a 	ret

0002fccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fccc:	defffe04 	addi	sp,sp,-8
   2fcd0:	dfc00115 	stw	ra,4(sp)
   2fcd4:	df000015 	stw	fp,0(sp)
   2fcd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fcdc:	d0a01917 	ldw	r2,-32668(gp)
   2fce0:	10000326 	beq	r2,zero,2fcf0 <alt_get_errno+0x24>
   2fce4:	d0a01917 	ldw	r2,-32668(gp)
   2fce8:	103ee83a 	callr	r2
   2fcec:	00000106 	br	2fcf4 <alt_get_errno+0x28>
   2fcf0:	d0a71e04 	addi	r2,gp,-25480
}
   2fcf4:	e037883a 	mov	sp,fp
   2fcf8:	dfc00117 	ldw	ra,4(sp)
   2fcfc:	df000017 	ldw	fp,0(sp)
   2fd00:	dec00204 	addi	sp,sp,8
   2fd04:	f800283a 	ret

0002fd08 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2fd08:	defffb04 	addi	sp,sp,-20
   2fd0c:	dfc00415 	stw	ra,16(sp)
   2fd10:	df000315 	stw	fp,12(sp)
   2fd14:	df000304 	addi	fp,sp,12
   2fd18:	e13ffe15 	stw	r4,-8(fp)
   2fd1c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2fd20:	e0bffe17 	ldw	r2,-8(fp)
   2fd24:	10000616 	blt	r2,zero,2fd40 <fstat+0x38>
   2fd28:	e0bffe17 	ldw	r2,-8(fp)
   2fd2c:	10c00324 	muli	r3,r2,12
   2fd30:	008000f4 	movhi	r2,3
   2fd34:	108f7b04 	addi	r2,r2,15852
   2fd38:	1885883a 	add	r2,r3,r2
   2fd3c:	00000106 	br	2fd44 <fstat+0x3c>
   2fd40:	0005883a 	mov	r2,zero
   2fd44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2fd48:	e0bffd17 	ldw	r2,-12(fp)
   2fd4c:	10001026 	beq	r2,zero,2fd90 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2fd50:	e0bffd17 	ldw	r2,-12(fp)
   2fd54:	10800017 	ldw	r2,0(r2)
   2fd58:	10800817 	ldw	r2,32(r2)
   2fd5c:	10000726 	beq	r2,zero,2fd7c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2fd60:	e0bffd17 	ldw	r2,-12(fp)
   2fd64:	10800017 	ldw	r2,0(r2)
   2fd68:	10800817 	ldw	r2,32(r2)
   2fd6c:	e17fff17 	ldw	r5,-4(fp)
   2fd70:	e13ffd17 	ldw	r4,-12(fp)
   2fd74:	103ee83a 	callr	r2
   2fd78:	00000a06 	br	2fda4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2fd7c:	e0bfff17 	ldw	r2,-4(fp)
   2fd80:	00c80004 	movi	r3,8192
   2fd84:	10c00115 	stw	r3,4(r2)
      return 0;
   2fd88:	0005883a 	mov	r2,zero
   2fd8c:	00000506 	br	2fda4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fd90:	002fccc0 	call	2fccc <alt_get_errno>
   2fd94:	1007883a 	mov	r3,r2
   2fd98:	00801444 	movi	r2,81
   2fd9c:	18800015 	stw	r2,0(r3)
    return -1;
   2fda0:	00bfffc4 	movi	r2,-1
  }
}
   2fda4:	e037883a 	mov	sp,fp
   2fda8:	dfc00117 	ldw	ra,4(sp)
   2fdac:	df000017 	ldw	fp,0(sp)
   2fdb0:	dec00204 	addi	sp,sp,8
   2fdb4:	f800283a 	ret

0002fdb8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   2fdb8:	deffff04 	addi	sp,sp,-4
   2fdbc:	df000015 	stw	fp,0(sp)
   2fdc0:	d839883a 	mov	fp,sp
  return 0;
   2fdc4:	0005883a 	mov	r2,zero
}
   2fdc8:	e037883a 	mov	sp,fp
   2fdcc:	df000017 	ldw	fp,0(sp)
   2fdd0:	dec00104 	addi	sp,sp,4
   2fdd4:	f800283a 	ret

0002fdd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2fdd8:	defffe04 	addi	sp,sp,-8
   2fddc:	dfc00115 	stw	ra,4(sp)
   2fde0:	df000015 	stw	fp,0(sp)
   2fde4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fde8:	d0a01917 	ldw	r2,-32668(gp)
   2fdec:	10000326 	beq	r2,zero,2fdfc <alt_get_errno+0x24>
   2fdf0:	d0a01917 	ldw	r2,-32668(gp)
   2fdf4:	103ee83a 	callr	r2
   2fdf8:	00000106 	br	2fe00 <alt_get_errno+0x28>
   2fdfc:	d0a71e04 	addi	r2,gp,-25480
}
   2fe00:	e037883a 	mov	sp,fp
   2fe04:	dfc00117 	ldw	ra,4(sp)
   2fe08:	df000017 	ldw	fp,0(sp)
   2fe0c:	dec00204 	addi	sp,sp,8
   2fe10:	f800283a 	ret

0002fe14 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2fe14:	deffed04 	addi	sp,sp,-76
   2fe18:	dfc01215 	stw	ra,72(sp)
   2fe1c:	df001115 	stw	fp,68(sp)
   2fe20:	df001104 	addi	fp,sp,68
   2fe24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2fe28:	e0bfff17 	ldw	r2,-4(fp)
   2fe2c:	10000616 	blt	r2,zero,2fe48 <isatty+0x34>
   2fe30:	e0bfff17 	ldw	r2,-4(fp)
   2fe34:	10c00324 	muli	r3,r2,12
   2fe38:	008000f4 	movhi	r2,3
   2fe3c:	108f7b04 	addi	r2,r2,15852
   2fe40:	1885883a 	add	r2,r3,r2
   2fe44:	00000106 	br	2fe4c <isatty+0x38>
   2fe48:	0005883a 	mov	r2,zero
   2fe4c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2fe50:	e0bfef17 	ldw	r2,-68(fp)
   2fe54:	10000e26 	beq	r2,zero,2fe90 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2fe58:	e0bfef17 	ldw	r2,-68(fp)
   2fe5c:	10800017 	ldw	r2,0(r2)
   2fe60:	10800817 	ldw	r2,32(r2)
   2fe64:	1000021e 	bne	r2,zero,2fe70 <isatty+0x5c>
    {
      return 1;
   2fe68:	00800044 	movi	r2,1
   2fe6c:	00000d06 	br	2fea4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2fe70:	e0bff004 	addi	r2,fp,-64
   2fe74:	100b883a 	mov	r5,r2
   2fe78:	e13fff17 	ldw	r4,-4(fp)
   2fe7c:	002fd080 	call	2fd08 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2fe80:	e0bff117 	ldw	r2,-60(fp)
   2fe84:	10880020 	cmpeqi	r2,r2,8192
   2fe88:	10803fcc 	andi	r2,r2,255
   2fe8c:	00000506 	br	2fea4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2fe90:	002fdd80 	call	2fdd8 <alt_get_errno>
   2fe94:	1007883a 	mov	r3,r2
   2fe98:	00801444 	movi	r2,81
   2fe9c:	18800015 	stw	r2,0(r3)
    return 0;
   2fea0:	0005883a 	mov	r2,zero
  }
}
   2fea4:	e037883a 	mov	sp,fp
   2fea8:	dfc00117 	ldw	ra,4(sp)
   2feac:	df000017 	ldw	fp,0(sp)
   2feb0:	dec00204 	addi	sp,sp,8
   2feb4:	f800283a 	ret

0002feb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2feb8:	defffe04 	addi	sp,sp,-8
   2febc:	dfc00115 	stw	ra,4(sp)
   2fec0:	df000015 	stw	fp,0(sp)
   2fec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2fec8:	d0a01917 	ldw	r2,-32668(gp)
   2fecc:	10000326 	beq	r2,zero,2fedc <alt_get_errno+0x24>
   2fed0:	d0a01917 	ldw	r2,-32668(gp)
   2fed4:	103ee83a 	callr	r2
   2fed8:	00000106 	br	2fee0 <alt_get_errno+0x28>
   2fedc:	d0a71e04 	addi	r2,gp,-25480
}
   2fee0:	e037883a 	mov	sp,fp
   2fee4:	dfc00117 	ldw	ra,4(sp)
   2fee8:	df000017 	ldw	fp,0(sp)
   2feec:	dec00204 	addi	sp,sp,8
   2fef0:	f800283a 	ret

0002fef4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   2fef4:	defffb04 	addi	sp,sp,-20
   2fef8:	dfc00415 	stw	ra,16(sp)
   2fefc:	df000315 	stw	fp,12(sp)
   2ff00:	df000304 	addi	fp,sp,12
   2ff04:	e13ffe15 	stw	r4,-8(fp)
   2ff08:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   2ff0c:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   2ff10:	e0bffe17 	ldw	r2,-8(fp)
   2ff14:	00802f16 	blt	zero,r2,2ffd4 <kill+0xe0>
  {
    switch (sig)
   2ff18:	e0bfff17 	ldw	r2,-4(fp)
   2ff1c:	10800828 	cmpgeui	r2,r2,32
   2ff20:	1000291e 	bne	r2,zero,2ffc8 <kill+0xd4>
   2ff24:	e0bfff17 	ldw	r2,-4(fp)
   2ff28:	100690ba 	slli	r3,r2,2
   2ff2c:	008000f4 	movhi	r2,3
   2ff30:	10bfd004 	addi	r2,r2,-192
   2ff34:	1885883a 	add	r2,r3,r2
   2ff38:	10800017 	ldw	r2,0(r2)
   2ff3c:	1000683a 	jmp	r2
   2ff40:	0002ffe8 	cmpgeui	zero,zero,3071
   2ff44:	0002ffc8 	cmpgei	zero,zero,3071
   2ff48:	0002ffc8 	cmpgei	zero,zero,3071
   2ff4c:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff50:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff54:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff58:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff5c:	0002ffc8 	cmpgei	zero,zero,3071
   2ff60:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff64:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff68:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff6c:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff70:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff74:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff78:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff7c:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ff80:	0002ffe8 	cmpgeui	zero,zero,3071
   2ff84:	0002ffc8 	cmpgei	zero,zero,3071
   2ff88:	0002ffc8 	cmpgei	zero,zero,3071
   2ff8c:	0002ffc8 	cmpgei	zero,zero,3071
   2ff90:	0002ffe8 	cmpgeui	zero,zero,3071
   2ff94:	0002ffc8 	cmpgei	zero,zero,3071
   2ff98:	0002ffc8 	cmpgei	zero,zero,3071
   2ff9c:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ffa0:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ffa4:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ffa8:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ffac:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ffb0:	0002ffc8 	cmpgei	zero,zero,3071
   2ffb4:	0002ffc8 	cmpgei	zero,zero,3071
   2ffb8:	0002ffc0 	call	2ffc <__reset-0x1d004>
   2ffbc:	0002ffc0 	call	2ffc <__reset-0x1d004>
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   2ffc0:	0009883a 	mov	r4,zero
   2ffc4:	002fb3c0 	call	2fb3c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   2ffc8:	00800584 	movi	r2,22
   2ffcc:	e0bffd15 	stw	r2,-12(fp)
   2ffd0:	00000606 	br	2ffec <kill+0xf8>
    }
  }

  else if (pid > 0)
   2ffd4:	e0bffe17 	ldw	r2,-8(fp)
   2ffd8:	0080040e 	bge	zero,r2,2ffec <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   2ffdc:	008000c4 	movi	r2,3
   2ffe0:	e0bffd15 	stw	r2,-12(fp)
   2ffe4:	00000106 	br	2ffec <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   2ffe8:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   2ffec:	e0bffd17 	ldw	r2,-12(fp)
   2fff0:	10000626 	beq	r2,zero,3000c <kill+0x118>
  {
    ALT_ERRNO = status;
   2fff4:	002feb80 	call	2feb8 <alt_get_errno>
   2fff8:	1007883a 	mov	r3,r2
   2fffc:	e0bffd17 	ldw	r2,-12(fp)
   30000:	18800015 	stw	r2,0(r3)
    return -1;
   30004:	00bfffc4 	movi	r2,-1
   30008:	00000106 	br	30010 <kill+0x11c>
  }

  return 0;
   3000c:	0005883a 	mov	r2,zero
}
   30010:	e037883a 	mov	sp,fp
   30014:	dfc00117 	ldw	ra,4(sp)
   30018:	df000017 	ldw	fp,0(sp)
   3001c:	dec00204 	addi	sp,sp,8
   30020:	f800283a 	ret

00030024 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   30024:	defffc04 	addi	sp,sp,-16
   30028:	df000315 	stw	fp,12(sp)
   3002c:	df000304 	addi	fp,sp,12
   30030:	e13ffd15 	stw	r4,-12(fp)
   30034:	e17ffe15 	stw	r5,-8(fp)
   30038:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   3003c:	e0fffe17 	ldw	r3,-8(fp)
   30040:	e0bffd17 	ldw	r2,-12(fp)
   30044:	18800c26 	beq	r3,r2,30078 <alt_load_section+0x54>
  {
    while( to != end )
   30048:	00000806 	br	3006c <alt_load_section+0x48>
    {
      *to++ = *from++;
   3004c:	e0bffe17 	ldw	r2,-8(fp)
   30050:	10c00104 	addi	r3,r2,4
   30054:	e0fffe15 	stw	r3,-8(fp)
   30058:	e0fffd17 	ldw	r3,-12(fp)
   3005c:	19000104 	addi	r4,r3,4
   30060:	e13ffd15 	stw	r4,-12(fp)
   30064:	18c00017 	ldw	r3,0(r3)
   30068:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   3006c:	e0fffe17 	ldw	r3,-8(fp)
   30070:	e0bfff17 	ldw	r2,-4(fp)
   30074:	18bff51e 	bne	r3,r2,3004c <_gp+0xffff2fbc>
    {
      *to++ = *from++;
    }
  }
}
   30078:	0001883a 	nop
   3007c:	e037883a 	mov	sp,fp
   30080:	df000017 	ldw	fp,0(sp)
   30084:	dec00104 	addi	sp,sp,4
   30088:	f800283a 	ret

0003008c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   3008c:	defffe04 	addi	sp,sp,-8
   30090:	dfc00115 	stw	ra,4(sp)
   30094:	df000015 	stw	fp,0(sp)
   30098:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   3009c:	018000f4 	movhi	r6,3
   300a0:	31944204 	addi	r6,r6,20744
   300a4:	014000f4 	movhi	r5,3
   300a8:	294d4804 	addi	r5,r5,13600
   300ac:	010000f4 	movhi	r4,3
   300b0:	21144204 	addi	r4,r4,20744
   300b4:	00300240 	call	30024 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   300b8:	018000b4 	movhi	r6,2
   300bc:	31809104 	addi	r6,r6,580
   300c0:	014000b4 	movhi	r5,2
   300c4:	29400804 	addi	r5,r5,32
   300c8:	010000b4 	movhi	r4,2
   300cc:	21000804 	addi	r4,r4,32
   300d0:	00300240 	call	30024 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   300d4:	018000f4 	movhi	r6,3
   300d8:	318d4804 	addi	r6,r6,13600
   300dc:	014000f4 	movhi	r5,3
   300e0:	294bd704 	addi	r5,r5,12124
   300e4:	010000f4 	movhi	r4,3
   300e8:	210bd704 	addi	r4,r4,12124
   300ec:	00300240 	call	30024 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   300f0:	00322300 	call	32230 <alt_dcache_flush_all>
  alt_icache_flush_all();
   300f4:	00326540 	call	32654 <alt_icache_flush_all>
}
   300f8:	0001883a 	nop
   300fc:	e037883a 	mov	sp,fp
   30100:	dfc00117 	ldw	ra,4(sp)
   30104:	df000017 	ldw	fp,0(sp)
   30108:	dec00204 	addi	sp,sp,8
   3010c:	f800283a 	ret

00030110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30110:	defffe04 	addi	sp,sp,-8
   30114:	dfc00115 	stw	ra,4(sp)
   30118:	df000015 	stw	fp,0(sp)
   3011c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30120:	d0a01917 	ldw	r2,-32668(gp)
   30124:	10000326 	beq	r2,zero,30134 <alt_get_errno+0x24>
   30128:	d0a01917 	ldw	r2,-32668(gp)
   3012c:	103ee83a 	callr	r2
   30130:	00000106 	br	30138 <alt_get_errno+0x28>
   30134:	d0a71e04 	addi	r2,gp,-25480
}
   30138:	e037883a 	mov	sp,fp
   3013c:	dfc00117 	ldw	ra,4(sp)
   30140:	df000017 	ldw	fp,0(sp)
   30144:	dec00204 	addi	sp,sp,8
   30148:	f800283a 	ret

0003014c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   3014c:	defff904 	addi	sp,sp,-28
   30150:	dfc00615 	stw	ra,24(sp)
   30154:	df000515 	stw	fp,20(sp)
   30158:	df000504 	addi	fp,sp,20
   3015c:	e13ffd15 	stw	r4,-12(fp)
   30160:	e17ffe15 	stw	r5,-8(fp)
   30164:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   30168:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   3016c:	e0bffd17 	ldw	r2,-12(fp)
   30170:	10000616 	blt	r2,zero,3018c <lseek+0x40>
   30174:	e0bffd17 	ldw	r2,-12(fp)
   30178:	10c00324 	muli	r3,r2,12
   3017c:	008000f4 	movhi	r2,3
   30180:	108f7b04 	addi	r2,r2,15852
   30184:	1885883a 	add	r2,r3,r2
   30188:	00000106 	br	30190 <lseek+0x44>
   3018c:	0005883a 	mov	r2,zero
   30190:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   30194:	e0bffc17 	ldw	r2,-16(fp)
   30198:	10001026 	beq	r2,zero,301dc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   3019c:	e0bffc17 	ldw	r2,-16(fp)
   301a0:	10800017 	ldw	r2,0(r2)
   301a4:	10800717 	ldw	r2,28(r2)
   301a8:	10000926 	beq	r2,zero,301d0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   301ac:	e0bffc17 	ldw	r2,-16(fp)
   301b0:	10800017 	ldw	r2,0(r2)
   301b4:	10800717 	ldw	r2,28(r2)
   301b8:	e1bfff17 	ldw	r6,-4(fp)
   301bc:	e17ffe17 	ldw	r5,-8(fp)
   301c0:	e13ffc17 	ldw	r4,-16(fp)
   301c4:	103ee83a 	callr	r2
   301c8:	e0bffb15 	stw	r2,-20(fp)
   301cc:	00000506 	br	301e4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   301d0:	00bfde84 	movi	r2,-134
   301d4:	e0bffb15 	stw	r2,-20(fp)
   301d8:	00000206 	br	301e4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   301dc:	00bfebc4 	movi	r2,-81
   301e0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   301e4:	e0bffb17 	ldw	r2,-20(fp)
   301e8:	1000070e 	bge	r2,zero,30208 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   301ec:	00301100 	call	30110 <alt_get_errno>
   301f0:	1007883a 	mov	r3,r2
   301f4:	e0bffb17 	ldw	r2,-20(fp)
   301f8:	0085c83a 	sub	r2,zero,r2
   301fc:	18800015 	stw	r2,0(r3)
    rc = -1;
   30200:	00bfffc4 	movi	r2,-1
   30204:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   30208:	e0bffb17 	ldw	r2,-20(fp)
}
   3020c:	e037883a 	mov	sp,fp
   30210:	dfc00117 	ldw	ra,4(sp)
   30214:	df000017 	ldw	fp,0(sp)
   30218:	dec00204 	addi	sp,sp,8
   3021c:	f800283a 	ret

00030220 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   30220:	defffd04 	addi	sp,sp,-12
   30224:	dfc00215 	stw	ra,8(sp)
   30228:	df000115 	stw	fp,4(sp)
   3022c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   30230:	0009883a 	mov	r4,zero
   30234:	0030ac00 	call	30ac0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   30238:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   3023c:	0030af80 	call	30af8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   30240:	018000f4 	movhi	r6,3
   30244:	318d3a04 	addi	r6,r6,13544
   30248:	014000f4 	movhi	r5,3
   3024c:	294d3a04 	addi	r5,r5,13544
   30250:	010000f4 	movhi	r4,3
   30254:	210d3a04 	addi	r4,r4,13544
   30258:	00329ec0 	call	329ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   3025c:	00323580 	call	32358 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   30260:	010000f4 	movhi	r4,3
   30264:	2108ee04 	addi	r4,r4,9144
   30268:	0032bb80 	call	32bb8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   3026c:	d0a72217 	ldw	r2,-25464(gp)
   30270:	d0e72317 	ldw	r3,-25460(gp)
   30274:	d1272417 	ldw	r4,-25456(gp)
   30278:	200d883a 	mov	r6,r4
   3027c:	180b883a 	mov	r5,r3
   30280:	1009883a 	mov	r4,r2
   30284:	002086c0 	call	2086c <main>
   30288:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   3028c:	01000044 	movi	r4,1
   30290:	002fa400 	call	2fa40 <close>
  exit (result);
   30294:	e13fff17 	ldw	r4,-4(fp)
   30298:	0032bcc0 	call	32bcc <exit>

0003029c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   3029c:	defffe04 	addi	sp,sp,-8
   302a0:	df000115 	stw	fp,4(sp)
   302a4:	df000104 	addi	fp,sp,4
   302a8:	e13fff15 	stw	r4,-4(fp)
}
   302ac:	0001883a 	nop
   302b0:	e037883a 	mov	sp,fp
   302b4:	df000017 	ldw	fp,0(sp)
   302b8:	dec00104 	addi	sp,sp,4
   302bc:	f800283a 	ret

000302c0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   302c0:	defffe04 	addi	sp,sp,-8
   302c4:	df000115 	stw	fp,4(sp)
   302c8:	df000104 	addi	fp,sp,4
   302cc:	e13fff15 	stw	r4,-4(fp)
}
   302d0:	0001883a 	nop
   302d4:	e037883a 	mov	sp,fp
   302d8:	df000017 	ldw	fp,0(sp)
   302dc:	dec00104 	addi	sp,sp,4
   302e0:	f800283a 	ret

000302e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   302e4:	defffe04 	addi	sp,sp,-8
   302e8:	dfc00115 	stw	ra,4(sp)
   302ec:	df000015 	stw	fp,0(sp)
   302f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   302f4:	d0a01917 	ldw	r2,-32668(gp)
   302f8:	10000326 	beq	r2,zero,30308 <alt_get_errno+0x24>
   302fc:	d0a01917 	ldw	r2,-32668(gp)
   30300:	103ee83a 	callr	r2
   30304:	00000106 	br	3030c <alt_get_errno+0x28>
   30308:	d0a71e04 	addi	r2,gp,-25480
}
   3030c:	e037883a 	mov	sp,fp
   30310:	dfc00117 	ldw	ra,4(sp)
   30314:	df000017 	ldw	fp,0(sp)
   30318:	dec00204 	addi	sp,sp,8
   3031c:	f800283a 	ret

00030320 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   30320:	defffd04 	addi	sp,sp,-12
   30324:	df000215 	stw	fp,8(sp)
   30328:	df000204 	addi	fp,sp,8
   3032c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   30330:	e0bfff17 	ldw	r2,-4(fp)
   30334:	10800217 	ldw	r2,8(r2)
   30338:	10d00034 	orhi	r3,r2,16384
   3033c:	e0bfff17 	ldw	r2,-4(fp)
   30340:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   30344:	e03ffe15 	stw	zero,-8(fp)
   30348:	00001d06 	br	303c0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3034c:	008000f4 	movhi	r2,3
   30350:	108f7b04 	addi	r2,r2,15852
   30354:	e0fffe17 	ldw	r3,-8(fp)
   30358:	18c00324 	muli	r3,r3,12
   3035c:	10c5883a 	add	r2,r2,r3
   30360:	10c00017 	ldw	r3,0(r2)
   30364:	e0bfff17 	ldw	r2,-4(fp)
   30368:	10800017 	ldw	r2,0(r2)
   3036c:	1880111e 	bne	r3,r2,303b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   30370:	008000f4 	movhi	r2,3
   30374:	108f7b04 	addi	r2,r2,15852
   30378:	e0fffe17 	ldw	r3,-8(fp)
   3037c:	18c00324 	muli	r3,r3,12
   30380:	10c5883a 	add	r2,r2,r3
   30384:	10800204 	addi	r2,r2,8
   30388:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   3038c:	1000090e 	bge	r2,zero,303b4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   30390:	e0bffe17 	ldw	r2,-8(fp)
   30394:	10c00324 	muli	r3,r2,12
   30398:	008000f4 	movhi	r2,3
   3039c:	108f7b04 	addi	r2,r2,15852
   303a0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   303a4:	e0bfff17 	ldw	r2,-4(fp)
   303a8:	18800226 	beq	r3,r2,303b4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   303ac:	00bffcc4 	movi	r2,-13
   303b0:	00000806 	br	303d4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   303b4:	e0bffe17 	ldw	r2,-8(fp)
   303b8:	10800044 	addi	r2,r2,1
   303bc:	e0bffe15 	stw	r2,-8(fp)
   303c0:	d0a01817 	ldw	r2,-32672(gp)
   303c4:	1007883a 	mov	r3,r2
   303c8:	e0bffe17 	ldw	r2,-8(fp)
   303cc:	18bfdf2e 	bgeu	r3,r2,3034c <_gp+0xffff32bc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   303d0:	0005883a 	mov	r2,zero
}
   303d4:	e037883a 	mov	sp,fp
   303d8:	df000017 	ldw	fp,0(sp)
   303dc:	dec00104 	addi	sp,sp,4
   303e0:	f800283a 	ret

000303e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   303e4:	defff604 	addi	sp,sp,-40
   303e8:	dfc00915 	stw	ra,36(sp)
   303ec:	df000815 	stw	fp,32(sp)
   303f0:	df000804 	addi	fp,sp,32
   303f4:	e13ffd15 	stw	r4,-12(fp)
   303f8:	e17ffe15 	stw	r5,-8(fp)
   303fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   30400:	00bfffc4 	movi	r2,-1
   30404:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   30408:	00bffb44 	movi	r2,-19
   3040c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   30410:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   30414:	d1601604 	addi	r5,gp,-32680
   30418:	e13ffd17 	ldw	r4,-12(fp)
   3041c:	00324180 	call	32418 <alt_find_dev>
   30420:	e0bff815 	stw	r2,-32(fp)
   30424:	e0bff817 	ldw	r2,-32(fp)
   30428:	1000051e 	bne	r2,zero,30440 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   3042c:	e13ffd17 	ldw	r4,-12(fp)
   30430:	00324a80 	call	324a8 <alt_find_file>
   30434:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   30438:	00800044 	movi	r2,1
   3043c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   30440:	e0bff817 	ldw	r2,-32(fp)
   30444:	10002926 	beq	r2,zero,304ec <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   30448:	e13ff817 	ldw	r4,-32(fp)
   3044c:	00325b00 	call	325b0 <alt_get_fd>
   30450:	e0bff915 	stw	r2,-28(fp)
   30454:	e0bff917 	ldw	r2,-28(fp)
   30458:	1000030e 	bge	r2,zero,30468 <open+0x84>
    {
      status = index;
   3045c:	e0bff917 	ldw	r2,-28(fp)
   30460:	e0bffa15 	stw	r2,-24(fp)
   30464:	00002306 	br	304f4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   30468:	e0bff917 	ldw	r2,-28(fp)
   3046c:	10c00324 	muli	r3,r2,12
   30470:	008000f4 	movhi	r2,3
   30474:	108f7b04 	addi	r2,r2,15852
   30478:	1885883a 	add	r2,r3,r2
   3047c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   30480:	e0fffe17 	ldw	r3,-8(fp)
   30484:	00900034 	movhi	r2,16384
   30488:	10bfffc4 	addi	r2,r2,-1
   3048c:	1886703a 	and	r3,r3,r2
   30490:	e0bffc17 	ldw	r2,-16(fp)
   30494:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   30498:	e0bffb17 	ldw	r2,-20(fp)
   3049c:	1000051e 	bne	r2,zero,304b4 <open+0xd0>
   304a0:	e13ffc17 	ldw	r4,-16(fp)
   304a4:	00303200 	call	30320 <alt_file_locked>
   304a8:	e0bffa15 	stw	r2,-24(fp)
   304ac:	e0bffa17 	ldw	r2,-24(fp)
   304b0:	10001016 	blt	r2,zero,304f4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   304b4:	e0bff817 	ldw	r2,-32(fp)
   304b8:	10800317 	ldw	r2,12(r2)
   304bc:	10000826 	beq	r2,zero,304e0 <open+0xfc>
   304c0:	e0bff817 	ldw	r2,-32(fp)
   304c4:	10800317 	ldw	r2,12(r2)
   304c8:	e1ffff17 	ldw	r7,-4(fp)
   304cc:	e1bffe17 	ldw	r6,-8(fp)
   304d0:	e17ffd17 	ldw	r5,-12(fp)
   304d4:	e13ffc17 	ldw	r4,-16(fp)
   304d8:	103ee83a 	callr	r2
   304dc:	00000106 	br	304e4 <open+0x100>
   304e0:	0005883a 	mov	r2,zero
   304e4:	e0bffa15 	stw	r2,-24(fp)
   304e8:	00000206 	br	304f4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   304ec:	00bffb44 	movi	r2,-19
   304f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   304f4:	e0bffa17 	ldw	r2,-24(fp)
   304f8:	1000090e 	bge	r2,zero,30520 <open+0x13c>
  {
    alt_release_fd (index);  
   304fc:	e13ff917 	ldw	r4,-28(fp)
   30500:	00306700 	call	30670 <alt_release_fd>
    ALT_ERRNO = -status;
   30504:	00302e40 	call	302e4 <alt_get_errno>
   30508:	1007883a 	mov	r3,r2
   3050c:	e0bffa17 	ldw	r2,-24(fp)
   30510:	0085c83a 	sub	r2,zero,r2
   30514:	18800015 	stw	r2,0(r3)
    return -1;
   30518:	00bfffc4 	movi	r2,-1
   3051c:	00000106 	br	30524 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   30520:	e0bff917 	ldw	r2,-28(fp)
}
   30524:	e037883a 	mov	sp,fp
   30528:	dfc00117 	ldw	ra,4(sp)
   3052c:	df000017 	ldw	fp,0(sp)
   30530:	dec00204 	addi	sp,sp,8
   30534:	f800283a 	ret

00030538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30538:	defffe04 	addi	sp,sp,-8
   3053c:	dfc00115 	stw	ra,4(sp)
   30540:	df000015 	stw	fp,0(sp)
   30544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30548:	d0a01917 	ldw	r2,-32668(gp)
   3054c:	10000326 	beq	r2,zero,3055c <alt_get_errno+0x24>
   30550:	d0a01917 	ldw	r2,-32668(gp)
   30554:	103ee83a 	callr	r2
   30558:	00000106 	br	30560 <alt_get_errno+0x28>
   3055c:	d0a71e04 	addi	r2,gp,-25480
}
   30560:	e037883a 	mov	sp,fp
   30564:	dfc00117 	ldw	ra,4(sp)
   30568:	df000017 	ldw	fp,0(sp)
   3056c:	dec00204 	addi	sp,sp,8
   30570:	f800283a 	ret

00030574 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   30574:	defff904 	addi	sp,sp,-28
   30578:	dfc00615 	stw	ra,24(sp)
   3057c:	df000515 	stw	fp,20(sp)
   30580:	df000504 	addi	fp,sp,20
   30584:	e13ffd15 	stw	r4,-12(fp)
   30588:	e17ffe15 	stw	r5,-8(fp)
   3058c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   30590:	e0bffd17 	ldw	r2,-12(fp)
   30594:	10000616 	blt	r2,zero,305b0 <read+0x3c>
   30598:	e0bffd17 	ldw	r2,-12(fp)
   3059c:	10c00324 	muli	r3,r2,12
   305a0:	008000f4 	movhi	r2,3
   305a4:	108f7b04 	addi	r2,r2,15852
   305a8:	1885883a 	add	r2,r3,r2
   305ac:	00000106 	br	305b4 <read+0x40>
   305b0:	0005883a 	mov	r2,zero
   305b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   305b8:	e0bffb17 	ldw	r2,-20(fp)
   305bc:	10002226 	beq	r2,zero,30648 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   305c0:	e0bffb17 	ldw	r2,-20(fp)
   305c4:	10800217 	ldw	r2,8(r2)
   305c8:	108000cc 	andi	r2,r2,3
   305cc:	10800060 	cmpeqi	r2,r2,1
   305d0:	1000181e 	bne	r2,zero,30634 <read+0xc0>
        (fd->dev->read))
   305d4:	e0bffb17 	ldw	r2,-20(fp)
   305d8:	10800017 	ldw	r2,0(r2)
   305dc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   305e0:	10001426 	beq	r2,zero,30634 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   305e4:	e0bffb17 	ldw	r2,-20(fp)
   305e8:	10800017 	ldw	r2,0(r2)
   305ec:	10800517 	ldw	r2,20(r2)
   305f0:	e0ffff17 	ldw	r3,-4(fp)
   305f4:	180d883a 	mov	r6,r3
   305f8:	e17ffe17 	ldw	r5,-8(fp)
   305fc:	e13ffb17 	ldw	r4,-20(fp)
   30600:	103ee83a 	callr	r2
   30604:	e0bffc15 	stw	r2,-16(fp)
   30608:	e0bffc17 	ldw	r2,-16(fp)
   3060c:	1000070e 	bge	r2,zero,3062c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   30610:	00305380 	call	30538 <alt_get_errno>
   30614:	1007883a 	mov	r3,r2
   30618:	e0bffc17 	ldw	r2,-16(fp)
   3061c:	0085c83a 	sub	r2,zero,r2
   30620:	18800015 	stw	r2,0(r3)
          return -1;
   30624:	00bfffc4 	movi	r2,-1
   30628:	00000c06 	br	3065c <read+0xe8>
        }
        return rval;
   3062c:	e0bffc17 	ldw	r2,-16(fp)
   30630:	00000a06 	br	3065c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   30634:	00305380 	call	30538 <alt_get_errno>
   30638:	1007883a 	mov	r3,r2
   3063c:	00800344 	movi	r2,13
   30640:	18800015 	stw	r2,0(r3)
   30644:	00000406 	br	30658 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   30648:	00305380 	call	30538 <alt_get_errno>
   3064c:	1007883a 	mov	r3,r2
   30650:	00801444 	movi	r2,81
   30654:	18800015 	stw	r2,0(r3)
  }
  return -1;
   30658:	00bfffc4 	movi	r2,-1
}
   3065c:	e037883a 	mov	sp,fp
   30660:	dfc00117 	ldw	ra,4(sp)
   30664:	df000017 	ldw	fp,0(sp)
   30668:	dec00204 	addi	sp,sp,8
   3066c:	f800283a 	ret

00030670 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   30670:	defffe04 	addi	sp,sp,-8
   30674:	df000115 	stw	fp,4(sp)
   30678:	df000104 	addi	fp,sp,4
   3067c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   30680:	e0bfff17 	ldw	r2,-4(fp)
   30684:	108000d0 	cmplti	r2,r2,3
   30688:	10000d1e 	bne	r2,zero,306c0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   3068c:	008000f4 	movhi	r2,3
   30690:	108f7b04 	addi	r2,r2,15852
   30694:	e0ffff17 	ldw	r3,-4(fp)
   30698:	18c00324 	muli	r3,r3,12
   3069c:	10c5883a 	add	r2,r2,r3
   306a0:	10800204 	addi	r2,r2,8
   306a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   306a8:	008000f4 	movhi	r2,3
   306ac:	108f7b04 	addi	r2,r2,15852
   306b0:	e0ffff17 	ldw	r3,-4(fp)
   306b4:	18c00324 	muli	r3,r3,12
   306b8:	10c5883a 	add	r2,r2,r3
   306bc:	10000015 	stw	zero,0(r2)
  }
}
   306c0:	0001883a 	nop
   306c4:	e037883a 	mov	sp,fp
   306c8:	df000017 	ldw	fp,0(sp)
   306cc:	dec00104 	addi	sp,sp,4
   306d0:	f800283a 	ret

000306d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   306d4:	defff904 	addi	sp,sp,-28
   306d8:	df000615 	stw	fp,24(sp)
   306dc:	df000604 	addi	fp,sp,24
   306e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   306e4:	0005303a 	rdctl	r2,status
   306e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   306ec:	e0fffe17 	ldw	r3,-8(fp)
   306f0:	00bfff84 	movi	r2,-2
   306f4:	1884703a 	and	r2,r3,r2
   306f8:	1001703a 	wrctl	status,r2
  
  return context;
   306fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   30700:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   30704:	d0a01a17 	ldw	r2,-32664(gp)
   30708:	10c000c4 	addi	r3,r2,3
   3070c:	00bfff04 	movi	r2,-4
   30710:	1884703a 	and	r2,r3,r2
   30714:	d0a01a15 	stw	r2,-32664(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   30718:	d0e01a17 	ldw	r3,-32664(gp)
   3071c:	e0bfff17 	ldw	r2,-4(fp)
   30720:	1887883a 	add	r3,r3,r2
   30724:	00800134 	movhi	r2,4
   30728:	10a1a804 	addi	r2,r2,-31072
   3072c:	10c0062e 	bgeu	r2,r3,30748 <sbrk+0x74>
   30730:	e0bffb17 	ldw	r2,-20(fp)
   30734:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30738:	e0bffa17 	ldw	r2,-24(fp)
   3073c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   30740:	00bfffc4 	movi	r2,-1
   30744:	00000b06 	br	30774 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   30748:	d0a01a17 	ldw	r2,-32664(gp)
   3074c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   30750:	d0e01a17 	ldw	r3,-32664(gp)
   30754:	e0bfff17 	ldw	r2,-4(fp)
   30758:	1885883a 	add	r2,r3,r2
   3075c:	d0a01a15 	stw	r2,-32664(gp)
   30760:	e0bffb17 	ldw	r2,-20(fp)
   30764:	e0bffc15 	stw	r2,-16(fp)
   30768:	e0bffc17 	ldw	r2,-16(fp)
   3076c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   30770:	e0bffd17 	ldw	r2,-12(fp)
} 
   30774:	e037883a 	mov	sp,fp
   30778:	df000017 	ldw	fp,0(sp)
   3077c:	dec00104 	addi	sp,sp,4
   30780:	f800283a 	ret

00030784 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   30784:	defffa04 	addi	sp,sp,-24
   30788:	df000515 	stw	fp,20(sp)
   3078c:	df000504 	addi	fp,sp,20
   30790:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   30794:	0005303a 	rdctl	r2,status
   30798:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3079c:	e0fffc17 	ldw	r3,-16(fp)
   307a0:	00bfff84 	movi	r2,-2
   307a4:	1884703a 	and	r2,r3,r2
   307a8:	1001703a 	wrctl	status,r2
  
  return context;
   307ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   307b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   307b4:	e0bfff17 	ldw	r2,-4(fp)
   307b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   307bc:	e0bffd17 	ldw	r2,-12(fp)
   307c0:	10800017 	ldw	r2,0(r2)
   307c4:	e0fffd17 	ldw	r3,-12(fp)
   307c8:	18c00117 	ldw	r3,4(r3)
   307cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   307d0:	e0bffd17 	ldw	r2,-12(fp)
   307d4:	10800117 	ldw	r2,4(r2)
   307d8:	e0fffd17 	ldw	r3,-12(fp)
   307dc:	18c00017 	ldw	r3,0(r3)
   307e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   307e4:	e0bffd17 	ldw	r2,-12(fp)
   307e8:	e0fffd17 	ldw	r3,-12(fp)
   307ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   307f0:	e0bffd17 	ldw	r2,-12(fp)
   307f4:	e0fffd17 	ldw	r3,-12(fp)
   307f8:	10c00015 	stw	r3,0(r2)
   307fc:	e0bffb17 	ldw	r2,-20(fp)
   30800:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   30804:	e0bffe17 	ldw	r2,-8(fp)
   30808:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   3080c:	0001883a 	nop
   30810:	e037883a 	mov	sp,fp
   30814:	df000017 	ldw	fp,0(sp)
   30818:	dec00104 	addi	sp,sp,4
   3081c:	f800283a 	ret

00030820 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   30820:	defffb04 	addi	sp,sp,-20
   30824:	dfc00415 	stw	ra,16(sp)
   30828:	df000315 	stw	fp,12(sp)
   3082c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   30830:	d0a01b17 	ldw	r2,-32660(gp)
   30834:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   30838:	d0a72617 	ldw	r2,-25448(gp)
   3083c:	10800044 	addi	r2,r2,1
   30840:	d0a72615 	stw	r2,-25448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30844:	00002e06 	br	30900 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   30848:	e0bffd17 	ldw	r2,-12(fp)
   3084c:	10800017 	ldw	r2,0(r2)
   30850:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   30854:	e0bffd17 	ldw	r2,-12(fp)
   30858:	10800403 	ldbu	r2,16(r2)
   3085c:	10803fcc 	andi	r2,r2,255
   30860:	10000426 	beq	r2,zero,30874 <alt_tick+0x54>
   30864:	d0a72617 	ldw	r2,-25448(gp)
   30868:	1000021e 	bne	r2,zero,30874 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   3086c:	e0bffd17 	ldw	r2,-12(fp)
   30870:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   30874:	e0bffd17 	ldw	r2,-12(fp)
   30878:	10800217 	ldw	r2,8(r2)
   3087c:	d0e72617 	ldw	r3,-25448(gp)
   30880:	18801d36 	bltu	r3,r2,308f8 <alt_tick+0xd8>
   30884:	e0bffd17 	ldw	r2,-12(fp)
   30888:	10800403 	ldbu	r2,16(r2)
   3088c:	10803fcc 	andi	r2,r2,255
   30890:	1000191e 	bne	r2,zero,308f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   30894:	e0bffd17 	ldw	r2,-12(fp)
   30898:	10800317 	ldw	r2,12(r2)
   3089c:	e0fffd17 	ldw	r3,-12(fp)
   308a0:	18c00517 	ldw	r3,20(r3)
   308a4:	1809883a 	mov	r4,r3
   308a8:	103ee83a 	callr	r2
   308ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   308b0:	e0bfff17 	ldw	r2,-4(fp)
   308b4:	1000031e 	bne	r2,zero,308c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   308b8:	e13ffd17 	ldw	r4,-12(fp)
   308bc:	00307840 	call	30784 <alt_alarm_stop>
   308c0:	00000d06 	br	308f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   308c4:	e0bffd17 	ldw	r2,-12(fp)
   308c8:	10c00217 	ldw	r3,8(r2)
   308cc:	e0bfff17 	ldw	r2,-4(fp)
   308d0:	1887883a 	add	r3,r3,r2
   308d4:	e0bffd17 	ldw	r2,-12(fp)
   308d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   308dc:	e0bffd17 	ldw	r2,-12(fp)
   308e0:	10c00217 	ldw	r3,8(r2)
   308e4:	d0a72617 	ldw	r2,-25448(gp)
   308e8:	1880032e 	bgeu	r3,r2,308f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   308ec:	e0bffd17 	ldw	r2,-12(fp)
   308f0:	00c00044 	movi	r3,1
   308f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   308f8:	e0bffe17 	ldw	r2,-8(fp)
   308fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   30900:	e0fffd17 	ldw	r3,-12(fp)
   30904:	d0a01b04 	addi	r2,gp,-32660
   30908:	18bfcf1e 	bne	r3,r2,30848 <_gp+0xffff37b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   3090c:	0001883a 	nop
}
   30910:	0001883a 	nop
   30914:	e037883a 	mov	sp,fp
   30918:	dfc00117 	ldw	ra,4(sp)
   3091c:	df000017 	ldw	fp,0(sp)
   30920:	dec00204 	addi	sp,sp,8
   30924:	f800283a 	ret

00030928 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   30928:	defffd04 	addi	sp,sp,-12
   3092c:	dfc00215 	stw	ra,8(sp)
   30930:	df000115 	stw	fp,4(sp)
   30934:	df000104 	addi	fp,sp,4
   30938:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   3093c:	e13fff17 	ldw	r4,-4(fp)
   30940:	00320d80 	call	320d8 <alt_busy_sleep>
}
   30944:	e037883a 	mov	sp,fp
   30948:	dfc00117 	ldw	ra,4(sp)
   3094c:	df000017 	ldw	fp,0(sp)
   30950:	dec00204 	addi	sp,sp,8
   30954:	f800283a 	ret

00030958 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   30958:	defffe04 	addi	sp,sp,-8
   3095c:	dfc00115 	stw	ra,4(sp)
   30960:	df000015 	stw	fp,0(sp)
   30964:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   30968:	d0a01917 	ldw	r2,-32668(gp)
   3096c:	10000326 	beq	r2,zero,3097c <alt_get_errno+0x24>
   30970:	d0a01917 	ldw	r2,-32668(gp)
   30974:	103ee83a 	callr	r2
   30978:	00000106 	br	30980 <alt_get_errno+0x28>
   3097c:	d0a71e04 	addi	r2,gp,-25480
}
   30980:	e037883a 	mov	sp,fp
   30984:	dfc00117 	ldw	ra,4(sp)
   30988:	df000017 	ldw	fp,0(sp)
   3098c:	dec00204 	addi	sp,sp,8
   30990:	f800283a 	ret

00030994 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   30994:	defff904 	addi	sp,sp,-28
   30998:	dfc00615 	stw	ra,24(sp)
   3099c:	df000515 	stw	fp,20(sp)
   309a0:	df000504 	addi	fp,sp,20
   309a4:	e13ffd15 	stw	r4,-12(fp)
   309a8:	e17ffe15 	stw	r5,-8(fp)
   309ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   309b0:	e0bffd17 	ldw	r2,-12(fp)
   309b4:	10000616 	blt	r2,zero,309d0 <write+0x3c>
   309b8:	e0bffd17 	ldw	r2,-12(fp)
   309bc:	10c00324 	muli	r3,r2,12
   309c0:	008000f4 	movhi	r2,3
   309c4:	108f7b04 	addi	r2,r2,15852
   309c8:	1885883a 	add	r2,r3,r2
   309cc:	00000106 	br	309d4 <write+0x40>
   309d0:	0005883a 	mov	r2,zero
   309d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   309d8:	e0bffb17 	ldw	r2,-20(fp)
   309dc:	10002126 	beq	r2,zero,30a64 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   309e0:	e0bffb17 	ldw	r2,-20(fp)
   309e4:	10800217 	ldw	r2,8(r2)
   309e8:	108000cc 	andi	r2,r2,3
   309ec:	10001826 	beq	r2,zero,30a50 <write+0xbc>
   309f0:	e0bffb17 	ldw	r2,-20(fp)
   309f4:	10800017 	ldw	r2,0(r2)
   309f8:	10800617 	ldw	r2,24(r2)
   309fc:	10001426 	beq	r2,zero,30a50 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   30a00:	e0bffb17 	ldw	r2,-20(fp)
   30a04:	10800017 	ldw	r2,0(r2)
   30a08:	10800617 	ldw	r2,24(r2)
   30a0c:	e0ffff17 	ldw	r3,-4(fp)
   30a10:	180d883a 	mov	r6,r3
   30a14:	e17ffe17 	ldw	r5,-8(fp)
   30a18:	e13ffb17 	ldw	r4,-20(fp)
   30a1c:	103ee83a 	callr	r2
   30a20:	e0bffc15 	stw	r2,-16(fp)
   30a24:	e0bffc17 	ldw	r2,-16(fp)
   30a28:	1000070e 	bge	r2,zero,30a48 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   30a2c:	00309580 	call	30958 <alt_get_errno>
   30a30:	1007883a 	mov	r3,r2
   30a34:	e0bffc17 	ldw	r2,-16(fp)
   30a38:	0085c83a 	sub	r2,zero,r2
   30a3c:	18800015 	stw	r2,0(r3)
        return -1;
   30a40:	00bfffc4 	movi	r2,-1
   30a44:	00000c06 	br	30a78 <write+0xe4>
      }
      return rval;
   30a48:	e0bffc17 	ldw	r2,-16(fp)
   30a4c:	00000a06 	br	30a78 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   30a50:	00309580 	call	30958 <alt_get_errno>
   30a54:	1007883a 	mov	r3,r2
   30a58:	00800344 	movi	r2,13
   30a5c:	18800015 	stw	r2,0(r3)
   30a60:	00000406 	br	30a74 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   30a64:	00309580 	call	30958 <alt_get_errno>
   30a68:	1007883a 	mov	r3,r2
   30a6c:	00801444 	movi	r2,81
   30a70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   30a74:	00bfffc4 	movi	r2,-1
}
   30a78:	e037883a 	mov	sp,fp
   30a7c:	dfc00117 	ldw	ra,4(sp)
   30a80:	df000017 	ldw	fp,0(sp)
   30a84:	dec00204 	addi	sp,sp,8
   30a88:	f800283a 	ret

00030a8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   30a8c:	defffd04 	addi	sp,sp,-12
   30a90:	dfc00215 	stw	ra,8(sp)
   30a94:	df000115 	stw	fp,4(sp)
   30a98:	df000104 	addi	fp,sp,4
   30a9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   30aa0:	d1601604 	addi	r5,gp,-32680
   30aa4:	e13fff17 	ldw	r4,-4(fp)
   30aa8:	00322b40 	call	322b4 <alt_dev_llist_insert>
}
   30aac:	e037883a 	mov	sp,fp
   30ab0:	dfc00117 	ldw	ra,4(sp)
   30ab4:	df000017 	ldw	fp,0(sp)
   30ab8:	dec00204 	addi	sp,sp,8
   30abc:	f800283a 	ret

00030ac0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   30ac0:	defffd04 	addi	sp,sp,-12
   30ac4:	dfc00215 	stw	ra,8(sp)
   30ac8:	df000115 	stw	fp,4(sp)
   30acc:	df000104 	addi	fp,sp,4
   30ad0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   30ad4:	0032a680 	call	32a68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   30ad8:	00800044 	movi	r2,1
   30adc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   30ae0:	0001883a 	nop
   30ae4:	e037883a 	mov	sp,fp
   30ae8:	dfc00117 	ldw	ra,4(sp)
   30aec:	df000017 	ldw	fp,0(sp)
   30af0:	dec00204 	addi	sp,sp,8
   30af4:	f800283a 	ret

00030af8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   30af8:	defffe04 	addi	sp,sp,-8
   30afc:	dfc00115 	stw	ra,4(sp)
   30b00:	df000015 	stw	fp,0(sp)
   30b04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   30b08:	01c0fa04 	movi	r7,1000
   30b0c:	01800044 	movi	r6,1
   30b10:	000b883a 	mov	r5,zero
   30b14:	01000134 	movhi	r4,4
   30b18:	21040804 	addi	r4,r4,4128
   30b1c:	00316580 	call	31658 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   30b20:	000d883a 	mov	r6,zero
   30b24:	000b883a 	mov	r5,zero
   30b28:	010000f4 	movhi	r4,3
   30b2c:	210fe504 	addi	r4,r4,16276
   30b30:	0030cdc0 	call	30cdc <altera_avalon_jtag_uart_init>
   30b34:	010000f4 	movhi	r4,3
   30b38:	210fdb04 	addi	r4,r4,16236
   30b3c:	0030a8c0 	call	30a8c <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( HC_05_UART, hc_05_uart);
   30b40:	01800084 	movi	r6,2
   30b44:	000b883a 	mov	r5,zero
   30b48:	010000f4 	movhi	r4,3
   30b4c:	2113fd04 	addi	r4,r4,20468
   30b50:	00317e40 	call	317e4 <altera_avalon_uart_init>
   30b54:	010000f4 	movhi	r4,3
   30b58:	2113f304 	addi	r4,r4,20428
   30b5c:	0030a8c0 	call	30a8c <alt_dev_reg>
}
   30b60:	0001883a 	nop
   30b64:	e037883a 	mov	sp,fp
   30b68:	dfc00117 	ldw	ra,4(sp)
   30b6c:	df000017 	ldw	fp,0(sp)
   30b70:	dec00204 	addi	sp,sp,8
   30b74:	f800283a 	ret

00030b78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   30b78:	defffa04 	addi	sp,sp,-24
   30b7c:	dfc00515 	stw	ra,20(sp)
   30b80:	df000415 	stw	fp,16(sp)
   30b84:	df000404 	addi	fp,sp,16
   30b88:	e13ffd15 	stw	r4,-12(fp)
   30b8c:	e17ffe15 	stw	r5,-8(fp)
   30b90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   30b94:	e0bffd17 	ldw	r2,-12(fp)
   30b98:	10800017 	ldw	r2,0(r2)
   30b9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   30ba0:	e0bffc17 	ldw	r2,-16(fp)
   30ba4:	10c00a04 	addi	r3,r2,40
   30ba8:	e0bffd17 	ldw	r2,-12(fp)
   30bac:	10800217 	ldw	r2,8(r2)
   30bb0:	100f883a 	mov	r7,r2
   30bb4:	e1bfff17 	ldw	r6,-4(fp)
   30bb8:	e17ffe17 	ldw	r5,-8(fp)
   30bbc:	1809883a 	mov	r4,r3
   30bc0:	00311a00 	call	311a0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   30bc4:	e037883a 	mov	sp,fp
   30bc8:	dfc00117 	ldw	ra,4(sp)
   30bcc:	df000017 	ldw	fp,0(sp)
   30bd0:	dec00204 	addi	sp,sp,8
   30bd4:	f800283a 	ret

00030bd8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   30bd8:	defffa04 	addi	sp,sp,-24
   30bdc:	dfc00515 	stw	ra,20(sp)
   30be0:	df000415 	stw	fp,16(sp)
   30be4:	df000404 	addi	fp,sp,16
   30be8:	e13ffd15 	stw	r4,-12(fp)
   30bec:	e17ffe15 	stw	r5,-8(fp)
   30bf0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   30bf4:	e0bffd17 	ldw	r2,-12(fp)
   30bf8:	10800017 	ldw	r2,0(r2)
   30bfc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   30c00:	e0bffc17 	ldw	r2,-16(fp)
   30c04:	10c00a04 	addi	r3,r2,40
   30c08:	e0bffd17 	ldw	r2,-12(fp)
   30c0c:	10800217 	ldw	r2,8(r2)
   30c10:	100f883a 	mov	r7,r2
   30c14:	e1bfff17 	ldw	r6,-4(fp)
   30c18:	e17ffe17 	ldw	r5,-8(fp)
   30c1c:	1809883a 	mov	r4,r3
   30c20:	00313bc0 	call	313bc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   30c24:	e037883a 	mov	sp,fp
   30c28:	dfc00117 	ldw	ra,4(sp)
   30c2c:	df000017 	ldw	fp,0(sp)
   30c30:	dec00204 	addi	sp,sp,8
   30c34:	f800283a 	ret

00030c38 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   30c38:	defffc04 	addi	sp,sp,-16
   30c3c:	dfc00315 	stw	ra,12(sp)
   30c40:	df000215 	stw	fp,8(sp)
   30c44:	df000204 	addi	fp,sp,8
   30c48:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   30c4c:	e0bfff17 	ldw	r2,-4(fp)
   30c50:	10800017 	ldw	r2,0(r2)
   30c54:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   30c58:	e0bffe17 	ldw	r2,-8(fp)
   30c5c:	10c00a04 	addi	r3,r2,40
   30c60:	e0bfff17 	ldw	r2,-4(fp)
   30c64:	10800217 	ldw	r2,8(r2)
   30c68:	100b883a 	mov	r5,r2
   30c6c:	1809883a 	mov	r4,r3
   30c70:	00310480 	call	31048 <altera_avalon_jtag_uart_close>
}
   30c74:	e037883a 	mov	sp,fp
   30c78:	dfc00117 	ldw	ra,4(sp)
   30c7c:	df000017 	ldw	fp,0(sp)
   30c80:	dec00204 	addi	sp,sp,8
   30c84:	f800283a 	ret

00030c88 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   30c88:	defffa04 	addi	sp,sp,-24
   30c8c:	dfc00515 	stw	ra,20(sp)
   30c90:	df000415 	stw	fp,16(sp)
   30c94:	df000404 	addi	fp,sp,16
   30c98:	e13ffd15 	stw	r4,-12(fp)
   30c9c:	e17ffe15 	stw	r5,-8(fp)
   30ca0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   30ca4:	e0bffd17 	ldw	r2,-12(fp)
   30ca8:	10800017 	ldw	r2,0(r2)
   30cac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   30cb0:	e0bffc17 	ldw	r2,-16(fp)
   30cb4:	10800a04 	addi	r2,r2,40
   30cb8:	e1bfff17 	ldw	r6,-4(fp)
   30cbc:	e17ffe17 	ldw	r5,-8(fp)
   30cc0:	1009883a 	mov	r4,r2
   30cc4:	00310b00 	call	310b0 <altera_avalon_jtag_uart_ioctl>
}
   30cc8:	e037883a 	mov	sp,fp
   30ccc:	dfc00117 	ldw	ra,4(sp)
   30cd0:	df000017 	ldw	fp,0(sp)
   30cd4:	dec00204 	addi	sp,sp,8
   30cd8:	f800283a 	ret

00030cdc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   30cdc:	defffa04 	addi	sp,sp,-24
   30ce0:	dfc00515 	stw	ra,20(sp)
   30ce4:	df000415 	stw	fp,16(sp)
   30ce8:	df000404 	addi	fp,sp,16
   30cec:	e13ffd15 	stw	r4,-12(fp)
   30cf0:	e17ffe15 	stw	r5,-8(fp)
   30cf4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   30cf8:	e0bffd17 	ldw	r2,-12(fp)
   30cfc:	00c00044 	movi	r3,1
   30d00:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   30d04:	e0bffd17 	ldw	r2,-12(fp)
   30d08:	10800017 	ldw	r2,0(r2)
   30d0c:	10800104 	addi	r2,r2,4
   30d10:	1007883a 	mov	r3,r2
   30d14:	e0bffd17 	ldw	r2,-12(fp)
   30d18:	10800817 	ldw	r2,32(r2)
   30d1c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   30d20:	e0bffe17 	ldw	r2,-8(fp)
   30d24:	e0ffff17 	ldw	r3,-4(fp)
   30d28:	d8000015 	stw	zero,0(sp)
   30d2c:	e1fffd17 	ldw	r7,-12(fp)
   30d30:	018000f4 	movhi	r6,3
   30d34:	31836704 	addi	r6,r6,3484
   30d38:	180b883a 	mov	r5,r3
   30d3c:	1009883a 	mov	r4,r2
   30d40:	00326880 	call	32688 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   30d44:	e0bffd17 	ldw	r2,-12(fp)
   30d48:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   30d4c:	e0bffd17 	ldw	r2,-12(fp)
   30d50:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   30d54:	d0e72517 	ldw	r3,-25452(gp)
   30d58:	e1fffd17 	ldw	r7,-12(fp)
   30d5c:	018000f4 	movhi	r6,3
   30d60:	3183ea04 	addi	r6,r6,4008
   30d64:	180b883a 	mov	r5,r3
   30d68:	1009883a 	mov	r4,r2
   30d6c:	0031fac0 	call	31fac <alt_alarm_start>
   30d70:	1000040e 	bge	r2,zero,30d84 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   30d74:	e0fffd17 	ldw	r3,-12(fp)
   30d78:	00a00034 	movhi	r2,32768
   30d7c:	10bfffc4 	addi	r2,r2,-1
   30d80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   30d84:	0001883a 	nop
   30d88:	e037883a 	mov	sp,fp
   30d8c:	dfc00117 	ldw	ra,4(sp)
   30d90:	df000017 	ldw	fp,0(sp)
   30d94:	dec00204 	addi	sp,sp,8
   30d98:	f800283a 	ret

00030d9c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   30d9c:	defff804 	addi	sp,sp,-32
   30da0:	df000715 	stw	fp,28(sp)
   30da4:	df000704 	addi	fp,sp,28
   30da8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   30dac:	e0bfff17 	ldw	r2,-4(fp)
   30db0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   30db4:	e0bffb17 	ldw	r2,-20(fp)
   30db8:	10800017 	ldw	r2,0(r2)
   30dbc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30dc0:	e0bffc17 	ldw	r2,-16(fp)
   30dc4:	10800104 	addi	r2,r2,4
   30dc8:	10800037 	ldwio	r2,0(r2)
   30dcc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   30dd0:	e0bffd17 	ldw	r2,-12(fp)
   30dd4:	1080c00c 	andi	r2,r2,768
   30dd8:	10006d26 	beq	r2,zero,30f90 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   30ddc:	e0bffd17 	ldw	r2,-12(fp)
   30de0:	1080400c 	andi	r2,r2,256
   30de4:	10003526 	beq	r2,zero,30ebc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   30de8:	00800074 	movhi	r2,1
   30dec:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30df0:	e0bffb17 	ldw	r2,-20(fp)
   30df4:	10800a17 	ldw	r2,40(r2)
   30df8:	10800044 	addi	r2,r2,1
   30dfc:	1081ffcc 	andi	r2,r2,2047
   30e00:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   30e04:	e0bffb17 	ldw	r2,-20(fp)
   30e08:	10c00b17 	ldw	r3,44(r2)
   30e0c:	e0bffe17 	ldw	r2,-8(fp)
   30e10:	18801526 	beq	r3,r2,30e68 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   30e14:	e0bffc17 	ldw	r2,-16(fp)
   30e18:	10800037 	ldwio	r2,0(r2)
   30e1c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   30e20:	e0bff917 	ldw	r2,-28(fp)
   30e24:	10a0000c 	andi	r2,r2,32768
   30e28:	10001126 	beq	r2,zero,30e70 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   30e2c:	e0bffb17 	ldw	r2,-20(fp)
   30e30:	10800a17 	ldw	r2,40(r2)
   30e34:	e0fff917 	ldw	r3,-28(fp)
   30e38:	1809883a 	mov	r4,r3
   30e3c:	e0fffb17 	ldw	r3,-20(fp)
   30e40:	1885883a 	add	r2,r3,r2
   30e44:	10800e04 	addi	r2,r2,56
   30e48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30e4c:	e0bffb17 	ldw	r2,-20(fp)
   30e50:	10800a17 	ldw	r2,40(r2)
   30e54:	10800044 	addi	r2,r2,1
   30e58:	10c1ffcc 	andi	r3,r2,2047
   30e5c:	e0bffb17 	ldw	r2,-20(fp)
   30e60:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   30e64:	003fe206 	br	30df0 <_gp+0xffff3d60>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   30e68:	0001883a 	nop
   30e6c:	00000106 	br	30e74 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   30e70:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   30e74:	e0bff917 	ldw	r2,-28(fp)
   30e78:	10bfffec 	andhi	r2,r2,65535
   30e7c:	10000f26 	beq	r2,zero,30ebc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   30e80:	e0bffb17 	ldw	r2,-20(fp)
   30e84:	10c00817 	ldw	r3,32(r2)
   30e88:	00bfff84 	movi	r2,-2
   30e8c:	1886703a 	and	r3,r3,r2
   30e90:	e0bffb17 	ldw	r2,-20(fp)
   30e94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   30e98:	e0bffc17 	ldw	r2,-16(fp)
   30e9c:	10800104 	addi	r2,r2,4
   30ea0:	1007883a 	mov	r3,r2
   30ea4:	e0bffb17 	ldw	r2,-20(fp)
   30ea8:	10800817 	ldw	r2,32(r2)
   30eac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30eb0:	e0bffc17 	ldw	r2,-16(fp)
   30eb4:	10800104 	addi	r2,r2,4
   30eb8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   30ebc:	e0bffd17 	ldw	r2,-12(fp)
   30ec0:	1080800c 	andi	r2,r2,512
   30ec4:	103fbe26 	beq	r2,zero,30dc0 <_gp+0xffff3d30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   30ec8:	e0bffd17 	ldw	r2,-12(fp)
   30ecc:	1004d43a 	srli	r2,r2,16
   30ed0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   30ed4:	00001406 	br	30f28 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   30ed8:	e0bffc17 	ldw	r2,-16(fp)
   30edc:	e0fffb17 	ldw	r3,-20(fp)
   30ee0:	18c00d17 	ldw	r3,52(r3)
   30ee4:	e13ffb17 	ldw	r4,-20(fp)
   30ee8:	20c7883a 	add	r3,r4,r3
   30eec:	18c20e04 	addi	r3,r3,2104
   30ef0:	18c00003 	ldbu	r3,0(r3)
   30ef4:	18c03fcc 	andi	r3,r3,255
   30ef8:	18c0201c 	xori	r3,r3,128
   30efc:	18ffe004 	addi	r3,r3,-128
   30f00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   30f04:	e0bffb17 	ldw	r2,-20(fp)
   30f08:	10800d17 	ldw	r2,52(r2)
   30f0c:	10800044 	addi	r2,r2,1
   30f10:	10c1ffcc 	andi	r3,r2,2047
   30f14:	e0bffb17 	ldw	r2,-20(fp)
   30f18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   30f1c:	e0bffa17 	ldw	r2,-24(fp)
   30f20:	10bfffc4 	addi	r2,r2,-1
   30f24:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   30f28:	e0bffa17 	ldw	r2,-24(fp)
   30f2c:	10000526 	beq	r2,zero,30f44 <altera_avalon_jtag_uart_irq+0x1a8>
   30f30:	e0bffb17 	ldw	r2,-20(fp)
   30f34:	10c00d17 	ldw	r3,52(r2)
   30f38:	e0bffb17 	ldw	r2,-20(fp)
   30f3c:	10800c17 	ldw	r2,48(r2)
   30f40:	18bfe51e 	bne	r3,r2,30ed8 <_gp+0xffff3e48>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   30f44:	e0bffa17 	ldw	r2,-24(fp)
   30f48:	103f9d26 	beq	r2,zero,30dc0 <_gp+0xffff3d30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   30f4c:	e0bffb17 	ldw	r2,-20(fp)
   30f50:	10c00817 	ldw	r3,32(r2)
   30f54:	00bfff44 	movi	r2,-3
   30f58:	1886703a 	and	r3,r3,r2
   30f5c:	e0bffb17 	ldw	r2,-20(fp)
   30f60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   30f64:	e0bffb17 	ldw	r2,-20(fp)
   30f68:	10800017 	ldw	r2,0(r2)
   30f6c:	10800104 	addi	r2,r2,4
   30f70:	1007883a 	mov	r3,r2
   30f74:	e0bffb17 	ldw	r2,-20(fp)
   30f78:	10800817 	ldw	r2,32(r2)
   30f7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   30f80:	e0bffc17 	ldw	r2,-16(fp)
   30f84:	10800104 	addi	r2,r2,4
   30f88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   30f8c:	003f8c06 	br	30dc0 <_gp+0xffff3d30>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   30f90:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   30f94:	0001883a 	nop
   30f98:	e037883a 	mov	sp,fp
   30f9c:	df000017 	ldw	fp,0(sp)
   30fa0:	dec00104 	addi	sp,sp,4
   30fa4:	f800283a 	ret

00030fa8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   30fa8:	defff804 	addi	sp,sp,-32
   30fac:	df000715 	stw	fp,28(sp)
   30fb0:	df000704 	addi	fp,sp,28
   30fb4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   30fb8:	e0bffb17 	ldw	r2,-20(fp)
   30fbc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   30fc0:	e0bff917 	ldw	r2,-28(fp)
   30fc4:	10800017 	ldw	r2,0(r2)
   30fc8:	10800104 	addi	r2,r2,4
   30fcc:	10800037 	ldwio	r2,0(r2)
   30fd0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   30fd4:	e0bffa17 	ldw	r2,-24(fp)
   30fd8:	1081000c 	andi	r2,r2,1024
   30fdc:	10000b26 	beq	r2,zero,3100c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   30fe0:	e0bff917 	ldw	r2,-28(fp)
   30fe4:	10800017 	ldw	r2,0(r2)
   30fe8:	10800104 	addi	r2,r2,4
   30fec:	1007883a 	mov	r3,r2
   30ff0:	e0bff917 	ldw	r2,-28(fp)
   30ff4:	10800817 	ldw	r2,32(r2)
   30ff8:	10810014 	ori	r2,r2,1024
   30ffc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   31000:	e0bff917 	ldw	r2,-28(fp)
   31004:	10000915 	stw	zero,36(r2)
   31008:	00000a06 	br	31034 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   3100c:	e0bff917 	ldw	r2,-28(fp)
   31010:	10c00917 	ldw	r3,36(r2)
   31014:	00a00034 	movhi	r2,32768
   31018:	10bfff04 	addi	r2,r2,-4
   3101c:	10c00536 	bltu	r2,r3,31034 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   31020:	e0bff917 	ldw	r2,-28(fp)
   31024:	10800917 	ldw	r2,36(r2)
   31028:	10c00044 	addi	r3,r2,1
   3102c:	e0bff917 	ldw	r2,-28(fp)
   31030:	10c00915 	stw	r3,36(r2)
   31034:	d0a72517 	ldw	r2,-25452(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   31038:	e037883a 	mov	sp,fp
   3103c:	df000017 	ldw	fp,0(sp)
   31040:	dec00104 	addi	sp,sp,4
   31044:	f800283a 	ret

00031048 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   31048:	defffd04 	addi	sp,sp,-12
   3104c:	df000215 	stw	fp,8(sp)
   31050:	df000204 	addi	fp,sp,8
   31054:	e13ffe15 	stw	r4,-8(fp)
   31058:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   3105c:	00000506 	br	31074 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   31060:	e0bfff17 	ldw	r2,-4(fp)
   31064:	1090000c 	andi	r2,r2,16384
   31068:	10000226 	beq	r2,zero,31074 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   3106c:	00bffd44 	movi	r2,-11
   31070:	00000b06 	br	310a0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   31074:	e0bffe17 	ldw	r2,-8(fp)
   31078:	10c00d17 	ldw	r3,52(r2)
   3107c:	e0bffe17 	ldw	r2,-8(fp)
   31080:	10800c17 	ldw	r2,48(r2)
   31084:	18800526 	beq	r3,r2,3109c <altera_avalon_jtag_uart_close+0x54>
   31088:	e0bffe17 	ldw	r2,-8(fp)
   3108c:	10c00917 	ldw	r3,36(r2)
   31090:	e0bffe17 	ldw	r2,-8(fp)
   31094:	10800117 	ldw	r2,4(r2)
   31098:	18bff136 	bltu	r3,r2,31060 <_gp+0xffff3fd0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   3109c:	0005883a 	mov	r2,zero
}
   310a0:	e037883a 	mov	sp,fp
   310a4:	df000017 	ldw	fp,0(sp)
   310a8:	dec00104 	addi	sp,sp,4
   310ac:	f800283a 	ret

000310b0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   310b0:	defffa04 	addi	sp,sp,-24
   310b4:	df000515 	stw	fp,20(sp)
   310b8:	df000504 	addi	fp,sp,20
   310bc:	e13ffd15 	stw	r4,-12(fp)
   310c0:	e17ffe15 	stw	r5,-8(fp)
   310c4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   310c8:	00bff9c4 	movi	r2,-25
   310cc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   310d0:	e0bffe17 	ldw	r2,-8(fp)
   310d4:	10da8060 	cmpeqi	r3,r2,27137
   310d8:	1800031e 	bne	r3,zero,310e8 <altera_avalon_jtag_uart_ioctl+0x38>
   310dc:	109a80a0 	cmpeqi	r2,r2,27138
   310e0:	1000181e 	bne	r2,zero,31144 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   310e4:	00002906 	br	3118c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   310e8:	e0bffd17 	ldw	r2,-12(fp)
   310ec:	10c00117 	ldw	r3,4(r2)
   310f0:	00a00034 	movhi	r2,32768
   310f4:	10bfffc4 	addi	r2,r2,-1
   310f8:	18802126 	beq	r3,r2,31180 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   310fc:	e0bfff17 	ldw	r2,-4(fp)
   31100:	10800017 	ldw	r2,0(r2)
   31104:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   31108:	e0bffc17 	ldw	r2,-16(fp)
   3110c:	10800090 	cmplti	r2,r2,2
   31110:	1000061e 	bne	r2,zero,3112c <altera_avalon_jtag_uart_ioctl+0x7c>
   31114:	e0fffc17 	ldw	r3,-16(fp)
   31118:	00a00034 	movhi	r2,32768
   3111c:	10bfffc4 	addi	r2,r2,-1
   31120:	18800226 	beq	r3,r2,3112c <altera_avalon_jtag_uart_ioctl+0x7c>
   31124:	e0bffc17 	ldw	r2,-16(fp)
   31128:	00000206 	br	31134 <altera_avalon_jtag_uart_ioctl+0x84>
   3112c:	00a00034 	movhi	r2,32768
   31130:	10bfff84 	addi	r2,r2,-2
   31134:	e0fffd17 	ldw	r3,-12(fp)
   31138:	18800115 	stw	r2,4(r3)
      rc = 0;
   3113c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   31140:	00000f06 	br	31180 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   31144:	e0bffd17 	ldw	r2,-12(fp)
   31148:	10c00117 	ldw	r3,4(r2)
   3114c:	00a00034 	movhi	r2,32768
   31150:	10bfffc4 	addi	r2,r2,-1
   31154:	18800c26 	beq	r3,r2,31188 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   31158:	e0bffd17 	ldw	r2,-12(fp)
   3115c:	10c00917 	ldw	r3,36(r2)
   31160:	e0bffd17 	ldw	r2,-12(fp)
   31164:	10800117 	ldw	r2,4(r2)
   31168:	1885803a 	cmpltu	r2,r3,r2
   3116c:	10c03fcc 	andi	r3,r2,255
   31170:	e0bfff17 	ldw	r2,-4(fp)
   31174:	10c00015 	stw	r3,0(r2)
      rc = 0;
   31178:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   3117c:	00000206 	br	31188 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   31180:	0001883a 	nop
   31184:	00000106 	br	3118c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   31188:	0001883a 	nop

  default:
    break;
  }

  return rc;
   3118c:	e0bffb17 	ldw	r2,-20(fp)
}
   31190:	e037883a 	mov	sp,fp
   31194:	df000017 	ldw	fp,0(sp)
   31198:	dec00104 	addi	sp,sp,4
   3119c:	f800283a 	ret

000311a0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   311a0:	defff304 	addi	sp,sp,-52
   311a4:	dfc00c15 	stw	ra,48(sp)
   311a8:	df000b15 	stw	fp,44(sp)
   311ac:	df000b04 	addi	fp,sp,44
   311b0:	e13ffc15 	stw	r4,-16(fp)
   311b4:	e17ffd15 	stw	r5,-12(fp)
   311b8:	e1bffe15 	stw	r6,-8(fp)
   311bc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   311c0:	e0bffd17 	ldw	r2,-12(fp)
   311c4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   311c8:	00004706 	br	312e8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   311cc:	e0bffc17 	ldw	r2,-16(fp)
   311d0:	10800a17 	ldw	r2,40(r2)
   311d4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   311d8:	e0bffc17 	ldw	r2,-16(fp)
   311dc:	10800b17 	ldw	r2,44(r2)
   311e0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   311e4:	e0fff717 	ldw	r3,-36(fp)
   311e8:	e0bff817 	ldw	r2,-32(fp)
   311ec:	18800536 	bltu	r3,r2,31204 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   311f0:	e0fff717 	ldw	r3,-36(fp)
   311f4:	e0bff817 	ldw	r2,-32(fp)
   311f8:	1885c83a 	sub	r2,r3,r2
   311fc:	e0bff615 	stw	r2,-40(fp)
   31200:	00000406 	br	31214 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   31204:	00c20004 	movi	r3,2048
   31208:	e0bff817 	ldw	r2,-32(fp)
   3120c:	1885c83a 	sub	r2,r3,r2
   31210:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   31214:	e0bff617 	ldw	r2,-40(fp)
   31218:	10001e26 	beq	r2,zero,31294 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   3121c:	e0fffe17 	ldw	r3,-8(fp)
   31220:	e0bff617 	ldw	r2,-40(fp)
   31224:	1880022e 	bgeu	r3,r2,31230 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   31228:	e0bffe17 	ldw	r2,-8(fp)
   3122c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   31230:	e0bffc17 	ldw	r2,-16(fp)
   31234:	10c00e04 	addi	r3,r2,56
   31238:	e0bff817 	ldw	r2,-32(fp)
   3123c:	1885883a 	add	r2,r3,r2
   31240:	e1bff617 	ldw	r6,-40(fp)
   31244:	100b883a 	mov	r5,r2
   31248:	e13ff517 	ldw	r4,-44(fp)
   3124c:	0028fbc0 	call	28fbc <memcpy>
      ptr   += n;
   31250:	e0fff517 	ldw	r3,-44(fp)
   31254:	e0bff617 	ldw	r2,-40(fp)
   31258:	1885883a 	add	r2,r3,r2
   3125c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   31260:	e0fffe17 	ldw	r3,-8(fp)
   31264:	e0bff617 	ldw	r2,-40(fp)
   31268:	1885c83a 	sub	r2,r3,r2
   3126c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   31270:	e0fff817 	ldw	r3,-32(fp)
   31274:	e0bff617 	ldw	r2,-40(fp)
   31278:	1885883a 	add	r2,r3,r2
   3127c:	10c1ffcc 	andi	r3,r2,2047
   31280:	e0bffc17 	ldw	r2,-16(fp)
   31284:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   31288:	e0bffe17 	ldw	r2,-8(fp)
   3128c:	00bfcf16 	blt	zero,r2,311cc <_gp+0xffff413c>
   31290:	00000106 	br	31298 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   31294:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   31298:	e0fff517 	ldw	r3,-44(fp)
   3129c:	e0bffd17 	ldw	r2,-12(fp)
   312a0:	1880141e 	bne	r3,r2,312f4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   312a4:	e0bfff17 	ldw	r2,-4(fp)
   312a8:	1090000c 	andi	r2,r2,16384
   312ac:	1000131e 	bne	r2,zero,312fc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   312b0:	0001883a 	nop
   312b4:	e0bffc17 	ldw	r2,-16(fp)
   312b8:	10c00a17 	ldw	r3,40(r2)
   312bc:	e0bff717 	ldw	r2,-36(fp)
   312c0:	1880051e 	bne	r3,r2,312d8 <altera_avalon_jtag_uart_read+0x138>
   312c4:	e0bffc17 	ldw	r2,-16(fp)
   312c8:	10c00917 	ldw	r3,36(r2)
   312cc:	e0bffc17 	ldw	r2,-16(fp)
   312d0:	10800117 	ldw	r2,4(r2)
   312d4:	18bff736 	bltu	r3,r2,312b4 <_gp+0xffff4224>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   312d8:	e0bffc17 	ldw	r2,-16(fp)
   312dc:	10c00a17 	ldw	r3,40(r2)
   312e0:	e0bff717 	ldw	r2,-36(fp)
   312e4:	18800726 	beq	r3,r2,31304 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   312e8:	e0bffe17 	ldw	r2,-8(fp)
   312ec:	00bfb716 	blt	zero,r2,311cc <_gp+0xffff413c>
   312f0:	00000506 	br	31308 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   312f4:	0001883a 	nop
   312f8:	00000306 	br	31308 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   312fc:	0001883a 	nop
   31300:	00000106 	br	31308 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   31304:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   31308:	e0fff517 	ldw	r3,-44(fp)
   3130c:	e0bffd17 	ldw	r2,-12(fp)
   31310:	18801826 	beq	r3,r2,31374 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31314:	0005303a 	rdctl	r2,status
   31318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3131c:	e0fffb17 	ldw	r3,-20(fp)
   31320:	00bfff84 	movi	r2,-2
   31324:	1884703a 	and	r2,r3,r2
   31328:	1001703a 	wrctl	status,r2
  
  return context;
   3132c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   31330:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   31334:	e0bffc17 	ldw	r2,-16(fp)
   31338:	10800817 	ldw	r2,32(r2)
   3133c:	10c00054 	ori	r3,r2,1
   31340:	e0bffc17 	ldw	r2,-16(fp)
   31344:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   31348:	e0bffc17 	ldw	r2,-16(fp)
   3134c:	10800017 	ldw	r2,0(r2)
   31350:	10800104 	addi	r2,r2,4
   31354:	1007883a 	mov	r3,r2
   31358:	e0bffc17 	ldw	r2,-16(fp)
   3135c:	10800817 	ldw	r2,32(r2)
   31360:	18800035 	stwio	r2,0(r3)
   31364:	e0bffa17 	ldw	r2,-24(fp)
   31368:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3136c:	e0bff917 	ldw	r2,-28(fp)
   31370:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   31374:	e0fff517 	ldw	r3,-44(fp)
   31378:	e0bffd17 	ldw	r2,-12(fp)
   3137c:	18800426 	beq	r3,r2,31390 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   31380:	e0fff517 	ldw	r3,-44(fp)
   31384:	e0bffd17 	ldw	r2,-12(fp)
   31388:	1885c83a 	sub	r2,r3,r2
   3138c:	00000606 	br	313a8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   31390:	e0bfff17 	ldw	r2,-4(fp)
   31394:	1090000c 	andi	r2,r2,16384
   31398:	10000226 	beq	r2,zero,313a4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   3139c:	00bffd44 	movi	r2,-11
   313a0:	00000106 	br	313a8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   313a4:	00bffec4 	movi	r2,-5
}
   313a8:	e037883a 	mov	sp,fp
   313ac:	dfc00117 	ldw	ra,4(sp)
   313b0:	df000017 	ldw	fp,0(sp)
   313b4:	dec00204 	addi	sp,sp,8
   313b8:	f800283a 	ret

000313bc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   313bc:	defff304 	addi	sp,sp,-52
   313c0:	dfc00c15 	stw	ra,48(sp)
   313c4:	df000b15 	stw	fp,44(sp)
   313c8:	df000b04 	addi	fp,sp,44
   313cc:	e13ffc15 	stw	r4,-16(fp)
   313d0:	e17ffd15 	stw	r5,-12(fp)
   313d4:	e1bffe15 	stw	r6,-8(fp)
   313d8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   313dc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   313e0:	e0bffd17 	ldw	r2,-12(fp)
   313e4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   313e8:	00003706 	br	314c8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   313ec:	e0bffc17 	ldw	r2,-16(fp)
   313f0:	10800c17 	ldw	r2,48(r2)
   313f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   313f8:	e0bffc17 	ldw	r2,-16(fp)
   313fc:	10800d17 	ldw	r2,52(r2)
   31400:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   31404:	e0fff917 	ldw	r3,-28(fp)
   31408:	e0bff517 	ldw	r2,-44(fp)
   3140c:	1880062e 	bgeu	r3,r2,31428 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   31410:	e0fff517 	ldw	r3,-44(fp)
   31414:	e0bff917 	ldw	r2,-28(fp)
   31418:	1885c83a 	sub	r2,r3,r2
   3141c:	10bfffc4 	addi	r2,r2,-1
   31420:	e0bff615 	stw	r2,-40(fp)
   31424:	00000b06 	br	31454 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   31428:	e0bff517 	ldw	r2,-44(fp)
   3142c:	10000526 	beq	r2,zero,31444 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   31430:	00c20004 	movi	r3,2048
   31434:	e0bff917 	ldw	r2,-28(fp)
   31438:	1885c83a 	sub	r2,r3,r2
   3143c:	e0bff615 	stw	r2,-40(fp)
   31440:	00000406 	br	31454 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   31444:	00c1ffc4 	movi	r3,2047
   31448:	e0bff917 	ldw	r2,-28(fp)
   3144c:	1885c83a 	sub	r2,r3,r2
   31450:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   31454:	e0bff617 	ldw	r2,-40(fp)
   31458:	10001e26 	beq	r2,zero,314d4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   3145c:	e0fffe17 	ldw	r3,-8(fp)
   31460:	e0bff617 	ldw	r2,-40(fp)
   31464:	1880022e 	bgeu	r3,r2,31470 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   31468:	e0bffe17 	ldw	r2,-8(fp)
   3146c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   31470:	e0bffc17 	ldw	r2,-16(fp)
   31474:	10c20e04 	addi	r3,r2,2104
   31478:	e0bff917 	ldw	r2,-28(fp)
   3147c:	1885883a 	add	r2,r3,r2
   31480:	e1bff617 	ldw	r6,-40(fp)
   31484:	e17ffd17 	ldw	r5,-12(fp)
   31488:	1009883a 	mov	r4,r2
   3148c:	0028fbc0 	call	28fbc <memcpy>
      ptr   += n;
   31490:	e0fffd17 	ldw	r3,-12(fp)
   31494:	e0bff617 	ldw	r2,-40(fp)
   31498:	1885883a 	add	r2,r3,r2
   3149c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   314a0:	e0fffe17 	ldw	r3,-8(fp)
   314a4:	e0bff617 	ldw	r2,-40(fp)
   314a8:	1885c83a 	sub	r2,r3,r2
   314ac:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   314b0:	e0fff917 	ldw	r3,-28(fp)
   314b4:	e0bff617 	ldw	r2,-40(fp)
   314b8:	1885883a 	add	r2,r3,r2
   314bc:	10c1ffcc 	andi	r3,r2,2047
   314c0:	e0bffc17 	ldw	r2,-16(fp)
   314c4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   314c8:	e0bffe17 	ldw	r2,-8(fp)
   314cc:	00bfc716 	blt	zero,r2,313ec <_gp+0xffff435c>
   314d0:	00000106 	br	314d8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   314d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   314d8:	0005303a 	rdctl	r2,status
   314dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   314e0:	e0fffb17 	ldw	r3,-20(fp)
   314e4:	00bfff84 	movi	r2,-2
   314e8:	1884703a 	and	r2,r3,r2
   314ec:	1001703a 	wrctl	status,r2
  
  return context;
   314f0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   314f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   314f8:	e0bffc17 	ldw	r2,-16(fp)
   314fc:	10800817 	ldw	r2,32(r2)
   31500:	10c00094 	ori	r3,r2,2
   31504:	e0bffc17 	ldw	r2,-16(fp)
   31508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   3150c:	e0bffc17 	ldw	r2,-16(fp)
   31510:	10800017 	ldw	r2,0(r2)
   31514:	10800104 	addi	r2,r2,4
   31518:	1007883a 	mov	r3,r2
   3151c:	e0bffc17 	ldw	r2,-16(fp)
   31520:	10800817 	ldw	r2,32(r2)
   31524:	18800035 	stwio	r2,0(r3)
   31528:	e0bffa17 	ldw	r2,-24(fp)
   3152c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31530:	e0bff817 	ldw	r2,-32(fp)
   31534:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   31538:	e0bffe17 	ldw	r2,-8(fp)
   3153c:	0080100e 	bge	zero,r2,31580 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   31540:	e0bfff17 	ldw	r2,-4(fp)
   31544:	1090000c 	andi	r2,r2,16384
   31548:	1000101e 	bne	r2,zero,3158c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   3154c:	0001883a 	nop
   31550:	e0bffc17 	ldw	r2,-16(fp)
   31554:	10c00d17 	ldw	r3,52(r2)
   31558:	e0bff517 	ldw	r2,-44(fp)
   3155c:	1880051e 	bne	r3,r2,31574 <altera_avalon_jtag_uart_write+0x1b8>
   31560:	e0bffc17 	ldw	r2,-16(fp)
   31564:	10c00917 	ldw	r3,36(r2)
   31568:	e0bffc17 	ldw	r2,-16(fp)
   3156c:	10800117 	ldw	r2,4(r2)
   31570:	18bff736 	bltu	r3,r2,31550 <_gp+0xffff44c0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   31574:	e0bffc17 	ldw	r2,-16(fp)
   31578:	10800917 	ldw	r2,36(r2)
   3157c:	1000051e 	bne	r2,zero,31594 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   31580:	e0bffe17 	ldw	r2,-8(fp)
   31584:	00bfd016 	blt	zero,r2,314c8 <_gp+0xffff4438>
   31588:	00000306 	br	31598 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   3158c:	0001883a 	nop
   31590:	00000106 	br	31598 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   31594:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   31598:	e0fffd17 	ldw	r3,-12(fp)
   3159c:	e0bff717 	ldw	r2,-36(fp)
   315a0:	18800426 	beq	r3,r2,315b4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   315a4:	e0fffd17 	ldw	r3,-12(fp)
   315a8:	e0bff717 	ldw	r2,-36(fp)
   315ac:	1885c83a 	sub	r2,r3,r2
   315b0:	00000606 	br	315cc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   315b4:	e0bfff17 	ldw	r2,-4(fp)
   315b8:	1090000c 	andi	r2,r2,16384
   315bc:	10000226 	beq	r2,zero,315c8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   315c0:	00bffd44 	movi	r2,-11
   315c4:	00000106 	br	315cc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   315c8:	00bffec4 	movi	r2,-5
}
   315cc:	e037883a 	mov	sp,fp
   315d0:	dfc00117 	ldw	ra,4(sp)
   315d4:	df000017 	ldw	fp,0(sp)
   315d8:	dec00204 	addi	sp,sp,8
   315dc:	f800283a 	ret

000315e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   315e0:	defffa04 	addi	sp,sp,-24
   315e4:	dfc00515 	stw	ra,20(sp)
   315e8:	df000415 	stw	fp,16(sp)
   315ec:	df000404 	addi	fp,sp,16
   315f0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   315f4:	0007883a 	mov	r3,zero
   315f8:	e0bfff17 	ldw	r2,-4(fp)
   315fc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   31600:	e0bfff17 	ldw	r2,-4(fp)
   31604:	10800104 	addi	r2,r2,4
   31608:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3160c:	0005303a 	rdctl	r2,status
   31610:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31614:	e0fffd17 	ldw	r3,-12(fp)
   31618:	00bfff84 	movi	r2,-2
   3161c:	1884703a 	and	r2,r3,r2
   31620:	1001703a 	wrctl	status,r2
  
  return context;
   31624:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   31628:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   3162c:	00308200 	call	30820 <alt_tick>
   31630:	e0bffc17 	ldw	r2,-16(fp)
   31634:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31638:	e0bffe17 	ldw	r2,-8(fp)
   3163c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   31640:	0001883a 	nop
   31644:	e037883a 	mov	sp,fp
   31648:	dfc00117 	ldw	ra,4(sp)
   3164c:	df000017 	ldw	fp,0(sp)
   31650:	dec00204 	addi	sp,sp,8
   31654:	f800283a 	ret

00031658 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   31658:	defff804 	addi	sp,sp,-32
   3165c:	dfc00715 	stw	ra,28(sp)
   31660:	df000615 	stw	fp,24(sp)
   31664:	df000604 	addi	fp,sp,24
   31668:	e13ffc15 	stw	r4,-16(fp)
   3166c:	e17ffd15 	stw	r5,-12(fp)
   31670:	e1bffe15 	stw	r6,-8(fp)
   31674:	e1ffff15 	stw	r7,-4(fp)
   31678:	e0bfff17 	ldw	r2,-4(fp)
   3167c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   31680:	d0a72517 	ldw	r2,-25452(gp)
   31684:	1000021e 	bne	r2,zero,31690 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   31688:	e0bffb17 	ldw	r2,-20(fp)
   3168c:	d0a72515 	stw	r2,-25452(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   31690:	e0bffc17 	ldw	r2,-16(fp)
   31694:	10800104 	addi	r2,r2,4
   31698:	00c001c4 	movi	r3,7
   3169c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   316a0:	d8000015 	stw	zero,0(sp)
   316a4:	e1fffc17 	ldw	r7,-16(fp)
   316a8:	018000f4 	movhi	r6,3
   316ac:	31857804 	addi	r6,r6,5600
   316b0:	e17ffe17 	ldw	r5,-8(fp)
   316b4:	e13ffd17 	ldw	r4,-12(fp)
   316b8:	00326880 	call	32688 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   316bc:	0001883a 	nop
   316c0:	e037883a 	mov	sp,fp
   316c4:	dfc00117 	ldw	ra,4(sp)
   316c8:	df000017 	ldw	fp,0(sp)
   316cc:	dec00204 	addi	sp,sp,8
   316d0:	f800283a 	ret

000316d4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   316d4:	defffa04 	addi	sp,sp,-24
   316d8:	dfc00515 	stw	ra,20(sp)
   316dc:	df000415 	stw	fp,16(sp)
   316e0:	df000404 	addi	fp,sp,16
   316e4:	e13ffd15 	stw	r4,-12(fp)
   316e8:	e17ffe15 	stw	r5,-8(fp)
   316ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   316f0:	e0bffd17 	ldw	r2,-12(fp)
   316f4:	10800017 	ldw	r2,0(r2)
   316f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   316fc:	e0bffc17 	ldw	r2,-16(fp)
   31700:	10c00a04 	addi	r3,r2,40
   31704:	e0bffd17 	ldw	r2,-12(fp)
   31708:	10800217 	ldw	r2,8(r2)
   3170c:	100f883a 	mov	r7,r2
   31710:	e1bfff17 	ldw	r6,-4(fp)
   31714:	e17ffe17 	ldw	r5,-8(fp)
   31718:	1809883a 	mov	r4,r3
   3171c:	0031be80 	call	31be8 <altera_avalon_uart_read>
      fd->fd_flags);
}
   31720:	e037883a 	mov	sp,fp
   31724:	dfc00117 	ldw	ra,4(sp)
   31728:	df000017 	ldw	fp,0(sp)
   3172c:	dec00204 	addi	sp,sp,8
   31730:	f800283a 	ret

00031734 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   31734:	defffa04 	addi	sp,sp,-24
   31738:	dfc00515 	stw	ra,20(sp)
   3173c:	df000415 	stw	fp,16(sp)
   31740:	df000404 	addi	fp,sp,16
   31744:	e13ffd15 	stw	r4,-12(fp)
   31748:	e17ffe15 	stw	r5,-8(fp)
   3174c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   31750:	e0bffd17 	ldw	r2,-12(fp)
   31754:	10800017 	ldw	r2,0(r2)
   31758:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   3175c:	e0bffc17 	ldw	r2,-16(fp)
   31760:	10c00a04 	addi	r3,r2,40
   31764:	e0bffd17 	ldw	r2,-12(fp)
   31768:	10800217 	ldw	r2,8(r2)
   3176c:	100f883a 	mov	r7,r2
   31770:	e1bfff17 	ldw	r6,-4(fp)
   31774:	e17ffe17 	ldw	r5,-8(fp)
   31778:	1809883a 	mov	r4,r3
   3177c:	0031e000 	call	31e00 <altera_avalon_uart_write>
      fd->fd_flags);
}
   31780:	e037883a 	mov	sp,fp
   31784:	dfc00117 	ldw	ra,4(sp)
   31788:	df000017 	ldw	fp,0(sp)
   3178c:	dec00204 	addi	sp,sp,8
   31790:	f800283a 	ret

00031794 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
   31794:	defffc04 	addi	sp,sp,-16
   31798:	dfc00315 	stw	ra,12(sp)
   3179c:	df000215 	stw	fp,8(sp)
   317a0:	df000204 	addi	fp,sp,8
   317a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   317a8:	e0bfff17 	ldw	r2,-4(fp)
   317ac:	10800017 	ldw	r2,0(r2)
   317b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
   317b4:	e0bffe17 	ldw	r2,-8(fp)
   317b8:	10c00a04 	addi	r3,r2,40
   317bc:	e0bfff17 	ldw	r2,-4(fp)
   317c0:	10800217 	ldw	r2,8(r2)
   317c4:	100b883a 	mov	r5,r2
   317c8:	1809883a 	mov	r4,r3
   317cc:	0031b580 	call	31b58 <altera_avalon_uart_close>
}
   317d0:	e037883a 	mov	sp,fp
   317d4:	dfc00117 	ldw	ra,4(sp)
   317d8:	df000017 	ldw	fp,0(sp)
   317dc:	dec00204 	addi	sp,sp,8
   317e0:	f800283a 	ret

000317e4 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
   317e4:	defff804 	addi	sp,sp,-32
   317e8:	dfc00715 	stw	ra,28(sp)
   317ec:	df000615 	stw	fp,24(sp)
   317f0:	df000604 	addi	fp,sp,24
   317f4:	e13ffd15 	stw	r4,-12(fp)
   317f8:	e17ffe15 	stw	r5,-8(fp)
   317fc:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
   31800:	e0bffd17 	ldw	r2,-12(fp)
   31804:	10800017 	ldw	r2,0(r2)
   31808:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   3180c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   31810:	1000041e 	bne	r2,zero,31824 <altera_avalon_uart_init+0x40>
   31814:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   31818:	1000021e 	bne	r2,zero,31824 <altera_avalon_uart_init+0x40>
   3181c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
   31820:	10000226 	beq	r2,zero,3182c <altera_avalon_uart_init+0x48>
   31824:	00800044 	movi	r2,1
   31828:	00000106 	br	31830 <altera_avalon_uart_init+0x4c>
   3182c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
   31830:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
   31834:	e0bffc17 	ldw	r2,-16(fp)
   31838:	10000f1e 	bne	r2,zero,31878 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
   3183c:	e0bffd17 	ldw	r2,-12(fp)
   31840:	00c32004 	movi	r3,3200
   31844:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
   31848:	e0bffb17 	ldw	r2,-20(fp)
   3184c:	10800304 	addi	r2,r2,12
   31850:	e0fffd17 	ldw	r3,-12(fp)
   31854:	18c00117 	ldw	r3,4(r3)
   31858:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
   3185c:	d8000015 	stw	zero,0(sp)
   31860:	e1fffd17 	ldw	r7,-12(fp)
   31864:	018000f4 	movhi	r6,3
   31868:	31862404 	addi	r6,r6,6288
   3186c:	e17fff17 	ldw	r5,-4(fp)
   31870:	e13ffe17 	ldw	r4,-8(fp)
   31874:	00326880 	call	32688 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
   31878:	0001883a 	nop
   3187c:	e037883a 	mov	sp,fp
   31880:	dfc00117 	ldw	ra,4(sp)
   31884:	df000017 	ldw	fp,0(sp)
   31888:	dec00204 	addi	sp,sp,8
   3188c:	f800283a 	ret

00031890 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
   31890:	defffa04 	addi	sp,sp,-24
   31894:	dfc00515 	stw	ra,20(sp)
   31898:	df000415 	stw	fp,16(sp)
   3189c:	df000404 	addi	fp,sp,16
   318a0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
   318a4:	e0bfff17 	ldw	r2,-4(fp)
   318a8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
   318ac:	e0bffc17 	ldw	r2,-16(fp)
   318b0:	10800017 	ldw	r2,0(r2)
   318b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
   318b8:	e0bffd17 	ldw	r2,-12(fp)
   318bc:	10800204 	addi	r2,r2,8
   318c0:	10800037 	ldwio	r2,0(r2)
   318c4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
   318c8:	e0bffd17 	ldw	r2,-12(fp)
   318cc:	10800204 	addi	r2,r2,8
   318d0:	0007883a 	mov	r3,zero
   318d4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
   318d8:	e0bffd17 	ldw	r2,-12(fp)
   318dc:	10800204 	addi	r2,r2,8
   318e0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
   318e4:	e0bffe17 	ldw	r2,-8(fp)
   318e8:	1080200c 	andi	r2,r2,128
   318ec:	10000326 	beq	r2,zero,318fc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
   318f0:	e17ffe17 	ldw	r5,-8(fp)
   318f4:	e13ffc17 	ldw	r4,-16(fp)
   318f8:	003192c0 	call	3192c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
   318fc:	e0bffe17 	ldw	r2,-8(fp)
   31900:	1081100c 	andi	r2,r2,1088
   31904:	10000326 	beq	r2,zero,31914 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
   31908:	e17ffe17 	ldw	r5,-8(fp)
   3190c:	e13ffc17 	ldw	r4,-16(fp)
   31910:	0031a100 	call	31a10 <altera_avalon_uart_txirq>
  }
  

}
   31914:	0001883a 	nop
   31918:	e037883a 	mov	sp,fp
   3191c:	dfc00117 	ldw	ra,4(sp)
   31920:	df000017 	ldw	fp,0(sp)
   31924:	dec00204 	addi	sp,sp,8
   31928:	f800283a 	ret

0003192c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   3192c:	defffc04 	addi	sp,sp,-16
   31930:	df000315 	stw	fp,12(sp)
   31934:	df000304 	addi	fp,sp,12
   31938:	e13ffe15 	stw	r4,-8(fp)
   3193c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   31940:	e0bfff17 	ldw	r2,-4(fp)
   31944:	108000cc 	andi	r2,r2,3
   31948:	10002c1e 	bne	r2,zero,319fc <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
   3194c:	e0bffe17 	ldw	r2,-8(fp)
   31950:	10800317 	ldw	r2,12(r2)
   31954:	e0bffe17 	ldw	r2,-8(fp)
   31958:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   3195c:	e0bffe17 	ldw	r2,-8(fp)
   31960:	10800317 	ldw	r2,12(r2)
   31964:	10800044 	addi	r2,r2,1
   31968:	10800fcc 	andi	r2,r2,63
   3196c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   31970:	e0bffe17 	ldw	r2,-8(fp)
   31974:	10800317 	ldw	r2,12(r2)
   31978:	e0fffe17 	ldw	r3,-8(fp)
   3197c:	18c00017 	ldw	r3,0(r3)
   31980:	18c00037 	ldwio	r3,0(r3)
   31984:	1809883a 	mov	r4,r3
   31988:	e0fffe17 	ldw	r3,-8(fp)
   3198c:	1885883a 	add	r2,r3,r2
   31990:	10800704 	addi	r2,r2,28
   31994:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
   31998:	e0bffe17 	ldw	r2,-8(fp)
   3199c:	e0fffd17 	ldw	r3,-12(fp)
   319a0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   319a4:	e0bffe17 	ldw	r2,-8(fp)
   319a8:	10800317 	ldw	r2,12(r2)
   319ac:	10800044 	addi	r2,r2,1
   319b0:	10800fcc 	andi	r2,r2,63
   319b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
   319b8:	e0bffe17 	ldw	r2,-8(fp)
   319bc:	10c00217 	ldw	r3,8(r2)
   319c0:	e0bffd17 	ldw	r2,-12(fp)
   319c4:	18800e1e 	bne	r3,r2,31a00 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   319c8:	e0bffe17 	ldw	r2,-8(fp)
   319cc:	10c00117 	ldw	r3,4(r2)
   319d0:	00bfdfc4 	movi	r2,-129
   319d4:	1886703a 	and	r3,r3,r2
   319d8:	e0bffe17 	ldw	r2,-8(fp)
   319dc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
   319e0:	e0bffe17 	ldw	r2,-8(fp)
   319e4:	10800017 	ldw	r2,0(r2)
   319e8:	10800304 	addi	r2,r2,12
   319ec:	e0fffe17 	ldw	r3,-8(fp)
   319f0:	18c00117 	ldw	r3,4(r3)
   319f4:	10c00035 	stwio	r3,0(r2)
   319f8:	00000106 	br	31a00 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
   319fc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
   31a00:	e037883a 	mov	sp,fp
   31a04:	df000017 	ldw	fp,0(sp)
   31a08:	dec00104 	addi	sp,sp,4
   31a0c:	f800283a 	ret

00031a10 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
   31a10:	defffb04 	addi	sp,sp,-20
   31a14:	df000415 	stw	fp,16(sp)
   31a18:	df000404 	addi	fp,sp,16
   31a1c:	e13ffc15 	stw	r4,-16(fp)
   31a20:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
   31a24:	e0bffc17 	ldw	r2,-16(fp)
   31a28:	10c00417 	ldw	r3,16(r2)
   31a2c:	e0bffc17 	ldw	r2,-16(fp)
   31a30:	10800517 	ldw	r2,20(r2)
   31a34:	18803226 	beq	r3,r2,31b00 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   31a38:	e0bffc17 	ldw	r2,-16(fp)
   31a3c:	10800617 	ldw	r2,24(r2)
   31a40:	1080008c 	andi	r2,r2,2
   31a44:	10000326 	beq	r2,zero,31a54 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   31a48:	e0bffd17 	ldw	r2,-12(fp)
   31a4c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
   31a50:	10001d26 	beq	r2,zero,31ac8 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
   31a54:	e0bffc17 	ldw	r2,-16(fp)
   31a58:	10800417 	ldw	r2,16(r2)
   31a5c:	e0bffc17 	ldw	r2,-16(fp)
   31a60:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
   31a64:	e0bffc17 	ldw	r2,-16(fp)
   31a68:	10800017 	ldw	r2,0(r2)
   31a6c:	10800104 	addi	r2,r2,4
   31a70:	e0fffc17 	ldw	r3,-16(fp)
   31a74:	18c00417 	ldw	r3,16(r3)
   31a78:	e13ffc17 	ldw	r4,-16(fp)
   31a7c:	20c7883a 	add	r3,r4,r3
   31a80:	18c01704 	addi	r3,r3,92
   31a84:	18c00003 	ldbu	r3,0(r3)
   31a88:	18c03fcc 	andi	r3,r3,255
   31a8c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
   31a90:	e0bffc17 	ldw	r2,-16(fp)
   31a94:	10800417 	ldw	r2,16(r2)
   31a98:	10800044 	addi	r2,r2,1
   31a9c:	e0fffc17 	ldw	r3,-16(fp)
   31aa0:	18800415 	stw	r2,16(r3)
   31aa4:	10c00fcc 	andi	r3,r2,63
   31aa8:	e0bffc17 	ldw	r2,-16(fp)
   31aac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   31ab0:	e0bffc17 	ldw	r2,-16(fp)
   31ab4:	10800117 	ldw	r2,4(r2)
   31ab8:	10c01014 	ori	r3,r2,64
   31abc:	e0bffc17 	ldw	r2,-16(fp)
   31ac0:	10c00115 	stw	r3,4(r2)
   31ac4:	00000e06 	br	31b00 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
   31ac8:	e0bffc17 	ldw	r2,-16(fp)
   31acc:	10800017 	ldw	r2,0(r2)
   31ad0:	10800204 	addi	r2,r2,8
   31ad4:	10800037 	ldwio	r2,0(r2)
   31ad8:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
   31adc:	e0bffd17 	ldw	r2,-12(fp)
   31ae0:	1082000c 	andi	r2,r2,2048
   31ae4:	1000061e 	bne	r2,zero,31b00 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
   31ae8:	e0bffc17 	ldw	r2,-16(fp)
   31aec:	10c00117 	ldw	r3,4(r2)
   31af0:	00bfefc4 	movi	r2,-65
   31af4:	1886703a 	and	r3,r3,r2
   31af8:	e0bffc17 	ldw	r2,-16(fp)
   31afc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
   31b00:	e0bffc17 	ldw	r2,-16(fp)
   31b04:	10c00417 	ldw	r3,16(r2)
   31b08:	e0bffc17 	ldw	r2,-16(fp)
   31b0c:	10800517 	ldw	r2,20(r2)
   31b10:	1880061e 	bne	r3,r2,31b2c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31b14:	e0bffc17 	ldw	r2,-16(fp)
   31b18:	10c00117 	ldw	r3,4(r2)
   31b1c:	00beefc4 	movi	r2,-1089
   31b20:	1886703a 	and	r3,r3,r2
   31b24:	e0bffc17 	ldw	r2,-16(fp)
   31b28:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31b2c:	e0bffc17 	ldw	r2,-16(fp)
   31b30:	10800017 	ldw	r2,0(r2)
   31b34:	10800304 	addi	r2,r2,12
   31b38:	e0fffc17 	ldw	r3,-16(fp)
   31b3c:	18c00117 	ldw	r3,4(r3)
   31b40:	10c00035 	stwio	r3,0(r2)
}
   31b44:	0001883a 	nop
   31b48:	e037883a 	mov	sp,fp
   31b4c:	df000017 	ldw	fp,0(sp)
   31b50:	dec00104 	addi	sp,sp,4
   31b54:	f800283a 	ret

00031b58 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
   31b58:	defffd04 	addi	sp,sp,-12
   31b5c:	df000215 	stw	fp,8(sp)
   31b60:	df000204 	addi	fp,sp,8
   31b64:	e13ffe15 	stw	r4,-8(fp)
   31b68:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   31b6c:	00000506 	br	31b84 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   31b70:	e0bfff17 	ldw	r2,-4(fp)
   31b74:	1090000c 	andi	r2,r2,16384
   31b78:	10000226 	beq	r2,zero,31b84 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
   31b7c:	00bffd44 	movi	r2,-11
   31b80:	00000606 	br	31b9c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
   31b84:	e0bffe17 	ldw	r2,-8(fp)
   31b88:	10c00417 	ldw	r3,16(r2)
   31b8c:	e0bffe17 	ldw	r2,-8(fp)
   31b90:	10800517 	ldw	r2,20(r2)
   31b94:	18bff61e 	bne	r3,r2,31b70 <_gp+0xffff4ae0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   31b98:	0005883a 	mov	r2,zero
}
   31b9c:	e037883a 	mov	sp,fp
   31ba0:	df000017 	ldw	fp,0(sp)
   31ba4:	dec00104 	addi	sp,sp,4
   31ba8:	f800283a 	ret

00031bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31bac:	defffe04 	addi	sp,sp,-8
   31bb0:	dfc00115 	stw	ra,4(sp)
   31bb4:	df000015 	stw	fp,0(sp)
   31bb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31bbc:	d0a01917 	ldw	r2,-32668(gp)
   31bc0:	10000326 	beq	r2,zero,31bd0 <alt_get_errno+0x24>
   31bc4:	d0a01917 	ldw	r2,-32668(gp)
   31bc8:	103ee83a 	callr	r2
   31bcc:	00000106 	br	31bd4 <alt_get_errno+0x28>
   31bd0:	d0a71e04 	addi	r2,gp,-25480
}
   31bd4:	e037883a 	mov	sp,fp
   31bd8:	dfc00117 	ldw	ra,4(sp)
   31bdc:	df000017 	ldw	fp,0(sp)
   31be0:	dec00204 	addi	sp,sp,8
   31be4:	f800283a 	ret

00031be8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   31be8:	defff204 	addi	sp,sp,-56
   31bec:	dfc00d15 	stw	ra,52(sp)
   31bf0:	df000c15 	stw	fp,48(sp)
   31bf4:	df000c04 	addi	fp,sp,48
   31bf8:	e13ffc15 	stw	r4,-16(fp)
   31bfc:	e17ffd15 	stw	r5,-12(fp)
   31c00:	e1bffe15 	stw	r6,-8(fp)
   31c04:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
   31c08:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
   31c0c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
   31c10:	e0bfff17 	ldw	r2,-4(fp)
   31c14:	1090000c 	andi	r2,r2,16384
   31c18:	1005003a 	cmpeq	r2,r2,zero
   31c1c:	10803fcc 	andi	r2,r2,255
   31c20:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   31c24:	00001306 	br	31c74 <altera_avalon_uart_read+0x8c>
    {
      count++;
   31c28:	e0bff517 	ldw	r2,-44(fp)
   31c2c:	10800044 	addi	r2,r2,1
   31c30:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
   31c34:	e0bffd17 	ldw	r2,-12(fp)
   31c38:	10c00044 	addi	r3,r2,1
   31c3c:	e0fffd15 	stw	r3,-12(fp)
   31c40:	e0fffc17 	ldw	r3,-16(fp)
   31c44:	18c00217 	ldw	r3,8(r3)
   31c48:	e13ffc17 	ldw	r4,-16(fp)
   31c4c:	20c7883a 	add	r3,r4,r3
   31c50:	18c00704 	addi	r3,r3,28
   31c54:	18c00003 	ldbu	r3,0(r3)
   31c58:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
   31c5c:	e0bffc17 	ldw	r2,-16(fp)
   31c60:	10800217 	ldw	r2,8(r2)
   31c64:	10800044 	addi	r2,r2,1
   31c68:	10c00fcc 	andi	r3,r2,63
   31c6c:	e0bffc17 	ldw	r2,-16(fp)
   31c70:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
   31c74:	e0fff517 	ldw	r3,-44(fp)
   31c78:	e0bffe17 	ldw	r2,-8(fp)
   31c7c:	1880050e 	bge	r3,r2,31c94 <altera_avalon_uart_read+0xac>
   31c80:	e0bffc17 	ldw	r2,-16(fp)
   31c84:	10c00217 	ldw	r3,8(r2)
   31c88:	e0bffc17 	ldw	r2,-16(fp)
   31c8c:	10800317 	ldw	r2,12(r2)
   31c90:	18bfe51e 	bne	r3,r2,31c28 <_gp+0xffff4b98>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
   31c94:	e0bff517 	ldw	r2,-44(fp)
   31c98:	1000251e 	bne	r2,zero,31d30 <altera_avalon_uart_read+0x148>
   31c9c:	e0bffc17 	ldw	r2,-16(fp)
   31ca0:	10c00217 	ldw	r3,8(r2)
   31ca4:	e0bffc17 	ldw	r2,-16(fp)
   31ca8:	10800317 	ldw	r2,12(r2)
   31cac:	1880201e 	bne	r3,r2,31d30 <altera_avalon_uart_read+0x148>
    {
      if (!block)
   31cb0:	e0bff617 	ldw	r2,-40(fp)
   31cb4:	1000071e 	bne	r2,zero,31cd4 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
   31cb8:	0031bac0 	call	31bac <alt_get_errno>
   31cbc:	1007883a 	mov	r3,r2
   31cc0:	008002c4 	movi	r2,11
   31cc4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
   31cc8:	00800044 	movi	r2,1
   31ccc:	e0bff405 	stb	r2,-48(fp)
        break;
   31cd0:	00001b06 	br	31d40 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31cd4:	0005303a 	rdctl	r2,status
   31cd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31cdc:	e0fff917 	ldw	r3,-28(fp)
   31ce0:	00bfff84 	movi	r2,-2
   31ce4:	1884703a 	and	r2,r3,r2
   31ce8:	1001703a 	wrctl	status,r2
  
  return context;
   31cec:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
   31cf0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   31cf4:	e0bffc17 	ldw	r2,-16(fp)
   31cf8:	10800117 	ldw	r2,4(r2)
   31cfc:	10c02014 	ori	r3,r2,128
   31d00:	e0bffc17 	ldw	r2,-16(fp)
   31d04:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31d08:	e0bffc17 	ldw	r2,-16(fp)
   31d0c:	10800017 	ldw	r2,0(r2)
   31d10:	10800304 	addi	r2,r2,12
   31d14:	e0fffc17 	ldw	r3,-16(fp)
   31d18:	18c00117 	ldw	r3,4(r3)
   31d1c:	10c00035 	stwio	r3,0(r2)
   31d20:	e0bff817 	ldw	r2,-32(fp)
   31d24:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31d28:	e0bffa17 	ldw	r2,-24(fp)
   31d2c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
   31d30:	e0bff517 	ldw	r2,-44(fp)
   31d34:	1000021e 	bne	r2,zero,31d40 <altera_avalon_uart_read+0x158>
   31d38:	e0bffe17 	ldw	r2,-8(fp)
   31d3c:	103fcd1e 	bne	r2,zero,31c74 <_gp+0xffff4be4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31d40:	0005303a 	rdctl	r2,status
   31d44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31d48:	e0fffb17 	ldw	r3,-20(fp)
   31d4c:	00bfff84 	movi	r2,-2
   31d50:	1884703a 	and	r2,r3,r2
   31d54:	1001703a 	wrctl	status,r2
  
  return context;
   31d58:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
   31d5c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
   31d60:	e0bffc17 	ldw	r2,-16(fp)
   31d64:	10800117 	ldw	r2,4(r2)
   31d68:	10c02014 	ori	r3,r2,128
   31d6c:	e0bffc17 	ldw	r2,-16(fp)
   31d70:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31d74:	e0bffc17 	ldw	r2,-16(fp)
   31d78:	10800017 	ldw	r2,0(r2)
   31d7c:	10800304 	addi	r2,r2,12
   31d80:	e0fffc17 	ldw	r3,-16(fp)
   31d84:	18c00117 	ldw	r3,4(r3)
   31d88:	10c00035 	stwio	r3,0(r2)
   31d8c:	e0bff817 	ldw	r2,-32(fp)
   31d90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31d94:	e0bff717 	ldw	r2,-36(fp)
   31d98:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
   31d9c:	e0bff403 	ldbu	r2,-48(fp)
   31da0:	10000226 	beq	r2,zero,31dac <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
   31da4:	00bffd44 	movi	r2,-11
   31da8:	00000106 	br	31db0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
   31dac:	e0bff517 	ldw	r2,-44(fp)
  }
}
   31db0:	e037883a 	mov	sp,fp
   31db4:	dfc00117 	ldw	ra,4(sp)
   31db8:	df000017 	ldw	fp,0(sp)
   31dbc:	dec00204 	addi	sp,sp,8
   31dc0:	f800283a 	ret

00031dc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31dc4:	defffe04 	addi	sp,sp,-8
   31dc8:	dfc00115 	stw	ra,4(sp)
   31dcc:	df000015 	stw	fp,0(sp)
   31dd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31dd4:	d0a01917 	ldw	r2,-32668(gp)
   31dd8:	10000326 	beq	r2,zero,31de8 <alt_get_errno+0x24>
   31ddc:	d0a01917 	ldw	r2,-32668(gp)
   31de0:	103ee83a 	callr	r2
   31de4:	00000106 	br	31dec <alt_get_errno+0x28>
   31de8:	d0a71e04 	addi	r2,gp,-25480
}
   31dec:	e037883a 	mov	sp,fp
   31df0:	dfc00117 	ldw	ra,4(sp)
   31df4:	df000017 	ldw	fp,0(sp)
   31df8:	dec00204 	addi	sp,sp,8
   31dfc:	f800283a 	ret

00031e00 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   31e00:	defff204 	addi	sp,sp,-56
   31e04:	dfc00d15 	stw	ra,52(sp)
   31e08:	df000c15 	stw	fp,48(sp)
   31e0c:	df000c04 	addi	fp,sp,48
   31e10:	e13ffc15 	stw	r4,-16(fp)
   31e14:	e17ffd15 	stw	r5,-12(fp)
   31e18:	e1bffe15 	stw	r6,-8(fp)
   31e1c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
   31e20:	e0bffe17 	ldw	r2,-8(fp)
   31e24:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
   31e28:	e0bfff17 	ldw	r2,-4(fp)
   31e2c:	1090000c 	andi	r2,r2,16384
   31e30:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   31e34:	00003c06 	br	31f28 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
   31e38:	e0bffc17 	ldw	r2,-16(fp)
   31e3c:	10800517 	ldw	r2,20(r2)
   31e40:	10800044 	addi	r2,r2,1
   31e44:	10800fcc 	andi	r2,r2,63
   31e48:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
   31e4c:	e0bffc17 	ldw	r2,-16(fp)
   31e50:	10c00417 	ldw	r3,16(r2)
   31e54:	e0bff717 	ldw	r2,-36(fp)
   31e58:	1880221e 	bne	r3,r2,31ee4 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
   31e5c:	e0bff517 	ldw	r2,-44(fp)
   31e60:	10000526 	beq	r2,zero,31e78 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
   31e64:	0031dc40 	call	31dc4 <alt_get_errno>
   31e68:	1007883a 	mov	r3,r2
   31e6c:	008002c4 	movi	r2,11
   31e70:	18800015 	stw	r2,0(r3)
        break;
   31e74:	00002e06 	br	31f30 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31e78:	0005303a 	rdctl	r2,status
   31e7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31e80:	e0fff917 	ldw	r3,-28(fp)
   31e84:	00bfff84 	movi	r2,-2
   31e88:	1884703a 	and	r2,r3,r2
   31e8c:	1001703a 	wrctl	status,r2
  
  return context;
   31e90:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
   31e94:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31e98:	e0bffc17 	ldw	r2,-16(fp)
   31e9c:	10800117 	ldw	r2,4(r2)
   31ea0:	10c11014 	ori	r3,r2,1088
   31ea4:	e0bffc17 	ldw	r2,-16(fp)
   31ea8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31eac:	e0bffc17 	ldw	r2,-16(fp)
   31eb0:	10800017 	ldw	r2,0(r2)
   31eb4:	10800304 	addi	r2,r2,12
   31eb8:	e0fffc17 	ldw	r3,-16(fp)
   31ebc:	18c00117 	ldw	r3,4(r3)
   31ec0:	10c00035 	stwio	r3,0(r2)
   31ec4:	e0bff817 	ldw	r2,-32(fp)
   31ec8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31ecc:	e0bff617 	ldw	r2,-40(fp)
   31ed0:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
   31ed4:	e0bffc17 	ldw	r2,-16(fp)
   31ed8:	10c00417 	ldw	r3,16(r2)
   31edc:	e0bff717 	ldw	r2,-36(fp)
   31ee0:	18bffc26 	beq	r3,r2,31ed4 <_gp+0xffff4e44>
      }
    }

    count--;
   31ee4:	e0bff417 	ldw	r2,-48(fp)
   31ee8:	10bfffc4 	addi	r2,r2,-1
   31eec:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
   31ef0:	e0bffc17 	ldw	r2,-16(fp)
   31ef4:	10c00517 	ldw	r3,20(r2)
   31ef8:	e0bffd17 	ldw	r2,-12(fp)
   31efc:	11000044 	addi	r4,r2,1
   31f00:	e13ffd15 	stw	r4,-12(fp)
   31f04:	10800003 	ldbu	r2,0(r2)
   31f08:	1009883a 	mov	r4,r2
   31f0c:	e0bffc17 	ldw	r2,-16(fp)
   31f10:	10c5883a 	add	r2,r2,r3
   31f14:	10801704 	addi	r2,r2,92
   31f18:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
   31f1c:	e0bffc17 	ldw	r2,-16(fp)
   31f20:	e0fff717 	ldw	r3,-36(fp)
   31f24:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
   31f28:	e0bff417 	ldw	r2,-48(fp)
   31f2c:	103fc21e 	bne	r2,zero,31e38 <_gp+0xffff4da8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31f30:	0005303a 	rdctl	r2,status
   31f34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31f38:	e0fffb17 	ldw	r3,-20(fp)
   31f3c:	00bfff84 	movi	r2,-2
   31f40:	1884703a 	and	r2,r3,r2
   31f44:	1001703a 	wrctl	status,r2
  
  return context;
   31f48:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
   31f4c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
   31f50:	e0bffc17 	ldw	r2,-16(fp)
   31f54:	10800117 	ldw	r2,4(r2)
   31f58:	10c11014 	ori	r3,r2,1088
   31f5c:	e0bffc17 	ldw	r2,-16(fp)
   31f60:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
   31f64:	e0bffc17 	ldw	r2,-16(fp)
   31f68:	10800017 	ldw	r2,0(r2)
   31f6c:	10800304 	addi	r2,r2,12
   31f70:	e0fffc17 	ldw	r3,-16(fp)
   31f74:	18c00117 	ldw	r3,4(r3)
   31f78:	10c00035 	stwio	r3,0(r2)
   31f7c:	e0bff817 	ldw	r2,-32(fp)
   31f80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31f84:	e0bffa17 	ldw	r2,-24(fp)
   31f88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
   31f8c:	e0fffe17 	ldw	r3,-8(fp)
   31f90:	e0bff417 	ldw	r2,-48(fp)
   31f94:	1885c83a 	sub	r2,r3,r2
}
   31f98:	e037883a 	mov	sp,fp
   31f9c:	dfc00117 	ldw	ra,4(sp)
   31fa0:	df000017 	ldw	fp,0(sp)
   31fa4:	dec00204 	addi	sp,sp,8
   31fa8:	f800283a 	ret

00031fac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   31fac:	defff504 	addi	sp,sp,-44
   31fb0:	df000a15 	stw	fp,40(sp)
   31fb4:	df000a04 	addi	fp,sp,40
   31fb8:	e13ffc15 	stw	r4,-16(fp)
   31fbc:	e17ffd15 	stw	r5,-12(fp)
   31fc0:	e1bffe15 	stw	r6,-8(fp)
   31fc4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   31fc8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   31fcc:	d0a72517 	ldw	r2,-25452(gp)
  
  if (alt_ticks_per_second ())
   31fd0:	10003c26 	beq	r2,zero,320c4 <alt_alarm_start+0x118>
  {
    if (alarm)
   31fd4:	e0bffc17 	ldw	r2,-16(fp)
   31fd8:	10003826 	beq	r2,zero,320bc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   31fdc:	e0bffc17 	ldw	r2,-16(fp)
   31fe0:	e0fffe17 	ldw	r3,-8(fp)
   31fe4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   31fe8:	e0bffc17 	ldw	r2,-16(fp)
   31fec:	e0ffff17 	ldw	r3,-4(fp)
   31ff0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31ff4:	0005303a 	rdctl	r2,status
   31ff8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31ffc:	e0fff917 	ldw	r3,-28(fp)
   32000:	00bfff84 	movi	r2,-2
   32004:	1884703a 	and	r2,r3,r2
   32008:	1001703a 	wrctl	status,r2
  
  return context;
   3200c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   32010:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   32014:	d0a72617 	ldw	r2,-25448(gp)
      
      current_nticks = alt_nticks();
   32018:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   3201c:	e0fffd17 	ldw	r3,-12(fp)
   32020:	e0bff617 	ldw	r2,-40(fp)
   32024:	1885883a 	add	r2,r3,r2
   32028:	10c00044 	addi	r3,r2,1
   3202c:	e0bffc17 	ldw	r2,-16(fp)
   32030:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   32034:	e0bffc17 	ldw	r2,-16(fp)
   32038:	10c00217 	ldw	r3,8(r2)
   3203c:	e0bff617 	ldw	r2,-40(fp)
   32040:	1880042e 	bgeu	r3,r2,32054 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   32044:	e0bffc17 	ldw	r2,-16(fp)
   32048:	00c00044 	movi	r3,1
   3204c:	10c00405 	stb	r3,16(r2)
   32050:	00000206 	br	3205c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   32054:	e0bffc17 	ldw	r2,-16(fp)
   32058:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   3205c:	e0bffc17 	ldw	r2,-16(fp)
   32060:	d0e01b04 	addi	r3,gp,-32660
   32064:	e0fffa15 	stw	r3,-24(fp)
   32068:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3206c:	e0bffb17 	ldw	r2,-20(fp)
   32070:	e0fffa17 	ldw	r3,-24(fp)
   32074:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   32078:	e0bffa17 	ldw	r2,-24(fp)
   3207c:	10c00017 	ldw	r3,0(r2)
   32080:	e0bffb17 	ldw	r2,-20(fp)
   32084:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   32088:	e0bffa17 	ldw	r2,-24(fp)
   3208c:	10800017 	ldw	r2,0(r2)
   32090:	e0fffb17 	ldw	r3,-20(fp)
   32094:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   32098:	e0bffa17 	ldw	r2,-24(fp)
   3209c:	e0fffb17 	ldw	r3,-20(fp)
   320a0:	10c00015 	stw	r3,0(r2)
   320a4:	e0bff817 	ldw	r2,-32(fp)
   320a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   320ac:	e0bff717 	ldw	r2,-36(fp)
   320b0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   320b4:	0005883a 	mov	r2,zero
   320b8:	00000306 	br	320c8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   320bc:	00bffa84 	movi	r2,-22
   320c0:	00000106 	br	320c8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   320c4:	00bfde84 	movi	r2,-134
  }
}
   320c8:	e037883a 	mov	sp,fp
   320cc:	df000017 	ldw	fp,0(sp)
   320d0:	dec00104 	addi	sp,sp,4
   320d4:	f800283a 	ret

000320d8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   320d8:	defffa04 	addi	sp,sp,-24
   320dc:	dfc00515 	stw	ra,20(sp)
   320e0:	df000415 	stw	fp,16(sp)
   320e4:	df000404 	addi	fp,sp,16
   320e8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   320ec:	008000c4 	movi	r2,3
   320f0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   320f4:	e0fffd17 	ldw	r3,-12(fp)
   320f8:	008003f4 	movhi	r2,15
   320fc:	10909004 	addi	r2,r2,16960
   32100:	1885383a 	mul	r2,r3,r2
   32104:	100b883a 	mov	r5,r2
   32108:	0100bef4 	movhi	r4,763
   3210c:	213c2004 	addi	r4,r4,-3968
   32110:	00229780 	call	22978 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   32114:	100b883a 	mov	r5,r2
   32118:	01200034 	movhi	r4,32768
   3211c:	213fffc4 	addi	r4,r4,-1
   32120:	00229780 	call	22978 <__udivsi3>
   32124:	100b883a 	mov	r5,r2
   32128:	e13fff17 	ldw	r4,-4(fp)
   3212c:	00229780 	call	22978 <__udivsi3>
   32130:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   32134:	e0bffe17 	ldw	r2,-8(fp)
   32138:	10002a26 	beq	r2,zero,321e4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   3213c:	e03ffc15 	stw	zero,-16(fp)
   32140:	00001706 	br	321a0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   32144:	00a00034 	movhi	r2,32768
   32148:	10bfffc4 	addi	r2,r2,-1
   3214c:	10bfffc4 	addi	r2,r2,-1
   32150:	103ffe1e 	bne	r2,zero,3214c <_gp+0xffff50bc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   32154:	e0fffd17 	ldw	r3,-12(fp)
   32158:	008003f4 	movhi	r2,15
   3215c:	10909004 	addi	r2,r2,16960
   32160:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   32164:	100b883a 	mov	r5,r2
   32168:	0100bef4 	movhi	r4,763
   3216c:	213c2004 	addi	r4,r4,-3968
   32170:	00229780 	call	22978 <__udivsi3>
   32174:	100b883a 	mov	r5,r2
   32178:	01200034 	movhi	r4,32768
   3217c:	213fffc4 	addi	r4,r4,-1
   32180:	00229780 	call	22978 <__udivsi3>
   32184:	1007883a 	mov	r3,r2
   32188:	e0bfff17 	ldw	r2,-4(fp)
   3218c:	10c5c83a 	sub	r2,r2,r3
   32190:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   32194:	e0bffc17 	ldw	r2,-16(fp)
   32198:	10800044 	addi	r2,r2,1
   3219c:	e0bffc15 	stw	r2,-16(fp)
   321a0:	e0fffc17 	ldw	r3,-16(fp)
   321a4:	e0bffe17 	ldw	r2,-8(fp)
   321a8:	18bfe616 	blt	r3,r2,32144 <_gp+0xffff50b4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   321ac:	e0fffd17 	ldw	r3,-12(fp)
   321b0:	008003f4 	movhi	r2,15
   321b4:	10909004 	addi	r2,r2,16960
   321b8:	1885383a 	mul	r2,r3,r2
   321bc:	100b883a 	mov	r5,r2
   321c0:	0100bef4 	movhi	r4,763
   321c4:	213c2004 	addi	r4,r4,-3968
   321c8:	00229780 	call	22978 <__udivsi3>
   321cc:	1007883a 	mov	r3,r2
   321d0:	e0bfff17 	ldw	r2,-4(fp)
   321d4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   321d8:	10bfffc4 	addi	r2,r2,-1
   321dc:	103ffe1e 	bne	r2,zero,321d8 <_gp+0xffff5148>
   321e0:	00000d06 	br	32218 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   321e4:	e0fffd17 	ldw	r3,-12(fp)
   321e8:	008003f4 	movhi	r2,15
   321ec:	10909004 	addi	r2,r2,16960
   321f0:	1885383a 	mul	r2,r3,r2
   321f4:	100b883a 	mov	r5,r2
   321f8:	0100bef4 	movhi	r4,763
   321fc:	213c2004 	addi	r4,r4,-3968
   32200:	00229780 	call	22978 <__udivsi3>
   32204:	1007883a 	mov	r3,r2
   32208:	e0bfff17 	ldw	r2,-4(fp)
   3220c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   32210:	10bfffc4 	addi	r2,r2,-1
   32214:	00bffe16 	blt	zero,r2,32210 <_gp+0xffff5180>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   32218:	0005883a 	mov	r2,zero
}
   3221c:	e037883a 	mov	sp,fp
   32220:	dfc00117 	ldw	ra,4(sp)
   32224:	df000017 	ldw	fp,0(sp)
   32228:	dec00204 	addi	sp,sp,8
   3222c:	f800283a 	ret

00032230 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   32230:	defffe04 	addi	sp,sp,-8
   32234:	df000115 	stw	fp,4(sp)
   32238:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   3223c:	e03fff15 	stw	zero,-4(fp)
   32240:	00000506 	br	32258 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   32244:	e0bfff17 	ldw	r2,-4(fp)
   32248:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   3224c:	e0bfff17 	ldw	r2,-4(fp)
   32250:	10800804 	addi	r2,r2,32
   32254:	e0bfff15 	stw	r2,-4(fp)
   32258:	e0bfff17 	ldw	r2,-4(fp)
   3225c:	10820030 	cmpltui	r2,r2,2048
   32260:	103ff81e 	bne	r2,zero,32244 <_gp+0xffff51b4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   32264:	0001883a 	nop
   32268:	e037883a 	mov	sp,fp
   3226c:	df000017 	ldw	fp,0(sp)
   32270:	dec00104 	addi	sp,sp,4
   32274:	f800283a 	ret

00032278 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   32278:	defffe04 	addi	sp,sp,-8
   3227c:	dfc00115 	stw	ra,4(sp)
   32280:	df000015 	stw	fp,0(sp)
   32284:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   32288:	d0a01917 	ldw	r2,-32668(gp)
   3228c:	10000326 	beq	r2,zero,3229c <alt_get_errno+0x24>
   32290:	d0a01917 	ldw	r2,-32668(gp)
   32294:	103ee83a 	callr	r2
   32298:	00000106 	br	322a0 <alt_get_errno+0x28>
   3229c:	d0a71e04 	addi	r2,gp,-25480
}
   322a0:	e037883a 	mov	sp,fp
   322a4:	dfc00117 	ldw	ra,4(sp)
   322a8:	df000017 	ldw	fp,0(sp)
   322ac:	dec00204 	addi	sp,sp,8
   322b0:	f800283a 	ret

000322b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   322b4:	defffa04 	addi	sp,sp,-24
   322b8:	dfc00515 	stw	ra,20(sp)
   322bc:	df000415 	stw	fp,16(sp)
   322c0:	df000404 	addi	fp,sp,16
   322c4:	e13ffe15 	stw	r4,-8(fp)
   322c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   322cc:	e0bffe17 	ldw	r2,-8(fp)
   322d0:	10000326 	beq	r2,zero,322e0 <alt_dev_llist_insert+0x2c>
   322d4:	e0bffe17 	ldw	r2,-8(fp)
   322d8:	10800217 	ldw	r2,8(r2)
   322dc:	1000061e 	bne	r2,zero,322f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   322e0:	00322780 	call	32278 <alt_get_errno>
   322e4:	1007883a 	mov	r3,r2
   322e8:	00800584 	movi	r2,22
   322ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   322f0:	00bffa84 	movi	r2,-22
   322f4:	00001306 	br	32344 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   322f8:	e0bffe17 	ldw	r2,-8(fp)
   322fc:	e0ffff17 	ldw	r3,-4(fp)
   32300:	e0fffc15 	stw	r3,-16(fp)
   32304:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   32308:	e0bffd17 	ldw	r2,-12(fp)
   3230c:	e0fffc17 	ldw	r3,-16(fp)
   32310:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   32314:	e0bffc17 	ldw	r2,-16(fp)
   32318:	10c00017 	ldw	r3,0(r2)
   3231c:	e0bffd17 	ldw	r2,-12(fp)
   32320:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   32324:	e0bffc17 	ldw	r2,-16(fp)
   32328:	10800017 	ldw	r2,0(r2)
   3232c:	e0fffd17 	ldw	r3,-12(fp)
   32330:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   32334:	e0bffc17 	ldw	r2,-16(fp)
   32338:	e0fffd17 	ldw	r3,-12(fp)
   3233c:	10c00015 	stw	r3,0(r2)

  return 0;  
   32340:	0005883a 	mov	r2,zero
}
   32344:	e037883a 	mov	sp,fp
   32348:	dfc00117 	ldw	ra,4(sp)
   3234c:	df000017 	ldw	fp,0(sp)
   32350:	dec00204 	addi	sp,sp,8
   32354:	f800283a 	ret

00032358 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   32358:	defffd04 	addi	sp,sp,-12
   3235c:	dfc00215 	stw	ra,8(sp)
   32360:	df000115 	stw	fp,4(sp)
   32364:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   32368:	008000f4 	movhi	r2,3
   3236c:	108bd604 	addi	r2,r2,12120
   32370:	e0bfff15 	stw	r2,-4(fp)
   32374:	00000606 	br	32390 <_do_ctors+0x38>
        (*ctor) (); 
   32378:	e0bfff17 	ldw	r2,-4(fp)
   3237c:	10800017 	ldw	r2,0(r2)
   32380:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   32384:	e0bfff17 	ldw	r2,-4(fp)
   32388:	10bfff04 	addi	r2,r2,-4
   3238c:	e0bfff15 	stw	r2,-4(fp)
   32390:	e0ffff17 	ldw	r3,-4(fp)
   32394:	008000f4 	movhi	r2,3
   32398:	108bd544 	addi	r2,r2,12117
   3239c:	18bff62e 	bgeu	r3,r2,32378 <_gp+0xffff52e8>
        (*ctor) (); 
}
   323a0:	0001883a 	nop
   323a4:	e037883a 	mov	sp,fp
   323a8:	dfc00117 	ldw	ra,4(sp)
   323ac:	df000017 	ldw	fp,0(sp)
   323b0:	dec00204 	addi	sp,sp,8
   323b4:	f800283a 	ret

000323b8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   323b8:	defffd04 	addi	sp,sp,-12
   323bc:	dfc00215 	stw	ra,8(sp)
   323c0:	df000115 	stw	fp,4(sp)
   323c4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   323c8:	008000f4 	movhi	r2,3
   323cc:	108bd604 	addi	r2,r2,12120
   323d0:	e0bfff15 	stw	r2,-4(fp)
   323d4:	00000606 	br	323f0 <_do_dtors+0x38>
        (*dtor) (); 
   323d8:	e0bfff17 	ldw	r2,-4(fp)
   323dc:	10800017 	ldw	r2,0(r2)
   323e0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   323e4:	e0bfff17 	ldw	r2,-4(fp)
   323e8:	10bfff04 	addi	r2,r2,-4
   323ec:	e0bfff15 	stw	r2,-4(fp)
   323f0:	e0ffff17 	ldw	r3,-4(fp)
   323f4:	008000f4 	movhi	r2,3
   323f8:	108bd704 	addi	r2,r2,12124
   323fc:	18bff62e 	bgeu	r3,r2,323d8 <_gp+0xffff5348>
        (*dtor) (); 
}
   32400:	0001883a 	nop
   32404:	e037883a 	mov	sp,fp
   32408:	dfc00117 	ldw	ra,4(sp)
   3240c:	df000017 	ldw	fp,0(sp)
   32410:	dec00204 	addi	sp,sp,8
   32414:	f800283a 	ret

00032418 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   32418:	defffa04 	addi	sp,sp,-24
   3241c:	dfc00515 	stw	ra,20(sp)
   32420:	df000415 	stw	fp,16(sp)
   32424:	df000404 	addi	fp,sp,16
   32428:	e13ffe15 	stw	r4,-8(fp)
   3242c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   32430:	e0bfff17 	ldw	r2,-4(fp)
   32434:	10800017 	ldw	r2,0(r2)
   32438:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   3243c:	e13ffe17 	ldw	r4,-8(fp)
   32440:	0023e3c0 	call	23e3c <strlen>
   32444:	10800044 	addi	r2,r2,1
   32448:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   3244c:	00000d06 	br	32484 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   32450:	e0bffc17 	ldw	r2,-16(fp)
   32454:	10800217 	ldw	r2,8(r2)
   32458:	e0fffd17 	ldw	r3,-12(fp)
   3245c:	180d883a 	mov	r6,r3
   32460:	e17ffe17 	ldw	r5,-8(fp)
   32464:	1009883a 	mov	r4,r2
   32468:	0032c040 	call	32c04 <memcmp>
   3246c:	1000021e 	bne	r2,zero,32478 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   32470:	e0bffc17 	ldw	r2,-16(fp)
   32474:	00000706 	br	32494 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   32478:	e0bffc17 	ldw	r2,-16(fp)
   3247c:	10800017 	ldw	r2,0(r2)
   32480:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   32484:	e0fffc17 	ldw	r3,-16(fp)
   32488:	e0bfff17 	ldw	r2,-4(fp)
   3248c:	18bff01e 	bne	r3,r2,32450 <_gp+0xffff53c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   32490:	0005883a 	mov	r2,zero
}
   32494:	e037883a 	mov	sp,fp
   32498:	dfc00117 	ldw	ra,4(sp)
   3249c:	df000017 	ldw	fp,0(sp)
   324a0:	dec00204 	addi	sp,sp,8
   324a4:	f800283a 	ret

000324a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   324a8:	defffb04 	addi	sp,sp,-20
   324ac:	dfc00415 	stw	ra,16(sp)
   324b0:	df000315 	stw	fp,12(sp)
   324b4:	df000304 	addi	fp,sp,12
   324b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   324bc:	d0a01417 	ldw	r2,-32688(gp)
   324c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   324c4:	00003106 	br	3258c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   324c8:	e0bffd17 	ldw	r2,-12(fp)
   324cc:	10800217 	ldw	r2,8(r2)
   324d0:	1009883a 	mov	r4,r2
   324d4:	0023e3c0 	call	23e3c <strlen>
   324d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   324dc:	e0bffd17 	ldw	r2,-12(fp)
   324e0:	10c00217 	ldw	r3,8(r2)
   324e4:	e0bffe17 	ldw	r2,-8(fp)
   324e8:	10bfffc4 	addi	r2,r2,-1
   324ec:	1885883a 	add	r2,r3,r2
   324f0:	10800003 	ldbu	r2,0(r2)
   324f4:	10803fcc 	andi	r2,r2,255
   324f8:	1080201c 	xori	r2,r2,128
   324fc:	10bfe004 	addi	r2,r2,-128
   32500:	10800bd8 	cmpnei	r2,r2,47
   32504:	1000031e 	bne	r2,zero,32514 <alt_find_file+0x6c>
    {
      len -= 1;
   32508:	e0bffe17 	ldw	r2,-8(fp)
   3250c:	10bfffc4 	addi	r2,r2,-1
   32510:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   32514:	e0bffe17 	ldw	r2,-8(fp)
   32518:	e0ffff17 	ldw	r3,-4(fp)
   3251c:	1885883a 	add	r2,r3,r2
   32520:	10800003 	ldbu	r2,0(r2)
   32524:	10803fcc 	andi	r2,r2,255
   32528:	1080201c 	xori	r2,r2,128
   3252c:	10bfe004 	addi	r2,r2,-128
   32530:	10800be0 	cmpeqi	r2,r2,47
   32534:	1000081e 	bne	r2,zero,32558 <alt_find_file+0xb0>
   32538:	e0bffe17 	ldw	r2,-8(fp)
   3253c:	e0ffff17 	ldw	r3,-4(fp)
   32540:	1885883a 	add	r2,r3,r2
   32544:	10800003 	ldbu	r2,0(r2)
   32548:	10803fcc 	andi	r2,r2,255
   3254c:	1080201c 	xori	r2,r2,128
   32550:	10bfe004 	addi	r2,r2,-128
   32554:	10000a1e 	bne	r2,zero,32580 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   32558:	e0bffd17 	ldw	r2,-12(fp)
   3255c:	10800217 	ldw	r2,8(r2)
   32560:	e0fffe17 	ldw	r3,-8(fp)
   32564:	180d883a 	mov	r6,r3
   32568:	e17fff17 	ldw	r5,-4(fp)
   3256c:	1009883a 	mov	r4,r2
   32570:	0032c040 	call	32c04 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   32574:	1000021e 	bne	r2,zero,32580 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   32578:	e0bffd17 	ldw	r2,-12(fp)
   3257c:	00000706 	br	3259c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   32580:	e0bffd17 	ldw	r2,-12(fp)
   32584:	10800017 	ldw	r2,0(r2)
   32588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   3258c:	e0fffd17 	ldw	r3,-12(fp)
   32590:	d0a01404 	addi	r2,gp,-32688
   32594:	18bfcc1e 	bne	r3,r2,324c8 <_gp+0xffff5438>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   32598:	0005883a 	mov	r2,zero
}
   3259c:	e037883a 	mov	sp,fp
   325a0:	dfc00117 	ldw	ra,4(sp)
   325a4:	df000017 	ldw	fp,0(sp)
   325a8:	dec00204 	addi	sp,sp,8
   325ac:	f800283a 	ret

000325b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   325b0:	defffc04 	addi	sp,sp,-16
   325b4:	df000315 	stw	fp,12(sp)
   325b8:	df000304 	addi	fp,sp,12
   325bc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   325c0:	00bffa04 	movi	r2,-24
   325c4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   325c8:	e03ffd15 	stw	zero,-12(fp)
   325cc:	00001906 	br	32634 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   325d0:	008000f4 	movhi	r2,3
   325d4:	108f7b04 	addi	r2,r2,15852
   325d8:	e0fffd17 	ldw	r3,-12(fp)
   325dc:	18c00324 	muli	r3,r3,12
   325e0:	10c5883a 	add	r2,r2,r3
   325e4:	10800017 	ldw	r2,0(r2)
   325e8:	10000f1e 	bne	r2,zero,32628 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   325ec:	008000f4 	movhi	r2,3
   325f0:	108f7b04 	addi	r2,r2,15852
   325f4:	e0fffd17 	ldw	r3,-12(fp)
   325f8:	18c00324 	muli	r3,r3,12
   325fc:	10c5883a 	add	r2,r2,r3
   32600:	e0ffff17 	ldw	r3,-4(fp)
   32604:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   32608:	d0e01817 	ldw	r3,-32672(gp)
   3260c:	e0bffd17 	ldw	r2,-12(fp)
   32610:	1880020e 	bge	r3,r2,3261c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   32614:	e0bffd17 	ldw	r2,-12(fp)
   32618:	d0a01815 	stw	r2,-32672(gp)
      }
      rc = i;
   3261c:	e0bffd17 	ldw	r2,-12(fp)
   32620:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   32624:	00000606 	br	32640 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   32628:	e0bffd17 	ldw	r2,-12(fp)
   3262c:	10800044 	addi	r2,r2,1
   32630:	e0bffd15 	stw	r2,-12(fp)
   32634:	e0bffd17 	ldw	r2,-12(fp)
   32638:	10800810 	cmplti	r2,r2,32
   3263c:	103fe41e 	bne	r2,zero,325d0 <_gp+0xffff5540>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   32640:	e0bffe17 	ldw	r2,-8(fp)
}
   32644:	e037883a 	mov	sp,fp
   32648:	df000017 	ldw	fp,0(sp)
   3264c:	dec00104 	addi	sp,sp,4
   32650:	f800283a 	ret

00032654 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   32654:	defffe04 	addi	sp,sp,-8
   32658:	dfc00115 	stw	ra,4(sp)
   3265c:	df000015 	stw	fp,0(sp)
   32660:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   32664:	01440004 	movi	r5,4096
   32668:	0009883a 	mov	r4,zero
   3266c:	0032a8c0 	call	32a8c <alt_icache_flush>
#endif
}
   32670:	0001883a 	nop
   32674:	e037883a 	mov	sp,fp
   32678:	dfc00117 	ldw	ra,4(sp)
   3267c:	df000017 	ldw	fp,0(sp)
   32680:	dec00204 	addi	sp,sp,8
   32684:	f800283a 	ret

00032688 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   32688:	defff904 	addi	sp,sp,-28
   3268c:	dfc00615 	stw	ra,24(sp)
   32690:	df000515 	stw	fp,20(sp)
   32694:	df000504 	addi	fp,sp,20
   32698:	e13ffc15 	stw	r4,-16(fp)
   3269c:	e17ffd15 	stw	r5,-12(fp)
   326a0:	e1bffe15 	stw	r6,-8(fp)
   326a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   326a8:	e0800217 	ldw	r2,8(fp)
   326ac:	d8800015 	stw	r2,0(sp)
   326b0:	e1ffff17 	ldw	r7,-4(fp)
   326b4:	e1bffe17 	ldw	r6,-8(fp)
   326b8:	e17ffd17 	ldw	r5,-12(fp)
   326bc:	e13ffc17 	ldw	r4,-16(fp)
   326c0:	00328380 	call	32838 <alt_iic_isr_register>
}  
   326c4:	e037883a 	mov	sp,fp
   326c8:	dfc00117 	ldw	ra,4(sp)
   326cc:	df000017 	ldw	fp,0(sp)
   326d0:	dec00204 	addi	sp,sp,8
   326d4:	f800283a 	ret

000326d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   326d8:	defff904 	addi	sp,sp,-28
   326dc:	df000615 	stw	fp,24(sp)
   326e0:	df000604 	addi	fp,sp,24
   326e4:	e13ffe15 	stw	r4,-8(fp)
   326e8:	e17fff15 	stw	r5,-4(fp)
   326ec:	e0bfff17 	ldw	r2,-4(fp)
   326f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   326f4:	0005303a 	rdctl	r2,status
   326f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   326fc:	e0fffb17 	ldw	r3,-20(fp)
   32700:	00bfff84 	movi	r2,-2
   32704:	1884703a 	and	r2,r3,r2
   32708:	1001703a 	wrctl	status,r2
  
  return context;
   3270c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   32710:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   32714:	00c00044 	movi	r3,1
   32718:	e0bffa17 	ldw	r2,-24(fp)
   3271c:	1884983a 	sll	r2,r3,r2
   32720:	1007883a 	mov	r3,r2
   32724:	d0a72717 	ldw	r2,-25444(gp)
   32728:	1884b03a 	or	r2,r3,r2
   3272c:	d0a72715 	stw	r2,-25444(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   32730:	d0a72717 	ldw	r2,-25444(gp)
   32734:	100170fa 	wrctl	ienable,r2
   32738:	e0bffc17 	ldw	r2,-16(fp)
   3273c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32740:	e0bffd17 	ldw	r2,-12(fp)
   32744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   32748:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   3274c:	0001883a 	nop
}
   32750:	e037883a 	mov	sp,fp
   32754:	df000017 	ldw	fp,0(sp)
   32758:	dec00104 	addi	sp,sp,4
   3275c:	f800283a 	ret

00032760 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   32760:	defff904 	addi	sp,sp,-28
   32764:	df000615 	stw	fp,24(sp)
   32768:	df000604 	addi	fp,sp,24
   3276c:	e13ffe15 	stw	r4,-8(fp)
   32770:	e17fff15 	stw	r5,-4(fp)
   32774:	e0bfff17 	ldw	r2,-4(fp)
   32778:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3277c:	0005303a 	rdctl	r2,status
   32780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32784:	e0fffb17 	ldw	r3,-20(fp)
   32788:	00bfff84 	movi	r2,-2
   3278c:	1884703a 	and	r2,r3,r2
   32790:	1001703a 	wrctl	status,r2
  
  return context;
   32794:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   32798:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   3279c:	00c00044 	movi	r3,1
   327a0:	e0bffa17 	ldw	r2,-24(fp)
   327a4:	1884983a 	sll	r2,r3,r2
   327a8:	0084303a 	nor	r2,zero,r2
   327ac:	1007883a 	mov	r3,r2
   327b0:	d0a72717 	ldw	r2,-25444(gp)
   327b4:	1884703a 	and	r2,r3,r2
   327b8:	d0a72715 	stw	r2,-25444(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   327bc:	d0a72717 	ldw	r2,-25444(gp)
   327c0:	100170fa 	wrctl	ienable,r2
   327c4:	e0bffc17 	ldw	r2,-16(fp)
   327c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   327cc:	e0bffd17 	ldw	r2,-12(fp)
   327d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   327d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   327d8:	0001883a 	nop
}
   327dc:	e037883a 	mov	sp,fp
   327e0:	df000017 	ldw	fp,0(sp)
   327e4:	dec00104 	addi	sp,sp,4
   327e8:	f800283a 	ret

000327ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   327ec:	defffc04 	addi	sp,sp,-16
   327f0:	df000315 	stw	fp,12(sp)
   327f4:	df000304 	addi	fp,sp,12
   327f8:	e13ffe15 	stw	r4,-8(fp)
   327fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   32800:	000530fa 	rdctl	r2,ienable
   32804:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   32808:	00c00044 	movi	r3,1
   3280c:	e0bfff17 	ldw	r2,-4(fp)
   32810:	1884983a 	sll	r2,r3,r2
   32814:	1007883a 	mov	r3,r2
   32818:	e0bffd17 	ldw	r2,-12(fp)
   3281c:	1884703a 	and	r2,r3,r2
   32820:	1004c03a 	cmpne	r2,r2,zero
   32824:	10803fcc 	andi	r2,r2,255
}
   32828:	e037883a 	mov	sp,fp
   3282c:	df000017 	ldw	fp,0(sp)
   32830:	dec00104 	addi	sp,sp,4
   32834:	f800283a 	ret

00032838 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   32838:	defff504 	addi	sp,sp,-44
   3283c:	dfc00a15 	stw	ra,40(sp)
   32840:	df000915 	stw	fp,36(sp)
   32844:	df000904 	addi	fp,sp,36
   32848:	e13ffc15 	stw	r4,-16(fp)
   3284c:	e17ffd15 	stw	r5,-12(fp)
   32850:	e1bffe15 	stw	r6,-8(fp)
   32854:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   32858:	00bffa84 	movi	r2,-22
   3285c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   32860:	e0bffd17 	ldw	r2,-12(fp)
   32864:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   32868:	e0bff817 	ldw	r2,-32(fp)
   3286c:	10800808 	cmpgei	r2,r2,32
   32870:	1000271e 	bne	r2,zero,32910 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32874:	0005303a 	rdctl	r2,status
   32878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   3287c:	e0fffb17 	ldw	r3,-20(fp)
   32880:	00bfff84 	movi	r2,-2
   32884:	1884703a 	and	r2,r3,r2
   32888:	1001703a 	wrctl	status,r2
  
  return context;
   3288c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   32890:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   32894:	008000f4 	movhi	r2,3
   32898:	109b5b04 	addi	r2,r2,28012
   3289c:	e0fff817 	ldw	r3,-32(fp)
   328a0:	180690fa 	slli	r3,r3,3
   328a4:	10c5883a 	add	r2,r2,r3
   328a8:	e0fffe17 	ldw	r3,-8(fp)
   328ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   328b0:	008000f4 	movhi	r2,3
   328b4:	109b5b04 	addi	r2,r2,28012
   328b8:	e0fff817 	ldw	r3,-32(fp)
   328bc:	180690fa 	slli	r3,r3,3
   328c0:	10c5883a 	add	r2,r2,r3
   328c4:	10800104 	addi	r2,r2,4
   328c8:	e0ffff17 	ldw	r3,-4(fp)
   328cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   328d0:	e0bffe17 	ldw	r2,-8(fp)
   328d4:	10000526 	beq	r2,zero,328ec <alt_iic_isr_register+0xb4>
   328d8:	e0bff817 	ldw	r2,-32(fp)
   328dc:	100b883a 	mov	r5,r2
   328e0:	e13ffc17 	ldw	r4,-16(fp)
   328e4:	00326d80 	call	326d8 <alt_ic_irq_enable>
   328e8:	00000406 	br	328fc <alt_iic_isr_register+0xc4>
   328ec:	e0bff817 	ldw	r2,-32(fp)
   328f0:	100b883a 	mov	r5,r2
   328f4:	e13ffc17 	ldw	r4,-16(fp)
   328f8:	00327600 	call	32760 <alt_ic_irq_disable>
   328fc:	e0bff715 	stw	r2,-36(fp)
   32900:	e0bffa17 	ldw	r2,-24(fp)
   32904:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32908:	e0bff917 	ldw	r2,-28(fp)
   3290c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   32910:	e0bff717 	ldw	r2,-36(fp)
}
   32914:	e037883a 	mov	sp,fp
   32918:	dfc00117 	ldw	ra,4(sp)
   3291c:	df000017 	ldw	fp,0(sp)
   32920:	dec00204 	addi	sp,sp,8
   32924:	f800283a 	ret

00032928 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   32928:	defff904 	addi	sp,sp,-28
   3292c:	dfc00615 	stw	ra,24(sp)
   32930:	df000515 	stw	fp,20(sp)
   32934:	df000504 	addi	fp,sp,20
   32938:	e13ffc15 	stw	r4,-16(fp)
   3293c:	e17ffd15 	stw	r5,-12(fp)
   32940:	e1bffe15 	stw	r6,-8(fp)
   32944:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   32948:	e1bfff17 	ldw	r6,-4(fp)
   3294c:	e17ffe17 	ldw	r5,-8(fp)
   32950:	e13ffd17 	ldw	r4,-12(fp)
   32954:	00303e40 	call	303e4 <open>
   32958:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   3295c:	e0bffb17 	ldw	r2,-20(fp)
   32960:	10001c16 	blt	r2,zero,329d4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   32964:	008000f4 	movhi	r2,3
   32968:	108f7b04 	addi	r2,r2,15852
   3296c:	e0fffb17 	ldw	r3,-20(fp)
   32970:	18c00324 	muli	r3,r3,12
   32974:	10c5883a 	add	r2,r2,r3
   32978:	10c00017 	ldw	r3,0(r2)
   3297c:	e0bffc17 	ldw	r2,-16(fp)
   32980:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   32984:	008000f4 	movhi	r2,3
   32988:	108f7b04 	addi	r2,r2,15852
   3298c:	e0fffb17 	ldw	r3,-20(fp)
   32990:	18c00324 	muli	r3,r3,12
   32994:	10c5883a 	add	r2,r2,r3
   32998:	10800104 	addi	r2,r2,4
   3299c:	10c00017 	ldw	r3,0(r2)
   329a0:	e0bffc17 	ldw	r2,-16(fp)
   329a4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   329a8:	008000f4 	movhi	r2,3
   329ac:	108f7b04 	addi	r2,r2,15852
   329b0:	e0fffb17 	ldw	r3,-20(fp)
   329b4:	18c00324 	muli	r3,r3,12
   329b8:	10c5883a 	add	r2,r2,r3
   329bc:	10800204 	addi	r2,r2,8
   329c0:	10c00017 	ldw	r3,0(r2)
   329c4:	e0bffc17 	ldw	r2,-16(fp)
   329c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   329cc:	e13ffb17 	ldw	r4,-20(fp)
   329d0:	00306700 	call	30670 <alt_release_fd>
  }
} 
   329d4:	0001883a 	nop
   329d8:	e037883a 	mov	sp,fp
   329dc:	dfc00117 	ldw	ra,4(sp)
   329e0:	df000017 	ldw	fp,0(sp)
   329e4:	dec00204 	addi	sp,sp,8
   329e8:	f800283a 	ret

000329ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   329ec:	defffb04 	addi	sp,sp,-20
   329f0:	dfc00415 	stw	ra,16(sp)
   329f4:	df000315 	stw	fp,12(sp)
   329f8:	df000304 	addi	fp,sp,12
   329fc:	e13ffd15 	stw	r4,-12(fp)
   32a00:	e17ffe15 	stw	r5,-8(fp)
   32a04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   32a08:	01c07fc4 	movi	r7,511
   32a0c:	01800044 	movi	r6,1
   32a10:	e17ffd17 	ldw	r5,-12(fp)
   32a14:	010000f4 	movhi	r4,3
   32a18:	210f7e04 	addi	r4,r4,15864
   32a1c:	00329280 	call	32928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   32a20:	01c07fc4 	movi	r7,511
   32a24:	000d883a 	mov	r6,zero
   32a28:	e17ffe17 	ldw	r5,-8(fp)
   32a2c:	010000f4 	movhi	r4,3
   32a30:	210f7b04 	addi	r4,r4,15852
   32a34:	00329280 	call	32928 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   32a38:	01c07fc4 	movi	r7,511
   32a3c:	01800044 	movi	r6,1
   32a40:	e17fff17 	ldw	r5,-4(fp)
   32a44:	010000f4 	movhi	r4,3
   32a48:	210f8104 	addi	r4,r4,15876
   32a4c:	00329280 	call	32928 <alt_open_fd>
}  
   32a50:	0001883a 	nop
   32a54:	e037883a 	mov	sp,fp
   32a58:	dfc00117 	ldw	ra,4(sp)
   32a5c:	df000017 	ldw	fp,0(sp)
   32a60:	dec00204 	addi	sp,sp,8
   32a64:	f800283a 	ret

00032a68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   32a68:	deffff04 	addi	sp,sp,-4
   32a6c:	df000015 	stw	fp,0(sp)
   32a70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   32a74:	000170fa 	wrctl	ienable,zero
}
   32a78:	0001883a 	nop
   32a7c:	e037883a 	mov	sp,fp
   32a80:	df000017 	ldw	fp,0(sp)
   32a84:	dec00104 	addi	sp,sp,4
   32a88:	f800283a 	ret

00032a8c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   32a8c:	defffb04 	addi	sp,sp,-20
   32a90:	df000415 	stw	fp,16(sp)
   32a94:	df000404 	addi	fp,sp,16
   32a98:	e13ffe15 	stw	r4,-8(fp)
   32a9c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   32aa0:	e0bfff17 	ldw	r2,-4(fp)
   32aa4:	10840070 	cmpltui	r2,r2,4097
   32aa8:	1000021e 	bne	r2,zero,32ab4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   32aac:	00840004 	movi	r2,4096
   32ab0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   32ab4:	e0fffe17 	ldw	r3,-8(fp)
   32ab8:	e0bfff17 	ldw	r2,-4(fp)
   32abc:	1885883a 	add	r2,r3,r2
   32ac0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   32ac4:	e0bffe17 	ldw	r2,-8(fp)
   32ac8:	e0bffc15 	stw	r2,-16(fp)
   32acc:	00000506 	br	32ae4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   32ad0:	e0bffc17 	ldw	r2,-16(fp)
   32ad4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   32ad8:	e0bffc17 	ldw	r2,-16(fp)
   32adc:	10800804 	addi	r2,r2,32
   32ae0:	e0bffc15 	stw	r2,-16(fp)
   32ae4:	e0fffc17 	ldw	r3,-16(fp)
   32ae8:	e0bffd17 	ldw	r2,-12(fp)
   32aec:	18bff836 	bltu	r3,r2,32ad0 <_gp+0xffff5a40>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   32af0:	e0bffe17 	ldw	r2,-8(fp)
   32af4:	108007cc 	andi	r2,r2,31
   32af8:	10000226 	beq	r2,zero,32b04 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   32afc:	e0bffc17 	ldw	r2,-16(fp)
   32b00:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   32b04:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   32b08:	0001883a 	nop
   32b0c:	e037883a 	mov	sp,fp
   32b10:	df000017 	ldw	fp,0(sp)
   32b14:	dec00104 	addi	sp,sp,4
   32b18:	f800283a 	ret

00032b1c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   32b1c:	defffe04 	addi	sp,sp,-8
   32b20:	df000115 	stw	fp,4(sp)
   32b24:	df000104 	addi	fp,sp,4
   32b28:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   32b2c:	e0bfff17 	ldw	r2,-4(fp)
   32b30:	10bffe84 	addi	r2,r2,-6
   32b34:	10c00428 	cmpgeui	r3,r2,16
   32b38:	18001a1e 	bne	r3,zero,32ba4 <alt_exception_cause_generated_bad_addr+0x88>
   32b3c:	100690ba 	slli	r3,r2,2
   32b40:	008000f4 	movhi	r2,3
   32b44:	108ad504 	addi	r2,r2,11092
   32b48:	1885883a 	add	r2,r3,r2
   32b4c:	10800017 	ldw	r2,0(r2)
   32b50:	1000683a 	jmp	r2
   32b54:	00032b94 	movui	zero,3246
   32b58:	00032b94 	movui	zero,3246
   32b5c:	00032ba4 	muli	zero,zero,3246
   32b60:	00032ba4 	muli	zero,zero,3246
   32b64:	00032ba4 	muli	zero,zero,3246
   32b68:	00032b94 	movui	zero,3246
   32b6c:	00032b9c 	xori	zero,zero,3246
   32b70:	00032ba4 	muli	zero,zero,3246
   32b74:	00032b94 	movui	zero,3246
   32b78:	00032b94 	movui	zero,3246
   32b7c:	00032ba4 	muli	zero,zero,3246
   32b80:	00032b94 	movui	zero,3246
   32b84:	00032b9c 	xori	zero,zero,3246
   32b88:	00032ba4 	muli	zero,zero,3246
   32b8c:	00032ba4 	muli	zero,zero,3246
   32b90:	00032b94 	movui	zero,3246
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   32b94:	00800044 	movi	r2,1
   32b98:	00000306 	br	32ba8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   32b9c:	0005883a 	mov	r2,zero
   32ba0:	00000106 	br	32ba8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   32ba4:	0005883a 	mov	r2,zero
  }
}
   32ba8:	e037883a 	mov	sp,fp
   32bac:	df000017 	ldw	fp,0(sp)
   32bb0:	dec00104 	addi	sp,sp,4
   32bb4:	f800283a 	ret

00032bb8 <atexit>:
   32bb8:	200b883a 	mov	r5,r4
   32bbc:	000f883a 	mov	r7,zero
   32bc0:	000d883a 	mov	r6,zero
   32bc4:	0009883a 	mov	r4,zero
   32bc8:	0032c801 	jmpi	32c80 <__register_exitproc>

00032bcc <exit>:
   32bcc:	defffe04 	addi	sp,sp,-8
   32bd0:	000b883a 	mov	r5,zero
   32bd4:	dc000015 	stw	r16,0(sp)
   32bd8:	dfc00115 	stw	ra,4(sp)
   32bdc:	2021883a 	mov	r16,r4
   32be0:	0032d980 	call	32d98 <__call_exitprocs>
   32be4:	008000f4 	movhi	r2,3
   32be8:	10943404 	addi	r2,r2,20688
   32bec:	11000017 	ldw	r4,0(r2)
   32bf0:	20800f17 	ldw	r2,60(r4)
   32bf4:	10000126 	beq	r2,zero,32bfc <exit+0x30>
   32bf8:	103ee83a 	callr	r2
   32bfc:	8009883a 	mov	r4,r16
   32c00:	002fb3c0 	call	2fb3c <_exit>

00032c04 <memcmp>:
   32c04:	01c000c4 	movi	r7,3
   32c08:	3980192e 	bgeu	r7,r6,32c70 <memcmp+0x6c>
   32c0c:	2144b03a 	or	r2,r4,r5
   32c10:	11c4703a 	and	r2,r2,r7
   32c14:	10000f26 	beq	r2,zero,32c54 <memcmp+0x50>
   32c18:	20800003 	ldbu	r2,0(r4)
   32c1c:	28c00003 	ldbu	r3,0(r5)
   32c20:	10c0151e 	bne	r2,r3,32c78 <memcmp+0x74>
   32c24:	31bfff84 	addi	r6,r6,-2
   32c28:	01ffffc4 	movi	r7,-1
   32c2c:	00000406 	br	32c40 <memcmp+0x3c>
   32c30:	20800003 	ldbu	r2,0(r4)
   32c34:	28c00003 	ldbu	r3,0(r5)
   32c38:	31bfffc4 	addi	r6,r6,-1
   32c3c:	10c00e1e 	bne	r2,r3,32c78 <memcmp+0x74>
   32c40:	21000044 	addi	r4,r4,1
   32c44:	29400044 	addi	r5,r5,1
   32c48:	31fff91e 	bne	r6,r7,32c30 <_gp+0xffff5ba0>
   32c4c:	0005883a 	mov	r2,zero
   32c50:	f800283a 	ret
   32c54:	20c00017 	ldw	r3,0(r4)
   32c58:	28800017 	ldw	r2,0(r5)
   32c5c:	18bfee1e 	bne	r3,r2,32c18 <_gp+0xffff5b88>
   32c60:	31bfff04 	addi	r6,r6,-4
   32c64:	21000104 	addi	r4,r4,4
   32c68:	29400104 	addi	r5,r5,4
   32c6c:	39bff936 	bltu	r7,r6,32c54 <_gp+0xffff5bc4>
   32c70:	303fe91e 	bne	r6,zero,32c18 <_gp+0xffff5b88>
   32c74:	003ff506 	br	32c4c <_gp+0xffff5bbc>
   32c78:	10c5c83a 	sub	r2,r2,r3
   32c7c:	f800283a 	ret

00032c80 <__register_exitproc>:
   32c80:	defffa04 	addi	sp,sp,-24
   32c84:	dc000315 	stw	r16,12(sp)
   32c88:	040000f4 	movhi	r16,3
   32c8c:	84143404 	addi	r16,r16,20688
   32c90:	80c00017 	ldw	r3,0(r16)
   32c94:	dc400415 	stw	r17,16(sp)
   32c98:	dfc00515 	stw	ra,20(sp)
   32c9c:	18805217 	ldw	r2,328(r3)
   32ca0:	2023883a 	mov	r17,r4
   32ca4:	10003726 	beq	r2,zero,32d84 <__register_exitproc+0x104>
   32ca8:	10c00117 	ldw	r3,4(r2)
   32cac:	010007c4 	movi	r4,31
   32cb0:	20c00e16 	blt	r4,r3,32cec <__register_exitproc+0x6c>
   32cb4:	1a000044 	addi	r8,r3,1
   32cb8:	8800221e 	bne	r17,zero,32d44 <__register_exitproc+0xc4>
   32cbc:	18c00084 	addi	r3,r3,2
   32cc0:	18c7883a 	add	r3,r3,r3
   32cc4:	18c7883a 	add	r3,r3,r3
   32cc8:	12000115 	stw	r8,4(r2)
   32ccc:	10c7883a 	add	r3,r2,r3
   32cd0:	19400015 	stw	r5,0(r3)
   32cd4:	0005883a 	mov	r2,zero
   32cd8:	dfc00517 	ldw	ra,20(sp)
   32cdc:	dc400417 	ldw	r17,16(sp)
   32ce0:	dc000317 	ldw	r16,12(sp)
   32ce4:	dec00604 	addi	sp,sp,24
   32ce8:	f800283a 	ret
   32cec:	008000b4 	movhi	r2,2
   32cf0:	108bdb04 	addi	r2,r2,12140
   32cf4:	10002626 	beq	r2,zero,32d90 <__register_exitproc+0x110>
   32cf8:	01006404 	movi	r4,400
   32cfc:	d9400015 	stw	r5,0(sp)
   32d00:	d9800115 	stw	r6,4(sp)
   32d04:	d9c00215 	stw	r7,8(sp)
   32d08:	0022f6c0 	call	22f6c <malloc>
   32d0c:	d9400017 	ldw	r5,0(sp)
   32d10:	d9800117 	ldw	r6,4(sp)
   32d14:	d9c00217 	ldw	r7,8(sp)
   32d18:	10001d26 	beq	r2,zero,32d90 <__register_exitproc+0x110>
   32d1c:	81000017 	ldw	r4,0(r16)
   32d20:	10000115 	stw	zero,4(r2)
   32d24:	02000044 	movi	r8,1
   32d28:	22405217 	ldw	r9,328(r4)
   32d2c:	0007883a 	mov	r3,zero
   32d30:	12400015 	stw	r9,0(r2)
   32d34:	20805215 	stw	r2,328(r4)
   32d38:	10006215 	stw	zero,392(r2)
   32d3c:	10006315 	stw	zero,396(r2)
   32d40:	883fde26 	beq	r17,zero,32cbc <_gp+0xffff5c2c>
   32d44:	18c9883a 	add	r4,r3,r3
   32d48:	2109883a 	add	r4,r4,r4
   32d4c:	1109883a 	add	r4,r2,r4
   32d50:	21802215 	stw	r6,136(r4)
   32d54:	01800044 	movi	r6,1
   32d58:	12406217 	ldw	r9,392(r2)
   32d5c:	30cc983a 	sll	r6,r6,r3
   32d60:	4992b03a 	or	r9,r9,r6
   32d64:	12406215 	stw	r9,392(r2)
   32d68:	21c04215 	stw	r7,264(r4)
   32d6c:	01000084 	movi	r4,2
   32d70:	893fd21e 	bne	r17,r4,32cbc <_gp+0xffff5c2c>
   32d74:	11006317 	ldw	r4,396(r2)
   32d78:	218cb03a 	or	r6,r4,r6
   32d7c:	11806315 	stw	r6,396(r2)
   32d80:	003fce06 	br	32cbc <_gp+0xffff5c2c>
   32d84:	18805304 	addi	r2,r3,332
   32d88:	18805215 	stw	r2,328(r3)
   32d8c:	003fc606 	br	32ca8 <_gp+0xffff5c18>
   32d90:	00bfffc4 	movi	r2,-1
   32d94:	003fd006 	br	32cd8 <_gp+0xffff5c48>

00032d98 <__call_exitprocs>:
   32d98:	defff504 	addi	sp,sp,-44
   32d9c:	df000915 	stw	fp,36(sp)
   32da0:	dd400615 	stw	r21,24(sp)
   32da4:	dc800315 	stw	r18,12(sp)
   32da8:	dfc00a15 	stw	ra,40(sp)
   32dac:	ddc00815 	stw	r23,32(sp)
   32db0:	dd800715 	stw	r22,28(sp)
   32db4:	dd000515 	stw	r20,20(sp)
   32db8:	dcc00415 	stw	r19,16(sp)
   32dbc:	dc400215 	stw	r17,8(sp)
   32dc0:	dc000115 	stw	r16,4(sp)
   32dc4:	d9000015 	stw	r4,0(sp)
   32dc8:	2839883a 	mov	fp,r5
   32dcc:	04800044 	movi	r18,1
   32dd0:	057fffc4 	movi	r21,-1
   32dd4:	008000f4 	movhi	r2,3
   32dd8:	10943404 	addi	r2,r2,20688
   32ddc:	12000017 	ldw	r8,0(r2)
   32de0:	45005217 	ldw	r20,328(r8)
   32de4:	44c05204 	addi	r19,r8,328
   32de8:	a0001c26 	beq	r20,zero,32e5c <__call_exitprocs+0xc4>
   32dec:	a0800117 	ldw	r2,4(r20)
   32df0:	15ffffc4 	addi	r23,r2,-1
   32df4:	b8000d16 	blt	r23,zero,32e2c <__call_exitprocs+0x94>
   32df8:	14000044 	addi	r16,r2,1
   32dfc:	8421883a 	add	r16,r16,r16
   32e00:	8421883a 	add	r16,r16,r16
   32e04:	84402004 	addi	r17,r16,128
   32e08:	a463883a 	add	r17,r20,r17
   32e0c:	a421883a 	add	r16,r20,r16
   32e10:	e0001e26 	beq	fp,zero,32e8c <__call_exitprocs+0xf4>
   32e14:	80804017 	ldw	r2,256(r16)
   32e18:	e0801c26 	beq	fp,r2,32e8c <__call_exitprocs+0xf4>
   32e1c:	bdffffc4 	addi	r23,r23,-1
   32e20:	843fff04 	addi	r16,r16,-4
   32e24:	8c7fff04 	addi	r17,r17,-4
   32e28:	bd7ff91e 	bne	r23,r21,32e10 <_gp+0xffff5d80>
   32e2c:	008000b4 	movhi	r2,2
   32e30:	108be004 	addi	r2,r2,12160
   32e34:	10000926 	beq	r2,zero,32e5c <__call_exitprocs+0xc4>
   32e38:	a0800117 	ldw	r2,4(r20)
   32e3c:	1000301e 	bne	r2,zero,32f00 <__call_exitprocs+0x168>
   32e40:	a0800017 	ldw	r2,0(r20)
   32e44:	10003226 	beq	r2,zero,32f10 <__call_exitprocs+0x178>
   32e48:	a009883a 	mov	r4,r20
   32e4c:	98800015 	stw	r2,0(r19)
   32e50:	0022f800 	call	22f80 <free>
   32e54:	9d000017 	ldw	r20,0(r19)
   32e58:	a03fe41e 	bne	r20,zero,32dec <_gp+0xffff5d5c>
   32e5c:	dfc00a17 	ldw	ra,40(sp)
   32e60:	df000917 	ldw	fp,36(sp)
   32e64:	ddc00817 	ldw	r23,32(sp)
   32e68:	dd800717 	ldw	r22,28(sp)
   32e6c:	dd400617 	ldw	r21,24(sp)
   32e70:	dd000517 	ldw	r20,20(sp)
   32e74:	dcc00417 	ldw	r19,16(sp)
   32e78:	dc800317 	ldw	r18,12(sp)
   32e7c:	dc400217 	ldw	r17,8(sp)
   32e80:	dc000117 	ldw	r16,4(sp)
   32e84:	dec00b04 	addi	sp,sp,44
   32e88:	f800283a 	ret
   32e8c:	a0800117 	ldw	r2,4(r20)
   32e90:	80c00017 	ldw	r3,0(r16)
   32e94:	10bfffc4 	addi	r2,r2,-1
   32e98:	15c01426 	beq	r2,r23,32eec <__call_exitprocs+0x154>
   32e9c:	80000015 	stw	zero,0(r16)
   32ea0:	183fde26 	beq	r3,zero,32e1c <_gp+0xffff5d8c>
   32ea4:	95c8983a 	sll	r4,r18,r23
   32ea8:	a0806217 	ldw	r2,392(r20)
   32eac:	a5800117 	ldw	r22,4(r20)
   32eb0:	2084703a 	and	r2,r4,r2
   32eb4:	10000b26 	beq	r2,zero,32ee4 <__call_exitprocs+0x14c>
   32eb8:	a0806317 	ldw	r2,396(r20)
   32ebc:	2088703a 	and	r4,r4,r2
   32ec0:	20000c1e 	bne	r4,zero,32ef4 <__call_exitprocs+0x15c>
   32ec4:	89400017 	ldw	r5,0(r17)
   32ec8:	d9000017 	ldw	r4,0(sp)
   32ecc:	183ee83a 	callr	r3
   32ed0:	a0800117 	ldw	r2,4(r20)
   32ed4:	15bfbf1e 	bne	r2,r22,32dd4 <_gp+0xffff5d44>
   32ed8:	98800017 	ldw	r2,0(r19)
   32edc:	153fcf26 	beq	r2,r20,32e1c <_gp+0xffff5d8c>
   32ee0:	003fbc06 	br	32dd4 <_gp+0xffff5d44>
   32ee4:	183ee83a 	callr	r3
   32ee8:	003ff906 	br	32ed0 <_gp+0xffff5e40>
   32eec:	a5c00115 	stw	r23,4(r20)
   32ef0:	003feb06 	br	32ea0 <_gp+0xffff5e10>
   32ef4:	89000017 	ldw	r4,0(r17)
   32ef8:	183ee83a 	callr	r3
   32efc:	003ff406 	br	32ed0 <_gp+0xffff5e40>
   32f00:	a0800017 	ldw	r2,0(r20)
   32f04:	a027883a 	mov	r19,r20
   32f08:	1029883a 	mov	r20,r2
   32f0c:	003fb606 	br	32de8 <_gp+0xffff5d58>
   32f10:	0005883a 	mov	r2,zero
   32f14:	003ffb06 	br	32f04 <_gp+0xffff5e74>
   32f18:	0201ffff 	0x201ffff
   32f1c:	883a0000 	call	883a000 <_gp+0x87fcf70>
   32f20:	010d0bff 	0x10d0bff
   32f24:	01010002 	0x1010002
	...
   32f30:	010d0bff 	0x10d0bff
   32f34:	01010004 	movi	r4,1024
   32f38:	00000100 	call	10 <__reset-0x1fff0>
   32f3c:	00000000 	call	0 <__reset-0x20000>
   32f40:	01110bff 	0x1110bff
   32f44:	01010004 	movi	r4,1024
   32f48:	7f000105 	stb	fp,4(r15)
   32f4c:	007d0000 	call	7d000 <_gp+0x3ff70>
   32f50:	00000000 	call	0 <__reset-0x20000>
   32f54:	01883a00 	call	1883a0 <_gp+0x14b310>
   32f58:	00022014 	movui	zero,2176
