
RFS_SENSOR.elf:     file format elf32-littlenios2
RFS_SENSOR.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00014b9c memsz 0x00014b9c flags r-x
    LOAD off    0x00015bbc vaddr 0x00034bbc paddr 0x000366ac align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x0001819c vaddr 0x0003819c paddr 0x0003819c align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013ef0  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a88  00034134  00034134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  00034bbc  000366ac  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001a8  0003819c  0003819c  0001819c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00038344  00038344  000176ac  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000176ac  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001078  00000000  00000000  000176d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026482  00000000  00000000  00018748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a025  00000000  00000000  0003ebca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ca38  00000000  00000000  00048bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002c2c  00000000  00000000  00055628  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041e5  00000000  00000000  00058254  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a61d  00000000  00000000  0005c439  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00076a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001d70  00000000  00000000  00076ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c382  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007c385  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c38f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c390  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c391  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c395  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c399  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007c39d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007c3a6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007c3af  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0007c3b8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004d  00000000  00000000  0007c3c1  2**0
                  CONTENTS, READONLY
 29 .jdi          00003efc  00000000  00000000  0007c40e  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005af36  00000000  00000000  0008030a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00034134 l    d  .rodata	00000000 .rodata
00034bbc l    d  .rwdata	00000000 .rwdata
0003819c l    d  .bss	00000000 .bss
00038344 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../RFS_SENSOR_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 light_sensor.c
00036668 l     O .rwdata	00000004 Light_I2C_Controller_Base
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 mpu9250.c
00000000 l    df *ABS*	00000000 rh_temp.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00034a0a l     O .rodata	00000010 zeroes.4404
00029688 l     F .text	000000bc __sbprintf
00034a1a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00029898 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0002b3c8 l     F .text	00000008 __fp_unlock
0002b3dc l     F .text	0000019c __sinit.part.1
0002b578 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00034bbc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00035000 l     O .rwdata	00000020 lc_ctype_charset
00034fe0 l     O .rwdata	00000020 lc_message_charset
00035020 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00034a4c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002e974 l     F .text	000000fc __sprint_r.part.0
00034b80 l     O .rodata	00000010 blanks.4348
00034b70 l     O .rodata	00000010 zeroes.4349
0002ff00 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
000317fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00031908 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00031934 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00031a20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00031b00 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00031bec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00031dc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0003669c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000321e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00032314 l     F .text	00000034 alt_dev_reg
00035608 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00032608 l     F .text	0000020c altera_avalon_jtag_uart_irq
00032814 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00032e4c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0003320c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00033680 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000337c0 l     F .text	0000003c alt_get_errno
000337fc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000381dc g     O .bss	00000004 alt_instruction_exception_handler
0002dfb8 g     F .text	00000074 _mprec_log10
0002e0a4 g     F .text	0000008c __any_on
0003049c g     F .text	00000054 _isatty_r
00034a58 g     O .rodata	00000028 __mprec_tinytens
00031cfc g     F .text	0000007c alt_main
00027308 g     F .text	000000c0 _puts_r
00038244 g     O .bss	00000100 alt_irq
000304f0 g     F .text	00000060 _lseek_r
00020604 g     F .text	00000068 ACK_check
000366ac g       *ABS*	00000000 __flash_rwdata_start
00020578 g     F .text	0000008c ACK_single_check
000313a0 g     F .text	00000088 .hidden __eqdf2
00038344 g       *ABS*	00000000 __alt_heap_start
000218c4 g     F .text	00000074 I2C_Write_Light
000272cc g     F .text	0000003c printf
00030708 g     F .text	0000009c _wcrtomb_r
0002e834 g     F .text	0000005c __sseek
0002b718 g     F .text	00000010 __sinit
000305b0 g     F .text	00000140 __swbuf_r
00022150 g     F .text	000001b4 MPU9250_initialize
0002c1e0 g     F .text	0000007c _setlocale_r
0002b580 g     F .text	00000068 __sfmoreglue
00038208 g     O .bss	0000000c accelerometer_data
00031d9c g     F .text	00000024 __malloc_unlock
00023ea4 g     F .text	00000440 .hidden __divsf3
00021ecc g     F .text	0000005c ReadRegs
0002176c g     F .text	0000004c Light_SetThreshHigh
0002ceb0 g     F .text	0000015c memmove
0002066c g     F .text	0000024c OC_I2C_Write
0002b700 g     F .text	00000018 _cleanup
0002d134 g     F .text	000000a8 _Balloc
00031428 g     F .text	000000dc .hidden __gtdf2
00033a14 g     F .text	00000024 altera_nios2_gen2_irq_init
0002300c g     F .text	000000a4 RH_Temp_Init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00030440 g     F .text	0000005c _fstat_r
000381c0 g     O .bss	00000004 errno
0002e7b0 g     F .text	00000008 __seofread
000381c8 g     O .bss	00000004 alt_argv
0003e668 g       *ABS*	00000000 _gp
0002144c g     F .text	000000f8 Light_Get_ADCData0
000321b0 g     F .text	00000030 usleep
000246e0 g     F .text	000004e4 .hidden __subsf3
000227f0 g     F .text	000000d4 read_temp
00035488 g     O .rwdata	00000180 alt_fd_list
00021a18 g     F .text	000002a8 Sensor_Report
00023150 g     F .text	0000003c RH_Temp_Sensor_Init
00033a38 g     F .text	00000090 alt_find_dev
0002cd68 g     F .text	00000148 memcpy
00020398 g     F .text	0000014c oc_i2c_init_ex
0002b3d0 g     F .text	0000000c _cleanup_r
00031678 g     F .text	000000dc .hidden __floatsidf
00033744 g     F .text	0000007c alt_io_redirect
00031504 g     F .text	000000f4 .hidden __ltdf2
00034134 g       *ABS*	00000000 __DTOR_END__
000273c8 g     F .text	00000014 puts
00033d04 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000213dc g     F .text	00000070 Light_PowerSwitch
0002e694 g     F .text	00000074 __fpclassifyd
0002df14 g     F .text	000000a4 __ratio
0002fee4 g     F .text	0000001c __vfiprintf_internal
00032a0c g     F .text	0000021c altera_avalon_jtag_uart_read
0002729c g     F .text	00000030 _printf_r
00023920 g     F .text	00000064 .hidden __udivsi3
00031a5c g     F .text	000000a4 isatty
00034aa8 g     O .rodata	000000c8 __mprec_tens
0002c25c g     F .text	0000000c __locale_charset
00033c74 g     F .text	00000090 alt_icache_flush
000381bc g     O .bss	00000004 __malloc_top_pad
00022404 g     F .text	0000011c calib_mag
00036674 g     O .rwdata	00000004 __mb_cur_max
0002c28c g     F .text	0000000c _localeconv_r
0002d540 g     F .text	0000003c __i2b
0002bb9c g     F .text	000004bc __sfvwrite_r
0002e708 g     F .text	00000054 _sbrk_r
00030550 g     F .text	00000060 _read_r
00036694 g     O .rwdata	00000004 alt_max_fd
00030134 g     F .text	000000f0 _fclose_r
0002b398 g     F .text	00000030 fflush
000381b8 g     O .bss	00000004 __malloc_max_sbrked_mem
000219a8 g     F .text	00000070 I2C_Read_Light
00026f80 g     F .text	00000110 .hidden __extendsfdf2
0003819c g     O .bss	00000004 temperature
00024dd8 g     F .text	000008ac .hidden __adddf3
0002dcbc g     F .text	0000010c __b2d
00030e68 g     F .text	00000538 .hidden __umoddi3
00031c28 g     F .text	000000d4 lseek
0003666c g     O .rwdata	00000004 _global_impure_ptr
0002e130 g     F .text	00000564 _realloc_r
00038344 g       *ABS*	00000000 __bss_end
00033590 g     F .text	000000f0 alt_iic_isr_register
000320a8 g     F .text	00000108 alt_tick
00023628 g     F .text	000000f8 th_dump_chip_info
000308f0 g     F .text	00000578 .hidden __udivdi3
0003039c g     F .text	00000024 _fputwc_r
00034a80 g     O .rodata	00000028 __mprec_bigtens
0002d324 g     F .text	00000104 __s2b
00031754 g     F .text	000000a8 .hidden __floatunsidf
0002d9fc g     F .text	00000060 __mcmp
0002b738 g     F .text	00000018 __fp_lock_all
00033544 g     F .text	0000004c alt_ic_irq_enabled
000234b0 g     F .text	0000013c th_Read_Measure_Data
00020d58 g     F .text	0000026c OC_I2CL_Write
0003200c g     F .text	0000009c alt_alarm_stop
000381d8 g     O .bss	00000004 alt_irq_active
0002180c g     F .text	00000064 Light_GetInterrupt
000208b8 g     F .text	00000064 ACK_judge_for_read
000200fc g     F .exceptions	000000d4 alt_irq_handler
00035460 g     O .rwdata	00000028 alt_dev_null
00020290 g     F .text	00000058 Write32_Data
00021378 g     F .text	00000064 Light_GetTiming
000331c4 g     F .text	00000048 alt_dcache_flush_all
0002d428 g     F .text	00000068 __hi0bits
000315f8 g     F .text	00000080 .hidden __fixdfsi
00022e64 g     F .text	000000f0 getMotion9
000366ac g       *ABS*	00000000 __ram_rwdata_end
0003668c g     O .rwdata	00000008 alt_dev_list
0003221c g     F .text	000000f8 write
00038214 g     O .bss	0000000c calib_data
00034bbc g       *ABS*	00000000 __ram_rodata_end
00031970 g     F .text	000000b0 fstat
00031504 g     F .text	000000f4 .hidden __ledf2
0002d774 g     F .text	00000140 __pow5mult
0002ea88 g     F .text	0000145c ___vfiprintf_internal_r
000381b0 g     O .bss	00000004 __nlocale_changed
00023984 g     F .text	00000058 .hidden __umodsi3
00038344 g       *ABS*	00000000 end
000228c4 g     F .text	00000130 read_mag
00032548 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00034134 g       *ABS*	00000000 __CTOR_LIST__
0003f400 g       *ABS*	00000000 __alt_stack_pointer
00032ec4 g     F .text	0000007c alt_avalon_timer_sc_init
00027238 g     F .text	00000064 .hidden __clzsi2
00032c28 g     F .text	00000224 altera_avalon_jtag_uart_write
0002b728 g     F .text	00000004 __sfp_lock_acquire
0002cc84 g     F .text	000000e4 memchr
00027474 g     F .text	000021f8 ___vfprintf_internal_r
0002b88c g     F .text	00000310 _free_r
0002c268 g     F .text	00000010 __locale_mb_cur_max
00033f80 g     F .text	00000180 __call_exitprocs
000230b0 g     F .text	000000a0 RH_Temp_Read_Device_ID
000381ac g     O .bss	00000004 __mlocale_changed
00036678 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
000381d0 g     O .bss	00000004 _alt_tick_rate
0002d8b4 g     F .text	00000148 __lshift
000381d4 g     O .bss	00000004 _alt_nticks
00031dfc g     F .text	000000fc read
00021e6c g     F .text	00000060 ReadReg
00032380 g     F .text	00000064 alt_sys_init
00024bc4 g     F .text	00000124 .hidden __floatsisf
00033e68 g     F .text	00000118 __register_exitproc
00021938 g     F .text	00000070 I2C_Write_Light16
00038220 g     O .bss	0000000c gyroscope_data
0002d57c g     F .text	000001f8 __multiply
0003822c g     O .bss	0000000c magnetometer_ASA
000328b4 g     F .text	00000068 altera_avalon_jtag_uart_close
00034bbc g       *ABS*	00000000 __ram_rwdata_start
00034134 g       *ABS*	00000000 __ram_rodata_start
000381e0 g     O .bss	00000028 __malloc_current_mallinfo
0002ddc8 g     F .text	0000014c __d2b
00023720 g     F .text	00000078 th_write_register
00021f28 g     F .text	00000110 set_acc_scale
000323e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00033bd0 g     F .text	000000a4 alt_get_fd
0003306c g     F .text	00000158 alt_busy_sleep
0003001c g     F .text	00000054 _close_r
000212b4 g     F .text	00000060 Light_Init
00038238 g     O .bss	0000000c magnetometer_data
00033dec g     F .text	0000007c memcmp
000324a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00038344 g       *ABS*	00000000 __alt_stack_base
000324f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00029744 g     F .text	00000154 __swsetup_r
00020340 g     F .text	00000058 oc_i2c_init
00021314 g     F .text	00000064 Light_GetID
00025684 g     F .text	000008e8 .hidden __divdf3
0002b5e8 g     F .text	00000118 __sfp
0002e02c g     F .text	00000078 __copybits
00035058 g     O .rwdata	00000408 __malloc_av_
0002b734 g     F .text	00000004 __sinit_lock_release
00025f6c g     F .text	00000718 .hidden __muldf3
0002e75c g     F .text	00000054 __sread
00033ac8 g     F .text	00000108 alt_find_file
00033248 g     F .text	000000a4 alt_dev_llist_insert
00023798 g     F .text	00000090 th_read_register
00031d78 g     F .text	00000024 __malloc_lock
00031f5c g     F .text	000000b0 sbrk
0002b33c g     F .text	0000005c _fflush_r
00030070 g     F .text	000000c4 _calloc_r
0002318c g     F .text	00000158 RH_Temp_Sensor_Read
00021720 g     F .text	0000004c Light_SetThreshLow
0003819c g       *ABS*	00000000 __bss_start
0002d00c g     F .text	00000128 memset
00021cc0 g     F .text	000000c4 main
000381cc g     O .bss	00000004 alt_envp
000381b4 g     O .bss	00000004 __malloc_max_total_mem
00032444 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000306f0 g     F .text	00000018 __swbuf
0002e890 g     F .text	00000008 __sclose
0003f400 g       *ABS*	00000000 __alt_heap_limit
00030224 g     F .text	00000014 fclose
00027090 g     F .text	000001a8 .hidden __truncdfsf2
00029a98 g     F .text	00001688 _dtoa_r
0002c478 g     F .text	0000080c _malloc_r
00030864 g     F .text	00000030 __ascii_wctomb
00036698 g     O .rwdata	00000004 alt_errno
0002163c g     F .text	000000e4 Get_light
0002c058 g     F .text	000000c4 _fwalk
000232e4 g     F .text	00000134 Read_Configuration
00023828 g     F .text	00000084 .hidden __divsi3
000229f4 g     F .text	00000470 read_all
000204e4 g     F .text	00000094 oc_i2c_uninit
0002b768 g     F .text	00000124 _malloc_trim_r
00034134 g       *ABS*	00000000 __CTOR_END__
000242e4 g     F .text	000003fc .hidden __mulsf3
0002e898 g     F .text	000000dc strcmp
00034134 g       *ABS*	00000000 __flash_rodata_start
00034134 g       *ABS*	00000000 __DTOR_LIST__
000313a0 g     F .text	00000088 .hidden __nedf2
00032348 g     F .text	00000038 alt_irq_init
00031ef8 g     F .text	00000064 alt_release_fd
000348c3 g     O .rodata	00000100 .hidden __clz_tab
000381a8 g     O .bss	00000004 _PathLocale
00033da0 g     F .text	00000014 atexit
0002ffbc g     F .text	00000060 _write_r
0002c298 g     F .text	00000018 setlocale
000235ec g     F .text	0000003c th_reset
00036670 g     O .rwdata	00000004 _impure_ptr
000381c4 g     O .bss	00000004 alt_argc
0002b120 g     F .text	0000021c __sflush_r
0003334c g     F .text	00000060 _do_dtors
0002c284 g     F .text	00000008 __locale_cjk_lang
00020020 g       .exceptions	00000000 alt_irq_entry
0002dc58 g     F .text	00000064 __ulp
0002b750 g     F .text	00000018 __fp_unlock_all
00021544 g     F .text	000000f8 Light_Get_ADCData1
000381a0 g     O .bss	00000004 gyro_divider
00036684 g     O .rwdata	00000008 alt_fs_list
000202e8 g     F .text	00000058 Read32_Data
00022f54 g     F .text	000000b8 getMotion6
00022038 g     F .text	00000118 set_gyro_scale
0002091c g     F .text	000001ec OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
0002c2b0 g     F .text	0000000c localeconv
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000333e0 g     F .text	00000050 alt_ic_isr_register
00021870 g     F .text	00000054 Light_SetTiming
000366ac g       *ABS*	00000000 _edata
00038344 g       *ABS*	00000000 _end
00030238 g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
0003291c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00021ddc g     F .text	00000090 WriteReg
000334b8 g     F .text	0000008c alt_ic_irq_disable
0002e7b8 g     F .text	0000007c __swrite
0003667c g     O .rwdata	00000004 __malloc_trim_threshold
00020c10 g     F .text	00000148 OC_I2C_Read_Continue
0002c278 g     F .text	0000000c __locale_msgcharset
00033db4 g     F .text	00000038 exit
0002c11c g     F .text	000000c4 _fwalk_reent
00024ce8 g     F .text	000000f0 .hidden __floatunsisf
0002da5c g     F .text	000001fc __mdiff
000238ac g     F .text	00000074 .hidden __modsi3
0003f400 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
0002b72c g     F .text	00000004 __sfp_lock_release
00022688 g     F .text	00000168 read_gyro
00021d84 g     F .text	00000058 MPU9250_Init
00023418 g     F .text	00000098 Write_Configuration
00020fc4 g     F .text	000002f0 OC_I2CL_Read
00034100 g     F .text	00000034 _exit
00032f40 g     F .text	0000012c alt_alarm_start
0002c2bc g     F .text	000001bc __smakebuf_r
000273dc g     F .text	00000098 strlen
000338c0 g     F .text	00000154 open
00031428 g     F .text	000000dc .hidden __gedf2
000381a4 g     O .bss	00000004 acc_divider
00036680 g     O .rwdata	00000004 __wctomb
0002ea70 g     F .text	00000018 __sprint_r
000333ac g     F .text	00000034 alt_icache_flush_all
00022520 g     F .text	00000168 read_acc
000366a8 g     O .rwdata	00000004 alt_priority_mask
00022304 g     F .text	00000100 calib_acc
00033430 g     F .text	00000088 alt_ic_irq_enable
00020b08 g     F .text	00000108 OC_I2C_Write_Addr
0002966c g     F .text	0000001c __vfprintf_internal
00030894 g     F .text	0000005c _wctomb_r
00026684 g     F .text	000008fc .hidden __subdf3
0002d490 g     F .text	000000b0 __lo0bits
000366a0 g     O .rwdata	00000008 alt_alarm_list
000332ec g     F .text	00000060 _do_ctors
000307a4 g     F .text	000000c0 wcrtomb
00031838 g     F .text	000000d0 close
000239dc g     F .text	000004c8 .hidden __addsf3
000217b8 g     F .text	00000054 Light_SetInterrupt
00031b68 g     F .text	00000084 alt_load
000303c0 g     F .text	00000080 fputwc
0002b730 g     F .text	00000004 __sinit_lock_acquire
0002d204 g     F .text	00000120 __multadd
0002d1dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0c04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	00800134 	movhi	r2,4
   20140:	10a09104 	addi	r2,r2,-32188
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	00800134 	movhi	r2,4
   20158:	10a09104 	addi	r2,r2,-32188
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe0d2c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0d20>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a6dd17 	ldw	r2,-25740(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a6dd17 	ldw	r2,-25740(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffe0e48>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	defd0014 	ori	sp,sp,62464
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6b99a14 	ori	gp,gp,58984
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	10a06714 	ori	r2,r2,33180

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18e0d114 	ori	r3,r3,33604

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0e78>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	0031b680 	call	31b68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	0031cfc0 	call	31cfc <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe0e8c>

00020290 <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
   20290:	defffb04 	addi	sp,sp,-20
   20294:	df000415 	stw	fp,16(sp)
   20298:	df000404 	addi	fp,sp,16
   2029c:	e13ffd15 	stw	r4,-12(fp)
   202a0:	e17ffe15 	stw	r5,-8(fp)
   202a4:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
   202a8:	e0bffe17 	ldw	r2,-8(fp)
   202ac:	1085883a 	add	r2,r2,r2
   202b0:	1085883a 	add	r2,r2,r2
   202b4:	1007883a 	mov	r3,r2
   202b8:	e0bffd17 	ldw	r2,-12(fp)
   202bc:	1885883a 	add	r2,r3,r2
   202c0:	1007883a 	mov	r3,r2
   202c4:	e0bfff17 	ldw	r2,-4(fp)
   202c8:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
   202cc:	00800044 	movi	r2,1
   202d0:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
   202d4:	e0bffc03 	ldbu	r2,-16(fp)
}
   202d8:	e037883a 	mov	sp,fp
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00104 	addi	sp,sp,4
   202e4:	f800283a 	ret

000202e8 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
   202e8:	defffb04 	addi	sp,sp,-20
   202ec:	df000415 	stw	fp,16(sp)
   202f0:	df000404 	addi	fp,sp,16
   202f4:	e13ffd15 	stw	r4,-12(fp)
   202f8:	e17ffe15 	stw	r5,-8(fp)
   202fc:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   20300:	e0bffe17 	ldw	r2,-8(fp)
   20304:	1085883a 	add	r2,r2,r2
   20308:	1085883a 	add	r2,r2,r2
   2030c:	1007883a 	mov	r3,r2
   20310:	e0bffd17 	ldw	r2,-12(fp)
   20314:	1885883a 	add	r2,r3,r2
   20318:	10c00037 	ldwio	r3,0(r2)
   2031c:	e0bfff17 	ldw	r2,-4(fp)
   20320:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
   20324:	00800044 	movi	r2,1
   20328:	e0bffc05 	stb	r2,-16(fp)
    return bPass;
   2032c:	e0bffc03 	ldbu	r2,-16(fp)
}
   20330:	e037883a 	mov	sp,fp
   20334:	df000017 	ldw	fp,0(sp)
   20338:	dec00104 	addi	sp,sp,4
   2033c:	f800283a 	ret

00020340 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
   20340:	defffa04 	addi	sp,sp,-24
   20344:	dfc00515 	stw	ra,20(sp)
   20348:	df000415 	stw	fp,16(sp)
   2034c:	df000404 	addi	fp,sp,16
   20350:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
   20354:	0080bef4 	movhi	r2,763
   20358:	10bc2004 	addi	r2,r2,-3968
   2035c:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
   20360:	008001b4 	movhi	r2,6
   20364:	1086a004 	addi	r2,r2,6784
   20368:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
   2036c:	e1bffd17 	ldw	r6,-12(fp)
   20370:	e17ffc17 	ldw	r5,-16(fp)
   20374:	e13fff17 	ldw	r4,-4(fp)
   20378:	00203980 	call	20398 <oc_i2c_init_ex>
   2037c:	e0bffe05 	stb	r2,-8(fp)

	return bSuccess;
   20380:	e0bffe03 	ldbu	r2,-8(fp)
}
   20384:	e037883a 	mov	sp,fp
   20388:	dfc00117 	ldw	ra,4(sp)
   2038c:	df000017 	ldw	fp,0(sp)
   20390:	dec00204 	addi	sp,sp,8
   20394:	f800283a 	ret

00020398 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
   20398:	defff704 	addi	sp,sp,-36
   2039c:	dfc00815 	stw	ra,32(sp)
   203a0:	df000715 	stw	fp,28(sp)
   203a4:	df000704 	addi	fp,sp,28
   203a8:	e13ffd15 	stw	r4,-12(fp)
   203ac:	e17ffe15 	stw	r5,-8(fp)
   203b0:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
   203b4:	00800044 	movi	r2,1
   203b8:	e0bff905 	stb	r2,-28(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
   203bc:	00bfe004 	movi	r2,-128
   203c0:	e0bff945 	stb	r2,-27(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
   203c4:	e0bfff17 	ldw	r2,-4(fp)
   203c8:	10800164 	muli	r2,r2,5
   203cc:	100b883a 	mov	r5,r2
   203d0:	e13ffe17 	ldw	r4,-8(fp)
   203d4:	00238280 	call	23828 <__divsi3>
   203d8:	10bfffc4 	addi	r2,r2,-1
   203dc:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
   203e0:	e0bffa17 	ldw	r2,-24(fp)
   203e4:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
   203e8:	e0bffa17 	ldw	r2,-24(fp)
   203ec:	1005d23a 	srai	r2,r2,8
   203f0:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
   203f4:	e0bffd17 	ldw	r2,-12(fp)
   203f8:	e0fffb03 	ldbu	r3,-20(fp)
   203fc:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
   20400:	e0bffd17 	ldw	r2,-12(fp)
   20404:	10800104 	addi	r2,r2,4
   20408:	1007883a 	mov	r3,r2
   2040c:	e0bffb43 	ldbu	r2,-19(fp)
   20410:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
   20414:	e0bffd17 	ldw	r2,-12(fp)
   20418:	10800204 	addi	r2,r2,8
   2041c:	1007883a 	mov	r3,r2
   20420:	e0bff943 	ldbu	r2,-27(fp)
   20424:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
   20428:	e0bff903 	ldbu	r2,-28(fp)
   2042c:	10000826 	beq	r2,zero,20450 <oc_i2c_init_ex+0xb8>
    	read_data =IORD(i2c_base, 0);
   20430:	e0bffd17 	ldw	r2,-12(fp)
   20434:	10800037 	ldwio	r2,0(r2)
   20438:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
   2043c:	e0bffc17 	ldw	r2,-16(fp)
   20440:	10c03fcc 	andi	r3,r2,255
   20444:	e0bffb03 	ldbu	r2,-20(fp)
   20448:	18800126 	beq	r3,r2,20450 <oc_i2c_init_ex+0xb8>
            bSuccess = FALSE;
   2044c:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
   20450:	e0bff903 	ldbu	r2,-28(fp)
   20454:	10000926 	beq	r2,zero,2047c <oc_i2c_init_ex+0xe4>
    	read_data =IORD(i2c_base, 1);
   20458:	e0bffd17 	ldw	r2,-12(fp)
   2045c:	10800104 	addi	r2,r2,4
   20460:	10800037 	ldwio	r2,0(r2)
   20464:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
   20468:	e0bffc17 	ldw	r2,-16(fp)
   2046c:	10c03fcc 	andi	r3,r2,255
   20470:	e0bffb43 	ldbu	r2,-19(fp)
   20474:	18800126 	beq	r3,r2,2047c <oc_i2c_init_ex+0xe4>
            bSuccess = FALSE;
   20478:	e03ff905 	stb	zero,-28(fp)
        }
    }

    // check control
    if (bSuccess){
   2047c:	e0bff903 	ldbu	r2,-28(fp)
   20480:	10000926 	beq	r2,zero,204a8 <oc_i2c_init_ex+0x110>
    	read_data =IORD(i2c_base, 2);
   20484:	e0bffd17 	ldw	r2,-12(fp)
   20488:	10800204 	addi	r2,r2,8
   2048c:	10800037 	ldwio	r2,0(r2)
   20490:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
   20494:	e0bffc17 	ldw	r2,-16(fp)
   20498:	10c03fcc 	andi	r3,r2,255
   2049c:	e0bff943 	ldbu	r2,-27(fp)
   204a0:	18800126 	beq	r3,r2,204a8 <oc_i2c_init_ex+0x110>
            bSuccess = FALSE;
   204a4:	e03ff905 	stb	zero,-28(fp)
        }
    }

   if (bSuccess)
   204a8:	e0bff903 	ldbu	r2,-28(fp)
   204ac:	10000426 	beq	r2,zero,204c0 <oc_i2c_init_ex+0x128>
       printf("\nI2C core is enabled! \r\n");
   204b0:	010000f4 	movhi	r4,3
   204b4:	21104d04 	addi	r4,r4,16692
   204b8:	00273c80 	call	273c8 <puts>
   204bc:	00000306 	br	204cc <oc_i2c_init_ex+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
   204c0:	010000f4 	movhi	r4,3
   204c4:	21105304 	addi	r4,r4,16716
   204c8:	00273c80 	call	273c8 <puts>

   return bSuccess;
   204cc:	e0bff903 	ldbu	r2,-28(fp)

}
   204d0:	e037883a 	mov	sp,fp
   204d4:	dfc00117 	ldw	ra,4(sp)
   204d8:	df000017 	ldw	fp,0(sp)
   204dc:	dec00204 	addi	sp,sp,8
   204e0:	f800283a 	ret

000204e4 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
   204e4:	defffb04 	addi	sp,sp,-20
   204e8:	dfc00415 	stw	ra,16(sp)
   204ec:	df000315 	stw	fp,12(sp)
   204f0:	df000304 	addi	fp,sp,12
   204f4:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   204f8:	00800044 	movi	r2,1
   204fc:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
   20500:	e03ffd45 	stb	zero,-11(fp)

    IOWR( i2c_base, 2, ControlValue);
   20504:	e0bfff17 	ldw	r2,-4(fp)
   20508:	10800204 	addi	r2,r2,8
   2050c:	1007883a 	mov	r3,r2
   20510:	e0bffd43 	ldbu	r2,-11(fp)
   20514:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
   20518:	e0bfff17 	ldw	r2,-4(fp)
   2051c:	10800204 	addi	r2,r2,8
   20520:	10800037 	ldwio	r2,0(r2)
   20524:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
   20528:	e0bffe17 	ldw	r2,-8(fp)
   2052c:	10c03fcc 	andi	r3,r2,255
   20530:	e0bffd43 	ldbu	r2,-11(fp)
   20534:	18800126 	beq	r3,r2,2053c <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
   20538:	e03ffd05 	stb	zero,-12(fp)
    }

   if (bSuccess)
   2053c:	e0bffd03 	ldbu	r2,-12(fp)
   20540:	10000426 	beq	r2,zero,20554 <oc_i2c_uninit+0x70>
       printf("\nI2C core  is disabled! \r\n");
   20544:	010000f4 	movhi	r4,3
   20548:	21105e04 	addi	r4,r4,16760
   2054c:	00273c80 	call	273c8 <puts>
   20550:	00000306 	br	20560 <oc_i2c_uninit+0x7c>
   else
       printf("\nI2C core is failed to disable! \r\n");
   20554:	010000f4 	movhi	r4,3
   20558:	21106504 	addi	r4,r4,16788
   2055c:	00273c80 	call	273c8 <puts>

   return bSuccess;
   20560:	e0bffd03 	ldbu	r2,-12(fp)

}
   20564:	e037883a 	mov	sp,fp
   20568:	dfc00117 	ldw	ra,4(sp)
   2056c:	df000017 	ldw	fp,0(sp)
   20570:	dec00204 	addi	sp,sp,8
   20574:	f800283a 	ret

00020578 <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
   20578:	defffb04 	addi	sp,sp,-20
   2057c:	dfc00415 	stw	ra,16(sp)
   20580:	df000315 	stw	fp,12(sp)
   20584:	df000304 	addi	fp,sp,12
   20588:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   2058c:	00800044 	movi	r2,1
   20590:	e0bffd05 	stb	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
   20594:	01003e84 	movi	r4,250
   20598:	00321b00 	call	321b0 <usleep>
    read_data =IORD(i2c_base, 4);
   2059c:	e0bfff17 	ldw	r2,-4(fp)
   205a0:	10800404 	addi	r2,r2,16
   205a4:	10800037 	ldwio	r2,0(r2)
   205a8:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
   205ac:	e0bffe17 	ldw	r2,-8(fp)
   205b0:	1080008c 	andi	r2,r2,2
   205b4:	10000126 	beq	r2,zero,205bc <ACK_single_check+0x44>
            bSuccess = FALSE;
   205b8:	e03ffd05 	stb	zero,-12(fp)
     if (bSuccess){
   205bc:	e0bffd03 	ldbu	r2,-12(fp)
   205c0:	10000a26 	beq	r2,zero,205ec <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
   205c4:	01003e84 	movi	r4,250
   205c8:	00321b00 	call	321b0 <usleep>
            read_data =IORD(i2c_base, 4);
   205cc:	e0bfff17 	ldw	r2,-4(fp)
   205d0:	10800404 	addi	r2,r2,16
   205d4:	10800037 	ldwio	r2,0(r2)
   205d8:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
   205dc:	e0bffe17 	ldw	r2,-8(fp)
   205e0:	1080200c 	andi	r2,r2,128
   205e4:	10000126 	beq	r2,zero,205ec <ACK_single_check+0x74>
                    bSuccess = FALSE;
   205e8:	e03ffd05 	stb	zero,-12(fp)
     }
    return bSuccess;
   205ec:	e0bffd03 	ldbu	r2,-12(fp)
}
   205f0:	e037883a 	mov	sp,fp
   205f4:	dfc00117 	ldw	ra,4(sp)
   205f8:	df000017 	ldw	fp,0(sp)
   205fc:	dec00204 	addi	sp,sp,8
   20600:	f800283a 	ret

00020604 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
   20604:	defffb04 	addi	sp,sp,-20
   20608:	dfc00415 	stw	ra,16(sp)
   2060c:	df000315 	stw	fp,12(sp)
   20610:	df000304 	addi	fp,sp,12
   20614:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
   20618:	e03ffd05 	stb	zero,-12(fp)
    int i=0;
   2061c:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
   20620:	00000306 	br	20630 <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
   20624:	e13fff17 	ldw	r4,-4(fp)
   20628:	00205780 	call	20578 <ACK_single_check>
   2062c:	e0bffd05 	stb	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
   20630:	e0bffd03 	ldbu	r2,-12(fp)
   20634:	1080005c 	xori	r2,r2,1
   20638:	10803fcc 	andi	r2,r2,255
   2063c:	10000526 	beq	r2,zero,20654 <ACK_check+0x50>
   20640:	e0bffe17 	ldw	r2,-8(fp)
   20644:	10c00044 	addi	r3,r2,1
   20648:	e0fffe15 	stw	r3,-8(fp)
   2064c:	10800290 	cmplti	r2,r2,10
   20650:	103ff41e 	bne	r2,zero,20624 <__alt_data_end+0xfffe1224>
      //  if (!bSuccess)
    //	printf("no ack2 !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);

    }

    return bSuccess;
   20654:	e0bffd03 	ldbu	r2,-12(fp)
}
   20658:	e037883a 	mov	sp,fp
   2065c:	dfc00117 	ldw	ra,4(sp)
   20660:	df000017 	ldw	fp,0(sp)
   20664:	dec00204 	addi	sp,sp,8
   20668:	f800283a 	ret

0002066c <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
   2066c:	defff904 	addi	sp,sp,-28
   20670:	dfc00615 	stw	ra,24(sp)
   20674:	df000515 	stw	fp,20(sp)
   20678:	df000504 	addi	fp,sp,20
   2067c:	e13ffc15 	stw	r4,-16(fp)
   20680:	2807883a 	mov	r3,r5
   20684:	3005883a 	mov	r2,r6
   20688:	e1ffff15 	stw	r7,-4(fp)
   2068c:	e0fffd05 	stb	r3,-12(fp)
   20690:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;

   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
   20694:	e0bffd03 	ldbu	r2,-12(fp)
   20698:	100d883a 	mov	r6,r2
   2069c:	014000c4 	movi	r5,3
   206a0:	e13ffc17 	ldw	r4,-16(fp)
   206a4:	00202900 	call	20290 <Write32_Data>
   206a8:	1080005c 	xori	r2,r2,1
   206ac:	10803fcc 	andi	r2,r2,255
   206b0:	10000526 	beq	r2,zero,206c8 <OC_I2C_Write+0x5c>
       printf("OC_I2C_Write error[0]\r\n");
   206b4:	010000f4 	movhi	r4,3
   206b8:	21106e04 	addi	r4,r4,16824
   206bc:	00273c80 	call	273c8 <puts>
       return FALSE;
   206c0:	0005883a 	mov	r2,zero
   206c4:	00007706 	br	208a4 <OC_I2C_Write+0x238>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
   206c8:	01802404 	movi	r6,144
   206cc:	01400104 	movi	r5,4
   206d0:	e13ffc17 	ldw	r4,-16(fp)
   206d4:	00202900 	call	20290 <Write32_Data>
   206d8:	1080005c 	xori	r2,r2,1
   206dc:	10803fcc 	andi	r2,r2,255
   206e0:	10000526 	beq	r2,zero,206f8 <OC_I2C_Write+0x8c>
       printf("OC_I2C_Write error[1]\r\n");
   206e4:	010000f4 	movhi	r4,3
   206e8:	21107404 	addi	r4,r4,16848
   206ec:	00273c80 	call	273c8 <puts>
       return FALSE;
   206f0:	0005883a 	mov	r2,zero
   206f4:	00006b06 	br	208a4 <OC_I2C_Write+0x238>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   206f8:	e13ffc17 	ldw	r4,-16(fp)
   206fc:	00206040 	call	20604 <ACK_check>
   20700:	1080005c 	xori	r2,r2,1
   20704:	10803fcc 	andi	r2,r2,255
   20708:	10000526 	beq	r2,zero,20720 <OC_I2C_Write+0xb4>
        printf("OC_I2C_Write error[2]\r\n");
   2070c:	010000f4 	movhi	r4,3
   20710:	21107a04 	addi	r4,r4,16872
   20714:	00273c80 	call	273c8 <puts>
        return FALSE;
   20718:	0005883a 	mov	r2,zero
   2071c:	00006106 	br	208a4 <OC_I2C_Write+0x238>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
   20720:	e0bffe03 	ldbu	r2,-8(fp)
   20724:	100d883a 	mov	r6,r2
   20728:	014000c4 	movi	r5,3
   2072c:	e13ffc17 	ldw	r4,-16(fp)
   20730:	00202900 	call	20290 <Write32_Data>
   20734:	1080005c 	xori	r2,r2,1
   20738:	10803fcc 	andi	r2,r2,255
   2073c:	10000526 	beq	r2,zero,20754 <OC_I2C_Write+0xe8>
       printf("OC_I2C_Write error[3]\r\n");
   20740:	010000f4 	movhi	r4,3
   20744:	21108004 	addi	r4,r4,16896
   20748:	00273c80 	call	273c8 <puts>
       return FALSE;
   2074c:	0005883a 	mov	r2,zero
   20750:	00005406 	br	208a4 <OC_I2C_Write+0x238>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
   20754:	01800404 	movi	r6,16
   20758:	01400104 	movi	r5,4
   2075c:	e13ffc17 	ldw	r4,-16(fp)
   20760:	00202900 	call	20290 <Write32_Data>
   20764:	1080005c 	xori	r2,r2,1
   20768:	10803fcc 	andi	r2,r2,255
   2076c:	10000526 	beq	r2,zero,20784 <OC_I2C_Write+0x118>
        printf("OC_I2C_Write error[4]\r\n");
   20770:	010000f4 	movhi	r4,3
   20774:	21108604 	addi	r4,r4,16920
   20778:	00273c80 	call	273c8 <puts>
        return FALSE;
   2077c:	0005883a 	mov	r2,zero
   20780:	00004806 	br	208a4 <OC_I2C_Write+0x238>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20784:	e13ffc17 	ldw	r4,-16(fp)
   20788:	00206040 	call	20604 <ACK_check>
   2078c:	1080005c 	xori	r2,r2,1
   20790:	10803fcc 	andi	r2,r2,255
   20794:	10000526 	beq	r2,zero,207ac <OC_I2C_Write+0x140>
        printf("OC_I2C_Write error[5]\r\n");
   20798:	010000f4 	movhi	r4,3
   2079c:	21108c04 	addi	r4,r4,16944
   207a0:	00273c80 	call	273c8 <puts>
        return FALSE;
   207a4:	0005883a 	mov	r2,zero
   207a8:	00003e06 	br	208a4 <OC_I2C_Write+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
   207ac:	e03ffb15 	stw	zero,-20(fp)
   207b0:	00002a06 	br	2085c <OC_I2C_Write+0x1f0>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
   207b4:	e0bffb17 	ldw	r2,-20(fp)
   207b8:	e0ffff17 	ldw	r3,-4(fp)
   207bc:	1885883a 	add	r2,r3,r2
   207c0:	10800003 	ldbu	r2,0(r2)
   207c4:	10803fcc 	andi	r2,r2,255
   207c8:	100d883a 	mov	r6,r2
   207cc:	014000c4 	movi	r5,3
   207d0:	e13ffc17 	ldw	r4,-16(fp)
   207d4:	00202900 	call	20290 <Write32_Data>
   207d8:	1080005c 	xori	r2,r2,1
   207dc:	10803fcc 	andi	r2,r2,255
   207e0:	10000526 	beq	r2,zero,207f8 <OC_I2C_Write+0x18c>
              printf("OC_I2C_Write error[6]\r\n");
   207e4:	010000f4 	movhi	r4,3
   207e8:	21109204 	addi	r4,r4,16968
   207ec:	00273c80 	call	273c8 <puts>
              return FALSE;
   207f0:	0005883a 	mov	r2,zero
   207f4:	00002b06 	br	208a4 <OC_I2C_Write+0x238>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
   207f8:	01800404 	movi	r6,16
   207fc:	01400104 	movi	r5,4
   20800:	e13ffc17 	ldw	r4,-16(fp)
   20804:	00202900 	call	20290 <Write32_Data>
   20808:	1080005c 	xori	r2,r2,1
   2080c:	10803fcc 	andi	r2,r2,255
   20810:	10000526 	beq	r2,zero,20828 <OC_I2C_Write+0x1bc>
             printf("OC_I2C_Write error[7]\r\n");
   20814:	010000f4 	movhi	r4,3
   20818:	21109804 	addi	r4,r4,16992
   2081c:	00273c80 	call	273c8 <puts>
              return FALSE;
   20820:	0005883a 	mov	r2,zero
   20824:	00001f06 	br	208a4 <OC_I2C_Write+0x238>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
   20828:	e13ffc17 	ldw	r4,-16(fp)
   2082c:	00206040 	call	20604 <ACK_check>
   20830:	1080005c 	xori	r2,r2,1
   20834:	10803fcc 	andi	r2,r2,255
   20838:	10000526 	beq	r2,zero,20850 <OC_I2C_Write+0x1e4>
              printf("OC_I2C_Write error[8]\r\n");
   2083c:	010000f4 	movhi	r4,3
   20840:	21109e04 	addi	r4,r4,17016
   20844:	00273c80 	call	273c8 <puts>
              return FALSE;
   20848:	0005883a 	mov	r2,zero
   2084c:	00001506 	br	208a4 <OC_I2C_Write+0x238>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
        for( i=0;i<nWriteLength;i++){
   20850:	e0bffb17 	ldw	r2,-20(fp)
   20854:	10800044 	addi	r2,r2,1
   20858:	e0bffb15 	stw	r2,-20(fp)
   2085c:	e0fffb17 	ldw	r3,-20(fp)
   20860:	e0800217 	ldw	r2,8(fp)
   20864:	18bfd316 	blt	r3,r2,207b4 <__alt_data_end+0xfffe13b4>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
   20868:	01801004 	movi	r6,64
   2086c:	01400104 	movi	r5,4
   20870:	e13ffc17 	ldw	r4,-16(fp)
   20874:	00202900 	call	20290 <Write32_Data>
   20878:	1080005c 	xori	r2,r2,1
   2087c:	10803fcc 	andi	r2,r2,255
   20880:	10000526 	beq	r2,zero,20898 <OC_I2C_Write+0x22c>
         printf("OC_I2C_Write error[9]\r\n");
   20884:	010000f4 	movhi	r4,3
   20888:	2110a404 	addi	r4,r4,17040
   2088c:	00273c80 	call	273c8 <puts>
         return FALSE;
   20890:	0005883a 	mov	r2,zero
   20894:	00000306 	br	208a4 <OC_I2C_Write+0x238>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
   20898:	01003e84 	movi	r4,250
   2089c:	00321b00 	call	321b0 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
   208a0:	00800044 	movi	r2,1

}
   208a4:	e037883a 	mov	sp,fp
   208a8:	dfc00117 	ldw	ra,4(sp)
   208ac:	df000017 	ldw	fp,0(sp)
   208b0:	dec00204 	addi	sp,sp,8
   208b4:	f800283a 	ret

000208b8 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
   208b8:	defffb04 	addi	sp,sp,-20
   208bc:	dfc00415 	stw	ra,16(sp)
   208c0:	df000315 	stw	fp,12(sp)
   208c4:	df000304 	addi	fp,sp,12
   208c8:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
   208cc:	01003e84 	movi	r4,250
   208d0:	00321b00 	call	321b0 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
   208d4:	e0bffe04 	addi	r2,fp,-8
   208d8:	100d883a 	mov	r6,r2
   208dc:	01400104 	movi	r5,4
   208e0:	e13fff17 	ldw	r4,-4(fp)
   208e4:	00202e80 	call	202e8 <Read32_Data>
   208e8:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess){
   208ec:	e0bffd03 	ldbu	r2,-12(fp)
   208f0:	10000426 	beq	r2,zero,20904 <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
   208f4:	e0bffe17 	ldw	r2,-8(fp)
   208f8:	1080008c 	andi	r2,r2,2
   208fc:	10000126 	beq	r2,zero,20904 <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
   20900:	e03ffd05 	stb	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
   20904:	e0bffd03 	ldbu	r2,-12(fp)

}
   20908:	e037883a 	mov	sp,fp
   2090c:	dfc00117 	ldw	ra,4(sp)
   20910:	df000017 	ldw	fp,0(sp)
   20914:	dec00204 	addi	sp,sp,8
   20918:	f800283a 	ret

0002091c <OC_I2C_Read>:





bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
   2091c:	defff804 	addi	sp,sp,-32
   20920:	dfc00715 	stw	ra,28(sp)
   20924:	df000615 	stw	fp,24(sp)
   20928:	df000604 	addi	fp,sp,24
   2092c:	e13ffc15 	stw	r4,-16(fp)
   20930:	2807883a 	mov	r3,r5
   20934:	3005883a 	mov	r2,r6
   20938:	e1ffff15 	stw	r7,-4(fp)
   2093c:	e0fffd05 	stb	r3,-12(fp)
   20940:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   20944:	e0bffc17 	ldw	r2,-16(fp)
   20948:	10800304 	addi	r2,r2,12
   2094c:	1007883a 	mov	r3,r2
   20950:	e0bffd03 	ldbu	r2,-12(fp)
   20954:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   20958:	e0bffc17 	ldw	r2,-16(fp)
   2095c:	10800404 	addi	r2,r2,16
   20960:	1007883a 	mov	r3,r2
   20964:	00802404 	movi	r2,144
   20968:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   2096c:	e13ffc17 	ldw	r4,-16(fp)
   20970:	00206040 	call	20604 <ACK_check>
   20974:	1080005c 	xori	r2,r2,1
   20978:	10803fcc 	andi	r2,r2,255
   2097c:	10000526 	beq	r2,zero,20994 <OC_I2C_Read+0x78>
       printf("OC_I2C_Read error[2]\r\n");
   20980:	010000f4 	movhi	r4,3
   20984:	2110aa04 	addi	r4,r4,17064
   20988:	00273c80 	call	273c8 <puts>
       return FALSE;
   2098c:	0005883a 	mov	r2,zero
   20990:	00005806 	br	20af4 <OC_I2C_Read+0x1d8>
   }
   IOWR(i2c_base, 3,sub_address);
   20994:	e0bffc17 	ldw	r2,-16(fp)
   20998:	10800304 	addi	r2,r2,12
   2099c:	1007883a 	mov	r3,r2
   209a0:	e0bffe03 	ldbu	r2,-8(fp)
   209a4:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   209a8:	e0bffc17 	ldw	r2,-16(fp)
   209ac:	10800404 	addi	r2,r2,16
   209b0:	1007883a 	mov	r3,r2
   209b4:	00800404 	movi	r2,16
   209b8:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   209bc:	e13ffc17 	ldw	r4,-16(fp)
   209c0:	00206040 	call	20604 <ACK_check>
   209c4:	1080005c 	xori	r2,r2,1
   209c8:	10803fcc 	andi	r2,r2,255
   209cc:	10000526 	beq	r2,zero,209e4 <OC_I2C_Read+0xc8>
        printf("OC_I2C_Read error[5]\r\n");
   209d0:	010000f4 	movhi	r4,3
   209d4:	2110b004 	addi	r4,r4,17088
   209d8:	00273c80 	call	273c8 <puts>
        return FALSE;
   209dc:	0005883a 	mov	r2,zero
   209e0:	00004406 	br	20af4 <OC_I2C_Read+0x1d8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
   209e4:	e0bffc17 	ldw	r2,-16(fp)
   209e8:	10800304 	addi	r2,r2,12
   209ec:	1007883a 	mov	r3,r2
   209f0:	e0bffd03 	ldbu	r2,-12(fp)
   209f4:	10800054 	ori	r2,r2,1
   209f8:	10803fcc 	andi	r2,r2,255
   209fc:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20a00:	e0bffc17 	ldw	r2,-16(fp)
   20a04:	10800404 	addi	r2,r2,16
   20a08:	1007883a 	mov	r3,r2
   20a0c:	00802404 	movi	r2,144
   20a10:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20a14:	e13ffc17 	ldw	r4,-16(fp)
   20a18:	00206040 	call	20604 <ACK_check>
   20a1c:	1080005c 	xori	r2,r2,1
   20a20:	10803fcc 	andi	r2,r2,255
   20a24:	10000526 	beq	r2,zero,20a3c <OC_I2C_Read+0x120>
        printf("OC_I2C_Read error[8]\r\n");
   20a28:	010000f4 	movhi	r4,3
   20a2c:	2110b604 	addi	r4,r4,17112
   20a30:	00273c80 	call	273c8 <puts>
        return FALSE;
   20a34:	0005883a 	mov	r2,zero
   20a38:	00002e06 	br	20af4 <OC_I2C_Read+0x1d8>
    }

    for(i=0;i<nReadLength;i++){
   20a3c:	e03ffa15 	stw	zero,-24(fp)
   20a40:	00002106 	br	20ac8 <OC_I2C_Read+0x1ac>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20a44:	e0bffc17 	ldw	r2,-16(fp)
   20a48:	10800404 	addi	r2,r2,16
   20a4c:	1009883a 	mov	r4,r2
   20a50:	e0bffa17 	ldw	r2,-24(fp)
   20a54:	10c00044 	addi	r3,r2,1
   20a58:	e0800217 	ldw	r2,8(fp)
   20a5c:	1880021e 	bne	r3,r2,20a68 <OC_I2C_Read+0x14c>
   20a60:	00800a04 	movi	r2,40
   20a64:	00000106 	br	20a6c <OC_I2C_Read+0x150>
   20a68:	00800804 	movi	r2,32
   20a6c:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20a70:	e13ffc17 	ldw	r4,-16(fp)
   20a74:	00208b80 	call	208b8 <ACK_judge_for_read>
   20a78:	1080005c 	xori	r2,r2,1
   20a7c:	10803fcc 	andi	r2,r2,255
   20a80:	10000526 	beq	r2,zero,20a98 <OC_I2C_Read+0x17c>
            printf("OC_I2C_Read error[10]\r\n");
   20a84:	010000f4 	movhi	r4,3
   20a88:	2110bc04 	addi	r4,r4,17136
   20a8c:	00273c80 	call	273c8 <puts>
            return FALSE;
   20a90:	0005883a 	mov	r2,zero
   20a94:	00001706 	br	20af4 <OC_I2C_Read+0x1d8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20a98:	e0bffc17 	ldw	r2,-16(fp)
   20a9c:	10800304 	addi	r2,r2,12
   20aa0:	10800037 	ldwio	r2,0(r2)
   20aa4:	e0bffb15 	stw	r2,-20(fp)
//        printf("Data32_%d: %d\n", i, Data32);
        *(pData8+i) =  Data32 & 0xff;
   20aa8:	e0bffa17 	ldw	r2,-24(fp)
   20aac:	e0ffff17 	ldw	r3,-4(fp)
   20ab0:	1885883a 	add	r2,r3,r2
   20ab4:	e0fffb17 	ldw	r3,-20(fp)
   20ab8:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20abc:	e0bffa17 	ldw	r2,-24(fp)
   20ac0:	10800044 	addi	r2,r2,1
   20ac4:	e0bffa15 	stw	r2,-24(fp)
   20ac8:	e0fffa17 	ldw	r3,-24(fp)
   20acc:	e0800217 	ldw	r2,8(fp)
   20ad0:	18bfdc16 	blt	r3,r2,20a44 <__alt_data_end+0xfffe1644>
        Data32=IORD( i2c_base, 3);
//        printf("Data32_%d: %d\n", i, Data32);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20ad4:	e0bffc17 	ldw	r2,-16(fp)
   20ad8:	10800404 	addi	r2,r2,16
   20adc:	1007883a 	mov	r3,r2
   20ae0:	00801004 	movi	r2,64
   20ae4:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20ae8:	01003e84 	movi	r4,250
   20aec:	00321b00 	call	321b0 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20af0:	00800044 	movi	r2,1

}
   20af4:	e037883a 	mov	sp,fp
   20af8:	dfc00117 	ldw	ra,4(sp)
   20afc:	df000017 	ldw	fp,0(sp)
   20b00:	dec00204 	addi	sp,sp,8
   20b04:	f800283a 	ret

00020b08 <OC_I2C_Write_Addr>:

bool  OC_I2C_Write_Addr(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, bool bStop){
   20b08:	defffa04 	addi	sp,sp,-24
   20b0c:	dfc00515 	stw	ra,20(sp)
   20b10:	df000415 	stw	fp,16(sp)
   20b14:	df000404 	addi	fp,sp,16
   20b18:	e13ffc15 	stw	r4,-16(fp)
   20b1c:	2809883a 	mov	r4,r5
   20b20:	3007883a 	mov	r3,r6
   20b24:	3805883a 	mov	r2,r7
   20b28:	e13ffd05 	stb	r4,-12(fp)
   20b2c:	e0fffe05 	stb	r3,-8(fp)
   20b30:	e0bfff05 	stb	r2,-4(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   20b34:	e0bffc17 	ldw	r2,-16(fp)
   20b38:	10800304 	addi	r2,r2,12
   20b3c:	1007883a 	mov	r3,r2
   20b40:	e0bffd03 	ldbu	r2,-12(fp)
   20b44:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   20b48:	e0bffc17 	ldw	r2,-16(fp)
   20b4c:	10800404 	addi	r2,r2,16
   20b50:	1007883a 	mov	r3,r2
   20b54:	00802404 	movi	r2,144
   20b58:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   20b5c:	e13ffc17 	ldw	r4,-16(fp)
   20b60:	00206040 	call	20604 <ACK_check>
   20b64:	1080005c 	xori	r2,r2,1
   20b68:	10803fcc 	andi	r2,r2,255
   20b6c:	10000526 	beq	r2,zero,20b84 <OC_I2C_Write_Addr+0x7c>
       printf("OC_I2C_Read error[2]\r\n");
   20b70:	010000f4 	movhi	r4,3
   20b74:	2110aa04 	addi	r4,r4,17064
   20b78:	00273c80 	call	273c8 <puts>
       return FALSE;
   20b7c:	0005883a 	mov	r2,zero
   20b80:	00001e06 	br	20bfc <OC_I2C_Write_Addr+0xf4>
   }
   IOWR(i2c_base, 3,sub_address);
   20b84:	e0bffc17 	ldw	r2,-16(fp)
   20b88:	10800304 	addi	r2,r2,12
   20b8c:	1007883a 	mov	r3,r2
   20b90:	e0bffe03 	ldbu	r2,-8(fp)
   20b94:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   20b98:	e0bffc17 	ldw	r2,-16(fp)
   20b9c:	10800404 	addi	r2,r2,16
   20ba0:	1007883a 	mov	r3,r2
   20ba4:	00800404 	movi	r2,16
   20ba8:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20bac:	e13ffc17 	ldw	r4,-16(fp)
   20bb0:	00206040 	call	20604 <ACK_check>
   20bb4:	1080005c 	xori	r2,r2,1
   20bb8:	10803fcc 	andi	r2,r2,255
   20bbc:	10000526 	beq	r2,zero,20bd4 <OC_I2C_Write_Addr+0xcc>
        printf("OC_I2C_Read error[5]\r\n");
   20bc0:	010000f4 	movhi	r4,3
   20bc4:	2110b004 	addi	r4,r4,17088
   20bc8:	00273c80 	call	273c8 <puts>
        return FALSE;
   20bcc:	0005883a 	mov	r2,zero
   20bd0:	00000a06 	br	20bfc <OC_I2C_Write_Addr+0xf4>
    }

    if (bStop){
   20bd4:	e0bfff03 	ldbu	r2,-4(fp)
   20bd8:	10000726 	beq	r2,zero,20bf8 <OC_I2C_Write_Addr+0xf0>
        IOWR( i2c_base, 4,0x40);
   20bdc:	e0bffc17 	ldw	r2,-16(fp)
   20be0:	10800404 	addi	r2,r2,16
   20be4:	1007883a 	mov	r3,r2
   20be8:	00801004 	movi	r2,64
   20bec:	18800035 	stwio	r2,0(r3)
        usleep(SLEEP_TIME);
   20bf0:	01003e84 	movi	r4,250
   20bf4:	00321b00 	call	321b0 <usleep>
    }

   return TRUE;
   20bf8:	00800044 	movi	r2,1

}
   20bfc:	e037883a 	mov	sp,fp
   20c00:	dfc00117 	ldw	ra,4(sp)
   20c04:	df000017 	ldw	fp,0(sp)
   20c08:	dec00204 	addi	sp,sp,8
   20c0c:	f800283a 	ret

00020c10 <OC_I2C_Read_Continue>:



bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
   20c10:	defff804 	addi	sp,sp,-32
   20c14:	dfc00715 	stw	ra,28(sp)
   20c18:	df000615 	stw	fp,24(sp)
   20c1c:	df000604 	addi	fp,sp,24
   20c20:	e13ffc15 	stw	r4,-16(fp)
   20c24:	2805883a 	mov	r2,r5
   20c28:	e1bffe15 	stw	r6,-8(fp)
   20c2c:	e1ffff15 	stw	r7,-4(fp)
   20c30:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
   20c34:	e0bffc17 	ldw	r2,-16(fp)
   20c38:	10800304 	addi	r2,r2,12
   20c3c:	1007883a 	mov	r3,r2
   20c40:	e0bffd03 	ldbu	r2,-12(fp)
   20c44:	10800054 	ori	r2,r2,1
   20c48:	10803fcc 	andi	r2,r2,255
   20c4c:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20c50:	e0bffc17 	ldw	r2,-16(fp)
   20c54:	10800404 	addi	r2,r2,16
   20c58:	1007883a 	mov	r3,r2
   20c5c:	00802404 	movi	r2,144
   20c60:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20c64:	e13ffc17 	ldw	r4,-16(fp)
   20c68:	00206040 	call	20604 <ACK_check>
   20c6c:	1080005c 	xori	r2,r2,1
   20c70:	10803fcc 	andi	r2,r2,255
   20c74:	10000526 	beq	r2,zero,20c8c <OC_I2C_Read_Continue+0x7c>
        printf("OC_I2C_Read error[8]\r\n");
   20c78:	010000f4 	movhi	r4,3
   20c7c:	2110b604 	addi	r4,r4,17112
   20c80:	00273c80 	call	273c8 <puts>
        return FALSE;
   20c84:	0005883a 	mov	r2,zero
   20c88:	00002e06 	br	20d44 <OC_I2C_Read_Continue+0x134>
    }

    for(i=0;i<nReadLength;i++){
   20c8c:	e03ffa15 	stw	zero,-24(fp)
   20c90:	00002106 	br	20d18 <OC_I2C_Read_Continue+0x108>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20c94:	e0bffc17 	ldw	r2,-16(fp)
   20c98:	10800404 	addi	r2,r2,16
   20c9c:	1009883a 	mov	r4,r2
   20ca0:	e0bffa17 	ldw	r2,-24(fp)
   20ca4:	10c00044 	addi	r3,r2,1
   20ca8:	e0bfff17 	ldw	r2,-4(fp)
   20cac:	1880021e 	bne	r3,r2,20cb8 <OC_I2C_Read_Continue+0xa8>
   20cb0:	00800a04 	movi	r2,40
   20cb4:	00000106 	br	20cbc <OC_I2C_Read_Continue+0xac>
   20cb8:	00800804 	movi	r2,32
   20cbc:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20cc0:	e13ffc17 	ldw	r4,-16(fp)
   20cc4:	00208b80 	call	208b8 <ACK_judge_for_read>
   20cc8:	1080005c 	xori	r2,r2,1
   20ccc:	10803fcc 	andi	r2,r2,255
   20cd0:	10000526 	beq	r2,zero,20ce8 <OC_I2C_Read_Continue+0xd8>
            printf("OC_I2C_Read error[10]\r\n");
   20cd4:	010000f4 	movhi	r4,3
   20cd8:	2110bc04 	addi	r4,r4,17136
   20cdc:	00273c80 	call	273c8 <puts>
            return FALSE;
   20ce0:	0005883a 	mov	r2,zero
   20ce4:	00001706 	br	20d44 <OC_I2C_Read_Continue+0x134>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20ce8:	e0bffc17 	ldw	r2,-16(fp)
   20cec:	10800304 	addi	r2,r2,12
   20cf0:	10800037 	ldwio	r2,0(r2)
   20cf4:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20cf8:	e0bffa17 	ldw	r2,-24(fp)
   20cfc:	e0fffe17 	ldw	r3,-8(fp)
   20d00:	1885883a 	add	r2,r3,r2
   20d04:	e0fffb17 	ldw	r3,-20(fp)
   20d08:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20d0c:	e0bffa17 	ldw	r2,-24(fp)
   20d10:	10800044 	addi	r2,r2,1
   20d14:	e0bffa15 	stw	r2,-24(fp)
   20d18:	e0fffa17 	ldw	r3,-24(fp)
   20d1c:	e0bfff17 	ldw	r2,-4(fp)
   20d20:	18bfdc16 	blt	r3,r2,20c94 <__alt_data_end+0xfffe1894>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20d24:	e0bffc17 	ldw	r2,-16(fp)
   20d28:	10800404 	addi	r2,r2,16
   20d2c:	1007883a 	mov	r3,r2
   20d30:	00801004 	movi	r2,64
   20d34:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20d38:	01003e84 	movi	r4,250
   20d3c:	00321b00 	call	321b0 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20d40:	00800044 	movi	r2,1

}
   20d44:	e037883a 	mov	sp,fp
   20d48:	dfc00117 	ldw	ra,4(sp)
   20d4c:	df000017 	ldw	fp,0(sp)
   20d50:	dec00204 	addi	sp,sp,8
   20d54:	f800283a 	ret

00020d58 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
   20d58:	defff804 	addi	sp,sp,-32
   20d5c:	dfc00715 	stw	ra,28(sp)
   20d60:	df000615 	stw	fp,24(sp)
   20d64:	df000604 	addi	fp,sp,24
   20d68:	e13ffc15 	stw	r4,-16(fp)
   20d6c:	2807883a 	mov	r3,r5
   20d70:	3005883a 	mov	r2,r6
   20d74:	e1ffff15 	stw	r7,-4(fp)
   20d78:	e0fffd05 	stb	r3,-12(fp)
   20d7c:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20d80:	e0bffe0b 	ldhu	r2,-8(fp)
   20d84:	1004d23a 	srli	r2,r2,8
   20d88:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
   20d8c:	e0bffe0b 	ldhu	r2,-8(fp)
   20d90:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   20d94:	e0bffd03 	ldbu	r2,-12(fp)
   20d98:	100d883a 	mov	r6,r2
   20d9c:	014000c4 	movi	r5,3
   20da0:	e13ffc17 	ldw	r4,-16(fp)
   20da4:	00202900 	call	20290 <Write32_Data>
   20da8:	1080005c 	xori	r2,r2,1
   20dac:	10803fcc 	andi	r2,r2,255
   20db0:	10000226 	beq	r2,zero,20dbc <OC_I2CL_Write+0x64>
       return FALSE;
   20db4:	0005883a 	mov	r2,zero
   20db8:	00007d06 	br	20fb0 <OC_I2CL_Write+0x258>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
   20dbc:	01802404 	movi	r6,144
   20dc0:	01400104 	movi	r5,4
   20dc4:	e13ffc17 	ldw	r4,-16(fp)
   20dc8:	00202900 	call	20290 <Write32_Data>
   20dcc:	1080005c 	xori	r2,r2,1
   20dd0:	10803fcc 	andi	r2,r2,255
   20dd4:	10000226 	beq	r2,zero,20de0 <OC_I2CL_Write+0x88>
       return FALSE;
   20dd8:	0005883a 	mov	r2,zero
   20ddc:	00007406 	br	20fb0 <OC_I2CL_Write+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20de0:	e13ffc17 	ldw	r4,-16(fp)
   20de4:	00206040 	call	20604 <ACK_check>
   20de8:	1080005c 	xori	r2,r2,1
   20dec:	10803fcc 	andi	r2,r2,255
   20df0:	10000526 	beq	r2,zero,20e08 <OC_I2CL_Write+0xb0>
        printf("OC_I2CL_Write error[0]\r\n");
   20df4:	010000f4 	movhi	r4,3
   20df8:	2110c204 	addi	r4,r4,17160
   20dfc:	00273c80 	call	273c8 <puts>
        return FALSE;
   20e00:	0005883a 	mov	r2,zero
   20e04:	00006a06 	br	20fb0 <OC_I2CL_Write+0x258>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   20e08:	e0bffb03 	ldbu	r2,-20(fp)
   20e0c:	100d883a 	mov	r6,r2
   20e10:	014000c4 	movi	r5,3
   20e14:	e13ffc17 	ldw	r4,-16(fp)
   20e18:	00202900 	call	20290 <Write32_Data>
   20e1c:	1080005c 	xori	r2,r2,1
   20e20:	10803fcc 	andi	r2,r2,255
   20e24:	10000226 	beq	r2,zero,20e30 <OC_I2CL_Write+0xd8>
       return FALSE;
   20e28:	0005883a 	mov	r2,zero
   20e2c:	00006006 	br	20fb0 <OC_I2CL_Write+0x258>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20e30:	01800404 	movi	r6,16
   20e34:	01400104 	movi	r5,4
   20e38:	e13ffc17 	ldw	r4,-16(fp)
   20e3c:	00202900 	call	20290 <Write32_Data>
   20e40:	1080005c 	xori	r2,r2,1
   20e44:	10803fcc 	andi	r2,r2,255
   20e48:	10000226 	beq	r2,zero,20e54 <OC_I2CL_Write+0xfc>
        return FALSE;
   20e4c:	0005883a 	mov	r2,zero
   20e50:	00005706 	br	20fb0 <OC_I2CL_Write+0x258>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20e54:	e13ffc17 	ldw	r4,-16(fp)
   20e58:	00206040 	call	20604 <ACK_check>
   20e5c:	1080005c 	xori	r2,r2,1
   20e60:	10803fcc 	andi	r2,r2,255
   20e64:	10000526 	beq	r2,zero,20e7c <OC_I2CL_Write+0x124>
        printf("OC_I2CL_Write error[1]\r\n");
   20e68:	010000f4 	movhi	r4,3
   20e6c:	2110c804 	addi	r4,r4,17184
   20e70:	00273c80 	call	273c8 <puts>
        return FALSE;
   20e74:	0005883a 	mov	r2,zero
   20e78:	00004d06 	br	20fb0 <OC_I2CL_Write+0x258>
    }
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
   20e7c:	e0bffb43 	ldbu	r2,-19(fp)
   20e80:	100d883a 	mov	r6,r2
   20e84:	014000c4 	movi	r5,3
   20e88:	e13ffc17 	ldw	r4,-16(fp)
   20e8c:	00202900 	call	20290 <Write32_Data>
   20e90:	1080005c 	xori	r2,r2,1
   20e94:	10803fcc 	andi	r2,r2,255
   20e98:	10000226 	beq	r2,zero,20ea4 <OC_I2CL_Write+0x14c>
       return FALSE;
   20e9c:	0005883a 	mov	r2,zero
   20ea0:	00004306 	br	20fb0 <OC_I2CL_Write+0x258>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
   20ea4:	01800404 	movi	r6,16
   20ea8:	01400104 	movi	r5,4
   20eac:	e13ffc17 	ldw	r4,-16(fp)
   20eb0:	00202900 	call	20290 <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20eb4:	e13ffc17 	ldw	r4,-16(fp)
   20eb8:	00206040 	call	20604 <ACK_check>
   20ebc:	1080005c 	xori	r2,r2,1
   20ec0:	10803fcc 	andi	r2,r2,255
   20ec4:	10000526 	beq	r2,zero,20edc <OC_I2CL_Write+0x184>
        printf("OC_I2CL_Write error[2]\r\n");
   20ec8:	010000f4 	movhi	r4,3
   20ecc:	2110ce04 	addi	r4,r4,17208
   20ed0:	00273c80 	call	273c8 <puts>
        return FALSE;
   20ed4:	0005883a 	mov	r2,zero
   20ed8:	00003506 	br	20fb0 <OC_I2CL_Write+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
   20edc:	e03ffa15 	stw	zero,-24(fp)
   20ee0:	00002406 	br	20f74 <OC_I2CL_Write+0x21c>

        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
   20ee4:	e0bffa17 	ldw	r2,-24(fp)
   20ee8:	e0ffff17 	ldw	r3,-4(fp)
   20eec:	1885883a 	add	r2,r3,r2
   20ef0:	10800003 	ldbu	r2,0(r2)
   20ef4:	10803fcc 	andi	r2,r2,255
   20ef8:	100d883a 	mov	r6,r2
   20efc:	014000c4 	movi	r5,3
   20f00:	e13ffc17 	ldw	r4,-16(fp)
   20f04:	00202900 	call	20290 <Write32_Data>
   20f08:	1080005c 	xori	r2,r2,1
   20f0c:	10803fcc 	andi	r2,r2,255
   20f10:	10000226 	beq	r2,zero,20f1c <OC_I2CL_Write+0x1c4>
            return FALSE;
   20f14:	0005883a 	mov	r2,zero
   20f18:	00002506 	br	20fb0 <OC_I2CL_Write+0x258>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
   20f1c:	01800404 	movi	r6,16
   20f20:	01400104 	movi	r5,4
   20f24:	e13ffc17 	ldw	r4,-16(fp)
   20f28:	00202900 	call	20290 <Write32_Data>
   20f2c:	1080005c 	xori	r2,r2,1
   20f30:	10803fcc 	andi	r2,r2,255
   20f34:	10000226 	beq	r2,zero,20f40 <OC_I2CL_Write+0x1e8>
            return FALSE;
   20f38:	0005883a 	mov	r2,zero
   20f3c:	00001c06 	br	20fb0 <OC_I2CL_Write+0x258>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base)){
   20f40:	e13ffc17 	ldw	r4,-16(fp)
   20f44:	00206040 	call	20604 <ACK_check>
   20f48:	1080005c 	xori	r2,r2,1
   20f4c:	10803fcc 	andi	r2,r2,255
   20f50:	10000526 	beq	r2,zero,20f68 <OC_I2CL_Write+0x210>
             printf("OC_I2CL_Write error[3]\r\n");
   20f54:	010000f4 	movhi	r4,3
   20f58:	2110d404 	addi	r4,r4,17232
   20f5c:	00273c80 	call	273c8 <puts>
             return FALSE;
   20f60:	0005883a 	mov	r2,zero
   20f64:	00001206 	br	20fb0 <OC_I2CL_Write+0x258>
    }
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    //for( i=nWriteLength-1;i>=0;i--){
    for( i=0;i<nWriteLength;i++){
   20f68:	e0bffa17 	ldw	r2,-24(fp)
   20f6c:	10800044 	addi	r2,r2,1
   20f70:	e0bffa15 	stw	r2,-24(fp)
   20f74:	e0fffa17 	ldw	r3,-24(fp)
   20f78:	e0800217 	ldw	r2,8(fp)
   20f7c:	18bfd916 	blt	r3,r2,20ee4 <__alt_data_end+0xfffe1ae4>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
   20f80:	01801004 	movi	r6,64
   20f84:	01400104 	movi	r5,4
   20f88:	e13ffc17 	ldw	r4,-16(fp)
   20f8c:	00202900 	call	20290 <Write32_Data>
   20f90:	1080005c 	xori	r2,r2,1
   20f94:	10803fcc 	andi	r2,r2,255
   20f98:	10000226 	beq	r2,zero,20fa4 <OC_I2CL_Write+0x24c>
         return FALSE;
   20f9c:	0005883a 	mov	r2,zero
   20fa0:	00000306 	br	20fb0 <OC_I2CL_Write+0x258>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
   20fa4:	01003e84 	movi	r4,250
   20fa8:	00321b00 	call	321b0 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
   20fac:	00800044 	movi	r2,1
}
   20fb0:	e037883a 	mov	sp,fp
   20fb4:	dfc00117 	ldw	ra,4(sp)
   20fb8:	df000017 	ldw	fp,0(sp)
   20fbc:	dec00204 	addi	sp,sp,8
   20fc0:	f800283a 	ret

00020fc4 <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
   20fc4:	defff704 	addi	sp,sp,-36
   20fc8:	dfc00815 	stw	ra,32(sp)
   20fcc:	df000715 	stw	fp,28(sp)
   20fd0:	df000704 	addi	fp,sp,28
   20fd4:	e13ffc15 	stw	r4,-16(fp)
   20fd8:	2807883a 	mov	r3,r5
   20fdc:	3005883a 	mov	r2,r6
   20fe0:	e1ffff15 	stw	r7,-4(fp)
   20fe4:	e0fffd05 	stb	r3,-12(fp)
   20fe8:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20fec:	e0bffe0b 	ldhu	r2,-8(fp)
   20ff0:	1004d23a 	srli	r2,r2,8
   20ff4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
   20ff8:	e0bffe0b 	ldhu	r2,-8(fp)
   20ffc:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   21000:	e0bffd03 	ldbu	r2,-12(fp)
   21004:	100d883a 	mov	r6,r2
   21008:	014000c4 	movi	r5,3
   2100c:	e13ffc17 	ldw	r4,-16(fp)
   21010:	00202900 	call	20290 <Write32_Data>
   21014:	1080005c 	xori	r2,r2,1
   21018:	10803fcc 	andi	r2,r2,255
   2101c:	10000226 	beq	r2,zero,21028 <OC_I2CL_Read+0x64>
       return FALSE;
   21020:	0005883a 	mov	r2,zero
   21024:	00009e06 	br	212a0 <OC_I2CL_Read+0x2dc>

   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
   21028:	01802404 	movi	r6,144
   2102c:	01400104 	movi	r5,4
   21030:	e13ffc17 	ldw	r4,-16(fp)
   21034:	00202900 	call	20290 <Write32_Data>
   21038:	1080005c 	xori	r2,r2,1
   2103c:	10803fcc 	andi	r2,r2,255
   21040:	10000226 	beq	r2,zero,2104c <OC_I2CL_Read+0x88>
       return FALSE;
   21044:	0005883a 	mov	r2,zero
   21048:	00009506 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   2104c:	e13ffc17 	ldw	r4,-16(fp)
   21050:	00206040 	call	20604 <ACK_check>
   21054:	1080005c 	xori	r2,r2,1
   21058:	10803fcc 	andi	r2,r2,255
   2105c:	10000526 	beq	r2,zero,21074 <OC_I2CL_Read+0xb0>
        printf("OC_I2CL_Read error[0]\r\n");
   21060:	010000f4 	movhi	r4,3
   21064:	2110da04 	addi	r4,r4,17256
   21068:	00273c80 	call	273c8 <puts>
        return FALSE;
   2106c:	0005883a 	mov	r2,zero
   21070:	00008b06 	br	212a0 <OC_I2CL_Read+0x2dc>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   21074:	e0bffa03 	ldbu	r2,-24(fp)
   21078:	100d883a 	mov	r6,r2
   2107c:	014000c4 	movi	r5,3
   21080:	e13ffc17 	ldw	r4,-16(fp)
   21084:	00202900 	call	20290 <Write32_Data>
   21088:	1080005c 	xori	r2,r2,1
   2108c:	10803fcc 	andi	r2,r2,255
   21090:	10000226 	beq	r2,zero,2109c <OC_I2CL_Read+0xd8>
       return FALSE;
   21094:	0005883a 	mov	r2,zero
   21098:	00008106 	br	212a0 <OC_I2CL_Read+0x2dc>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   2109c:	01800404 	movi	r6,16
   210a0:	01400104 	movi	r5,4
   210a4:	e13ffc17 	ldw	r4,-16(fp)
   210a8:	00202900 	call	20290 <Write32_Data>
   210ac:	1080005c 	xori	r2,r2,1
   210b0:	10803fcc 	andi	r2,r2,255
   210b4:	10000226 	beq	r2,zero,210c0 <OC_I2CL_Read+0xfc>
        return FALSE;
   210b8:	0005883a 	mov	r2,zero
   210bc:	00007806 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   210c0:	e13ffc17 	ldw	r4,-16(fp)
   210c4:	00206040 	call	20604 <ACK_check>
   210c8:	1080005c 	xori	r2,r2,1
   210cc:	10803fcc 	andi	r2,r2,255
   210d0:	10000526 	beq	r2,zero,210e8 <OC_I2CL_Read+0x124>
        printf("OC_I2CL_Read error[1]\r\n");
   210d4:	010000f4 	movhi	r4,3
   210d8:	2110e004 	addi	r4,r4,17280
   210dc:	00273c80 	call	273c8 <puts>
        return FALSE;
   210e0:	0005883a 	mov	r2,zero
   210e4:	00006e06 	br	212a0 <OC_I2CL_Read+0x2dc>
    }
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
   210e8:	e0bffa43 	ldbu	r2,-23(fp)
   210ec:	100d883a 	mov	r6,r2
   210f0:	014000c4 	movi	r5,3
   210f4:	e13ffc17 	ldw	r4,-16(fp)
   210f8:	00202900 	call	20290 <Write32_Data>
   210fc:	1080005c 	xori	r2,r2,1
   21100:	10803fcc 	andi	r2,r2,255
   21104:	10000226 	beq	r2,zero,21110 <OC_I2CL_Read+0x14c>
       return FALSE;
   21108:	0005883a 	mov	r2,zero
   2110c:	00006406 	br	212a0 <OC_I2CL_Read+0x2dc>
   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   21110:	01800404 	movi	r6,16
   21114:	01400104 	movi	r5,4
   21118:	e13ffc17 	ldw	r4,-16(fp)
   2111c:	00202900 	call	20290 <Write32_Data>
   21120:	1080005c 	xori	r2,r2,1
   21124:	10803fcc 	andi	r2,r2,255
   21128:	10000226 	beq	r2,zero,21134 <OC_I2CL_Read+0x170>
        return FALSE;
   2112c:	0005883a 	mov	r2,zero
   21130:	00005b06 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   21134:	e13ffc17 	ldw	r4,-16(fp)
   21138:	00206040 	call	20604 <ACK_check>
   2113c:	1080005c 	xori	r2,r2,1
   21140:	10803fcc 	andi	r2,r2,255
   21144:	10000526 	beq	r2,zero,2115c <OC_I2CL_Read+0x198>
        printf("OC_I2CL_Read error[2]\r\n");
   21148:	010000f4 	movhi	r4,3
   2114c:	2110e604 	addi	r4,r4,17304
   21150:	00273c80 	call	273c8 <puts>
        return FALSE;
   21154:	0005883a 	mov	r2,zero
   21158:	00005106 	br	212a0 <OC_I2CL_Read+0x2dc>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
   2115c:	e0bffd03 	ldbu	r2,-12(fp)
   21160:	10800054 	ori	r2,r2,1
   21164:	10803fcc 	andi	r2,r2,255
   21168:	100d883a 	mov	r6,r2
   2116c:	014000c4 	movi	r5,3
   21170:	e13ffc17 	ldw	r4,-16(fp)
   21174:	00202900 	call	20290 <Write32_Data>
   21178:	1080005c 	xori	r2,r2,1
   2117c:	10803fcc 	andi	r2,r2,255
   21180:	10000226 	beq	r2,zero,2118c <OC_I2CL_Read+0x1c8>
         return FALSE;
   21184:	0005883a 	mov	r2,zero
   21188:	00004506 	br	212a0 <OC_I2CL_Read+0x2dc>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
   2118c:	01802404 	movi	r6,144
   21190:	01400104 	movi	r5,4
   21194:	e13ffc17 	ldw	r4,-16(fp)
   21198:	00202900 	call	20290 <Write32_Data>
   2119c:	1080005c 	xori	r2,r2,1
   211a0:	10803fcc 	andi	r2,r2,255
   211a4:	10000226 	beq	r2,zero,211b0 <OC_I2CL_Read+0x1ec>
         return FALSE;
   211a8:	0005883a 	mov	r2,zero
   211ac:	00003c06 	br	212a0 <OC_I2CL_Read+0x2dc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   211b0:	e13ffc17 	ldw	r4,-16(fp)
   211b4:	00206040 	call	20604 <ACK_check>
   211b8:	1080005c 	xori	r2,r2,1
   211bc:	10803fcc 	andi	r2,r2,255
   211c0:	10000526 	beq	r2,zero,211d8 <OC_I2CL_Read+0x214>
        printf("OC_I2CL_Read error[3]\r\n");
   211c4:	010000f4 	movhi	r4,3
   211c8:	2110ec04 	addi	r4,r4,17328
   211cc:	00273c80 	call	273c8 <puts>
        return FALSE;
   211d0:	0005883a 	mov	r2,zero
   211d4:	00003206 	br	212a0 <OC_I2CL_Read+0x2dc>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   211d8:	e03ff915 	stw	zero,-28(fp)
   211dc:	00002106 	br	21264 <OC_I2CL_Read+0x2a0>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   211e0:	e0bffc17 	ldw	r2,-16(fp)
   211e4:	10800404 	addi	r2,r2,16
   211e8:	1009883a 	mov	r4,r2
   211ec:	e0bff917 	ldw	r2,-28(fp)
   211f0:	10c00044 	addi	r3,r2,1
   211f4:	e0800217 	ldw	r2,8(fp)
   211f8:	1880021e 	bne	r3,r2,21204 <OC_I2CL_Read+0x240>
   211fc:	00800a04 	movi	r2,40
   21200:	00000106 	br	21208 <OC_I2CL_Read+0x244>
   21204:	00800804 	movi	r2,32
   21208:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   2120c:	e13ffc17 	ldw	r4,-16(fp)
   21210:	00208b80 	call	208b8 <ACK_judge_for_read>
   21214:	1080005c 	xori	r2,r2,1
   21218:	10803fcc 	andi	r2,r2,255
   2121c:	10000526 	beq	r2,zero,21234 <OC_I2CL_Read+0x270>
            printf("OC_I2CL_Read error[4]\r\n");
   21220:	010000f4 	movhi	r4,3
   21224:	2110f204 	addi	r4,r4,17352
   21228:	00273c80 	call	273c8 <puts>
            return FALSE;
   2122c:	0005883a 	mov	r2,zero
   21230:	00001b06 	br	212a0 <OC_I2CL_Read+0x2dc>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   21234:	e0bffc17 	ldw	r2,-16(fp)
   21238:	10800304 	addi	r2,r2,12
   2123c:	10800037 	ldwio	r2,0(r2)
   21240:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   21244:	e0bff917 	ldw	r2,-28(fp)
   21248:	e0ffff17 	ldw	r3,-4(fp)
   2124c:	1885883a 	add	r2,r3,r2
   21250:	e0fffb17 	ldw	r3,-20(fp)
   21254:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   21258:	e0bff917 	ldw	r2,-28(fp)
   2125c:	10800044 	addi	r2,r2,1
   21260:	e0bff915 	stw	r2,-28(fp)
   21264:	e0fff917 	ldw	r3,-28(fp)
   21268:	e0800217 	ldw	r2,8(fp)
   2126c:	18bfdc16 	blt	r3,r2,211e0 <__alt_data_end+0xfffe1de0>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
   21270:	01801004 	movi	r6,64
   21274:	01400104 	movi	r5,4
   21278:	e13ffc17 	ldw	r4,-16(fp)
   2127c:	00202900 	call	20290 <Write32_Data>
   21280:	1080005c 	xori	r2,r2,1
   21284:	10803fcc 	andi	r2,r2,255
   21288:	10000226 	beq	r2,zero,21294 <OC_I2CL_Read+0x2d0>
       return FALSE;
   2128c:	0005883a 	mov	r2,zero
   21290:	00000306 	br	212a0 <OC_I2CL_Read+0x2dc>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
   21294:	01003e84 	movi	r4,250
   21298:	00321b00 	call	321b0 <usleep>

   return TRUE;
   2129c:	00800044 	movi	r2,1

}
   212a0:	e037883a 	mov	sp,fp
   212a4:	dfc00117 	ldw	ra,4(sp)
   212a8:	df000017 	ldw	fp,0(sp)
   212ac:	dec00204 	addi	sp,sp,8
   212b0:	f800283a 	ret

000212b4 <Light_Init>:

////////////////////////////////////////
// export API
static alt_u32 Light_I2C_Controller_Base = LIGHT_I2C_OPENCORES_BASE;

void Light_Init(alt_u32 I2C_Controller_Base){
   212b4:	defffb04 	addi	sp,sp,-20
   212b8:	dfc00415 	stw	ra,16(sp)
   212bc:	df000315 	stw	fp,12(sp)
   212c0:	df000304 	addi	fp,sp,12
   212c4:	e13fff15 	stw	r4,-4(fp)
	const int Ref_CLK = 50*1000*1000; // 50MHz
   212c8:	0080bef4 	movhi	r2,763
   212cc:	10bc2004 	addi	r2,r2,-3968
   212d0:	e0bffd15 	stw	r2,-12(fp)
	const int I2C_CLK = 400*1000; // 400KHz
   212d4:	008001b4 	movhi	r2,6
   212d8:	1086a004 	addi	r2,r2,6784
   212dc:	e0bffe15 	stw	r2,-8(fp)

	Light_I2C_Controller_Base = I2C_Controller_Base;
   212e0:	e0bfff17 	ldw	r2,-4(fp)
   212e4:	d0a00015 	stw	r2,-32768(gp)
	oc_i2c_init_ex(Light_I2C_Controller_Base, Ref_CLK, I2C_CLK);
   212e8:	d0a00017 	ldw	r2,-32768(gp)
   212ec:	e1bffe17 	ldw	r6,-8(fp)
   212f0:	e17ffd17 	ldw	r5,-12(fp)
   212f4:	1009883a 	mov	r4,r2
   212f8:	00203980 	call	20398 <oc_i2c_init_ex>
}
   212fc:	0001883a 	nop
   21300:	e037883a 	mov	sp,fp
   21304:	dfc00117 	ldw	ra,4(sp)
   21308:	df000017 	ldw	fp,0(sp)
   2130c:	dec00204 	addi	sp,sp,8
   21310:	f800283a 	ret

00021314 <Light_GetID>:

void Light_GetID(alt_u8 *data)
{
   21314:	defffc04 	addi	sp,sp,-16
   21318:	dfc00315 	stw	ra,12(sp)
   2131c:	df000215 	stw	fp,8(sp)
   21320:	df000204 	addi	fp,sp,8
   21324:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | ID_REG ;
   21328:	00bfe284 	movi	r2,-118
   2132c:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21330:	e0bffe03 	ldbu	r2,-8(fp)
   21334:	e1bfff17 	ldw	r6,-4(fp)
   21338:	100b883a 	mov	r5,r2
   2133c:	01001484 	movi	r4,82
   21340:	00219a80 	call	219a8 <I2C_Read_Light>
   21344:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
   21348:	e0bffe43 	ldbu	r2,-7(fp)
   2134c:	1080005c 	xori	r2,r2,1
   21350:	10803fcc 	andi	r2,r2,255
   21354:	10000226 	beq	r2,zero,21360 <Light_GetID+0x4c>
   21358:	e0bfff17 	ldw	r2,-4(fp)
   2135c:	10000005 	stb	zero,0(r2)

}
   21360:	0001883a 	nop
   21364:	e037883a 	mov	sp,fp
   21368:	dfc00117 	ldw	ra,4(sp)
   2136c:	df000017 	ldw	fp,0(sp)
   21370:	dec00204 	addi	sp,sp,8
   21374:	f800283a 	ret

00021378 <Light_GetTiming>:

void Light_GetTiming(alt_u8 *data)
{
   21378:	defffc04 	addi	sp,sp,-16
   2137c:	dfc00315 	stw	ra,12(sp)
   21380:	df000215 	stw	fp,8(sp)
   21384:	df000204 	addi	fp,sp,8
   21388:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
   2138c:	00bfe044 	movi	r2,-127
   21390:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21394:	e0bffe03 	ldbu	r2,-8(fp)
   21398:	e1bfff17 	ldw	r6,-4(fp)
   2139c:	100b883a 	mov	r5,r2
   213a0:	01001484 	movi	r4,82
   213a4:	00219a80 	call	219a8 <I2C_Read_Light>
   213a8:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
   213ac:	e0bffe43 	ldbu	r2,-7(fp)
   213b0:	1080005c 	xori	r2,r2,1
   213b4:	10803fcc 	andi	r2,r2,255
   213b8:	10000226 	beq	r2,zero,213c4 <Light_GetTiming+0x4c>
   213bc:	e0bfff17 	ldw	r2,-4(fp)
   213c0:	10000005 	stb	zero,0(r2)

}
   213c4:	0001883a 	nop
   213c8:	e037883a 	mov	sp,fp
   213cc:	dfc00117 	ldw	ra,4(sp)
   213d0:	df000017 	ldw	fp,0(sp)
   213d4:	dec00204 	addi	sp,sp,8
   213d8:	f800283a 	ret

000213dc <Light_PowerSwitch>:

bool Light_PowerSwitch(bool bSwitch)
{
   213dc:	defffc04 	addi	sp,sp,-16
   213e0:	dfc00315 	stw	ra,12(sp)
   213e4:	df000215 	stw	fp,8(sp)
   213e8:	df000204 	addi	fp,sp,8
   213ec:	2005883a 	mov	r2,r4
   213f0:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 data = 0;
   213f4:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 CommandCode = COMMAND_CMD | CONTROL_REG ;
   213f8:	00bfe004 	movi	r2,-128
   213fc:	e0bffe45 	stb	r2,-7(fp)

    data = bSwitch ? 0x03 : 0x00 ;
   21400:	e0bfff03 	ldbu	r2,-4(fp)
   21404:	10000226 	beq	r2,zero,21410 <Light_PowerSwitch+0x34>
   21408:	008000c4 	movi	r2,3
   2140c:	00000106 	br	21414 <Light_PowerSwitch+0x38>
   21410:	0005883a 	mov	r2,zero
   21414:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
   21418:	e0bffe43 	ldbu	r2,-7(fp)
   2141c:	e0fffe03 	ldbu	r3,-8(fp)
   21420:	180d883a 	mov	r6,r3
   21424:	100b883a 	mov	r5,r2
   21428:	01001484 	movi	r4,82
   2142c:	00218c40 	call	218c4 <I2C_Write_Light>
   21430:	e0bffe85 	stb	r2,-6(fp)

    return bPass;
   21434:	e0bffe83 	ldbu	r2,-6(fp)
}
   21438:	e037883a 	mov	sp,fp
   2143c:	dfc00117 	ldw	ra,4(sp)
   21440:	df000017 	ldw	fp,0(sp)
   21444:	dec00204 	addi	sp,sp,8
   21448:	f800283a 	ret

0002144c <Light_Get_ADCData0>:

bool Light_Get_ADCData0(alt_u16 *pChannelData)
{
   2144c:	defffc04 	addi	sp,sp,-16
   21450:	dfc00315 	stw	ra,12(sp)
   21454:	df000215 	stw	fp,8(sp)
   21458:	df000204 	addi	fp,sp,8
   2145c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 Data0Low, Data0High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA0LOW ;
   21460:	00bfe304 	movi	r2,-116
   21464:	e0bffe05 	stb	r2,-8(fp)
    //alt_u8 CommandCode = 0x8C;

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0Low);
   21468:	e0bffe03 	ldbu	r2,-8(fp)
   2146c:	e0fffe84 	addi	r3,fp,-6
   21470:	180d883a 	mov	r6,r3
   21474:	100b883a 	mov	r5,r2
   21478:	01001484 	movi	r4,82
   2147c:	00219a80 	call	219a8 <I2C_Read_Light>
   21480:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)
   21484:	e0bffe43 	ldbu	r2,-7(fp)
   21488:	1080005c 	xori	r2,r2,1
   2148c:	10803fcc 	andi	r2,r2,255
   21490:	10000226 	beq	r2,zero,2149c <Light_Get_ADCData0+0x50>
    {
         return FALSE;
   21494:	0005883a 	mov	r2,zero
   21498:	00002506 	br	21530 <Light_Get_ADCData0+0xe4>
    }
    else *pChannelData = Data0Low;
   2149c:	e0bffe83 	ldbu	r2,-6(fp)
   214a0:	10c03fcc 	andi	r3,r2,255
   214a4:	e0bfff17 	ldw	r2,-4(fp)
   214a8:	10c0000d 	sth	r3,0(r2)

    if(bPass)
   214ac:	e0bffe43 	ldbu	r2,-7(fp)
   214b0:	10001426 	beq	r2,zero,21504 <Light_Get_ADCData0+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA0HIGH ;
   214b4:	00bfe344 	movi	r2,-115
   214b8:	e0bffe05 	stb	r2,-8(fp)
        //CommandCode = 0x8D;

        bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data0High);
   214bc:	e0bffe03 	ldbu	r2,-8(fp)
   214c0:	e0fffec4 	addi	r3,fp,-5
   214c4:	180d883a 	mov	r6,r3
   214c8:	100b883a 	mov	r5,r2
   214cc:	01001484 	movi	r4,82
   214d0:	00219a80 	call	219a8 <I2C_Read_Light>
   214d4:	e0bffe45 	stb	r2,-7(fp)
        if(!bPass)
   214d8:	e0bffe43 	ldbu	r2,-7(fp)
   214dc:	1080005c 	xori	r2,r2,1
   214e0:	10803fcc 	andi	r2,r2,255
   214e4:	10000226 	beq	r2,zero,214f0 <Light_Get_ADCData0+0xa4>
        {
            return FALSE;
   214e8:	0005883a 	mov	r2,zero
   214ec:	00001006 	br	21530 <Light_Get_ADCData0+0xe4>
        }
        else *(pChannelData+1) = Data0High;
   214f0:	e0bfff17 	ldw	r2,-4(fp)
   214f4:	10800084 	addi	r2,r2,2
   214f8:	e0fffec3 	ldbu	r3,-5(fp)
   214fc:	18c03fcc 	andi	r3,r3,255
   21500:	10c0000d 	sth	r3,0(r2)
    }

    *pChannelData = (Data0High << 8) | Data0Low;
   21504:	e0bffec3 	ldbu	r2,-5(fp)
   21508:	10803fcc 	andi	r2,r2,255
   2150c:	1004923a 	slli	r2,r2,8
   21510:	1007883a 	mov	r3,r2
   21514:	e0bffe83 	ldbu	r2,-6(fp)
   21518:	10803fcc 	andi	r2,r2,255
   2151c:	1884b03a 	or	r2,r3,r2
   21520:	1007883a 	mov	r3,r2
   21524:	e0bfff17 	ldw	r2,-4(fp)
   21528:	10c0000d 	sth	r3,0(r2)

    return TRUE;
   2152c:	00800044 	movi	r2,1
}
   21530:	e037883a 	mov	sp,fp
   21534:	dfc00117 	ldw	ra,4(sp)
   21538:	df000017 	ldw	fp,0(sp)
   2153c:	dec00204 	addi	sp,sp,8
   21540:	f800283a 	ret

00021544 <Light_Get_ADCData1>:

bool Light_Get_ADCData1(alt_u16 *pChannelData)
{
   21544:	defffc04 	addi	sp,sp,-16
   21548:	dfc00315 	stw	ra,12(sp)
   2154c:	df000215 	stw	fp,8(sp)
   21550:	df000204 	addi	fp,sp,8
   21554:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 Data1Low, Data1High;
    alt_u8 CommandCode = COMMAND_CMD |  DATA1LOW ;
   21558:	00bfe384 	movi	r2,-114
   2155c:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , &Data1Low);
   21560:	e0bffe03 	ldbu	r2,-8(fp)
   21564:	e0fffe84 	addi	r3,fp,-6
   21568:	180d883a 	mov	r6,r3
   2156c:	100b883a 	mov	r5,r2
   21570:	01001484 	movi	r4,82
   21574:	00219a80 	call	219a8 <I2C_Read_Light>
   21578:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)
   2157c:	e0bffe43 	ldbu	r2,-7(fp)
   21580:	1080005c 	xori	r2,r2,1
   21584:	10803fcc 	andi	r2,r2,255
   21588:	10000226 	beq	r2,zero,21594 <Light_Get_ADCData1+0x50>
    {
         return FALSE;
   2158c:	0005883a 	mov	r2,zero
   21590:	00002506 	br	21628 <Light_Get_ADCData1+0xe4>
    }
    else *pChannelData = Data1Low;
   21594:	e0bffe83 	ldbu	r2,-6(fp)
   21598:	10c03fcc 	andi	r3,r2,255
   2159c:	e0bfff17 	ldw	r2,-4(fp)
   215a0:	10c0000d 	sth	r3,0(r2)

    if(bPass)
   215a4:	e0bffe43 	ldbu	r2,-7(fp)
   215a8:	10001426 	beq	r2,zero,215fc <Light_Get_ADCData1+0xb8>
    {
        CommandCode = COMMAND_CMD |  DATA1HIGH ;
   215ac:	00bfe3c4 	movi	r2,-113
   215b0:	e0bffe05 	stb	r2,-8(fp)

        bPass = I2C_Read_Light(DEVICE_ADDR,CommandCode , &Data1High);
   215b4:	e0bffe03 	ldbu	r2,-8(fp)
   215b8:	e0fffec4 	addi	r3,fp,-5
   215bc:	180d883a 	mov	r6,r3
   215c0:	100b883a 	mov	r5,r2
   215c4:	01001484 	movi	r4,82
   215c8:	00219a80 	call	219a8 <I2C_Read_Light>
   215cc:	e0bffe45 	stb	r2,-7(fp)
        if(!bPass)
   215d0:	e0bffe43 	ldbu	r2,-7(fp)
   215d4:	1080005c 	xori	r2,r2,1
   215d8:	10803fcc 	andi	r2,r2,255
   215dc:	10000226 	beq	r2,zero,215e8 <Light_Get_ADCData1+0xa4>
        {
            return FALSE;
   215e0:	0005883a 	mov	r2,zero
   215e4:	00001006 	br	21628 <Light_Get_ADCData1+0xe4>
        }
        else *(pChannelData+1) = Data1High;
   215e8:	e0bfff17 	ldw	r2,-4(fp)
   215ec:	10800084 	addi	r2,r2,2
   215f0:	e0fffec3 	ldbu	r3,-5(fp)
   215f4:	18c03fcc 	andi	r3,r3,255
   215f8:	10c0000d 	sth	r3,0(r2)
    }

    *pChannelData = (Data1High << 8) | Data1Low;
   215fc:	e0bffec3 	ldbu	r2,-5(fp)
   21600:	10803fcc 	andi	r2,r2,255
   21604:	1004923a 	slli	r2,r2,8
   21608:	1007883a 	mov	r3,r2
   2160c:	e0bffe83 	ldbu	r2,-6(fp)
   21610:	10803fcc 	andi	r2,r2,255
   21614:	1884b03a 	or	r2,r3,r2
   21618:	1007883a 	mov	r3,r2
   2161c:	e0bfff17 	ldw	r2,-4(fp)
   21620:	10c0000d 	sth	r3,0(r2)

    return TRUE;
   21624:	00800044 	movi	r2,1
}
   21628:	e037883a 	mov	sp,fp
   2162c:	dfc00117 	ldw	ra,4(sp)
   21630:	df000017 	ldw	fp,0(sp)
   21634:	dec00204 	addi	sp,sp,8
   21638:	f800283a 	ret

0002163c <Get_light>:

bool Get_light(alt_u16 *light0, alt_u16 *light1)
{
   2163c:	defffa04 	addi	sp,sp,-24
   21640:	dfc00515 	stw	ra,20(sp)
   21644:	df000415 	stw	fp,16(sp)
   21648:	df000404 	addi	fp,sp,16
   2164c:	e13ffe15 	stw	r4,-8(fp)
   21650:	e17fff15 	stw	r5,-4(fp)
    bool bPass = FALSE;
   21654:	e03ffc05 	stb	zero,-16(fp)
    alt_u8 device_Id = 0;
   21658:	e03ffc45 	stb	zero,-15(fp)

    alt_u16 ChannelData0;
    alt_u16 ChannelData1;

    //get light sensor Id
    Light_GetID(&device_Id);
   2165c:	e0bffc44 	addi	r2,fp,-15
   21660:	1009883a 	mov	r4,r2
   21664:	00213140 	call	21314 <Light_GetID>
    if(device_Id == 0)
   21668:	e0bffc43 	ldbu	r2,-15(fp)
   2166c:	10803fcc 	andi	r2,r2,255
   21670:	1000051e 	bne	r2,zero,21688 <Get_light+0x4c>
    {
        printf("read id fail \n");
   21674:	010000f4 	movhi	r4,3
   21678:	2110f804 	addi	r4,r4,17376
   2167c:	00273c80 	call	273c8 <puts>
        return FALSE;
   21680:	0005883a 	mov	r2,zero
   21684:	00002106 	br	2170c <Get_light+0xd0>
    	//printf("Light Sensor ID=%xh\r\n", device_Id); //
    }


    //get adc channel 0 data
    bPass = Light_Get_ADCData0(&ChannelData0);
   21688:	e0bffc84 	addi	r2,fp,-14
   2168c:	1009883a 	mov	r4,r2
   21690:	002144c0 	call	2144c <Light_Get_ADCData0>
   21694:	e0bffc05 	stb	r2,-16(fp)
    if(!bPass)
   21698:	e0bffc03 	ldbu	r2,-16(fp)
   2169c:	1080005c 	xori	r2,r2,1
   216a0:	10803fcc 	andi	r2,r2,255
   216a4:	10000526 	beq	r2,zero,216bc <Get_light+0x80>
    {
        printf("Get ADC Channle 0 data fail \n");
   216a8:	010000f4 	movhi	r4,3
   216ac:	2110fc04 	addi	r4,r4,17392
   216b0:	00273c80 	call	273c8 <puts>
        return FALSE;
   216b4:	0005883a 	mov	r2,zero
   216b8:	00001406 	br	2170c <Get_light+0xd0>
    }
    *light0 = ChannelData0;
   216bc:	e0fffc8b 	ldhu	r3,-14(fp)
   216c0:	e0bffe17 	ldw	r2,-8(fp)
   216c4:	10c0000d 	sth	r3,0(r2)

    //get adc channel 1 data
    bPass = Light_Get_ADCData1(&ChannelData1);
   216c8:	e0bffd04 	addi	r2,fp,-12
   216cc:	1009883a 	mov	r4,r2
   216d0:	00215440 	call	21544 <Light_Get_ADCData1>
   216d4:	e0bffc05 	stb	r2,-16(fp)
    if(!bPass)
   216d8:	e0bffc03 	ldbu	r2,-16(fp)
   216dc:	1080005c 	xori	r2,r2,1
   216e0:	10803fcc 	andi	r2,r2,255
   216e4:	10000526 	beq	r2,zero,216fc <Get_light+0xc0>
    {
        printf("Get ADC Channle 1 data fail \n");
   216e8:	010000f4 	movhi	r4,3
   216ec:	21110404 	addi	r4,r4,17424
   216f0:	00273c80 	call	273c8 <puts>
        return FALSE;
   216f4:	0005883a 	mov	r2,zero
   216f8:	00000406 	br	2170c <Get_light+0xd0>
    }
    *light1 = ChannelData1;
   216fc:	e0fffd0b 	ldhu	r3,-12(fp)
   21700:	e0bfff17 	ldw	r2,-4(fp)
   21704:	10c0000d 	sth	r3,0(r2)
    return TRUE;
   21708:	00800044 	movi	r2,1
}
   2170c:	e037883a 	mov	sp,fp
   21710:	dfc00117 	ldw	ra,4(sp)
   21714:	df000017 	ldw	fp,0(sp)
   21718:	dec00204 	addi	sp,sp,8
   2171c:	f800283a 	ret

00021720 <Light_SetThreshLow>:


bool Light_SetThreshLow(alt_u8 *pData)
{
   21720:	defffc04 	addi	sp,sp,-16
   21724:	dfc00315 	stw	ra,12(sp)
   21728:	df000215 	stw	fp,8(sp)
   2172c:	df000204 	addi	fp,sp,8
   21730:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHLOWLOW_REG ;
   21734:	00bfe884 	movi	r2,-94
   21738:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
   2173c:	e0bffe03 	ldbu	r2,-8(fp)
   21740:	e1bfff17 	ldw	r6,-4(fp)
   21744:	100b883a 	mov	r5,r2
   21748:	01001484 	movi	r4,82
   2174c:	00219380 	call	21938 <I2C_Write_Light16>
   21750:	e0bffe45 	stb	r2,-7(fp)
//
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
   21754:	e0bffe43 	ldbu	r2,-7(fp)
}
   21758:	e037883a 	mov	sp,fp
   2175c:	dfc00117 	ldw	ra,4(sp)
   21760:	df000017 	ldw	fp,0(sp)
   21764:	dec00204 	addi	sp,sp,8
   21768:	f800283a 	ret

0002176c <Light_SetThreshHigh>:

bool Light_SetThreshHigh(alt_u8 *pData)
{
   2176c:	defffc04 	addi	sp,sp,-16
   21770:	dfc00315 	stw	ra,12(sp)
   21774:	df000215 	stw	fp,8(sp)
   21778:	df000204 	addi	fp,sp,8
   2177c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | COMMAND_WORD | THRESHHIGHLOW_REG ;
   21780:	00bfe904 	movi	r2,-92
   21784:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light16( DEVICE_ADDR, CommandCode, pData);
   21788:	e0bffe03 	ldbu	r2,-8(fp)
   2178c:	e1bfff17 	ldw	r6,-4(fp)
   21790:	100b883a 	mov	r5,r2
   21794:	01001484 	movi	r4,82
   21798:	00219380 	call	21938 <I2C_Write_Light16>
   2179c:	e0bffe45 	stb	r2,-7(fp)
//
//        data = *(pData+1);
//        bPass = I2C_Write_Light(LIGHT_SENSOR_SCL_BASE, LIGHT_SENSOR_SDA_BASE, DEVICE_ADDR,CommandCode , data);
//    }

    return bPass;
   217a0:	e0bffe43 	ldbu	r2,-7(fp)
}
   217a4:	e037883a 	mov	sp,fp
   217a8:	dfc00117 	ldw	ra,4(sp)
   217ac:	df000017 	ldw	fp,0(sp)
   217b0:	dec00204 	addi	sp,sp,8
   217b4:	f800283a 	ret

000217b8 <Light_SetInterrupt>:

bool Light_SetInterrupt(alt_u8 data)
{
   217b8:	defffc04 	addi	sp,sp,-16
   217bc:	dfc00315 	stw	ra,12(sp)
   217c0:	df000215 	stw	fp,8(sp)
   217c4:	df000204 	addi	fp,sp,8
   217c8:	2005883a 	mov	r2,r4
   217cc:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
   217d0:	00bfe184 	movi	r2,-122
   217d4:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light(DEVICE_ADDR,CommandCode , data);
   217d8:	e0bffe03 	ldbu	r2,-8(fp)
   217dc:	e0ffff03 	ldbu	r3,-4(fp)
   217e0:	180d883a 	mov	r6,r3
   217e4:	100b883a 	mov	r5,r2
   217e8:	01001484 	movi	r4,82
   217ec:	00218c40 	call	218c4 <I2C_Write_Light>
   217f0:	e0bffe45 	stb	r2,-7(fp)

    return bPass;
   217f4:	e0bffe43 	ldbu	r2,-7(fp)
}
   217f8:	e037883a 	mov	sp,fp
   217fc:	dfc00117 	ldw	ra,4(sp)
   21800:	df000017 	ldw	fp,0(sp)
   21804:	dec00204 	addi	sp,sp,8
   21808:	f800283a 	ret

0002180c <Light_GetInterrupt>:

void Light_GetInterrupt(alt_u8 *data)
{
   2180c:	defffc04 	addi	sp,sp,-16
   21810:	dfc00315 	stw	ra,12(sp)
   21814:	df000215 	stw	fp,8(sp)
   21818:	df000204 	addi	fp,sp,8
   2181c:	e13fff15 	stw	r4,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | INTERRUPT_REG ;
   21820:	00bfe184 	movi	r2,-122
   21824:	e0bffe05 	stb	r2,-8(fp)
    //read ID
    bPass = I2C_Read_Light( DEVICE_ADDR,CommandCode , data);
   21828:	e0bffe03 	ldbu	r2,-8(fp)
   2182c:	e1bfff17 	ldw	r6,-4(fp)
   21830:	100b883a 	mov	r5,r2
   21834:	01001484 	movi	r4,82
   21838:	00219a80 	call	219a8 <I2C_Read_Light>
   2183c:	e0bffe45 	stb	r2,-7(fp)
    if(!bPass)  *data = 0;
   21840:	e0bffe43 	ldbu	r2,-7(fp)
   21844:	1080005c 	xori	r2,r2,1
   21848:	10803fcc 	andi	r2,r2,255
   2184c:	10000226 	beq	r2,zero,21858 <Light_GetInterrupt+0x4c>
   21850:	e0bfff17 	ldw	r2,-4(fp)
   21854:	10000005 	stb	zero,0(r2)
}
   21858:	0001883a 	nop
   2185c:	e037883a 	mov	sp,fp
   21860:	dfc00117 	ldw	ra,4(sp)
   21864:	df000017 	ldw	fp,0(sp)
   21868:	dec00204 	addi	sp,sp,8
   2186c:	f800283a 	ret

00021870 <Light_SetTiming>:

bool Light_SetTiming(alt_u8 data)
{
   21870:	defffc04 	addi	sp,sp,-16
   21874:	dfc00315 	stw	ra,12(sp)
   21878:	df000215 	stw	fp,8(sp)
   2187c:	df000204 	addi	fp,sp,8
   21880:	2005883a 	mov	r2,r4
   21884:	e0bfff05 	stb	r2,-4(fp)
    bool bPass;
    alt_u8 CommandCode = COMMAND_CMD | TIMING_REG ;
   21888:	00bfe044 	movi	r2,-127
   2188c:	e0bffe05 	stb	r2,-8(fp)

    bPass = I2C_Write_Light( DEVICE_ADDR,CommandCode , data);
   21890:	e0bffe03 	ldbu	r2,-8(fp)
   21894:	e0ffff03 	ldbu	r3,-4(fp)
   21898:	180d883a 	mov	r6,r3
   2189c:	100b883a 	mov	r5,r2
   218a0:	01001484 	movi	r4,82
   218a4:	00218c40 	call	218c4 <I2C_Write_Light>
   218a8:	e0bffe45 	stb	r2,-7(fp)

    return bPass;
   218ac:	e0bffe43 	ldbu	r2,-7(fp)
}
   218b0:	e037883a 	mov	sp,fp
   218b4:	dfc00117 	ldw	ra,4(sp)
   218b8:	df000017 	ldw	fp,0(sp)
   218bc:	dec00204 	addi	sp,sp,8
   218c0:	f800283a 	ret

000218c4 <I2C_Write_Light>:

/////////////////////////////////////////////
// internal
////////////////light sensor
bool I2C_Write_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 ControlData){
   218c4:	defff904 	addi	sp,sp,-28
   218c8:	dfc00615 	stw	ra,24(sp)
   218cc:	df000515 	stw	fp,20(sp)
   218d0:	df000504 	addi	fp,sp,20
   218d4:	2807883a 	mov	r3,r5
   218d8:	3005883a 	mov	r2,r6
   218dc:	e13ffd05 	stb	r4,-12(fp)
   218e0:	e0fffe05 	stb	r3,-8(fp)
   218e4:	e0bfff05 	stb	r2,-4(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, &ControlData, 1);
   218e8:	d0a00017 	ldw	r2,-32768(gp)
   218ec:	1011883a 	mov	r8,r2
   218f0:	e0bffd03 	ldbu	r2,-12(fp)
   218f4:	10c03fcc 	andi	r3,r2,255
   218f8:	e13ffe03 	ldbu	r4,-8(fp)
   218fc:	e17fff04 	addi	r5,fp,-4
   21900:	00800044 	movi	r2,1
   21904:	d8800015 	stw	r2,0(sp)
   21908:	280f883a 	mov	r7,r5
   2190c:	200d883a 	mov	r6,r4
   21910:	180b883a 	mov	r5,r3
   21914:	4009883a 	mov	r4,r8
   21918:	002066c0 	call	2066c <OC_I2C_Write>
   2191c:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
   21920:	e0bffc03 	ldbu	r2,-16(fp)


}
   21924:	e037883a 	mov	sp,fp
   21928:	dfc00117 	ldw	ra,4(sp)
   2192c:	df000017 	ldw	fp,0(sp)
   21930:	dec00204 	addi	sp,sp,8
   21934:	f800283a 	ret

00021938 <I2C_Write_Light16>:

bool I2C_Write_Light16(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
   21938:	defff904 	addi	sp,sp,-28
   2193c:	dfc00615 	stw	ra,24(sp)
   21940:	df000515 	stw	fp,20(sp)
   21944:	df000504 	addi	fp,sp,20
   21948:	2007883a 	mov	r3,r4
   2194c:	2805883a 	mov	r2,r5
   21950:	e1bfff15 	stw	r6,-4(fp)
   21954:	e0fffd05 	stb	r3,-12(fp)
   21958:	e0bffe05 	stb	r2,-8(fp)
	bool bSuccess;

	bSuccess = OC_I2C_Write(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 2);
   2195c:	d0a00017 	ldw	r2,-32768(gp)
   21960:	1011883a 	mov	r8,r2
   21964:	e0bffd03 	ldbu	r2,-12(fp)
   21968:	10c03fcc 	andi	r3,r2,255
   2196c:	e13ffe03 	ldbu	r4,-8(fp)
   21970:	00800084 	movi	r2,2
   21974:	d8800015 	stw	r2,0(sp)
   21978:	e1ffff17 	ldw	r7,-4(fp)
   2197c:	200d883a 	mov	r6,r4
   21980:	180b883a 	mov	r5,r3
   21984:	4009883a 	mov	r4,r8
   21988:	002066c0 	call	2066c <OC_I2C_Write>
   2198c:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
   21990:	e0bffc03 	ldbu	r2,-16(fp)


}
   21994:	e037883a 	mov	sp,fp
   21998:	dfc00117 	ldw	ra,4(sp)
   2199c:	df000017 	ldw	fp,0(sp)
   219a0:	dec00204 	addi	sp,sp,8
   219a4:	f800283a 	ret

000219a8 <I2C_Read_Light>:

bool I2C_Read_Light(alt_8 DeviceAddr, alt_u8 CommandCode, alt_u8 *pControlData){
   219a8:	defff904 	addi	sp,sp,-28
   219ac:	dfc00615 	stw	ra,24(sp)
   219b0:	df000515 	stw	fp,20(sp)
   219b4:	df000504 	addi	fp,sp,20
   219b8:	2007883a 	mov	r3,r4
   219bc:	2805883a 	mov	r2,r5
   219c0:	e1bfff15 	stw	r6,-4(fp)
   219c4:	e0fffd05 	stb	r3,-12(fp)
   219c8:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess;

    bSuccess = OC_I2C_Read(Light_I2C_Controller_Base,DeviceAddr,CommandCode, pControlData, 1);
   219cc:	d0a00017 	ldw	r2,-32768(gp)
   219d0:	1011883a 	mov	r8,r2
   219d4:	e0bffd03 	ldbu	r2,-12(fp)
   219d8:	10c03fcc 	andi	r3,r2,255
   219dc:	e13ffe03 	ldbu	r4,-8(fp)
   219e0:	00800044 	movi	r2,1
   219e4:	d8800015 	stw	r2,0(sp)
   219e8:	e1ffff17 	ldw	r7,-4(fp)
   219ec:	200d883a 	mov	r6,r4
   219f0:	180b883a 	mov	r5,r3
   219f4:	4009883a 	mov	r4,r8
   219f8:	002091c0 	call	2091c <OC_I2C_Read>
   219fc:	e0bffc05 	stb	r2,-16(fp)

    return bSuccess;
   21a00:	e0bffc03 	ldbu	r2,-16(fp)
}
   21a04:	e037883a 	mov	sp,fp
   21a08:	dfc00117 	ldw	ra,4(sp)
   21a0c:	df000017 	ldw	fp,0(sp)
   21a10:	dec00204 	addi	sp,sp,8
   21a14:	f800283a 	ret

00021a18 <Sensor_Report>:
#include "light_sensor.h"
#include "rh_temp.h"
#include "mpu9250.h"


void Sensor_Report(void){
   21a18:	deffe804 	addi	sp,sp,-96
   21a1c:	dfc01715 	stw	ra,92(sp)
   21a20:	df001615 	stw	fp,88(sp)
   21a24:	dcc01515 	stw	r19,84(sp)
   21a28:	dc801415 	stw	r18,80(sp)
   21a2c:	dc401315 	stw	r17,76(sp)
   21a30:	dc001215 	stw	r16,72(sp)
   21a34:	df001604 	addi	fp,sp,88
  	bool bPass;

  	////////////////////////////////
  	// report light sensor
  	alt_u16 light0 = 0, light1 = 0;
   21a38:	e03fef8d 	sth	zero,-66(fp)
   21a3c:	e03ff00d 	sth	zero,-64(fp)
  	bPass = Get_light(&light0, &light1);
   21a40:	e0fff004 	addi	r3,fp,-64
   21a44:	e0bfef84 	addi	r2,fp,-66
   21a48:	180b883a 	mov	r5,r3
   21a4c:	1009883a 	mov	r4,r2
   21a50:	002163c0 	call	2163c <Get_light>
   21a54:	e0bfef05 	stb	r2,-68(fp)
  	if(bPass){
   21a58:	e0bfef03 	ldbu	r2,-68(fp)
   21a5c:	10000a26 	beq	r2,zero,21a88 <Sensor_Report+0x70>
  		printf("light0 = %d, light1 = %d\r\n", light0, light1);
   21a60:	e0bfef8b 	ldhu	r2,-66(fp)
   21a64:	10bfffcc 	andi	r2,r2,65535
   21a68:	e0fff00b 	ldhu	r3,-64(fp)
   21a6c:	18ffffcc 	andi	r3,r3,65535
   21a70:	180d883a 	mov	r6,r3
   21a74:	100b883a 	mov	r5,r2
   21a78:	010000f4 	movhi	r4,3
   21a7c:	21110c04 	addi	r4,r4,17456
   21a80:	00272cc0 	call	272cc <printf>
   21a84:	00000306 	br	21a94 <Sensor_Report+0x7c>
  	}
  	else{
  		printf("get light0 and light1 values failed!\r\n");
   21a88:	010000f4 	movhi	r4,3
   21a8c:	21111304 	addi	r4,r4,17484
   21a90:	00273c80 	call	273c8 <puts>
  	}

  	////////////////////////////////
  	// report HDC1000 temperature & humidity sensor
  	float fTemperature, fHumidity;
  	bPass = RH_Temp_Sensor_Read(&fTemperature, &fHumidity);
   21a94:	e0fff204 	addi	r3,fp,-56
   21a98:	e0bff104 	addi	r2,fp,-60
   21a9c:	180b883a 	mov	r5,r3
   21aa0:	1009883a 	mov	r4,r2
   21aa4:	002318c0 	call	2318c <RH_Temp_Sensor_Read>
   21aa8:	e0bfef05 	stb	r2,-68(fp)
  	if (bPass){
   21aac:	e0bfef03 	ldbu	r2,-68(fp)
   21ab0:	10001526 	beq	r2,zero,21b08 <Sensor_Report+0xf0>
		printf("Temperature: %.3f*C\r\n", fTemperature);
   21ab4:	e0bff117 	ldw	r2,-60(fp)
   21ab8:	1009883a 	mov	r4,r2
   21abc:	0026f800 	call	26f80 <__extendsfdf2>
   21ac0:	100d883a 	mov	r6,r2
   21ac4:	180f883a 	mov	r7,r3
   21ac8:	300b883a 	mov	r5,r6
   21acc:	380d883a 	mov	r6,r7
   21ad0:	010000f4 	movhi	r4,3
   21ad4:	21111d04 	addi	r4,r4,17524
   21ad8:	00272cc0 	call	272cc <printf>
    	printf("Humidity: %.3f%%\r\n",fHumidity);
   21adc:	e0bff217 	ldw	r2,-56(fp)
   21ae0:	1009883a 	mov	r4,r2
   21ae4:	0026f800 	call	26f80 <__extendsfdf2>
   21ae8:	100d883a 	mov	r6,r2
   21aec:	180f883a 	mov	r7,r3
   21af0:	300b883a 	mov	r5,r6
   21af4:	380d883a 	mov	r6,r7
   21af8:	010000f4 	movhi	r4,3
   21afc:	21112304 	addi	r4,r4,17548
   21b00:	00272cc0 	call	272cc <printf>
   21b04:	00000306 	br	21b14 <Sensor_Report+0xfc>
  	}else{
  		printf("Failed to ready Temperature/Humidity sensor!\r\n");
   21b08:	010000f4 	movhi	r4,3
   21b0c:	21112804 	addi	r4,r4,17568
   21b10:	00273c80 	call	273c8 <puts>
  	////////////////////////////////
  	// report mpu9250 9-axis sensor
  	float ax, ay, az;
  	float gx, gy, gz;
  	float mx, my, mz;
  	getMotion9(&ax, &ay, &az, &gx, &gy, &gz, &mx, &my, &mz);
   21b14:	e1bff604 	addi	r6,fp,-40
   21b18:	e17ff504 	addi	r5,fp,-44
   21b1c:	e13ff404 	addi	r4,fp,-48
   21b20:	e0fff304 	addi	r3,fp,-52
   21b24:	e0bffb04 	addi	r2,fp,-20
   21b28:	d8800415 	stw	r2,16(sp)
   21b2c:	e0bffa04 	addi	r2,fp,-24
   21b30:	d8800315 	stw	r2,12(sp)
   21b34:	e0bff904 	addi	r2,fp,-28
   21b38:	d8800215 	stw	r2,8(sp)
   21b3c:	e0bff804 	addi	r2,fp,-32
   21b40:	d8800115 	stw	r2,4(sp)
   21b44:	e0bff704 	addi	r2,fp,-36
   21b48:	d8800015 	stw	r2,0(sp)
   21b4c:	300f883a 	mov	r7,r6
   21b50:	280d883a 	mov	r6,r5
   21b54:	200b883a 	mov	r5,r4
   21b58:	1809883a 	mov	r4,r3
   21b5c:	0022e640 	call	22e64 <getMotion9>
  	printf("9-axis info:\r\n");
   21b60:	010000f4 	movhi	r4,3
   21b64:	21113404 	addi	r4,r4,17616
   21b68:	00273c80 	call	273c8 <puts>
  	printf("ax = %.3f, ay = %.3f, az = %.3f\r\n", ax, ay, az);
   21b6c:	e0bff317 	ldw	r2,-52(fp)
   21b70:	1009883a 	mov	r4,r2
   21b74:	0026f800 	call	26f80 <__extendsfdf2>
   21b78:	1025883a 	mov	r18,r2
   21b7c:	1827883a 	mov	r19,r3
   21b80:	e0bff417 	ldw	r2,-48(fp)
   21b84:	1009883a 	mov	r4,r2
   21b88:	0026f800 	call	26f80 <__extendsfdf2>
   21b8c:	1021883a 	mov	r16,r2
   21b90:	1823883a 	mov	r17,r3
   21b94:	e0bff517 	ldw	r2,-44(fp)
   21b98:	1009883a 	mov	r4,r2
   21b9c:	0026f800 	call	26f80 <__extendsfdf2>
   21ba0:	1009883a 	mov	r4,r2
   21ba4:	180b883a 	mov	r5,r3
   21ba8:	d9000115 	stw	r4,4(sp)
   21bac:	d9400215 	stw	r5,8(sp)
   21bb0:	dc400015 	stw	r17,0(sp)
   21bb4:	800f883a 	mov	r7,r16
   21bb8:	900b883a 	mov	r5,r18
   21bbc:	980d883a 	mov	r6,r19
   21bc0:	010000f4 	movhi	r4,3
   21bc4:	21113804 	addi	r4,r4,17632
   21bc8:	00272cc0 	call	272cc <printf>
  	printf("gx = %.3f, gy = %.3f, gz = %.3f\r\n", gx, gy, gz);
   21bcc:	e0bff617 	ldw	r2,-40(fp)
   21bd0:	1009883a 	mov	r4,r2
   21bd4:	0026f800 	call	26f80 <__extendsfdf2>
   21bd8:	1025883a 	mov	r18,r2
   21bdc:	1827883a 	mov	r19,r3
   21be0:	e0bff717 	ldw	r2,-36(fp)
   21be4:	1009883a 	mov	r4,r2
   21be8:	0026f800 	call	26f80 <__extendsfdf2>
   21bec:	1021883a 	mov	r16,r2
   21bf0:	1823883a 	mov	r17,r3
   21bf4:	e0bff817 	ldw	r2,-32(fp)
   21bf8:	1009883a 	mov	r4,r2
   21bfc:	0026f800 	call	26f80 <__extendsfdf2>
   21c00:	1009883a 	mov	r4,r2
   21c04:	180b883a 	mov	r5,r3
   21c08:	d9000115 	stw	r4,4(sp)
   21c0c:	d9400215 	stw	r5,8(sp)
   21c10:	dc400015 	stw	r17,0(sp)
   21c14:	800f883a 	mov	r7,r16
   21c18:	900b883a 	mov	r5,r18
   21c1c:	980d883a 	mov	r6,r19
   21c20:	010000f4 	movhi	r4,3
   21c24:	21114104 	addi	r4,r4,17668
   21c28:	00272cc0 	call	272cc <printf>
  	printf("mx = %.3f, my = %.3f, mz = %.3f\r\n", mx, my, mz);
   21c2c:	e0bff917 	ldw	r2,-28(fp)
   21c30:	1009883a 	mov	r4,r2
   21c34:	0026f800 	call	26f80 <__extendsfdf2>
   21c38:	1025883a 	mov	r18,r2
   21c3c:	1827883a 	mov	r19,r3
   21c40:	e0bffa17 	ldw	r2,-24(fp)
   21c44:	1009883a 	mov	r4,r2
   21c48:	0026f800 	call	26f80 <__extendsfdf2>
   21c4c:	1021883a 	mov	r16,r2
   21c50:	1823883a 	mov	r17,r3
   21c54:	e0bffb17 	ldw	r2,-20(fp)
   21c58:	1009883a 	mov	r4,r2
   21c5c:	0026f800 	call	26f80 <__extendsfdf2>
   21c60:	1009883a 	mov	r4,r2
   21c64:	180b883a 	mov	r5,r3
   21c68:	d9000115 	stw	r4,4(sp)
   21c6c:	d9400215 	stw	r5,8(sp)
   21c70:	dc400015 	stw	r17,0(sp)
   21c74:	800f883a 	mov	r7,r16
   21c78:	900b883a 	mov	r5,r18
   21c7c:	980d883a 	mov	r6,r19
   21c80:	010000f4 	movhi	r4,3
   21c84:	21114a04 	addi	r4,r4,17704
   21c88:	00272cc0 	call	272cc <printf>

  	printf("\r\n");
   21c8c:	010000f4 	movhi	r4,3
   21c90:	21115304 	addi	r4,r4,17740
   21c94:	00273c80 	call	273c8 <puts>
}
   21c98:	0001883a 	nop
   21c9c:	e6fffc04 	addi	sp,fp,-16
   21ca0:	dfc00517 	ldw	ra,20(sp)
   21ca4:	df000417 	ldw	fp,16(sp)
   21ca8:	dcc00317 	ldw	r19,12(sp)
   21cac:	dc800217 	ldw	r18,8(sp)
   21cb0:	dc400117 	ldw	r17,4(sp)
   21cb4:	dc000017 	ldw	r16,0(sp)
   21cb8:	dec00604 	addi	sp,sp,24
   21cbc:	f800283a 	ret

00021cc0 <main>:

int main()
{
   21cc0:	defffd04 	addi	sp,sp,-12
   21cc4:	dfc00215 	stw	ra,8(sp)
   21cc8:	df000115 	stw	fp,4(sp)
   21ccc:	df000104 	addi	fp,sp,4
	printf("Welcome to DE10_NANO RFS_SENSOR DEMO!\r\n");
   21cd0:	010000f4 	movhi	r4,3
   21cd4:	21115404 	addi	r4,r4,17744
   21cd8:	00273c80 	call	273c8 <puts>

  	bool bPass = FALSE;
   21cdc:	e03fff05 	stb	zero,-4(fp)

  	////////////////////////////////////
  	// init light sensor i2c and power on
  	Light_Init(LIGHT_I2C_OPENCORES_BASE);
   21ce0:	01000134 	movhi	r4,4
   21ce4:	21040804 	addi	r4,r4,4128
   21ce8:	00212b40 	call	212b4 <Light_Init>
  	bPass = Light_PowerSwitch(TRUE);
   21cec:	01000044 	movi	r4,1
   21cf0:	00213dc0 	call	213dc <Light_PowerSwitch>
   21cf4:	e0bfff05 	stb	r2,-4(fp)
  	if(bPass)
   21cf8:	e0bfff03 	ldbu	r2,-4(fp)
   21cfc:	10000426 	beq	r2,zero,21d10 <main+0x50>
  		printf("light sensor power up successful!\r\n");
   21d00:	010000f4 	movhi	r4,3
   21d04:	21115e04 	addi	r4,r4,17784
   21d08:	00273c80 	call	273c8 <puts>
   21d0c:	00000306 	br	21d1c <main+0x5c>
  	else
  		printf("light sensor power up failed!\r\n");
   21d10:	010000f4 	movhi	r4,3
   21d14:	21116704 	addi	r4,r4,17820
   21d18:	00273c80 	call	273c8 <puts>

  	////////////////////////////////////
  	// init HDC1000: temperature and humidity sensor
  	RH_Temp_Init(RH_TEMP_I2C_OPENCORES_BASE);
   21d1c:	01000134 	movhi	r4,4
   21d20:	21040004 	addi	r4,r4,4096
   21d24:	002300c0 	call	2300c <RH_Temp_Init>
  	bPass = RH_Temp_Sensor_Init();
   21d28:	00231500 	call	23150 <RH_Temp_Sensor_Init>
   21d2c:	e0bfff05 	stb	r2,-4(fp)
  	if(bPass)
   21d30:	e0bfff03 	ldbu	r2,-4(fp)
   21d34:	10000426 	beq	r2,zero,21d48 <main+0x88>
  		printf("Init HDC1000 successful!\r\n");
   21d38:	010000f4 	movhi	r4,3
   21d3c:	21116f04 	addi	r4,r4,17852
   21d40:	00273c80 	call	273c8 <puts>
   21d44:	00000306 	br	21d54 <main+0x94>
  	else
  		printf("Init HDC1000 failed!\r\n");
   21d48:	010000f4 	movhi	r4,3
   21d4c:	21117604 	addi	r4,r4,17880
   21d50:	00273c80 	call	273c8 <puts>



  	////////////////////////////////////
  	//init MPU9250 9-axis sensor
  	MPU9250_Init(MPU_I2C_OPENCORES_BASE);
   21d54:	01000134 	movhi	r4,4
   21d58:	21041004 	addi	r4,r4,4160
   21d5c:	0021d840 	call	21d84 <MPU9250_Init>
  	MPU9250_initialize();
   21d60:	00221500 	call	22150 <MPU9250_initialize>
  	printf("\r\n");
   21d64:	010000f4 	movhi	r4,3
   21d68:	21115304 	addi	r4,r4,17740
   21d6c:	00273c80 	call	273c8 <puts>


  	while(1){ // report every second
  		Sensor_Report();
   21d70:	0021a180 	call	21a18 <Sensor_Report>
  		usleep(1000*1000);
   21d74:	010003f4 	movhi	r4,15
   21d78:	21109004 	addi	r4,r4,16960
   21d7c:	00321b00 	call	321b0 <usleep>

  	}
   21d80:	003ffb06 	br	21d70 <__alt_data_end+0xfffe2970>

00021d84 <MPU9250_Init>:
#include "terasic_includes.h"

#define G_SI 9.80665

void MPU9250_Init(alt_u32 I2C_Controller_Base)
{
   21d84:	defffb04 	addi	sp,sp,-20
   21d88:	dfc00415 	stw	ra,16(sp)
   21d8c:	df000315 	stw	fp,12(sp)
   21d90:	df000304 	addi	fp,sp,12
   21d94:	e13fff15 	stw	r4,-4(fp)
	const int ref_clk = 50*1000*1000; // 50Mhz
   21d98:	0080bef4 	movhi	r2,763
   21d9c:	10bc2004 	addi	r2,r2,-3968
   21da0:	e0bffd15 	stw	r2,-12(fp)
	const int i2c_clk = 400*1000; // 400KHz
   21da4:	008001b4 	movhi	r2,6
   21da8:	1086a004 	addi	r2,r2,6784
   21dac:	e0bffe15 	stw	r2,-8(fp)
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
   21db0:	e0bfff17 	ldw	r2,-4(fp)
   21db4:	e1bffe17 	ldw	r6,-8(fp)
   21db8:	e17ffd17 	ldw	r5,-12(fp)
   21dbc:	1009883a 	mov	r4,r2
   21dc0:	00203980 	call	20398 <oc_i2c_init_ex>
}
   21dc4:	0001883a 	nop
   21dc8:	e037883a 	mov	sp,fp
   21dcc:	dfc00117 	ldw	ra,4(sp)
   21dd0:	df000017 	ldw	fp,0(sp)
   21dd4:	dec00204 	addi	sp,sp,8
   21dd8:	f800283a 	ret

00021ddc <WriteReg>:
                                    REGISTER READ & WRITE
usage: use these methods to read and write MPU9250 registers over SPI
-----------------------------------------------------------------------------------------------*/

unsigned int WriteReg( uint8_t WriteAddr, uint8_t WriteData )
{
   21ddc:	defffb04 	addi	sp,sp,-20
   21de0:	dfc00415 	stw	ra,16(sp)
   21de4:	df000315 	stw	fp,12(sp)
   21de8:	df000304 	addi	fp,sp,12
   21dec:	2007883a 	mov	r3,r4
   21df0:	2805883a 	mov	r2,r5
   21df4:	e0fffe05 	stb	r3,-8(fp)
   21df8:	e0bfff05 	stb	r2,-4(fp)
#if 1
	if (WriteAddr & READ_FLAG)
   21dfc:	e0bffe03 	ldbu	r2,-8(fp)
   21e00:	10803fcc 	andi	r2,r2,255
   21e04:	1080201c 	xori	r2,r2,128
   21e08:	10bfe004 	addi	r2,r2,-128
   21e0c:	1000070e 	bge	r2,zero,21e2c <WriteReg+0x50>
		return ReadReg(WriteAddr, WriteData);
   21e10:	e0bffe03 	ldbu	r2,-8(fp)
   21e14:	e0ffff03 	ldbu	r3,-4(fp)
   21e18:	18c03fcc 	andi	r3,r3,255
   21e1c:	180b883a 	mov	r5,r3
   21e20:	1009883a 	mov	r4,r2
   21e24:	0021e6c0 	call	21e6c <ReadReg>
   21e28:	00000b06 	br	21e58 <WriteReg+0x7c>
	OC_I2C_Write(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &WriteData, sizeof(WriteData));
   21e2c:	e0fffe03 	ldbu	r3,-8(fp)
   21e30:	e13fff04 	addi	r4,fp,-4
   21e34:	00800044 	movi	r2,1
   21e38:	d8800015 	stw	r2,0(sp)
   21e3c:	200f883a 	mov	r7,r4
   21e40:	180d883a 	mov	r6,r3
   21e44:	01403404 	movi	r5,208
   21e48:	01000134 	movhi	r4,4
   21e4c:	21041004 	addi	r4,r4,4160
   21e50:	002066c0 	call	2066c <OC_I2C_Write>
	return 0x00;
   21e54:	0005883a 	mov	r2,zero

	SPIdev::transfer("/dev/spidev0.1", tx, rx, 2);

    return rx[1];
#endif
}
   21e58:	e037883a 	mov	sp,fp
   21e5c:	dfc00117 	ldw	ra,4(sp)
   21e60:	df000017 	ldw	fp,0(sp)
   21e64:	dec00204 	addi	sp,sp,8
   21e68:	f800283a 	ret

00021e6c <ReadReg>:

//-----------------------------------------------------------------------------------------------

unsigned int  ReadReg( uint8_t WriteAddr, uint8_t WriteData )
{
   21e6c:	defffa04 	addi	sp,sp,-24
   21e70:	dfc00515 	stw	ra,20(sp)
   21e74:	df000415 	stw	fp,16(sp)
   21e78:	df000404 	addi	fp,sp,16
   21e7c:	2007883a 	mov	r3,r4
   21e80:	2805883a 	mov	r2,r5
   21e84:	e0fffe05 	stb	r3,-8(fp)
   21e88:	e0bfff05 	stb	r2,-4(fp)
#if 1
	unsigned char ReadData;
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, WriteAddr, &ReadData, sizeof(ReadData));
   21e8c:	e0fffe03 	ldbu	r3,-8(fp)
   21e90:	00800044 	movi	r2,1
   21e94:	d8800015 	stw	r2,0(sp)
   21e98:	e1fffd04 	addi	r7,fp,-12
   21e9c:	180d883a 	mov	r6,r3
   21ea0:	01403404 	movi	r5,208
   21ea4:	01000134 	movhi	r4,4
   21ea8:	21041004 	addi	r4,r4,4160
   21eac:	002091c0 	call	2091c <OC_I2C_Read>
	return ReadData;
   21eb0:	e0bffd03 	ldbu	r2,-12(fp)
   21eb4:	10803fcc 	andi	r2,r2,255
#else
    return WriteReg(WriteAddr | READ_FLAG, WriteData);
#endif
}
   21eb8:	e037883a 	mov	sp,fp
   21ebc:	dfc00117 	ldw	ra,4(sp)
   21ec0:	df000017 	ldw	fp,0(sp)
   21ec4:	dec00204 	addi	sp,sp,8
   21ec8:	f800283a 	ret

00021ecc <ReadRegs>:

//-----------------------------------------------------------------------------------------------
void ReadRegs( uint8_t ReadAddr, uint8_t *ReadBuf, unsigned int Bytes )
{
   21ecc:	defffa04 	addi	sp,sp,-24
   21ed0:	dfc00515 	stw	ra,20(sp)
   21ed4:	df000415 	stw	fp,16(sp)
   21ed8:	df000404 	addi	fp,sp,16
   21edc:	2005883a 	mov	r2,r4
   21ee0:	e17ffe15 	stw	r5,-8(fp)
   21ee4:	e1bfff15 	stw	r6,-4(fp)
   21ee8:	e0bffd05 	stb	r2,-12(fp)
#if 1
	OC_I2C_Read(MPU_I2C_OPENCORES_BASE, MPU_DEVICE_ADDR, ReadAddr, ReadBuf, Bytes);
   21eec:	e0fffd03 	ldbu	r3,-12(fp)
   21ef0:	e0bfff17 	ldw	r2,-4(fp)
   21ef4:	d8800015 	stw	r2,0(sp)
   21ef8:	e1fffe17 	ldw	r7,-8(fp)
   21efc:	180d883a 	mov	r6,r3
   21f00:	01403404 	movi	r5,208
   21f04:	01000134 	movhi	r4,4
   21f08:	21041004 	addi	r4,r4,4160
   21f0c:	002091c0 	call	2091c <OC_I2C_Read>
    for(i=0; i<Bytes; i++)
    	ReadBuf[i] = rx[i + 1];

    usleep(50);
#endif
}
   21f10:	0001883a 	nop
   21f14:	e037883a 	mov	sp,fp
   21f18:	dfc00117 	ldw	ra,4(sp)
   21f1c:	df000017 	ldw	fp,0(sp)
   21f20:	dec00204 	addi	sp,sp,8
   21f24:	f800283a 	ret

00021f28 <set_acc_scale>:
BITS_FS_16G
returns the range set (2,4,8 or 16)
-----------------------------------------------------------------------------------------------*/

unsigned int set_acc_scale(int scale)
{
   21f28:	defffc04 	addi	sp,sp,-16
   21f2c:	dfc00315 	stw	ra,12(sp)
   21f30:	df000215 	stw	fp,8(sp)
   21f34:	df000204 	addi	fp,sp,8
   21f38:	e13fff15 	stw	r4,-4(fp)
	unsigned int temp_scale;
//	I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, scale);
    WriteReg(MPUREG_ACCEL_CONFIG, scale);
   21f3c:	e0bfff17 	ldw	r2,-4(fp)
   21f40:	10803fcc 	andi	r2,r2,255
   21f44:	100b883a 	mov	r5,r2
   21f48:	01000704 	movi	r4,28
   21f4c:	0021ddc0 	call	21ddc <WriteReg>

    switch (scale){
   21f50:	e0bfff17 	ldw	r2,-4(fp)
   21f54:	10c00220 	cmpeqi	r3,r2,8
   21f58:	18000c1e 	bne	r3,zero,21f8c <set_acc_scale+0x64>
   21f5c:	10c00248 	cmpgei	r3,r2,9
   21f60:	1800021e 	bne	r3,zero,21f6c <set_acc_scale+0x44>
   21f64:	10000626 	beq	r2,zero,21f80 <set_acc_scale+0x58>
   21f68:	00001106 	br	21fb0 <set_acc_scale+0x88>
   21f6c:	10c00420 	cmpeqi	r3,r2,16
   21f70:	1800091e 	bne	r3,zero,21f98 <set_acc_scale+0x70>
   21f74:	10800620 	cmpeqi	r2,r2,24
   21f78:	10000a1e 	bne	r2,zero,21fa4 <set_acc_scale+0x7c>
   21f7c:	00000c06 	br	21fb0 <set_acc_scale+0x88>
        case BITS_FS_2G:
            acc_divider=16384;
   21f80:	0091a034 	movhi	r2,18048
   21f84:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21f88:	00000906 	br	21fb0 <set_acc_scale+0x88>
        case BITS_FS_4G:
            acc_divider=8192;
   21f8c:	00918034 	movhi	r2,17920
   21f90:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21f94:	00000606 	br	21fb0 <set_acc_scale+0x88>
        case BITS_FS_8G:
            acc_divider=4096;
   21f98:	00916034 	movhi	r2,17792
   21f9c:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21fa0:	00000306 	br	21fb0 <set_acc_scale+0x88>
        case BITS_FS_16G:
            acc_divider=2048;
   21fa4:	00914034 	movhi	r2,17664
   21fa8:	d0a6cf15 	stw	r2,-25796(gp)
        break;
   21fac:	0001883a 	nop
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
	temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
   21fb0:	000b883a 	mov	r5,zero
   21fb4:	01002704 	movi	r4,156
   21fb8:	0021ddc0 	call	21ddc <WriteReg>
   21fbc:	e0bffe15 	stw	r2,-8(fp)

    switch (temp_scale){
   21fc0:	e0bffe17 	ldw	r2,-8(fp)
   21fc4:	10c00220 	cmpeqi	r3,r2,8
   21fc8:	18000c1e 	bne	r3,zero,21ffc <set_acc_scale+0xd4>
   21fcc:	10c00268 	cmpgeui	r3,r2,9
   21fd0:	1800021e 	bne	r3,zero,21fdc <set_acc_scale+0xb4>
   21fd4:	10000626 	beq	r2,zero,21ff0 <set_acc_scale+0xc8>
   21fd8:	00001106 	br	22020 <set_acc_scale+0xf8>
   21fdc:	10c00420 	cmpeqi	r3,r2,16
   21fe0:	1800091e 	bne	r3,zero,22008 <set_acc_scale+0xe0>
   21fe4:	10800620 	cmpeqi	r2,r2,24
   21fe8:	10000a1e 	bne	r2,zero,22014 <set_acc_scale+0xec>
   21fec:	00000c06 	br	22020 <set_acc_scale+0xf8>
        case BITS_FS_2G:
            temp_scale=2;
   21ff0:	00800084 	movi	r2,2
   21ff4:	e0bffe15 	stw	r2,-8(fp)
        break;
   21ff8:	00000906 	br	22020 <set_acc_scale+0xf8>
        case BITS_FS_4G:
            temp_scale=4;
   21ffc:	00800104 	movi	r2,4
   22000:	e0bffe15 	stw	r2,-8(fp)
        break;
   22004:	00000606 	br	22020 <set_acc_scale+0xf8>
        case BITS_FS_8G:
            temp_scale=8;
   22008:	00800204 	movi	r2,8
   2200c:	e0bffe15 	stw	r2,-8(fp)
        break;
   22010:	00000306 	br	22020 <set_acc_scale+0xf8>
        case BITS_FS_16G:
            temp_scale=16;
   22014:	00800404 	movi	r2,16
   22018:	e0bffe15 	stw	r2,-8(fp)
        break;
   2201c:	0001883a 	nop
    }
    return temp_scale;
   22020:	e0bffe17 	ldw	r2,-8(fp)
}
   22024:	e037883a 	mov	sp,fp
   22028:	dfc00117 	ldw	ra,4(sp)
   2202c:	df000017 	ldw	fp,0(sp)
   22030:	dec00204 	addi	sp,sp,8
   22034:	f800283a 	ret

00022038 <set_gyro_scale>:
BITS_FS_2000DPS
returns the range set (250,500,1000 or 2000)
-----------------------------------------------------------------------------------------------*/

unsigned int set_gyro_scale(int scale)
{
   22038:	defffc04 	addi	sp,sp,-16
   2203c:	dfc00315 	stw	ra,12(sp)
   22040:	df000215 	stw	fp,8(sp)
   22044:	df000204 	addi	fp,sp,8
   22048:	e13fff15 	stw	r4,-4(fp)
    unsigned int temp_scale;
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, scale);
    WriteReg(MPUREG_GYRO_CONFIG, scale);
   2204c:	e0bfff17 	ldw	r2,-4(fp)
   22050:	10803fcc 	andi	r2,r2,255
   22054:	100b883a 	mov	r5,r2
   22058:	010006c4 	movi	r4,27
   2205c:	0021ddc0 	call	21ddc <WriteReg>
    switch (scale){
   22060:	e0bfff17 	ldw	r2,-4(fp)
   22064:	10c00220 	cmpeqi	r3,r2,8
   22068:	18000c1e 	bne	r3,zero,2209c <set_gyro_scale+0x64>
   2206c:	10c00248 	cmpgei	r3,r2,9
   22070:	1800021e 	bne	r3,zero,2207c <set_gyro_scale+0x44>
   22074:	10000626 	beq	r2,zero,22090 <set_gyro_scale+0x58>
   22078:	00001306 	br	220c8 <set_gyro_scale+0x90>
   2207c:	10c00420 	cmpeqi	r3,r2,16
   22080:	1800091e 	bne	r3,zero,220a8 <set_gyro_scale+0x70>
   22084:	10800620 	cmpeqi	r2,r2,24
   22088:	10000b1e 	bne	r2,zero,220b8 <set_gyro_scale+0x80>
   2208c:	00000e06 	br	220c8 <set_gyro_scale+0x90>
        case BITS_FS_250DPS:
            gyro_divider=131;
   22090:	0090c0f4 	movhi	r2,17155
   22094:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   22098:	00000b06 	br	220c8 <set_gyro_scale+0x90>
        case BITS_FS_500DPS:
            gyro_divider=65.5;
   2209c:	0090a0f4 	movhi	r2,17027
   220a0:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   220a4:	00000806 	br	220c8 <set_gyro_scale+0x90>
        case BITS_FS_1000DPS:
            gyro_divider=32.8;
   220a8:	009080f4 	movhi	r2,16899
   220ac:	108cccc4 	addi	r2,r2,13107
   220b0:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   220b4:	00000406 	br	220c8 <set_gyro_scale+0x90>
        case BITS_FS_2000DPS:
            gyro_divider=16.4;
   220b8:	009060f4 	movhi	r2,16771
   220bc:	108cccc4 	addi	r2,r2,13107
   220c0:	d0a6ce15 	stw	r2,-25800(gp)
        break;
   220c4:	0001883a 	nop
    }
//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_GYRO_CONFIG|READ_FLAG, 0x00);
   220c8:	000b883a 	mov	r5,zero
   220cc:	010026c4 	movi	r4,155
   220d0:	0021ddc0 	call	21ddc <WriteReg>
   220d4:	e0bffe15 	stw	r2,-8(fp)
    switch (temp_scale){
   220d8:	e0bffe17 	ldw	r2,-8(fp)
   220dc:	10c00220 	cmpeqi	r3,r2,8
   220e0:	18000c1e 	bne	r3,zero,22114 <set_gyro_scale+0xdc>
   220e4:	10c00268 	cmpgeui	r3,r2,9
   220e8:	1800021e 	bne	r3,zero,220f4 <set_gyro_scale+0xbc>
   220ec:	10000626 	beq	r2,zero,22108 <set_gyro_scale+0xd0>
   220f0:	00001106 	br	22138 <set_gyro_scale+0x100>
   220f4:	10c00420 	cmpeqi	r3,r2,16
   220f8:	1800091e 	bne	r3,zero,22120 <set_gyro_scale+0xe8>
   220fc:	10800620 	cmpeqi	r2,r2,24
   22100:	10000a1e 	bne	r2,zero,2212c <set_gyro_scale+0xf4>
   22104:	00000c06 	br	22138 <set_gyro_scale+0x100>
        case BITS_FS_250DPS:
            temp_scale=250;
   22108:	00803e84 	movi	r2,250
   2210c:	e0bffe15 	stw	r2,-8(fp)
        break;
   22110:	00000906 	br	22138 <set_gyro_scale+0x100>
        case BITS_FS_500DPS:
            temp_scale=500;
   22114:	00807d04 	movi	r2,500
   22118:	e0bffe15 	stw	r2,-8(fp)
        break;
   2211c:	00000606 	br	22138 <set_gyro_scale+0x100>
        case BITS_FS_1000DPS:
            temp_scale=1000;
   22120:	0080fa04 	movi	r2,1000
   22124:	e0bffe15 	stw	r2,-8(fp)
        break;
   22128:	00000306 	br	22138 <set_gyro_scale+0x100>
        case BITS_FS_2000DPS:
            temp_scale=2000;
   2212c:	0081f404 	movi	r2,2000
   22130:	e0bffe15 	stw	r2,-8(fp)
        break;
   22134:	0001883a 	nop
    }
    return temp_scale;
   22138:	e0bffe17 	ldw	r2,-8(fp)
}
   2213c:	e037883a 	mov	sp,fp
   22140:	dfc00117 	ldw	ra,4(sp)
   22144:	df000017 	ldw	fp,0(sp)
   22148:	dec00204 	addi	sp,sp,8
   2214c:	f800283a 	ret

00022150 <MPU9250_initialize>:
-----------------------------------------------------------------------------------------------*/

#define MPU_InitRegNum 16

bool MPU9250_initialize()
{
   22150:	defff404 	addi	sp,sp,-48
   22154:	dfc00b15 	stw	ra,44(sp)
   22158:	df000a15 	stw	fp,40(sp)
   2215c:	df000a04 	addi	fp,sp,40
	alt_u8 i = 0;
   22160:	e03ff605 	stb	zero,-40(fp)
	int low_pass_filter = 0x01;
   22164:	00800044 	movi	r2,1
   22168:	e0bff715 	stw	r2,-36(fp)
	alt_u8 MPU_Init_Data[MPU_InitRegNum][2] =
   2216c:	00800044 	movi	r2,1
   22170:	e0bff805 	stb	r2,-32(fp)
   22174:	00801ac4 	movi	r2,107
   22178:	e0bff845 	stb	r2,-31(fp)
   2217c:	e03ff885 	stb	zero,-30(fp)
   22180:	00801b04 	movi	r2,108
   22184:	e0bff8c5 	stb	r2,-29(fp)
   22188:	e0bff717 	ldw	r2,-36(fp)
   2218c:	e0bff905 	stb	r2,-28(fp)
   22190:	00800684 	movi	r2,26
   22194:	e0bff945 	stb	r2,-27(fp)
   22198:	00800604 	movi	r2,24
   2219c:	e0bff985 	stb	r2,-26(fp)
   221a0:	008006c4 	movi	r2,27
   221a4:	e0bff9c5 	stb	r2,-25(fp)
   221a8:	00800204 	movi	r2,8
   221ac:	e0bffa05 	stb	r2,-24(fp)
   221b0:	00800704 	movi	r2,28
   221b4:	e0bffa45 	stb	r2,-23(fp)
   221b8:	00800244 	movi	r2,9
   221bc:	e0bffa85 	stb	r2,-22(fp)
   221c0:	00800744 	movi	r2,29
   221c4:	e0bffac5 	stb	r2,-21(fp)
   221c8:	00800c04 	movi	r2,48
   221cc:	e0bffb05 	stb	r2,-20(fp)
   221d0:	00800dc4 	movi	r2,55
   221d4:	e0bffb45 	stb	r2,-19(fp)
   221d8:	00800804 	movi	r2,32
   221dc:	e0bffb85 	stb	r2,-18(fp)
   221e0:	00801a84 	movi	r2,106
   221e4:	e0bffbc5 	stb	r2,-17(fp)
   221e8:	00800344 	movi	r2,13
   221ec:	e0bffc05 	stb	r2,-16(fp)
   221f0:	00800904 	movi	r2,36
   221f4:	e0bffc45 	stb	r2,-15(fp)
   221f8:	00800304 	movi	r2,12
   221fc:	e0bffc85 	stb	r2,-14(fp)
   22200:	00800944 	movi	r2,37
   22204:	e0bffcc5 	stb	r2,-13(fp)
   22208:	008002c4 	movi	r2,11
   2220c:	e0bffd05 	stb	r2,-12(fp)
   22210:	00800984 	movi	r2,38
   22214:	e0bffd45 	stb	r2,-11(fp)
   22218:	00800044 	movi	r2,1
   2221c:	e0bffd85 	stb	r2,-10(fp)
   22220:	008018c4 	movi	r2,99
   22224:	e0bffdc5 	stb	r2,-9(fp)
   22228:	00bfe044 	movi	r2,-127
   2222c:	e0bffe05 	stb	r2,-8(fp)
   22230:	008009c4 	movi	r2,39
   22234:	e0bffe45 	stb	r2,-7(fp)
   22238:	00800284 	movi	r2,10
   2223c:	e0bffe85 	stb	r2,-6(fp)
   22240:	00800984 	movi	r2,38
   22244:	e0bffec5 	stb	r2,-5(fp)
   22248:	00800484 	movi	r2,18
   2224c:	e0bfff05 	stb	r2,-4(fp)
   22250:	008018c4 	movi	r2,99
   22254:	e0bfff45 	stb	r2,-3(fp)
   22258:	00bfe044 	movi	r2,-127
   2225c:	e0bfff85 	stb	r2,-2(fp)
   22260:	008009c4 	movi	r2,39
   22264:	e0bfffc5 	stb	r2,-1(fp)
	        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
	        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
	        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte
	};

	for(i = 0; i < MPU_InitRegNum; i++)
   22268:	e03ff605 	stb	zero,-40(fp)
   2226c:	00001706 	br	222cc <MPU9250_initialize+0x17c>
	{
//		I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
		WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
   22270:	e0bff603 	ldbu	r2,-40(fp)
   22274:	1085883a 	add	r2,r2,r2
   22278:	e0fff604 	addi	r3,fp,-40
   2227c:	1885883a 	add	r2,r3,r2
   22280:	10800244 	addi	r2,r2,9
   22284:	10800003 	ldbu	r2,0(r2)
   22288:	10c03fcc 	andi	r3,r2,255
   2228c:	e0bff603 	ldbu	r2,-40(fp)
   22290:	1085883a 	add	r2,r2,r2
   22294:	e13ff604 	addi	r4,fp,-40
   22298:	2085883a 	add	r2,r4,r2
   2229c:	10800204 	addi	r2,r2,8
   222a0:	10800003 	ldbu	r2,0(r2)
   222a4:	10803fcc 	andi	r2,r2,255
   222a8:	100b883a 	mov	r5,r2
   222ac:	1809883a 	mov	r4,r3
   222b0:	0021ddc0 	call	21ddc <WriteReg>
	    usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
   222b4:	010000b4 	movhi	r4,2
   222b8:	2121a804 	addi	r4,r4,-31072
   222bc:	00321b00 	call	321b0 <usleep>
	        {AK8963_CNTL1, MPUREG_I2C_SLV0_REG}, //I2C slave 0 register address from where to begin data transfer
	        {0x12, MPUREG_I2C_SLV0_DO}, // Register value to continuous measurement in 16bit
	        {0x81, MPUREG_I2C_SLV0_CTRL}  //Enable I2C and set 1 byte
	};

	for(i = 0; i < MPU_InitRegNum; i++)
   222c0:	e0bff603 	ldbu	r2,-40(fp)
   222c4:	10800044 	addi	r2,r2,1
   222c8:	e0bff605 	stb	r2,-40(fp)
   222cc:	e0bff603 	ldbu	r2,-40(fp)
   222d0:	10800430 	cmpltui	r2,r2,16
   222d4:	103fe61e 	bne	r2,zero,22270 <__alt_data_end+0xfffe2e70>
//		I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
		WriteReg(MPU_Init_Data[i][1], MPU_Init_Data[i][0]);
	    usleep(100000);  //I2C must slow down the write speed, otherwise it won't work
	}

	set_acc_scale(BITS_FS_16G);
   222d8:	01000604 	movi	r4,24
   222dc:	0021f280 	call	21f28 <set_acc_scale>
	set_gyro_scale(BITS_FS_2000DPS);
   222e0:	01000604 	movi	r4,24
   222e4:	00220380 	call	22038 <set_gyro_scale>

	calib_mag();
   222e8:	00224040 	call	22404 <calib_mag>

	return 0;
   222ec:	0005883a 	mov	r2,zero
}
   222f0:	e037883a 	mov	sp,fp
   222f4:	dfc00117 	ldw	ra,4(sp)
   222f8:	df000017 	ldw	fp,0(sp)
   222fc:	dec00204 	addi	sp,sp,8
   22300:	f800283a 	ret

00022304 <calib_acc>:
2 -> Z axis
returns Factory Trim value
-----------------------------------------------------------------------------------------------*/

void calib_acc()
{
   22304:	defffc04 	addi	sp,sp,-16
   22308:	dfc00315 	stw	ra,12(sp)
   2230c:	df000215 	stw	fp,8(sp)
   22310:	df000204 	addi	fp,sp,8
	alt_u8 response[4];
    int temp_scale;
    //READ CURRENT ACC SCALE

//    I2C_Read(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_CONFIG, &temp_scale);
    temp_scale=WriteReg(MPUREG_ACCEL_CONFIG|READ_FLAG, 0x00);
   22314:	000b883a 	mov	r5,zero
   22318:	01002704 	movi	r4,156
   2231c:	0021ddc0 	call	21ddc <WriteReg>
   22320:	e0bffe15 	stw	r2,-8(fp)
    set_acc_scale(BITS_FS_8G);
   22324:	01000404 	movi	r4,16
   22328:	0021f280 	call	21f28 <set_acc_scale>
    //ENABLE SELF TEST need modify
    //temp_scale=WriteReg(MPUREG_ACCEL_CONFIG, 0x80>>axis);

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_SELF_TEST_X, response, 4);
    ReadRegs(MPUREG_SELF_TEST_X,response,4);
   2232c:	e0bfff04 	addi	r2,fp,-4
   22330:	01800104 	movi	r6,4
   22334:	100b883a 	mov	r5,r2
   22338:	01000344 	movi	r4,13
   2233c:	0021ecc0 	call	21ecc <ReadRegs>
    calib_data[0]=((response[0]&11100000)>>3)|((response[3]&00110000)>>4);
   22340:	e0bfff03 	ldbu	r2,-4(fp)
   22344:	10c03fcc 	andi	r3,r2,255
   22348:	00802a74 	movhi	r2,169
   2234c:	1097d804 	addi	r2,r2,24416
   22350:	1884703a 	and	r2,r3,r2
   22354:	1007d0fa 	srai	r3,r2,3
   22358:	e0bfffc3 	ldbu	r2,-1(fp)
   2235c:	10803fcc 	andi	r2,r2,255
   22360:	10a4000c 	andi	r2,r2,36864
   22364:	1005d13a 	srai	r2,r2,4
   22368:	1886b03a 	or	r3,r3,r2
   2236c:	00800134 	movhi	r2,4
   22370:	10a08504 	addi	r2,r2,-32236
   22374:	10c00015 	stw	r3,0(r2)
    calib_data[1]=((response[1]&11100000)>>3)|((response[3]&00001100)>>2);
   22378:	e0bfff43 	ldbu	r2,-3(fp)
   2237c:	10c03fcc 	andi	r3,r2,255
   22380:	00802a74 	movhi	r2,169
   22384:	1097d804 	addi	r2,r2,24416
   22388:	1884703a 	and	r2,r3,r2
   2238c:	1007d0fa 	srai	r3,r2,3
   22390:	e0bfffc3 	ldbu	r2,-1(fp)
   22394:	10803fcc 	andi	r2,r2,255
   22398:	1080900c 	andi	r2,r2,576
   2239c:	1005d0ba 	srai	r2,r2,2
   223a0:	1886b03a 	or	r3,r3,r2
   223a4:	00800134 	movhi	r2,4
   223a8:	10a08504 	addi	r2,r2,-32236
   223ac:	10c00115 	stw	r3,4(r2)
    calib_data[2]=((response[2]&11100000)>>3)|((response[3]&00000011));
   223b0:	e0bfff83 	ldbu	r2,-2(fp)
   223b4:	10c03fcc 	andi	r3,r2,255
   223b8:	00802a74 	movhi	r2,169
   223bc:	1097d804 	addi	r2,r2,24416
   223c0:	1884703a 	and	r2,r3,r2
   223c4:	1007d0fa 	srai	r3,r2,3
   223c8:	e0bfffc3 	ldbu	r2,-1(fp)
   223cc:	10803fcc 	andi	r2,r2,255
   223d0:	1080024c 	andi	r2,r2,9
   223d4:	1886b03a 	or	r3,r3,r2
   223d8:	00800134 	movhi	r2,4
   223dc:	10a08504 	addi	r2,r2,-32236
   223e0:	10c00215 	stw	r3,8(r2)

    set_acc_scale(temp_scale);
   223e4:	e13ffe17 	ldw	r4,-8(fp)
   223e8:	0021f280 	call	21f28 <set_acc_scale>
}
   223ec:	0001883a 	nop
   223f0:	e037883a 	mov	sp,fp
   223f4:	dfc00117 	ldw	ra,4(sp)
   223f8:	df000017 	ldw	fp,0(sp)
   223fc:	dec00204 	addi	sp,sp,8
   22400:	f800283a 	ret

00022404 <calib_mag>:

//-----------------------------------------------------------------------------------------------

void calib_mag()
{
   22404:	defffb04 	addi	sp,sp,-20
   22408:	dfc00415 	stw	ra,16(sp)
   2240c:	df000315 	stw	fp,12(sp)
   22410:	df000304 	addi	fp,sp,12
	alt_u8 response[3];
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   22414:	01402304 	movi	r5,140
   22418:	01000944 	movi	r4,37
   2241c:	0021ddc0 	call	21ddc <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_ASAX); //I2C slave 0 register address from where to begin data transfer
   22420:	01400404 	movi	r5,16
   22424:	01000984 	movi	r4,38
   22428:	0021ddc0 	call	21ddc <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x83); //Read 3 bytes from the magnetometer
   2242c:	014020c4 	movi	r5,131
   22430:	010009c4 	movi	r4,39
   22434:	0021ddc0 	call	21ddc <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_ASAX);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x83);


    //WriteReg(MPUREG_I2C_SLV0_CTRL, 0x81);    //Enable I2C and set bytes
    usleep(10000);
   22438:	0109c404 	movi	r4,10000
   2243c:	00321b00 	call	321b0 <usleep>
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);
   22440:	e0bfff04 	addi	r2,fp,-4
   22444:	018000c4 	movi	r6,3
   22448:	100b883a 	mov	r5,r2
   2244c:	01001244 	movi	r4,73
   22450:	0021ecc0 	call	21ecc <ReadRegs>

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
   22454:	e03ffd15 	stw	zero,-12(fp)
   22458:	00002806 	br	224fc <calib_mag+0xf8>
        data=response[i];
   2245c:	e0ffff04 	addi	r3,fp,-4
   22460:	e0bffd17 	ldw	r2,-12(fp)
   22464:	1885883a 	add	r2,r3,r2
   22468:	10800003 	ldbu	r2,0(r2)
   2246c:	10803fcc 	andi	r2,r2,255
   22470:	1009883a 	mov	r4,r2
   22474:	0024ce80 	call	24ce8 <__floatunsisf>
   22478:	1007883a 	mov	r3,r2
   2247c:	e0fffe15 	stw	r3,-8(fp)
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
   22480:	0150c034 	movhi	r5,17152
   22484:	e13ffe17 	ldw	r4,-8(fp)
   22488:	00246e00 	call	246e0 <__subsf3>
   2248c:	1007883a 	mov	r3,r2
   22490:	1805883a 	mov	r2,r3
   22494:	0150e034 	movhi	r5,17280
   22498:	1009883a 	mov	r4,r2
   2249c:	0023ea40 	call	23ea4 <__divsf3>
   224a0:	1007883a 	mov	r3,r2
   224a4:	1805883a 	mov	r2,r3
   224a8:	014fe034 	movhi	r5,16256
   224ac:	1009883a 	mov	r4,r2
   224b0:	00239dc0 	call	239dc <__addsf3>
   224b4:	1007883a 	mov	r3,r2
   224b8:	1805883a 	mov	r2,r3
   224bc:	014f86b4 	movhi	r5,15898
   224c0:	29666684 	addi	r5,r5,-26214
   224c4:	1009883a 	mov	r4,r2
   224c8:	00242e40 	call	242e4 <__mulsf3>
   224cc:	1007883a 	mov	r3,r2
   224d0:	1809883a 	mov	r4,r3
   224d4:	00800134 	movhi	r2,4
   224d8:	10a08b04 	addi	r2,r2,-32212
   224dc:	e0fffd17 	ldw	r3,-12(fp)
   224e0:	18c7883a 	add	r3,r3,r3
   224e4:	18c7883a 	add	r3,r3,r3
   224e8:	10c5883a 	add	r2,r2,r3
   224ec:	11000015 	stw	r4,0(r2)
    //response[0]=WriteReg(MPUREG_EXT_SENS_DATA_01|READ_FLAG, 0x00);    //Read I2C
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 3);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,3);

    //response=WriteReg(MPUREG_I2C_SLV0_DO, 0x00);    //Read I2C
    for(i=0; i<3; i++) {
   224f0:	e0bffd17 	ldw	r2,-12(fp)
   224f4:	10800044 	addi	r2,r2,1
   224f8:	e0bffd15 	stw	r2,-12(fp)
   224fc:	e0bffd17 	ldw	r2,-12(fp)
   22500:	108000d0 	cmplti	r2,r2,3
   22504:	103fd51e 	bne	r2,zero,2245c <__alt_data_end+0xfffe305c>
        data=response[i];
        magnetometer_ASA[i]=((data-128)/256+1)*Magnetometer_Sensitivity_Scale_Factor;
    }
}
   22508:	0001883a 	nop
   2250c:	e037883a 	mov	sp,fp
   22510:	dfc00117 	ldw	ra,4(sp)
   22514:	df000017 	ldw	fp,0(sp)
   22518:	dec00204 	addi	sp,sp,8
   2251c:	f800283a 	ret

00022520 <read_acc>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_acc()
{
   22520:	defff704 	addi	sp,sp,-36
   22524:	dfc00815 	stw	ra,32(sp)
   22528:	df000715 	stw	fp,28(sp)
   2252c:	dc400615 	stw	r17,24(sp)
   22530:	dc000515 	stw	r16,20(sp)
   22534:	df000704 	addi	fp,sp,28
	alt_16 bit_data;
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 6);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
   22538:	e0bffc04 	addi	r2,fp,-16
   2253c:	01800184 	movi	r6,6
   22540:	100b883a 	mov	r5,r2
   22544:	01000ec4 	movi	r4,59
   22548:	0021ecc0 	call	21ecc <ReadRegs>
    for(i=0; i<3; i++) {
   2254c:	e03ff915 	stw	zero,-28(fp)
   22550:	00004206 	br	2265c <read_acc+0x13c>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   22554:	e0bff917 	ldw	r2,-28(fp)
   22558:	1085883a 	add	r2,r2,r2
   2255c:	1007883a 	mov	r3,r2
   22560:	e0bffc04 	addi	r2,fp,-16
   22564:	10c5883a 	add	r2,r2,r3
   22568:	10800003 	ldbu	r2,0(r2)
   2256c:	10803fcc 	andi	r2,r2,255
   22570:	1004923a 	slli	r2,r2,8
   22574:	1009883a 	mov	r4,r2
   22578:	e0bff917 	ldw	r2,-28(fp)
   2257c:	1085883a 	add	r2,r2,r2
   22580:	10800044 	addi	r2,r2,1
   22584:	e0fffc04 	addi	r3,fp,-16
   22588:	1885883a 	add	r2,r3,r2
   2258c:	10800003 	ldbu	r2,0(r2)
   22590:	10803fcc 	andi	r2,r2,255
   22594:	2084b03a 	or	r2,r4,r2
   22598:	e0bffa0d 	sth	r2,-24(fp)
        data = (float)bit_data;
   2259c:	e0bffa0f 	ldh	r2,-24(fp)
   225a0:	1009883a 	mov	r4,r2
   225a4:	0024bc40 	call	24bc4 <__floatsisf>
   225a8:	1007883a 	mov	r3,r2
   225ac:	e0fffb15 	stw	r3,-20(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
   225b0:	e13ffb17 	ldw	r4,-20(fp)
   225b4:	0026f800 	call	26f80 <__extendsfdf2>
   225b8:	1011883a 	mov	r8,r2
   225bc:	1813883a 	mov	r9,r3
   225c0:	018ea4f4 	movhi	r6,14995
   225c4:	31a8c144 	addi	r6,r6,-23803
   225c8:	01d00934 	movhi	r7,16420
   225cc:	39e74044 	addi	r7,r7,-25343
   225d0:	4009883a 	mov	r4,r8
   225d4:	480b883a 	mov	r5,r9
   225d8:	0025f6c0 	call	25f6c <__muldf3>
   225dc:	1009883a 	mov	r4,r2
   225e0:	180b883a 	mov	r5,r3
   225e4:	2021883a 	mov	r16,r4
   225e8:	2823883a 	mov	r17,r5
   225ec:	d0a6cf17 	ldw	r2,-25796(gp)
   225f0:	1009883a 	mov	r4,r2
   225f4:	0026f800 	call	26f80 <__extendsfdf2>
   225f8:	1009883a 	mov	r4,r2
   225fc:	180b883a 	mov	r5,r3
   22600:	200d883a 	mov	r6,r4
   22604:	280f883a 	mov	r7,r5
   22608:	8009883a 	mov	r4,r16
   2260c:	880b883a 	mov	r5,r17
   22610:	00256840 	call	25684 <__divdf3>
   22614:	1009883a 	mov	r4,r2
   22618:	180b883a 	mov	r5,r3
   2261c:	2005883a 	mov	r2,r4
   22620:	2807883a 	mov	r3,r5
   22624:	1009883a 	mov	r4,r2
   22628:	180b883a 	mov	r5,r3
   2262c:	00270900 	call	27090 <__truncdfsf2>
   22630:	1009883a 	mov	r4,r2
   22634:	00800134 	movhi	r2,4
   22638:	10a08204 	addi	r2,r2,-32248
   2263c:	e0fff917 	ldw	r3,-28(fp)
   22640:	18c7883a 	add	r3,r3,r3
   22644:	18c7883a 	add	r3,r3,r3
   22648:	10c5883a 	add	r2,r2,r3
   2264c:	11000015 	stw	r4,0(r2)
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 6);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,6);
    for(i=0; i<3; i++) {
   22650:	e0bff917 	ldw	r2,-28(fp)
   22654:	10800044 	addi	r2,r2,1
   22658:	e0bff915 	stw	r2,-28(fp)
   2265c:	e0bff917 	ldw	r2,-28(fp)
   22660:	108000d0 	cmplti	r2,r2,3
   22664:	103fbb1e 	bne	r2,zero,22554 <__alt_data_end+0xfffe3154>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }

}
   22668:	0001883a 	nop
   2266c:	e6fffe04 	addi	sp,fp,-8
   22670:	dfc00317 	ldw	ra,12(sp)
   22674:	df000217 	ldw	fp,8(sp)
   22678:	dc400117 	ldw	r17,4(sp)
   2267c:	dc000017 	ldw	r16,0(sp)
   22680:	dec00404 	addi	sp,sp,16
   22684:	f800283a 	ret

00022688 <read_gyro>:
1 -> Y axis
2 -> Z axis
-----------------------------------------------------------------------------------------------*/

void read_gyro()
{
   22688:	defff704 	addi	sp,sp,-36
   2268c:	dfc00815 	stw	ra,32(sp)
   22690:	df000715 	stw	fp,28(sp)
   22694:	dc400615 	stw	r17,24(sp)
   22698:	dc000515 	stw	r16,20(sp)
   2269c:	df000704 	addi	fp,sp,28
	alt_16 bit_data;
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_XOUT_H, response, 6);
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
   226a0:	e0bffc04 	addi	r2,fp,-16
   226a4:	01800184 	movi	r6,6
   226a8:	100b883a 	mov	r5,r2
   226ac:	010010c4 	movi	r4,67
   226b0:	0021ecc0 	call	21ecc <ReadRegs>
    for(i=0; i<3; i++) {
   226b4:	e03ff915 	stw	zero,-28(fp)
   226b8:	00004206 	br	227c4 <read_gyro+0x13c>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   226bc:	e0bff917 	ldw	r2,-28(fp)
   226c0:	1085883a 	add	r2,r2,r2
   226c4:	1007883a 	mov	r3,r2
   226c8:	e0bffc04 	addi	r2,fp,-16
   226cc:	10c5883a 	add	r2,r2,r3
   226d0:	10800003 	ldbu	r2,0(r2)
   226d4:	10803fcc 	andi	r2,r2,255
   226d8:	1004923a 	slli	r2,r2,8
   226dc:	1009883a 	mov	r4,r2
   226e0:	e0bff917 	ldw	r2,-28(fp)
   226e4:	1085883a 	add	r2,r2,r2
   226e8:	10800044 	addi	r2,r2,1
   226ec:	e0fffc04 	addi	r3,fp,-16
   226f0:	1885883a 	add	r2,r3,r2
   226f4:	10800003 	ldbu	r2,0(r2)
   226f8:	10803fcc 	andi	r2,r2,255
   226fc:	2084b03a 	or	r2,r4,r2
   22700:	e0bffa0d 	sth	r2,-24(fp)
        data = (float)bit_data;
   22704:	e0bffa0f 	ldh	r2,-24(fp)
   22708:	1009883a 	mov	r4,r2
   2270c:	0024bc40 	call	24bc4 <__floatsisf>
   22710:	1007883a 	mov	r3,r2
   22714:	e0fffb15 	stw	r3,-20(fp)
        gyroscope_data[i] = (M_PI / 180) * data / gyro_divider;
   22718:	e13ffb17 	ldw	r4,-20(fp)
   2271c:	0026f800 	call	26f80 <__extendsfdf2>
   22720:	1011883a 	mov	r8,r2
   22724:	1813883a 	mov	r9,r3
   22728:	01a894f4 	movhi	r6,41555
   2272c:	31a74e44 	addi	r6,r6,-25287
   22730:	01cfe4b4 	movhi	r7,16274
   22734:	39f7d184 	addi	r7,r7,-8378
   22738:	4009883a 	mov	r4,r8
   2273c:	480b883a 	mov	r5,r9
   22740:	0025f6c0 	call	25f6c <__muldf3>
   22744:	1009883a 	mov	r4,r2
   22748:	180b883a 	mov	r5,r3
   2274c:	2021883a 	mov	r16,r4
   22750:	2823883a 	mov	r17,r5
   22754:	d0a6ce17 	ldw	r2,-25800(gp)
   22758:	1009883a 	mov	r4,r2
   2275c:	0026f800 	call	26f80 <__extendsfdf2>
   22760:	1009883a 	mov	r4,r2
   22764:	180b883a 	mov	r5,r3
   22768:	200d883a 	mov	r6,r4
   2276c:	280f883a 	mov	r7,r5
   22770:	8009883a 	mov	r4,r16
   22774:	880b883a 	mov	r5,r17
   22778:	00256840 	call	25684 <__divdf3>
   2277c:	1009883a 	mov	r4,r2
   22780:	180b883a 	mov	r5,r3
   22784:	2005883a 	mov	r2,r4
   22788:	2807883a 	mov	r3,r5
   2278c:	1009883a 	mov	r4,r2
   22790:	180b883a 	mov	r5,r3
   22794:	00270900 	call	27090 <__truncdfsf2>
   22798:	1009883a 	mov	r4,r2
   2279c:	00800134 	movhi	r2,4
   227a0:	10a08804 	addi	r2,r2,-32224
   227a4:	e0fff917 	ldw	r3,-28(fp)
   227a8:	18c7883a 	add	r3,r3,r3
   227ac:	18c7883a 	add	r3,r3,r3
   227b0:	10c5883a 	add	r2,r2,r3
   227b4:	11000015 	stw	r4,0(r2)
    float data;
    int i;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_GYRO_XOUT_H, response, 6);
    ReadRegs(MPUREG_GYRO_XOUT_H,response,6);
    for(i=0; i<3; i++) {
   227b8:	e0bff917 	ldw	r2,-28(fp)
   227bc:	10800044 	addi	r2,r2,1
   227c0:	e0bff915 	stw	r2,-28(fp)
   227c4:	e0bff917 	ldw	r2,-28(fp)
   227c8:	108000d0 	cmplti	r2,r2,3
   227cc:	103fbb1e 	bne	r2,zero,226bc <__alt_data_end+0xfffe32bc>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i] = (M_PI / 180) * data / gyro_divider;
    }

}
   227d0:	0001883a 	nop
   227d4:	e6fffe04 	addi	sp,fp,-8
   227d8:	dfc00317 	ldw	ra,12(sp)
   227dc:	df000217 	ldw	fp,8(sp)
   227e0:	dc400117 	ldw	r17,4(sp)
   227e4:	dc000017 	ldw	r16,0(sp)
   227e8:	dec00404 	addi	sp,sp,16
   227ec:	f800283a 	ret

000227f0 <read_temp>:
usage: call this function to read temperature data.
returns the value in °C
-----------------------------------------------------------------------------------------------*/

void read_temp()
{
   227f0:	defffb04 	addi	sp,sp,-20
   227f4:	dfc00415 	stw	ra,16(sp)
   227f8:	df000315 	stw	fp,12(sp)
   227fc:	df000304 	addi	fp,sp,12
	alt_u8 response[2];
	alt_16 bit_data;
    float data;

//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_TEMP_OUT_H, response, 2);
    ReadRegs(MPUREG_TEMP_OUT_H,response,2);
   22800:	e0bfff04 	addi	r2,fp,-4
   22804:	01800084 	movi	r6,2
   22808:	100b883a 	mov	r5,r2
   2280c:	01001044 	movi	r4,65
   22810:	0021ecc0 	call	21ecc <ReadRegs>

    bit_data=((alt_16)response[0]<<8)|response[1];
   22814:	e0bfff03 	ldbu	r2,-4(fp)
   22818:	10803fcc 	andi	r2,r2,255
   2281c:	1004923a 	slli	r2,r2,8
   22820:	1007883a 	mov	r3,r2
   22824:	e0bfff43 	ldbu	r2,-3(fp)
   22828:	10803fcc 	andi	r2,r2,255
   2282c:	1884b03a 	or	r2,r3,r2
   22830:	e0bffd0d 	sth	r2,-12(fp)
    data=(float)bit_data;
   22834:	e0bffd0f 	ldh	r2,-12(fp)
   22838:	1009883a 	mov	r4,r2
   2283c:	0024bc40 	call	24bc4 <__floatsisf>
   22840:	1007883a 	mov	r3,r2
   22844:	e0fffe15 	stw	r3,-8(fp)
    temperature=(data/340)+36.53;
   22848:	0150eab4 	movhi	r5,17322
   2284c:	e13ffe17 	ldw	r4,-8(fp)
   22850:	0023ea40 	call	23ea4 <__divsf3>
   22854:	1007883a 	mov	r3,r2
   22858:	1805883a 	mov	r2,r3
   2285c:	1009883a 	mov	r4,r2
   22860:	0026f800 	call	26f80 <__extendsfdf2>
   22864:	1011883a 	mov	r8,r2
   22868:	1813883a 	mov	r9,r3
   2286c:	01828f74 	movhi	r6,2621
   22870:	319c2904 	addi	r6,r6,28836
   22874:	01d010b4 	movhi	r7,16450
   22878:	39d0f5c4 	addi	r7,r7,17367
   2287c:	4009883a 	mov	r4,r8
   22880:	480b883a 	mov	r5,r9
   22884:	0024dd80 	call	24dd8 <__adddf3>
   22888:	1009883a 	mov	r4,r2
   2288c:	180b883a 	mov	r5,r3
   22890:	2005883a 	mov	r2,r4
   22894:	2807883a 	mov	r3,r5
   22898:	1009883a 	mov	r4,r2
   2289c:	180b883a 	mov	r5,r3
   228a0:	00270900 	call	27090 <__truncdfsf2>
   228a4:	1007883a 	mov	r3,r2
   228a8:	d0e6cd15 	stw	r3,-25804(gp)
}
   228ac:	0001883a 	nop
   228b0:	e037883a 	mov	sp,fp
   228b4:	dfc00117 	ldw	ra,4(sp)
   228b8:	df000017 	ldw	fp,0(sp)
   228bc:	dec00204 	addi	sp,sp,8
   228c0:	f800283a 	ret

000228c4 <read_mag>:

//-----------------------------------------------------------------------------------------------

void read_mag()
{
   228c4:	defff904 	addi	sp,sp,-28
   228c8:	dfc00615 	stw	ra,24(sp)
   228cc:	df000515 	stw	fp,20(sp)
   228d0:	df000504 	addi	fp,sp,20
	alt_u8 response[7];
	alt_16 bit_data;
    float data;
    int i;

    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   228d4:	01402304 	movi	r5,140
   228d8:	01000944 	movi	r4,37
   228dc:	0021ddc0 	call	21ddc <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
   228e0:	014000c4 	movi	r5,3
   228e4:	01000984 	movi	r4,38
   228e8:	0021ddc0 	call	21ddc <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 6 bytes from the magnetometer
   228ec:	014021c4 	movi	r5,135
   228f0:	010009c4 	movi	r4,39
   228f4:	0021ddc0 	call	21ddc <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_ADDR, AK8963_I2C_ADDR|READ_FLAG);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_REG, AK8963_HXL);
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x87);

    usleep(10000);
   228f8:	0109c404 	movi	r4,10000
   228fc:	00321b00 	call	321b0 <usleep>
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
   22900:	e0bffe04 	addi	r2,fp,-8
   22904:	018001c4 	movi	r6,7
   22908:	100b883a 	mov	r5,r2
   2290c:	01001244 	movi	r4,73
   22910:	0021ecc0 	call	21ecc <ReadRegs>
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
   22914:	e03ffb15 	stw	zero,-20(fp)
   22918:	00002d06 	br	229d0 <read_mag+0x10c>
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
   2291c:	e0bffb17 	ldw	r2,-20(fp)
   22920:	1085883a 	add	r2,r2,r2
   22924:	10800044 	addi	r2,r2,1
   22928:	e0fffe04 	addi	r3,fp,-8
   2292c:	1885883a 	add	r2,r3,r2
   22930:	10800003 	ldbu	r2,0(r2)
   22934:	10803fcc 	andi	r2,r2,255
   22938:	1004923a 	slli	r2,r2,8
   2293c:	1007883a 	mov	r3,r2
   22940:	e0bffb17 	ldw	r2,-20(fp)
   22944:	1085883a 	add	r2,r2,r2
   22948:	1009883a 	mov	r4,r2
   2294c:	e0bffe04 	addi	r2,fp,-8
   22950:	1105883a 	add	r2,r2,r4
   22954:	10800003 	ldbu	r2,0(r2)
   22958:	10803fcc 	andi	r2,r2,255
   2295c:	1884b03a 	or	r2,r3,r2
   22960:	e0bffc0d 	sth	r2,-16(fp)
        data=(float)bit_data;
   22964:	e0bffc0f 	ldh	r2,-16(fp)
   22968:	1009883a 	mov	r4,r2
   2296c:	0024bc40 	call	24bc4 <__floatsisf>
   22970:	1007883a 	mov	r3,r2
   22974:	e0fffd15 	stw	r3,-12(fp)
        magnetometer_data[i]=data*magnetometer_ASA[i];
   22978:	00800134 	movhi	r2,4
   2297c:	10a08b04 	addi	r2,r2,-32212
   22980:	e0fffb17 	ldw	r3,-20(fp)
   22984:	18c7883a 	add	r3,r3,r3
   22988:	18c7883a 	add	r3,r3,r3
   2298c:	10c5883a 	add	r2,r2,r3
   22990:	10c00017 	ldw	r3,0(r2)
   22994:	e17ffd17 	ldw	r5,-12(fp)
   22998:	1809883a 	mov	r4,r3
   2299c:	00242e40 	call	242e4 <__mulsf3>
   229a0:	1007883a 	mov	r3,r2
   229a4:	1809883a 	mov	r4,r3
   229a8:	00800134 	movhi	r2,4
   229ac:	10a08e04 	addi	r2,r2,-32200
   229b0:	e0fffb17 	ldw	r3,-20(fp)
   229b4:	18c7883a 	add	r3,r3,r3
   229b8:	18c7883a 	add	r3,r3,r3
   229bc:	10c5883a 	add	r2,r2,r3
   229c0:	11000015 	stw	r4,0(r2)

    usleep(10000);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_EXT_SENS_DATA_00, response, 7);
    ReadRegs(MPUREG_EXT_SENS_DATA_00,response,7);
    //must start your read from AK8963A register 0x03 and read seven bytes so that upon read of ST2 register 0x09 the AK8963A will unlatch the data registers for the next measurement.
    for(i=0; i<3; i++) {
   229c4:	e0bffb17 	ldw	r2,-20(fp)
   229c8:	10800044 	addi	r2,r2,1
   229cc:	e0bffb15 	stw	r2,-20(fp)
   229d0:	e0bffb17 	ldw	r2,-20(fp)
   229d4:	108000d0 	cmplti	r2,r2,3
   229d8:	103fd01e 	bne	r2,zero,2291c <__alt_data_end+0xfffe351c>
        bit_data=((alt_16)response[i*2+1]<<8)|response[i*2];
        data=(float)bit_data;
        magnetometer_data[i]=data*magnetometer_ASA[i];
    }
}
   229dc:	0001883a 	nop
   229e0:	e037883a 	mov	sp,fp
   229e4:	dfc00117 	ldw	ra,4(sp)
   229e8:	df000017 	ldw	fp,0(sp)
   229ec:	dec00204 	addi	sp,sp,8
   229f0:	f800283a 	ret

000229f4 <read_all>:

//-----------------------------------------------------------------------------------------------

void read_all()
{
   229f4:	defff204 	addi	sp,sp,-56
   229f8:	dfc00d15 	stw	ra,52(sp)
   229fc:	df000c15 	stw	fp,48(sp)
   22a00:	dc800b15 	stw	r18,44(sp)
   22a04:	dc400a15 	stw	r17,40(sp)
   22a08:	dc000915 	stw	r16,36(sp)
   22a0c:	df000c04 	addi	fp,sp,48
	alt_16 bit_data;
    float data;
    int i;

    //Send I2C command at first
    WriteReg(MPUREG_I2C_SLV0_ADDR,AK8963_I2C_ADDR|READ_FLAG); //Set the I2C slave addres of AK8963 and set for read.
   22a10:	01402304 	movi	r5,140
   22a14:	01000944 	movi	r4,37
   22a18:	0021ddc0 	call	21ddc <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_REG, AK8963_HXL); //I2C slave 0 register address from where to begin data transfer
   22a1c:	014000c4 	movi	r5,3
   22a20:	01000984 	movi	r4,38
   22a24:	0021ddc0 	call	21ddc <WriteReg>
    WriteReg(MPUREG_I2C_SLV0_CTRL, 0x87); //Read 7 bytes from the magnetometer
   22a28:	014021c4 	movi	r5,135
   22a2c:	010009c4 	movi	r4,39
   22a30:	0021ddc0 	call	21ddc <WriteReg>
//    I2C_Write(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_I2C_SLV0_CTRL, 0x87);


    //wait(0.001);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 21);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
   22a34:	e0bff704 	addi	r2,fp,-36
   22a38:	01800544 	movi	r6,21
   22a3c:	100b883a 	mov	r5,r2
   22a40:	01000ec4 	movi	r4,59
   22a44:	0021ecc0 	call	21ecc <ReadRegs>
    //Get accelerometer value
    for(i=0; i<3; i++) {
   22a48:	e03ff415 	stw	zero,-48(fp)
   22a4c:	00004206 	br	22b58 <read_all+0x164>
        bit_data = ((alt_16)response[i*2] << 8)|response[i*2+1];
   22a50:	e0bff417 	ldw	r2,-48(fp)
   22a54:	1085883a 	add	r2,r2,r2
   22a58:	1007883a 	mov	r3,r2
   22a5c:	e0bff704 	addi	r2,fp,-36
   22a60:	10c5883a 	add	r2,r2,r3
   22a64:	10800003 	ldbu	r2,0(r2)
   22a68:	10803fcc 	andi	r2,r2,255
   22a6c:	1004923a 	slli	r2,r2,8
   22a70:	1009883a 	mov	r4,r2
   22a74:	e0bff417 	ldw	r2,-48(fp)
   22a78:	1085883a 	add	r2,r2,r2
   22a7c:	10800044 	addi	r2,r2,1
   22a80:	e0fff704 	addi	r3,fp,-36
   22a84:	1885883a 	add	r2,r3,r2
   22a88:	10800003 	ldbu	r2,0(r2)
   22a8c:	10803fcc 	andi	r2,r2,255
   22a90:	2084b03a 	or	r2,r4,r2
   22a94:	e0bff50d 	sth	r2,-44(fp)
        data = (float)bit_data;
   22a98:	e0bff50f 	ldh	r2,-44(fp)
   22a9c:	1009883a 	mov	r4,r2
   22aa0:	0024bc40 	call	24bc4 <__floatsisf>
   22aa4:	1007883a 	mov	r3,r2
   22aa8:	e0fff615 	stw	r3,-40(fp)
        accelerometer_data[i] = G_SI * data / acc_divider;
   22aac:	e13ff617 	ldw	r4,-40(fp)
   22ab0:	0026f800 	call	26f80 <__extendsfdf2>
   22ab4:	1011883a 	mov	r8,r2
   22ab8:	1813883a 	mov	r9,r3
   22abc:	018ea4f4 	movhi	r6,14995
   22ac0:	31a8c144 	addi	r6,r6,-23803
   22ac4:	01d00934 	movhi	r7,16420
   22ac8:	39e74044 	addi	r7,r7,-25343
   22acc:	4009883a 	mov	r4,r8
   22ad0:	480b883a 	mov	r5,r9
   22ad4:	0025f6c0 	call	25f6c <__muldf3>
   22ad8:	1009883a 	mov	r4,r2
   22adc:	180b883a 	mov	r5,r3
   22ae0:	2021883a 	mov	r16,r4
   22ae4:	2823883a 	mov	r17,r5
   22ae8:	d0a6cf17 	ldw	r2,-25796(gp)
   22aec:	1009883a 	mov	r4,r2
   22af0:	0026f800 	call	26f80 <__extendsfdf2>
   22af4:	1009883a 	mov	r4,r2
   22af8:	180b883a 	mov	r5,r3
   22afc:	200d883a 	mov	r6,r4
   22b00:	280f883a 	mov	r7,r5
   22b04:	8009883a 	mov	r4,r16
   22b08:	880b883a 	mov	r5,r17
   22b0c:	00256840 	call	25684 <__divdf3>
   22b10:	1009883a 	mov	r4,r2
   22b14:	180b883a 	mov	r5,r3
   22b18:	2005883a 	mov	r2,r4
   22b1c:	2807883a 	mov	r3,r5
   22b20:	1009883a 	mov	r4,r2
   22b24:	180b883a 	mov	r5,r3
   22b28:	00270900 	call	27090 <__truncdfsf2>
   22b2c:	1009883a 	mov	r4,r2
   22b30:	00800134 	movhi	r2,4
   22b34:	10a08204 	addi	r2,r2,-32248
   22b38:	e0fff417 	ldw	r3,-48(fp)
   22b3c:	18c7883a 	add	r3,r3,r3
   22b40:	18c7883a 	add	r3,r3,r3
   22b44:	10c5883a 	add	r2,r2,r3
   22b48:	11000015 	stw	r4,0(r2)

    //wait(0.001);
//    I2C_MultipleRead(MPU_I2C_SCL_BASE, MPU_I2C_SDA_BASE, MPU_DEVICE_ADDR, MPUREG_ACCEL_XOUT_H, response, 21);
    ReadRegs(MPUREG_ACCEL_XOUT_H,response,21);
    //Get accelerometer value
    for(i=0; i<3; i++) {
   22b4c:	e0bff417 	ldw	r2,-48(fp)
   22b50:	10800044 	addi	r2,r2,1
   22b54:	e0bff415 	stw	r2,-48(fp)
   22b58:	e0bff417 	ldw	r2,-48(fp)
   22b5c:	108000d0 	cmplti	r2,r2,3
   22b60:	103fbb1e 	bne	r2,zero,22a50 <__alt_data_end+0xfffe3650>
        bit_data = ((alt_16)response[i*2] << 8)|response[i*2+1];
        data = (float)bit_data;
        accelerometer_data[i] = G_SI * data / acc_divider;
    }
    //Get temperature
    bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   22b64:	e0bff417 	ldw	r2,-48(fp)
   22b68:	1085883a 	add	r2,r2,r2
   22b6c:	1007883a 	mov	r3,r2
   22b70:	e0bff704 	addi	r2,fp,-36
   22b74:	10c5883a 	add	r2,r2,r3
   22b78:	10800003 	ldbu	r2,0(r2)
   22b7c:	10803fcc 	andi	r2,r2,255
   22b80:	1004923a 	slli	r2,r2,8
   22b84:	1009883a 	mov	r4,r2
   22b88:	e0bff417 	ldw	r2,-48(fp)
   22b8c:	1085883a 	add	r2,r2,r2
   22b90:	10800044 	addi	r2,r2,1
   22b94:	e0fff704 	addi	r3,fp,-36
   22b98:	1885883a 	add	r2,r3,r2
   22b9c:	10800003 	ldbu	r2,0(r2)
   22ba0:	10803fcc 	andi	r2,r2,255
   22ba4:	2084b03a 	or	r2,r4,r2
   22ba8:	e0bff50d 	sth	r2,-44(fp)
    data = (float)bit_data;
   22bac:	e0bff50f 	ldh	r2,-44(fp)
   22bb0:	1009883a 	mov	r4,r2
   22bb4:	0024bc40 	call	24bc4 <__floatsisf>
   22bb8:	1007883a 	mov	r3,r2
   22bbc:	e0fff615 	stw	r3,-40(fp)
    temperature = ((data - 21) / 333.87) + 21;
   22bc0:	01506a34 	movhi	r5,16808
   22bc4:	e13ff617 	ldw	r4,-40(fp)
   22bc8:	00246e00 	call	246e0 <__subsf3>
   22bcc:	1007883a 	mov	r3,r2
   22bd0:	1805883a 	mov	r2,r3
   22bd4:	1009883a 	mov	r4,r2
   22bd8:	0026f800 	call	26f80 <__extendsfdf2>
   22bdc:	1011883a 	mov	r8,r2
   22be0:	1813883a 	mov	r9,r3
   22be4:	01a147f4 	movhi	r6,34079
   22be8:	31ae1484 	addi	r6,r6,-18350
   22bec:	01d01d74 	movhi	r7,16501
   22bf0:	39f77ac4 	addi	r7,r7,-8725
   22bf4:	4009883a 	mov	r4,r8
   22bf8:	480b883a 	mov	r5,r9
   22bfc:	00256840 	call	25684 <__divdf3>
   22c00:	1009883a 	mov	r4,r2
   22c04:	180b883a 	mov	r5,r3
   22c08:	2005883a 	mov	r2,r4
   22c0c:	2807883a 	mov	r3,r5
   22c10:	000d883a 	mov	r6,zero
   22c14:	01d00d74 	movhi	r7,16437
   22c18:	1009883a 	mov	r4,r2
   22c1c:	180b883a 	mov	r5,r3
   22c20:	0024dd80 	call	24dd8 <__adddf3>
   22c24:	1009883a 	mov	r4,r2
   22c28:	180b883a 	mov	r5,r3
   22c2c:	2005883a 	mov	r2,r4
   22c30:	2807883a 	mov	r3,r5
   22c34:	1009883a 	mov	r4,r2
   22c38:	180b883a 	mov	r5,r3
   22c3c:	00270900 	call	27090 <__truncdfsf2>
   22c40:	1007883a 	mov	r3,r2
   22c44:	d0e6cd15 	stw	r3,-25804(gp)
    //Get gyroscope value
    for(i=4; i<7; i++) {
   22c48:	00800104 	movi	r2,4
   22c4c:	e0bff415 	stw	r2,-48(fp)
   22c50:	00004306 	br	22d60 <read_all+0x36c>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
   22c54:	e0bff417 	ldw	r2,-48(fp)
   22c58:	1085883a 	add	r2,r2,r2
   22c5c:	1007883a 	mov	r3,r2
   22c60:	e0bff704 	addi	r2,fp,-36
   22c64:	10c5883a 	add	r2,r2,r3
   22c68:	10800003 	ldbu	r2,0(r2)
   22c6c:	10803fcc 	andi	r2,r2,255
   22c70:	1004923a 	slli	r2,r2,8
   22c74:	1009883a 	mov	r4,r2
   22c78:	e0bff417 	ldw	r2,-48(fp)
   22c7c:	1085883a 	add	r2,r2,r2
   22c80:	10800044 	addi	r2,r2,1
   22c84:	e0fff704 	addi	r3,fp,-36
   22c88:	1885883a 	add	r2,r3,r2
   22c8c:	10800003 	ldbu	r2,0(r2)
   22c90:	10803fcc 	andi	r2,r2,255
   22c94:	2084b03a 	or	r2,r4,r2
   22c98:	e0bff50d 	sth	r2,-44(fp)
        data = (float)bit_data;
   22c9c:	e0bff50f 	ldh	r2,-44(fp)
   22ca0:	1009883a 	mov	r4,r2
   22ca4:	0024bc40 	call	24bc4 <__floatsisf>
   22ca8:	1007883a 	mov	r3,r2
   22cac:	e0fff615 	stw	r3,-40(fp)
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
   22cb0:	e0bff417 	ldw	r2,-48(fp)
   22cb4:	143fff04 	addi	r16,r2,-4
   22cb8:	e13ff617 	ldw	r4,-40(fp)
   22cbc:	0026f800 	call	26f80 <__extendsfdf2>
   22cc0:	1011883a 	mov	r8,r2
   22cc4:	1813883a 	mov	r9,r3
   22cc8:	01a894f4 	movhi	r6,41555
   22ccc:	31a74e44 	addi	r6,r6,-25287
   22cd0:	01cfe4b4 	movhi	r7,16274
   22cd4:	39f7d184 	addi	r7,r7,-8378
   22cd8:	4009883a 	mov	r4,r8
   22cdc:	480b883a 	mov	r5,r9
   22ce0:	0025f6c0 	call	25f6c <__muldf3>
   22ce4:	1009883a 	mov	r4,r2
   22ce8:	180b883a 	mov	r5,r3
   22cec:	2023883a 	mov	r17,r4
   22cf0:	2825883a 	mov	r18,r5
   22cf4:	d0a6ce17 	ldw	r2,-25800(gp)
   22cf8:	1009883a 	mov	r4,r2
   22cfc:	0026f800 	call	26f80 <__extendsfdf2>
   22d00:	1009883a 	mov	r4,r2
   22d04:	180b883a 	mov	r5,r3
   22d08:	200d883a 	mov	r6,r4
   22d0c:	280f883a 	mov	r7,r5
   22d10:	8809883a 	mov	r4,r17
   22d14:	900b883a 	mov	r5,r18
   22d18:	00256840 	call	25684 <__divdf3>
   22d1c:	1009883a 	mov	r4,r2
   22d20:	180b883a 	mov	r5,r3
   22d24:	2005883a 	mov	r2,r4
   22d28:	2807883a 	mov	r3,r5
   22d2c:	1009883a 	mov	r4,r2
   22d30:	180b883a 	mov	r5,r3
   22d34:	00270900 	call	27090 <__truncdfsf2>
   22d38:	1009883a 	mov	r4,r2
   22d3c:	00800134 	movhi	r2,4
   22d40:	10a08804 	addi	r2,r2,-32224
   22d44:	8407883a 	add	r3,r16,r16
   22d48:	18c7883a 	add	r3,r3,r3
   22d4c:	10c5883a 	add	r2,r2,r3
   22d50:	11000015 	stw	r4,0(r2)
    //Get temperature
    bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
    data = (float)bit_data;
    temperature = ((data - 21) / 333.87) + 21;
    //Get gyroscope value
    for(i=4; i<7; i++) {
   22d54:	e0bff417 	ldw	r2,-48(fp)
   22d58:	10800044 	addi	r2,r2,1
   22d5c:	e0bff415 	stw	r2,-48(fp)
   22d60:	e0bff417 	ldw	r2,-48(fp)
   22d64:	108001d0 	cmplti	r2,r2,7
   22d68:	103fba1e 	bne	r2,zero,22c54 <__alt_data_end+0xfffe3854>
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
   22d6c:	008001c4 	movi	r2,7
   22d70:	e0bff415 	stw	r2,-48(fp)
   22d74:	00002f06 	br	22e34 <read_all+0x440>
        bit_data = ((alt_16)response[i*2+1] << 8) | response[i*2];
   22d78:	e0bff417 	ldw	r2,-48(fp)
   22d7c:	1085883a 	add	r2,r2,r2
   22d80:	10800044 	addi	r2,r2,1
   22d84:	e0fff704 	addi	r3,fp,-36
   22d88:	1885883a 	add	r2,r3,r2
   22d8c:	10800003 	ldbu	r2,0(r2)
   22d90:	10803fcc 	andi	r2,r2,255
   22d94:	1004923a 	slli	r2,r2,8
   22d98:	1007883a 	mov	r3,r2
   22d9c:	e0bff417 	ldw	r2,-48(fp)
   22da0:	1085883a 	add	r2,r2,r2
   22da4:	1009883a 	mov	r4,r2
   22da8:	e0bff704 	addi	r2,fp,-36
   22dac:	1105883a 	add	r2,r2,r4
   22db0:	10800003 	ldbu	r2,0(r2)
   22db4:	10803fcc 	andi	r2,r2,255
   22db8:	1884b03a 	or	r2,r3,r2
   22dbc:	e0bff50d 	sth	r2,-44(fp)
        data = (float)bit_data;
   22dc0:	e0bff50f 	ldh	r2,-44(fp)
   22dc4:	1009883a 	mov	r4,r2
   22dc8:	0024bc40 	call	24bc4 <__floatsisf>
   22dcc:	1007883a 	mov	r3,r2
   22dd0:	e0fff615 	stw	r3,-40(fp)
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
   22dd4:	e0bff417 	ldw	r2,-48(fp)
   22dd8:	143ffe44 	addi	r16,r2,-7
   22ddc:	e0bff417 	ldw	r2,-48(fp)
   22de0:	10fffe44 	addi	r3,r2,-7
   22de4:	00800134 	movhi	r2,4
   22de8:	10a08b04 	addi	r2,r2,-32212
   22dec:	18c7883a 	add	r3,r3,r3
   22df0:	18c7883a 	add	r3,r3,r3
   22df4:	10c5883a 	add	r2,r2,r3
   22df8:	10c00017 	ldw	r3,0(r2)
   22dfc:	e17ff617 	ldw	r5,-40(fp)
   22e00:	1809883a 	mov	r4,r3
   22e04:	00242e40 	call	242e4 <__mulsf3>
   22e08:	1007883a 	mov	r3,r2
   22e0c:	1809883a 	mov	r4,r3
   22e10:	00800134 	movhi	r2,4
   22e14:	10a08e04 	addi	r2,r2,-32200
   22e18:	8407883a 	add	r3,r16,r16
   22e1c:	18c7883a 	add	r3,r3,r3
   22e20:	10c5883a 	add	r2,r2,r3
   22e24:	11000015 	stw	r4,0(r2)
        bit_data = ((alt_16)response[i*2] << 8) | response[i*2+1];
        data = (float)bit_data;
        gyroscope_data[i-4] = (M_PI / 180) * data / gyro_divider;
    }
    //Get Magnetometer value
    for(i=7; i<10; i++) {
   22e28:	e0bff417 	ldw	r2,-48(fp)
   22e2c:	10800044 	addi	r2,r2,1
   22e30:	e0bff415 	stw	r2,-48(fp)
   22e34:	e0bff417 	ldw	r2,-48(fp)
   22e38:	10800290 	cmplti	r2,r2,10
   22e3c:	103fce1e 	bne	r2,zero,22d78 <__alt_data_end+0xfffe3978>
        bit_data = ((alt_16)response[i*2+1] << 8) | response[i*2];
        data = (float)bit_data;
        magnetometer_data[i-7] = data * magnetometer_ASA[i-7];
    }
}
   22e40:	0001883a 	nop
   22e44:	e6fffd04 	addi	sp,fp,-12
   22e48:	dfc00417 	ldw	ra,16(sp)
   22e4c:	df000317 	ldw	fp,12(sp)
   22e50:	dc800217 	ldw	r18,8(sp)
   22e54:	dc400117 	ldw	r17,4(sp)
   22e58:	dc000017 	ldw	r16,0(sp)
   22e5c:	dec00504 	addi	sp,sp,20
   22e60:	f800283a 	ret

00022e64 <getMotion9>:
usage: call this functions to read and get values
returns accel, gyro and mag values
-----------------------------------------------------------------------------------------------*/

void getMotion9(float *ax, float *ay, float *az, float *gx, float *gy, float *gz, float *mx, float *my, float *mz)
{
   22e64:	defffa04 	addi	sp,sp,-24
   22e68:	dfc00515 	stw	ra,20(sp)
   22e6c:	df000415 	stw	fp,16(sp)
   22e70:	df000404 	addi	fp,sp,16
   22e74:	e13ffc15 	stw	r4,-16(fp)
   22e78:	e17ffd15 	stw	r5,-12(fp)
   22e7c:	e1bffe15 	stw	r6,-8(fp)
   22e80:	e1ffff15 	stw	r7,-4(fp)
    read_all();
   22e84:	00229f40 	call	229f4 <read_all>
    *ax = accelerometer_data[0];
   22e88:	00800134 	movhi	r2,4
   22e8c:	10a08204 	addi	r2,r2,-32248
   22e90:	10c00017 	ldw	r3,0(r2)
   22e94:	e0bffc17 	ldw	r2,-16(fp)
   22e98:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
   22e9c:	00800134 	movhi	r2,4
   22ea0:	10a08204 	addi	r2,r2,-32248
   22ea4:	10c00117 	ldw	r3,4(r2)
   22ea8:	e0bffd17 	ldw	r2,-12(fp)
   22eac:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
   22eb0:	00800134 	movhi	r2,4
   22eb4:	10a08204 	addi	r2,r2,-32248
   22eb8:	10c00217 	ldw	r3,8(r2)
   22ebc:	e0bffe17 	ldw	r2,-8(fp)
   22ec0:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
   22ec4:	00800134 	movhi	r2,4
   22ec8:	10a08804 	addi	r2,r2,-32224
   22ecc:	10c00017 	ldw	r3,0(r2)
   22ed0:	e0bfff17 	ldw	r2,-4(fp)
   22ed4:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
   22ed8:	00800134 	movhi	r2,4
   22edc:	10a08804 	addi	r2,r2,-32224
   22ee0:	10c00117 	ldw	r3,4(r2)
   22ee4:	e0800217 	ldw	r2,8(fp)
   22ee8:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
   22eec:	00800134 	movhi	r2,4
   22ef0:	10a08804 	addi	r2,r2,-32224
   22ef4:	10c00217 	ldw	r3,8(r2)
   22ef8:	e0800317 	ldw	r2,12(fp)
   22efc:	10c00015 	stw	r3,0(r2)
    *mx = magnetometer_data[0];
   22f00:	00800134 	movhi	r2,4
   22f04:	10a08e04 	addi	r2,r2,-32200
   22f08:	10c00017 	ldw	r3,0(r2)
   22f0c:	e0800417 	ldw	r2,16(fp)
   22f10:	10c00015 	stw	r3,0(r2)
    *my = magnetometer_data[1];
   22f14:	00800134 	movhi	r2,4
   22f18:	10a08e04 	addi	r2,r2,-32200
   22f1c:	10c00117 	ldw	r3,4(r2)
   22f20:	e0800517 	ldw	r2,20(fp)
   22f24:	10c00015 	stw	r3,0(r2)
    *mz = magnetometer_data[2];
   22f28:	00800134 	movhi	r2,4
   22f2c:	10a08e04 	addi	r2,r2,-32200
   22f30:	10c00217 	ldw	r3,8(r2)
   22f34:	e0800617 	ldw	r2,24(fp)
   22f38:	10c00015 	stw	r3,0(r2)
}
   22f3c:	0001883a 	nop
   22f40:	e037883a 	mov	sp,fp
   22f44:	dfc00117 	ldw	ra,4(sp)
   22f48:	df000017 	ldw	fp,0(sp)
   22f4c:	dec00204 	addi	sp,sp,8
   22f50:	f800283a 	ret

00022f54 <getMotion6>:

//-----------------------------------------------------------------------------------------------

void getMotion6(float *ax, float *ay, float *az, float *gx, float *gy, float *gz)
{
   22f54:	defffa04 	addi	sp,sp,-24
   22f58:	dfc00515 	stw	ra,20(sp)
   22f5c:	df000415 	stw	fp,16(sp)
   22f60:	df000404 	addi	fp,sp,16
   22f64:	e13ffc15 	stw	r4,-16(fp)
   22f68:	e17ffd15 	stw	r5,-12(fp)
   22f6c:	e1bffe15 	stw	r6,-8(fp)
   22f70:	e1ffff15 	stw	r7,-4(fp)
    read_acc();
   22f74:	00225200 	call	22520 <read_acc>
    read_gyro();
   22f78:	00226880 	call	22688 <read_gyro>
    *ax = accelerometer_data[0];
   22f7c:	00800134 	movhi	r2,4
   22f80:	10a08204 	addi	r2,r2,-32248
   22f84:	10c00017 	ldw	r3,0(r2)
   22f88:	e0bffc17 	ldw	r2,-16(fp)
   22f8c:	10c00015 	stw	r3,0(r2)
    *ay = accelerometer_data[1];
   22f90:	00800134 	movhi	r2,4
   22f94:	10a08204 	addi	r2,r2,-32248
   22f98:	10c00117 	ldw	r3,4(r2)
   22f9c:	e0bffd17 	ldw	r2,-12(fp)
   22fa0:	10c00015 	stw	r3,0(r2)
    *az = accelerometer_data[2];
   22fa4:	00800134 	movhi	r2,4
   22fa8:	10a08204 	addi	r2,r2,-32248
   22fac:	10c00217 	ldw	r3,8(r2)
   22fb0:	e0bffe17 	ldw	r2,-8(fp)
   22fb4:	10c00015 	stw	r3,0(r2)
    *gx = gyroscope_data[0];
   22fb8:	00800134 	movhi	r2,4
   22fbc:	10a08804 	addi	r2,r2,-32224
   22fc0:	10c00017 	ldw	r3,0(r2)
   22fc4:	e0bfff17 	ldw	r2,-4(fp)
   22fc8:	10c00015 	stw	r3,0(r2)
    *gy = gyroscope_data[1];
   22fcc:	00800134 	movhi	r2,4
   22fd0:	10a08804 	addi	r2,r2,-32224
   22fd4:	10c00117 	ldw	r3,4(r2)
   22fd8:	e0800217 	ldw	r2,8(fp)
   22fdc:	10c00015 	stw	r3,0(r2)
    *gz = gyroscope_data[2];
   22fe0:	00800134 	movhi	r2,4
   22fe4:	10a08804 	addi	r2,r2,-32224
   22fe8:	10c00217 	ldw	r3,8(r2)
   22fec:	e0800317 	ldw	r2,12(fp)
   22ff0:	10c00015 	stw	r3,0(r2)
}
   22ff4:	0001883a 	nop
   22ff8:	e037883a 	mov	sp,fp
   22ffc:	dfc00117 	ldw	ra,4(sp)
   23000:	df000017 	ldw	fp,0(sp)
   23004:	dec00204 	addi	sp,sp,8
   23008:	f800283a 	ret

0002300c <RH_Temp_Init>:

bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16);
bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16);

void RH_Temp_Init(alt_u32 I2C_Controller_Base)
{
   2300c:	defffa04 	addi	sp,sp,-24
   23010:	dfc00515 	stw	ra,20(sp)
   23014:	df000415 	stw	fp,16(sp)
   23018:	df000404 	addi	fp,sp,16
   2301c:	e13fff15 	stw	r4,-4(fp)
	const int ref_clk = 50*1000*1000; // 50Mhz
   23020:	0080bef4 	movhi	r2,763
   23024:	10bc2004 	addi	r2,r2,-3968
   23028:	e0bffc15 	stw	r2,-16(fp)
	const int i2c_clk = 400*1000; // 400KHz
   2302c:	008001b4 	movhi	r2,6
   23030:	1086a004 	addi	r2,r2,6784
   23034:	e0bffd15 	stw	r2,-12(fp)
//	MPU9250_I2C_Controller_Base = I2C_Controller_Base;
	oc_i2c_init_ex(I2C_Controller_Base, ref_clk, i2c_clk);
   23038:	e0bfff17 	ldw	r2,-4(fp)
   2303c:	e1bffd17 	ldw	r6,-12(fp)
   23040:	e17ffc17 	ldw	r5,-16(fp)
   23044:	1009883a 	mov	r4,r2
   23048:	00203980 	call	20398 <oc_i2c_init_ex>

    // reset
	bool bPass;
    bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE);
   2304c:	01000134 	movhi	r4,4
   23050:	21040004 	addi	r4,r4,4096
   23054:	00235ec0 	call	235ec <th_reset>
   23058:	e0bffe05 	stb	r2,-8(fp)
    if (!bPass){
   2305c:	e0bffe03 	ldbu	r2,-8(fp)
   23060:	1080005c 	xori	r2,r2,1
   23064:	10803fcc 	andi	r2,r2,255
   23068:	10000b26 	beq	r2,zero,23098 <RH_Temp_Init+0x8c>
    	bPass = th_reset(RH_TEMP_I2C_OPENCORES_BASE); // try again
   2306c:	01000134 	movhi	r4,4
   23070:	21040004 	addi	r4,r4,4096
   23074:	00235ec0 	call	235ec <th_reset>
   23078:	e0bffe05 	stb	r2,-8(fp)
    	if (!bPass){
   2307c:	e0bffe03 	ldbu	r2,-8(fp)
   23080:	1080005c 	xori	r2,r2,1
   23084:	10803fcc 	andi	r2,r2,255
   23088:	10000326 	beq	r2,zero,23098 <RH_Temp_Init+0x8c>
    		printf("Failed to reset!\r\n");
   2308c:	010000f4 	movhi	r4,3
   23090:	21117c04 	addi	r4,r4,17904
   23094:	00273c80 	call	273c8 <puts>
    }

    //th_dump_chip_info(RH_TEMP_I2C_OPENCORES_BASE);


}
   23098:	0001883a 	nop
   2309c:	e037883a 	mov	sp,fp
   230a0:	dfc00117 	ldw	ra,4(sp)
   230a4:	df000017 	ldw	fp,0(sp)
   230a8:	dec00204 	addi	sp,sp,8
   230ac:	f800283a 	ret

000230b0 <RH_Temp_Read_Device_ID>:

bool RH_Temp_Read_Device_ID(alt_u16 *pID16){
   230b0:	defffb04 	addi	sp,sp,-20
   230b4:	dfc00415 	stw	ra,16(sp)
   230b8:	df000315 	stw	fp,12(sp)
   230bc:	df000304 	addi	fp,sp,12
   230c0:	e13fff15 	stw	r4,-4(fp)
	bool bPass;
	alt_u8 szData8[2];

	bPass =  OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, R_DEVICE_ID, szData8, sizeof(szData8));
   230c4:	e0fffe44 	addi	r3,fp,-7
   230c8:	00800084 	movi	r2,2
   230cc:	d8800015 	stw	r2,0(sp)
   230d0:	180f883a 	mov	r7,r3
   230d4:	01803fc4 	movi	r6,255
   230d8:	01402004 	movi	r5,128
   230dc:	01000134 	movhi	r4,4
   230e0:	21040004 	addi	r4,r4,4096
   230e4:	002091c0 	call	2091c <OC_I2C_Read>
   230e8:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   230ec:	e0bffe03 	ldbu	r2,-8(fp)
   230f0:	10001126 	beq	r2,zero,23138 <RH_Temp_Read_Device_ID+0x88>
		*pID16 = (szData8[0] << 8) | szData8[1];
   230f4:	e0bffe43 	ldbu	r2,-7(fp)
   230f8:	10803fcc 	andi	r2,r2,255
   230fc:	1004923a 	slli	r2,r2,8
   23100:	1007883a 	mov	r3,r2
   23104:	e0bffe83 	ldbu	r2,-6(fp)
   23108:	10803fcc 	andi	r2,r2,255
   2310c:	1884b03a 	or	r2,r3,r2
   23110:	1007883a 	mov	r3,r2
   23114:	e0bfff17 	ldw	r2,-4(fp)
   23118:	10c0000d 	sth	r3,0(r2)
		printf("Device ID=%04xh\r\n", *pID16);
   2311c:	e0bfff17 	ldw	r2,-4(fp)
   23120:	1080000b 	ldhu	r2,0(r2)
   23124:	10bfffcc 	andi	r2,r2,65535
   23128:	100b883a 	mov	r5,r2
   2312c:	010000f4 	movhi	r4,3
   23130:	21118104 	addi	r4,r4,17924
   23134:	00272cc0 	call	272cc <printf>
	}
	return bPass;
   23138:	e0bffe03 	ldbu	r2,-8(fp)


}
   2313c:	e037883a 	mov	sp,fp
   23140:	dfc00117 	ldw	ra,4(sp)
   23144:	df000017 	ldw	fp,0(sp)
   23148:	dec00204 	addi	sp,sp,8
   2314c:	f800283a 	ret

00023150 <RH_Temp_Sensor_Init>:


bool RH_Temp_Sensor_Init()
{
   23150:	defffd04 	addi	sp,sp,-12
   23154:	dfc00215 	stw	ra,8(sp)
   23158:	df000115 	stw	fp,4(sp)
   2315c:	df000104 	addi	fp,sp,4


    //Temperature and Humidity are acquired in sequence, Temperature first.
    //Temperature Measurement Resolution: 14 bits
    //Humidity Measurement Resolution: 14 bits
	bPass =  Write_Configuration(1,0,0);
   23160:	000d883a 	mov	r6,zero
   23164:	000b883a 	mov	r5,zero
   23168:	01000044 	movi	r4,1
   2316c:	00234180 	call	23418 <Write_Configuration>
   23170:	e0bfff05 	stb	r2,-4(fp)
//    else
//    {
//    	printf("RH_Temp Sensor Set Configuration Failed!\r\n");
//    }

    return bPass;
   23174:	e0bfff03 	ldbu	r2,-4(fp)

}
   23178:	e037883a 	mov	sp,fp
   2317c:	dfc00117 	ldw	ra,4(sp)
   23180:	df000017 	ldw	fp,0(sp)
   23184:	dec00204 	addi	sp,sp,8
   23188:	f800283a 	ret

0002318c <RH_Temp_Sensor_Read>:

bool RH_Temp_Sensor_Read(float *fTemperature, float *fHumidity){
   2318c:	defffa04 	addi	sp,sp,-24
   23190:	dfc00515 	stw	ra,20(sp)
   23194:	df000415 	stw	fp,16(sp)
   23198:	df000404 	addi	fp,sp,16
   2319c:	e13ffe15 	stw	r4,-8(fp)
   231a0:	e17fff15 	stw	r5,-4(fp)
	bool bPass;
	alt_u8 szValue8[4];
	alt_u16 Value16;
	//int i;

	bPass =  th_Read_Measure_Data(R_TEMPERATURE, szValue8, sizeof(szValue8));
   231a4:	e0bffd04 	addi	r2,fp,-12
   231a8:	01800104 	movi	r6,4
   231ac:	100b883a 	mov	r5,r2
   231b0:	0009883a 	mov	r4,zero
   231b4:	00234b00 	call	234b0 <th_Read_Measure_Data>
   231b8:	e0bffc05 	stb	r2,-16(fp)
	if (bPass){
   231bc:	e0bffc03 	ldbu	r2,-16(fp)
   231c0:	10004226 	beq	r2,zero,232cc <RH_Temp_Sensor_Read+0x140>
		//for(i=0;i<4;i++)
		//	printf("%02XH ", szValue8[i]);

		// temperature
		Value16 = (szValue8[0] << 8) | szValue8[1];
   231c4:	e0bffd03 	ldbu	r2,-12(fp)
   231c8:	10803fcc 	andi	r2,r2,255
   231cc:	1004923a 	slli	r2,r2,8
   231d0:	1007883a 	mov	r3,r2
   231d4:	e0bffd43 	ldbu	r2,-11(fp)
   231d8:	10803fcc 	andi	r2,r2,255
   231dc:	1884b03a 	or	r2,r3,r2
   231e0:	e0bffc8d 	sth	r2,-14(fp)
		*fTemperature = (float)Value16/397.188 -40.0;
   231e4:	e0bffc8b 	ldhu	r2,-14(fp)
   231e8:	1009883a 	mov	r4,r2
   231ec:	0024ce80 	call	24ce8 <__floatunsisf>
   231f0:	1007883a 	mov	r3,r2
   231f4:	1809883a 	mov	r4,r3
   231f8:	0026f800 	call	26f80 <__extendsfdf2>
   231fc:	1011883a 	mov	r8,r2
   23200:	1813883a 	mov	r9,r3
   23204:	018312b4 	movhi	r6,3146
   23208:	31ae9784 	addi	r6,r6,-17826
   2320c:	01d01e74 	movhi	r7,16505
   23210:	39f4c084 	addi	r7,r7,-11518
   23214:	4009883a 	mov	r4,r8
   23218:	480b883a 	mov	r5,r9
   2321c:	00256840 	call	25684 <__divdf3>
   23220:	1009883a 	mov	r4,r2
   23224:	180b883a 	mov	r5,r3
   23228:	2005883a 	mov	r2,r4
   2322c:	2807883a 	mov	r3,r5
   23230:	000d883a 	mov	r6,zero
   23234:	01d01134 	movhi	r7,16452
   23238:	1009883a 	mov	r4,r2
   2323c:	180b883a 	mov	r5,r3
   23240:	00266840 	call	26684 <__subdf3>
   23244:	1009883a 	mov	r4,r2
   23248:	180b883a 	mov	r5,r3
   2324c:	2005883a 	mov	r2,r4
   23250:	2807883a 	mov	r3,r5
   23254:	1009883a 	mov	r4,r2
   23258:	180b883a 	mov	r5,r3
   2325c:	00270900 	call	27090 <__truncdfsf2>
   23260:	1007883a 	mov	r3,r2
   23264:	e0bffe17 	ldw	r2,-8(fp)
   23268:	10c00015 	stw	r3,0(r2)

		// humidity
		Value16 = (szValue8[2] << 8) | szValue8[3];
   2326c:	e0bffd83 	ldbu	r2,-10(fp)
   23270:	10803fcc 	andi	r2,r2,255
   23274:	1004923a 	slli	r2,r2,8
   23278:	1007883a 	mov	r3,r2
   2327c:	e0bffdc3 	ldbu	r2,-9(fp)
   23280:	10803fcc 	andi	r2,r2,255
   23284:	1884b03a 	or	r2,r3,r2
   23288:	e0bffc8d 	sth	r2,-14(fp)
		*fHumidity = (float)((float)Value16/65536)*100;
   2328c:	e0bffc8b 	ldhu	r2,-14(fp)
   23290:	1009883a 	mov	r4,r2
   23294:	0024ce80 	call	24ce8 <__floatunsisf>
   23298:	1007883a 	mov	r3,r2
   2329c:	0151e034 	movhi	r5,18304
   232a0:	1809883a 	mov	r4,r3
   232a4:	0023ea40 	call	23ea4 <__divsf3>
   232a8:	1007883a 	mov	r3,r2
   232ac:	1805883a 	mov	r2,r3
   232b0:	0150b234 	movhi	r5,17096
   232b4:	1009883a 	mov	r4,r2
   232b8:	00242e40 	call	242e4 <__mulsf3>
   232bc:	1009883a 	mov	r4,r2
   232c0:	2007883a 	mov	r3,r4
   232c4:	e0bfff17 	ldw	r2,-4(fp)
   232c8:	10c00015 	stw	r3,0(r2)
	}

	return bPass;
   232cc:	e0bffc03 	ldbu	r2,-16(fp)

}
   232d0:	e037883a 	mov	sp,fp
   232d4:	dfc00117 	ldw	ra,4(sp)
   232d8:	df000017 	ldw	fp,0(sp)
   232dc:	dec00204 	addi	sp,sp,8
   232e0:	f800283a 	ret

000232e4 <Read_Configuration>:



bool Read_Configuration(void)
{
   232e4:	defffd04 	addi	sp,sp,-12
   232e8:	dfc00215 	stw	ra,8(sp)
   232ec:	df000115 	stw	fp,4(sp)
   232f0:	df000104 	addi	fp,sp,4
	bool bPass;
	alt_u16 data;

	bPass = th_read_register(R_CONFIGURATION, &data);
   232f4:	e0bfff84 	addi	r2,fp,-2
   232f8:	100b883a 	mov	r5,r2
   232fc:	01000084 	movi	r4,2
   23300:	00237980 	call	23798 <th_read_register>
   23304:	e0bfff05 	stb	r2,-4(fp)


	if(bPass){
   23308:	e0bfff03 	ldbu	r2,-4(fp)
   2330c:	10003926 	beq	r2,zero,233f4 <Read_Configuration+0x110>

		printf("Read Configuration Data = 0x%04X \r\n",data);
   23310:	e0bfff8b 	ldhu	r2,-2(fp)
   23314:	10bfffcc 	andi	r2,r2,65535
   23318:	100b883a 	mov	r5,r2
   2331c:	010000f4 	movhi	r4,3
   23320:	21118604 	addi	r4,r4,17944
   23324:	00272cc0 	call	272cc <printf>

		if(((data>>12)&0x0001) == 0) printf("Acquisition mode:Temperature or Humidity is acquired.\r\n ");
   23328:	e0bfff8b 	ldhu	r2,-2(fp)
   2332c:	10bfffcc 	andi	r2,r2,65535
   23330:	1004d33a 	srli	r2,r2,12
   23334:	10bfffcc 	andi	r2,r2,65535
   23338:	1080004c 	andi	r2,r2,1
   2333c:	1000041e 	bne	r2,zero,23350 <Read_Configuration+0x6c>
   23340:	010000f4 	movhi	r4,3
   23344:	21118f04 	addi	r4,r4,17980
   23348:	00272cc0 	call	272cc <printf>
   2334c:	00000306 	br	2335c <Read_Configuration+0x78>
		else printf("Acquisition mode:Temperature and Humidity are acquired in sequence,Temperature first.\r\n ");
   23350:	010000f4 	movhi	r4,3
   23354:	21119e04 	addi	r4,r4,18040
   23358:	00272cc0 	call	272cc <printf>

		if(((data>>10)&0x0001) == 0) printf("Temperature Measurement Resolution: 14 bit.\r\n ");
   2335c:	e0bfff8b 	ldhu	r2,-2(fp)
   23360:	10bfffcc 	andi	r2,r2,65535
   23364:	1004d2ba 	srli	r2,r2,10
   23368:	10bfffcc 	andi	r2,r2,65535
   2336c:	1080004c 	andi	r2,r2,1
   23370:	1000041e 	bne	r2,zero,23384 <Read_Configuration+0xa0>
   23374:	010000f4 	movhi	r4,3
   23378:	2111b504 	addi	r4,r4,18132
   2337c:	00272cc0 	call	272cc <printf>
   23380:	00000306 	br	23390 <Read_Configuration+0xac>
		else  printf("Temperature Measurement Resolution: 11 bit.\r\n ");
   23384:	010000f4 	movhi	r4,3
   23388:	2111c104 	addi	r4,r4,18180
   2338c:	00272cc0 	call	272cc <printf>

		if(((data>> 8)&0x0003) == 0) printf("Humidity Measurement Resolution: 14 bit.\r\n ");
   23390:	e0bfff8b 	ldhu	r2,-2(fp)
   23394:	10bfffcc 	andi	r2,r2,65535
   23398:	1004d23a 	srli	r2,r2,8
   2339c:	10bfffcc 	andi	r2,r2,65535
   233a0:	108000cc 	andi	r2,r2,3
   233a4:	1000041e 	bne	r2,zero,233b8 <Read_Configuration+0xd4>
   233a8:	010000f4 	movhi	r4,3
   233ac:	2111cd04 	addi	r4,r4,18228
   233b0:	00272cc0 	call	272cc <printf>
   233b4:	00001206 	br	23400 <Read_Configuration+0x11c>
		else if(((data>> 8)&0x0003) == 1) printf("Humidity Measurement Resolution: 11 bit.\r\n ");
   233b8:	e0bfff8b 	ldhu	r2,-2(fp)
   233bc:	10bfffcc 	andi	r2,r2,65535
   233c0:	1004d23a 	srli	r2,r2,8
   233c4:	10bfffcc 	andi	r2,r2,65535
   233c8:	108000cc 	andi	r2,r2,3
   233cc:	10800058 	cmpnei	r2,r2,1
   233d0:	1000041e 	bne	r2,zero,233e4 <Read_Configuration+0x100>
   233d4:	010000f4 	movhi	r4,3
   233d8:	2111d804 	addi	r4,r4,18272
   233dc:	00272cc0 	call	272cc <printf>
   233e0:	00000706 	br	23400 <Read_Configuration+0x11c>
		else  printf("Humidity Measurement Resolution: 8 bit.\r\n ");
   233e4:	010000f4 	movhi	r4,3
   233e8:	2111e304 	addi	r4,r4,18316
   233ec:	00272cc0 	call	272cc <printf>
   233f0:	00000306 	br	23400 <Read_Configuration+0x11c>

	}else{
		printf("Failed to read configure data.\r\n");
   233f4:	010000f4 	movhi	r4,3
   233f8:	2111ee04 	addi	r4,r4,18360
   233fc:	00273c80 	call	273c8 <puts>
	}

	return bPass;
   23400:	e0bfff03 	ldbu	r2,-4(fp)
}
   23404:	e037883a 	mov	sp,fp
   23408:	dfc00117 	ldw	ra,4(sp)
   2340c:	df000017 	ldw	fp,0(sp)
   23410:	dec00204 	addi	sp,sp,8
   23414:	f800283a 	ret

00023418 <Write_Configuration>:



bool Write_Configuration(alt_u8 acquisition_mode , alt_u8 temp_resolution,alt_u8 humidity_resolution)
{
   23418:	defffa04 	addi	sp,sp,-24
   2341c:	dfc00515 	stw	ra,20(sp)
   23420:	df000415 	stw	fp,16(sp)
   23424:	df000404 	addi	fp,sp,16
   23428:	2807883a 	mov	r3,r5
   2342c:	3005883a 	mov	r2,r6
   23430:	e13ffd05 	stb	r4,-12(fp)
   23434:	e0fffe05 	stb	r3,-8(fp)
   23438:	e0bfff05 	stb	r2,-4(fp)
	bool bPass;
	alt_u16 Data16;


	Data16 = ((acquisition_mode&0x0001) <<12) + ((temp_resolution&0x0001)<<10) + ((humidity_resolution&0x0003)<<8);
   2343c:	e0bffd03 	ldbu	r2,-12(fp)
   23440:	1080004c 	andi	r2,r2,1
   23444:	1004933a 	slli	r2,r2,12
   23448:	1007883a 	mov	r3,r2
   2344c:	e0bffe03 	ldbu	r2,-8(fp)
   23450:	1080004c 	andi	r2,r2,1
   23454:	100492ba 	slli	r2,r2,10
   23458:	1885883a 	add	r2,r3,r2
   2345c:	1007883a 	mov	r3,r2
   23460:	e0bfff03 	ldbu	r2,-4(fp)
   23464:	108000cc 	andi	r2,r2,3
   23468:	1004923a 	slli	r2,r2,8
   2346c:	1885883a 	add	r2,r3,r2
   23470:	e0bffc0d 	sth	r2,-16(fp)

	//printf("Write Configure Register: %04xh\r\n", Data16);

	bPass = th_write_register(R_CONFIGURATION, Data16);
   23474:	e0bffc0b 	ldhu	r2,-16(fp)
   23478:	100b883a 	mov	r5,r2
   2347c:	01000084 	movi	r4,2
   23480:	00237200 	call	23720 <th_write_register>
   23484:	e0bffc85 	stb	r2,-14(fp)

	if (bPass)
   23488:	e0bffc83 	ldbu	r2,-14(fp)
   2348c:	10000226 	beq	r2,zero,23498 <Write_Configuration+0x80>
		usleep(20*1000); // wait ready
   23490:	01138804 	movi	r4,20000
   23494:	00321b00 	call	321b0 <usleep>

	return bPass;
   23498:	e0bffc83 	ldbu	r2,-14(fp)
}
   2349c:	e037883a 	mov	sp,fp
   234a0:	dfc00117 	ldw	ra,4(sp)
   234a4:	df000017 	ldw	fp,0(sp)
   234a8:	dec00204 	addi	sp,sp,8
   234ac:	f800283a 	ret

000234b0 <th_Read_Measure_Data>:


bool th_Read_Measure_Data(int nRegisterNo, alt_u8 *pData8, int nReadLength)
{
   234b0:	defff804 	addi	sp,sp,-32
   234b4:	dfc00715 	stw	ra,28(sp)
   234b8:	df000615 	stw	fp,24(sp)
   234bc:	dc000515 	stw	r16,20(sp)
   234c0:	df000604 	addi	fp,sp,24
   234c4:	e13ffc15 	stw	r4,-16(fp)
   234c8:	e17ffd15 	stw	r5,-12(fp)
   234cc:	e1bffe15 	stw	r6,-8(fp)
	bool bPass;
	const bool bSTOP = TRUE; // need stop so the ready pin can assert when measure is done
   234d0:	00800044 	movi	r2,1
   234d4:	e0bffa85 	stb	r2,-22(fp)

	// write address
	bPass = OC_I2C_Write_Addr(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR,nRegisterNo, bSTOP);
   234d8:	e0bffc17 	ldw	r2,-16(fp)
   234dc:	10803fcc 	andi	r2,r2,255
   234e0:	e0fffa83 	ldbu	r3,-22(fp)
   234e4:	180f883a 	mov	r7,r3
   234e8:	100d883a 	mov	r6,r2
   234ec:	01402004 	movi	r5,128
   234f0:	01000134 	movhi	r4,4
   234f4:	21040004 	addi	r4,r4,4096
   234f8:	0020b080 	call	20b08 <OC_I2C_Write_Addr>
   234fc:	e0bffa05 	stb	r2,-24(fp)

	// check hardware pin DRDYn to make sure measure is done
	if (bPass){ // check ready hardware pin - DRDYn
   23500:	e0bffa03 	ldbu	r2,-24(fp)
   23504:	10002926 	beq	r2,zero,235ac <th_Read_Measure_Data+0xfc>
		//
		bool bTimeout = false;
   23508:	e03ffa45 	stb	zero,-23(fp)
		alt_u32 TimeStart;

		bPass = false;
   2350c:	e03ffa05 	stb	zero,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   23510:	d0a6db17 	ldw	r2,-25748(gp)
		TimeStart = alt_nticks();
   23514:	e0bffb15 	stw	r2,-20(fp)
		bTimeout = false;
   23518:	e03ffa45 	stb	zero,-23(fp)
		while(!bPass && !bTimeout){
   2351c:	00001206 	br	23568 <th_Read_Measure_Data+0xb8>
			if ((IORD(RH_TEMP_DRDY_N_BASE, 0x00) & 0x01) == 0x00)
   23520:	00800134 	movhi	r2,4
   23524:	10842004 	addi	r2,r2,4224
   23528:	10800037 	ldwio	r2,0(r2)
   2352c:	1080004c 	andi	r2,r2,1
   23530:	1000031e 	bne	r2,zero,23540 <th_Read_Measure_Data+0x90>
				bPass = TRUE;
   23534:	00800044 	movi	r2,1
   23538:	e0bffa05 	stb	r2,-24(fp)
   2353c:	00000a06 	br	23568 <th_Read_Measure_Data+0xb8>
   23540:	d0e6db17 	ldw	r3,-25748(gp)
			else if ((alt_nticks() - TimeStart) > alt_ticks_per_second()/10) // 0.1 second for timeout
   23544:	e0bffb17 	ldw	r2,-20(fp)
   23548:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2354c:	d0a6da17 	ldw	r2,-25752(gp)
   23550:	01400284 	movi	r5,10
   23554:	1009883a 	mov	r4,r2
   23558:	00239200 	call	23920 <__udivsi3>
   2355c:	1400022e 	bgeu	r2,r16,23568 <th_Read_Measure_Data+0xb8>
				bTimeout = TRUE;
   23560:	00800044 	movi	r2,1
   23564:	e0bffa45 	stb	r2,-23(fp)
		alt_u32 TimeStart;

		bPass = false;
		TimeStart = alt_nticks();
		bTimeout = false;
		while(!bPass && !bTimeout){
   23568:	e0bffa03 	ldbu	r2,-24(fp)
   2356c:	1080005c 	xori	r2,r2,1
   23570:	10803fcc 	andi	r2,r2,255
   23574:	10000426 	beq	r2,zero,23588 <th_Read_Measure_Data+0xd8>
   23578:	e0bffa43 	ldbu	r2,-23(fp)
   2357c:	1080005c 	xori	r2,r2,1
   23580:	10803fcc 	andi	r2,r2,255
   23584:	103fe61e 	bne	r2,zero,23520 <__alt_data_end+0xfffe4120>
			if ((IORD(RH_TEMP_DRDY_N_BASE, 0x00) & 0x01) == 0x00)
				bPass = TRUE;
			else if ((alt_nticks() - TimeStart) > alt_ticks_per_second()/10) // 0.1 second for timeout
				bTimeout = TRUE;
		}
		if (!bPass)
   23588:	e0bffa03 	ldbu	r2,-24(fp)
   2358c:	1080005c 	xori	r2,r2,1
   23590:	10803fcc 	andi	r2,r2,255
   23594:	10000326 	beq	r2,zero,235a4 <th_Read_Measure_Data+0xf4>
			printf("Warning: DRDYn pin not ready (high)!\r\n");
   23598:	010000f4 	movhi	r4,3
   2359c:	2111f604 	addi	r4,r4,18392
   235a0:	00273c80 	call	273c8 <puts>
		bPass = TRUE;
   235a4:	00800044 	movi	r2,1
   235a8:	e0bffa05 	stb	r2,-24(fp)
	}

	// read measured data
	if (bPass){
   235ac:	e0bffa03 	ldbu	r2,-24(fp)
   235b0:	10000726 	beq	r2,zero,235d0 <th_Read_Measure_Data+0x120>
		bPass =  OC_I2C_Read_Continue(RH_TEMP_I2C_OPENCORES_BASE,RH_Temp_DEVICE_ADDR, pData8, nReadLength);
   235b4:	e1fffe17 	ldw	r7,-8(fp)
   235b8:	e1bffd17 	ldw	r6,-12(fp)
   235bc:	01402004 	movi	r5,128
   235c0:	01000134 	movhi	r4,4
   235c4:	21040004 	addi	r4,r4,4096
   235c8:	0020c100 	call	20c10 <OC_I2C_Read_Continue>
   235cc:	e0bffa05 	stb	r2,-24(fp)

	}



	return bPass;
   235d0:	e0bffa03 	ldbu	r2,-24(fp)
}
   235d4:	e6ffff04 	addi	sp,fp,-4
   235d8:	dfc00217 	ldw	ra,8(sp)
   235dc:	df000117 	ldw	fp,4(sp)
   235e0:	dc000017 	ldw	r16,0(sp)
   235e4:	dec00304 	addi	sp,sp,12
   235e8:	f800283a 	ret

000235ec <th_reset>:


bool th_reset(alt_u32 I2C_Controller_Base){
   235ec:	defffc04 	addi	sp,sp,-16
   235f0:	dfc00315 	stw	ra,12(sp)
   235f4:	df000215 	stw	fp,8(sp)
   235f8:	df000204 	addi	fp,sp,8
   235fc:	e13fff15 	stw	r4,-4(fp)
	bool bPass;

	bPass = th_write_register(R_CONFIGURATION, 0x8000);
   23600:	01600014 	movui	r5,32768
   23604:	01000084 	movi	r4,2
   23608:	00237200 	call	23720 <th_write_register>
   2360c:	e0bffe05 	stb	r2,-8(fp)
	return bPass;
   23610:	e0bffe03 	ldbu	r2,-8(fp)
}
   23614:	e037883a 	mov	sp,fp
   23618:	dfc00117 	ldw	ra,4(sp)
   2361c:	df000017 	ldw	fp,0(sp)
   23620:	dec00204 	addi	sp,sp,8
   23624:	f800283a 	ret

00023628 <th_dump_chip_info>:


bool th_dump_chip_info(alt_u32 I2C_Controller_Base){
   23628:	defffc04 	addi	sp,sp,-16
   2362c:	dfc00315 	stw	ra,12(sp)
   23630:	df000215 	stw	fp,8(sp)
   23634:	df000204 	addi	fp,sp,8
   23638:	e13fff15 	stw	r4,-4(fp)
	alt_u16 Data16;
	bool bPass;

	// R_DEVICE_ID
	bPass = th_read_register(R_DEVICE_ID, &Data16);
   2363c:	e0bffe84 	addi	r2,fp,-6
   23640:	100b883a 	mov	r5,r2
   23644:	01003fc4 	movi	r4,255
   23648:	00237980 	call	23798 <th_read_register>
   2364c:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   23650:	e0bffe03 	ldbu	r2,-8(fp)
   23654:	10000726 	beq	r2,zero,23674 <th_dump_chip_info+0x4c>
		printf("DEVICE ID=%04xh(0x1000 expected)\r\n", Data16);
   23658:	e0bffe8b 	ldhu	r2,-6(fp)
   2365c:	10bfffcc 	andi	r2,r2,65535
   23660:	100b883a 	mov	r5,r2
   23664:	010000f4 	movhi	r4,3
   23668:	21120004 	addi	r4,r4,18432
   2366c:	00272cc0 	call	272cc <printf>
   23670:	00000306 	br	23680 <th_dump_chip_info+0x58>
	}else{
		printf("Failed to read DEVICE ID\r\n");
   23674:	010000f4 	movhi	r4,3
   23678:	21120904 	addi	r4,r4,18468
   2367c:	00273c80 	call	273c8 <puts>
	}

	// R_DEVICE_ID
	bPass = th_read_register(R_MANUFACTURER_ID, &Data16);
   23680:	e0bffe84 	addi	r2,fp,-6
   23684:	100b883a 	mov	r5,r2
   23688:	01003f84 	movi	r4,254
   2368c:	00237980 	call	23798 <th_read_register>
   23690:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   23694:	e0bffe03 	ldbu	r2,-8(fp)
   23698:	10000726 	beq	r2,zero,236b8 <th_dump_chip_info+0x90>
		printf("MANUFACTURER ID=%04xh(0x5449 expected)\r\n", Data16);
   2369c:	e0bffe8b 	ldhu	r2,-6(fp)
   236a0:	10bfffcc 	andi	r2,r2,65535
   236a4:	100b883a 	mov	r5,r2
   236a8:	010000f4 	movhi	r4,3
   236ac:	21121004 	addi	r4,r4,18496
   236b0:	00272cc0 	call	272cc <printf>
   236b4:	00000306 	br	236c4 <th_dump_chip_info+0x9c>
	}else{
		printf("Failed to read MANUFACTURER ID\r\n");
   236b8:	010000f4 	movhi	r4,3
   236bc:	21121b04 	addi	r4,r4,18540
   236c0:	00273c80 	call	273c8 <puts>
	}

	// configure Data
	bPass =  th_read_register(R_CONFIGURATION, &Data16);
   236c4:	e0bffe84 	addi	r2,fp,-6
   236c8:	100b883a 	mov	r5,r2
   236cc:	01000084 	movi	r4,2
   236d0:	00237980 	call	23798 <th_read_register>
   236d4:	e0bffe05 	stb	r2,-8(fp)
	if (bPass){
   236d8:	e0bffe03 	ldbu	r2,-8(fp)
   236dc:	10000726 	beq	r2,zero,236fc <th_dump_chip_info+0xd4>
		printf("Configure Data=%04xh\r\n", Data16);
   236e0:	e0bffe8b 	ldhu	r2,-6(fp)
   236e4:	10bfffcc 	andi	r2,r2,65535
   236e8:	100b883a 	mov	r5,r2
   236ec:	010000f4 	movhi	r4,3
   236f0:	21122304 	addi	r4,r4,18572
   236f4:	00272cc0 	call	272cc <printf>
   236f8:	00000306 	br	23708 <th_dump_chip_info+0xe0>
	}else{
		printf("Failed to read configure data\r\n");
   236fc:	010000f4 	movhi	r4,3
   23700:	21122904 	addi	r4,r4,18596
   23704:	00273c80 	call	273c8 <puts>
	}

	return bPass;
   23708:	e0bffe03 	ldbu	r2,-8(fp)
}
   2370c:	e037883a 	mov	sp,fp
   23710:	dfc00117 	ldw	ra,4(sp)
   23714:	df000017 	ldw	fp,0(sp)
   23718:	dec00204 	addi	sp,sp,8
   2371c:	f800283a 	ret

00023720 <th_write_register>:


bool th_write_register(alt_u8 RegisterPorinter, alt_u16 Data16){
   23720:	defffa04 	addi	sp,sp,-24
   23724:	dfc00515 	stw	ra,20(sp)
   23728:	df000415 	stw	fp,16(sp)
   2372c:	df000404 	addi	fp,sp,16
   23730:	2007883a 	mov	r3,r4
   23734:	2805883a 	mov	r2,r5
   23738:	e0fffe05 	stb	r3,-8(fp)
   2373c:	e0bfff0d 	sth	r2,-4(fp)
	bool bPass;
	alt_u8 szData8[2];

	szData8[0] = (Data16 >> 8) & 0xFF;
   23740:	e0bfff0b 	ldhu	r2,-4(fp)
   23744:	1004d23a 	srli	r2,r2,8
   23748:	e0bffd45 	stb	r2,-11(fp)
	szData8[1] = Data16 & 0xFF;
   2374c:	e0bfff0b 	ldhu	r2,-4(fp)
   23750:	e0bffd85 	stb	r2,-10(fp)
	bPass = OC_I2C_Write(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
   23754:	e0fffe03 	ldbu	r3,-8(fp)
   23758:	e13ffd44 	addi	r4,fp,-11
   2375c:	00800084 	movi	r2,2
   23760:	d8800015 	stw	r2,0(sp)
   23764:	200f883a 	mov	r7,r4
   23768:	180d883a 	mov	r6,r3
   2376c:	01402004 	movi	r5,128
   23770:	01000134 	movhi	r4,4
   23774:	21040004 	addi	r4,r4,4096
   23778:	002066c0 	call	2066c <OC_I2C_Write>
   2377c:	e0bffd05 	stb	r2,-12(fp)

	return bPass;
   23780:	e0bffd03 	ldbu	r2,-12(fp)

}
   23784:	e037883a 	mov	sp,fp
   23788:	dfc00117 	ldw	ra,4(sp)
   2378c:	df000017 	ldw	fp,0(sp)
   23790:	dec00204 	addi	sp,sp,8
   23794:	f800283a 	ret

00023798 <th_read_register>:


bool th_read_register(alt_u8 RegisterPorinter, alt_u16 *pData16){
   23798:	defffa04 	addi	sp,sp,-24
   2379c:	dfc00515 	stw	ra,20(sp)
   237a0:	df000415 	stw	fp,16(sp)
   237a4:	df000404 	addi	fp,sp,16
   237a8:	2005883a 	mov	r2,r4
   237ac:	e17fff15 	stw	r5,-4(fp)
   237b0:	e0bffe05 	stb	r2,-8(fp)
	bool bPass;
	alt_u8 szData8[2];

	bPass = OC_I2C_Read(RH_TEMP_I2C_OPENCORES_BASE, RH_Temp_DEVICE_ADDR, RegisterPorinter, szData8, sizeof(szData8));
   237b4:	e0fffe03 	ldbu	r3,-8(fp)
   237b8:	e13ffd44 	addi	r4,fp,-11
   237bc:	00800084 	movi	r2,2
   237c0:	d8800015 	stw	r2,0(sp)
   237c4:	200f883a 	mov	r7,r4
   237c8:	180d883a 	mov	r6,r3
   237cc:	01402004 	movi	r5,128
   237d0:	01000134 	movhi	r4,4
   237d4:	21040004 	addi	r4,r4,4096
   237d8:	002091c0 	call	2091c <OC_I2C_Read>
   237dc:	e0bffd05 	stb	r2,-12(fp)
	if (bPass){
   237e0:	e0bffd03 	ldbu	r2,-12(fp)
   237e4:	10000a26 	beq	r2,zero,23810 <th_read_register+0x78>
		*pData16 = (szData8[0] << 8) | szData8[1];
   237e8:	e0bffd43 	ldbu	r2,-11(fp)
   237ec:	10803fcc 	andi	r2,r2,255
   237f0:	1004923a 	slli	r2,r2,8
   237f4:	1007883a 	mov	r3,r2
   237f8:	e0bffd83 	ldbu	r2,-10(fp)
   237fc:	10803fcc 	andi	r2,r2,255
   23800:	1884b03a 	or	r2,r3,r2
   23804:	1007883a 	mov	r3,r2
   23808:	e0bfff17 	ldw	r2,-4(fp)
   2380c:	10c0000d 	sth	r3,0(r2)
	}

	return bPass;
   23810:	e0bffd03 	ldbu	r2,-12(fp)


}
   23814:	e037883a 	mov	sp,fp
   23818:	dfc00117 	ldw	ra,4(sp)
   2381c:	df000017 	ldw	fp,0(sp)
   23820:	dec00204 	addi	sp,sp,8
   23824:	f800283a 	ret

00023828 <__divsi3>:
   23828:	20001b16 	blt	r4,zero,23898 <__divsi3+0x70>
   2382c:	000f883a 	mov	r7,zero
   23830:	28001616 	blt	r5,zero,2388c <__divsi3+0x64>
   23834:	200d883a 	mov	r6,r4
   23838:	29001a2e 	bgeu	r5,r4,238a4 <__divsi3+0x7c>
   2383c:	00800804 	movi	r2,32
   23840:	00c00044 	movi	r3,1
   23844:	00000106 	br	2384c <__divsi3+0x24>
   23848:	10000d26 	beq	r2,zero,23880 <__divsi3+0x58>
   2384c:	294b883a 	add	r5,r5,r5
   23850:	10bfffc4 	addi	r2,r2,-1
   23854:	18c7883a 	add	r3,r3,r3
   23858:	293ffb36 	bltu	r5,r4,23848 <__alt_data_end+0xfffe4448>
   2385c:	0005883a 	mov	r2,zero
   23860:	18000726 	beq	r3,zero,23880 <__divsi3+0x58>
   23864:	0005883a 	mov	r2,zero
   23868:	31400236 	bltu	r6,r5,23874 <__divsi3+0x4c>
   2386c:	314dc83a 	sub	r6,r6,r5
   23870:	10c4b03a 	or	r2,r2,r3
   23874:	1806d07a 	srli	r3,r3,1
   23878:	280ad07a 	srli	r5,r5,1
   2387c:	183ffa1e 	bne	r3,zero,23868 <__alt_data_end+0xfffe4468>
   23880:	38000126 	beq	r7,zero,23888 <__divsi3+0x60>
   23884:	0085c83a 	sub	r2,zero,r2
   23888:	f800283a 	ret
   2388c:	014bc83a 	sub	r5,zero,r5
   23890:	39c0005c 	xori	r7,r7,1
   23894:	003fe706 	br	23834 <__alt_data_end+0xfffe4434>
   23898:	0109c83a 	sub	r4,zero,r4
   2389c:	01c00044 	movi	r7,1
   238a0:	003fe306 	br	23830 <__alt_data_end+0xfffe4430>
   238a4:	00c00044 	movi	r3,1
   238a8:	003fee06 	br	23864 <__alt_data_end+0xfffe4464>

000238ac <__modsi3>:
   238ac:	20001716 	blt	r4,zero,2390c <__modsi3+0x60>
   238b0:	000f883a 	mov	r7,zero
   238b4:	2005883a 	mov	r2,r4
   238b8:	28001216 	blt	r5,zero,23904 <__modsi3+0x58>
   238bc:	2900162e 	bgeu	r5,r4,23918 <__modsi3+0x6c>
   238c0:	01800804 	movi	r6,32
   238c4:	00c00044 	movi	r3,1
   238c8:	00000106 	br	238d0 <__modsi3+0x24>
   238cc:	30000a26 	beq	r6,zero,238f8 <__modsi3+0x4c>
   238d0:	294b883a 	add	r5,r5,r5
   238d4:	31bfffc4 	addi	r6,r6,-1
   238d8:	18c7883a 	add	r3,r3,r3
   238dc:	293ffb36 	bltu	r5,r4,238cc <__alt_data_end+0xfffe44cc>
   238e0:	18000526 	beq	r3,zero,238f8 <__modsi3+0x4c>
   238e4:	1806d07a 	srli	r3,r3,1
   238e8:	11400136 	bltu	r2,r5,238f0 <__modsi3+0x44>
   238ec:	1145c83a 	sub	r2,r2,r5
   238f0:	280ad07a 	srli	r5,r5,1
   238f4:	183ffb1e 	bne	r3,zero,238e4 <__alt_data_end+0xfffe44e4>
   238f8:	38000126 	beq	r7,zero,23900 <__modsi3+0x54>
   238fc:	0085c83a 	sub	r2,zero,r2
   23900:	f800283a 	ret
   23904:	014bc83a 	sub	r5,zero,r5
   23908:	003fec06 	br	238bc <__alt_data_end+0xfffe44bc>
   2390c:	0109c83a 	sub	r4,zero,r4
   23910:	01c00044 	movi	r7,1
   23914:	003fe706 	br	238b4 <__alt_data_end+0xfffe44b4>
   23918:	00c00044 	movi	r3,1
   2391c:	003ff106 	br	238e4 <__alt_data_end+0xfffe44e4>

00023920 <__udivsi3>:
   23920:	200d883a 	mov	r6,r4
   23924:	2900152e 	bgeu	r5,r4,2397c <__udivsi3+0x5c>
   23928:	28001416 	blt	r5,zero,2397c <__udivsi3+0x5c>
   2392c:	00800804 	movi	r2,32
   23930:	00c00044 	movi	r3,1
   23934:	00000206 	br	23940 <__udivsi3+0x20>
   23938:	10000e26 	beq	r2,zero,23974 <__udivsi3+0x54>
   2393c:	28000516 	blt	r5,zero,23954 <__udivsi3+0x34>
   23940:	294b883a 	add	r5,r5,r5
   23944:	10bfffc4 	addi	r2,r2,-1
   23948:	18c7883a 	add	r3,r3,r3
   2394c:	293ffa36 	bltu	r5,r4,23938 <__alt_data_end+0xfffe4538>
   23950:	18000826 	beq	r3,zero,23974 <__udivsi3+0x54>
   23954:	0005883a 	mov	r2,zero
   23958:	31400236 	bltu	r6,r5,23964 <__udivsi3+0x44>
   2395c:	314dc83a 	sub	r6,r6,r5
   23960:	10c4b03a 	or	r2,r2,r3
   23964:	1806d07a 	srli	r3,r3,1
   23968:	280ad07a 	srli	r5,r5,1
   2396c:	183ffa1e 	bne	r3,zero,23958 <__alt_data_end+0xfffe4558>
   23970:	f800283a 	ret
   23974:	0005883a 	mov	r2,zero
   23978:	f800283a 	ret
   2397c:	00c00044 	movi	r3,1
   23980:	003ff406 	br	23954 <__alt_data_end+0xfffe4554>

00023984 <__umodsi3>:
   23984:	2005883a 	mov	r2,r4
   23988:	2900122e 	bgeu	r5,r4,239d4 <__umodsi3+0x50>
   2398c:	28001116 	blt	r5,zero,239d4 <__umodsi3+0x50>
   23990:	01800804 	movi	r6,32
   23994:	00c00044 	movi	r3,1
   23998:	00000206 	br	239a4 <__umodsi3+0x20>
   2399c:	30000c26 	beq	r6,zero,239d0 <__umodsi3+0x4c>
   239a0:	28000516 	blt	r5,zero,239b8 <__umodsi3+0x34>
   239a4:	294b883a 	add	r5,r5,r5
   239a8:	31bfffc4 	addi	r6,r6,-1
   239ac:	18c7883a 	add	r3,r3,r3
   239b0:	293ffa36 	bltu	r5,r4,2399c <__alt_data_end+0xfffe459c>
   239b4:	18000626 	beq	r3,zero,239d0 <__umodsi3+0x4c>
   239b8:	1806d07a 	srli	r3,r3,1
   239bc:	11400136 	bltu	r2,r5,239c4 <__umodsi3+0x40>
   239c0:	1145c83a 	sub	r2,r2,r5
   239c4:	280ad07a 	srli	r5,r5,1
   239c8:	183ffb1e 	bne	r3,zero,239b8 <__alt_data_end+0xfffe45b8>
   239cc:	f800283a 	ret
   239d0:	f800283a 	ret
   239d4:	00c00044 	movi	r3,1
   239d8:	003ff706 	br	239b8 <__alt_data_end+0xfffe45b8>

000239dc <__addsf3>:
   239dc:	defffc04 	addi	sp,sp,-16
   239e0:	2004d7fa 	srli	r2,r4,31
   239e4:	280cd5fa 	srli	r6,r5,23
   239e8:	dc000015 	stw	r16,0(sp)
   239ec:	00c02034 	movhi	r3,128
   239f0:	2020d5fa 	srli	r16,r4,23
   239f4:	280ed7fa 	srli	r7,r5,31
   239f8:	18ffffc4 	addi	r3,r3,-1
   239fc:	dc400115 	stw	r17,4(sp)
   23a00:	1908703a 	and	r4,r3,r4
   23a04:	194a703a 	and	r5,r3,r5
   23a08:	dfc00315 	stw	ra,12(sp)
   23a0c:	dc800215 	stw	r18,8(sp)
   23a10:	14403fcc 	andi	r17,r2,255
   23a14:	84003fcc 	andi	r16,r16,255
   23a18:	200890fa 	slli	r4,r4,3
   23a1c:	31803fcc 	andi	r6,r6,255
   23a20:	280a90fa 	slli	r5,r5,3
   23a24:	89c05026 	beq	r17,r7,23b68 <__addsf3+0x18c>
   23a28:	8185c83a 	sub	r2,r16,r6
   23a2c:	00807a0e 	bge	zero,r2,23c18 <__addsf3+0x23c>
   23a30:	30001e1e 	bne	r6,zero,23aac <__addsf3+0xd0>
   23a34:	28006d1e 	bne	r5,zero,23bec <__addsf3+0x210>
   23a38:	208001cc 	andi	r2,r4,7
   23a3c:	10000426 	beq	r2,zero,23a50 <__addsf3+0x74>
   23a40:	208003cc 	andi	r2,r4,15
   23a44:	00c00104 	movi	r3,4
   23a48:	10c00126 	beq	r2,r3,23a50 <__addsf3+0x74>
   23a4c:	20c9883a 	add	r4,r4,r3
   23a50:	2081002c 	andhi	r2,r4,1024
   23a54:	10003926 	beq	r2,zero,23b3c <__addsf3+0x160>
   23a58:	84000044 	addi	r16,r16,1
   23a5c:	00803fc4 	movi	r2,255
   23a60:	80807826 	beq	r16,r2,23c44 <__addsf3+0x268>
   23a64:	200891ba 	slli	r4,r4,6
   23a68:	8805883a 	mov	r2,r17
   23a6c:	2008d27a 	srli	r4,r4,9
   23a70:	84003fcc 	andi	r16,r16,255
   23a74:	800695fa 	slli	r3,r16,23
   23a78:	10803fcc 	andi	r2,r2,255
   23a7c:	04002034 	movhi	r16,128
   23a80:	843fffc4 	addi	r16,r16,-1
   23a84:	100497fa 	slli	r2,r2,31
   23a88:	2408703a 	and	r4,r4,r16
   23a8c:	20e0b03a 	or	r16,r4,r3
   23a90:	8084b03a 	or	r2,r16,r2
   23a94:	dfc00317 	ldw	ra,12(sp)
   23a98:	dc800217 	ldw	r18,8(sp)
   23a9c:	dc400117 	ldw	r17,4(sp)
   23aa0:	dc000017 	ldw	r16,0(sp)
   23aa4:	dec00404 	addi	sp,sp,16
   23aa8:	f800283a 	ret
   23aac:	00c03fc4 	movi	r3,255
   23ab0:	80ffe126 	beq	r16,r3,23a38 <__alt_data_end+0xfffe4638>
   23ab4:	29410034 	orhi	r5,r5,1024
   23ab8:	00c006c4 	movi	r3,27
   23abc:	18807516 	blt	r3,r2,23c94 <__addsf3+0x2b8>
   23ac0:	00c00804 	movi	r3,32
   23ac4:	1887c83a 	sub	r3,r3,r2
   23ac8:	28c6983a 	sll	r3,r5,r3
   23acc:	288ad83a 	srl	r5,r5,r2
   23ad0:	1804c03a 	cmpne	r2,r3,zero
   23ad4:	288ab03a 	or	r5,r5,r2
   23ad8:	2149c83a 	sub	r4,r4,r5
   23adc:	2081002c 	andhi	r2,r4,1024
   23ae0:	10001426 	beq	r2,zero,23b34 <__addsf3+0x158>
   23ae4:	04810034 	movhi	r18,1024
   23ae8:	94bfffc4 	addi	r18,r18,-1
   23aec:	24a4703a 	and	r18,r4,r18
   23af0:	9009883a 	mov	r4,r18
   23af4:	00272380 	call	27238 <__clzsi2>
   23af8:	10bffec4 	addi	r2,r2,-5
   23afc:	90a4983a 	sll	r18,r18,r2
   23b00:	14005416 	blt	r2,r16,23c54 <__addsf3+0x278>
   23b04:	1405c83a 	sub	r2,r2,r16
   23b08:	11000044 	addi	r4,r2,1
   23b0c:	00800804 	movi	r2,32
   23b10:	1105c83a 	sub	r2,r2,r4
   23b14:	9084983a 	sll	r2,r18,r2
   23b18:	9124d83a 	srl	r18,r18,r4
   23b1c:	0021883a 	mov	r16,zero
   23b20:	1008c03a 	cmpne	r4,r2,zero
   23b24:	9108b03a 	or	r4,r18,r4
   23b28:	003fc306 	br	23a38 <__alt_data_end+0xfffe4638>
   23b2c:	1000db26 	beq	r2,zero,23e9c <__addsf3+0x4c0>
   23b30:	1009883a 	mov	r4,r2
   23b34:	208001cc 	andi	r2,r4,7
   23b38:	103fc11e 	bne	r2,zero,23a40 <__alt_data_end+0xfffe4640>
   23b3c:	2006d0fa 	srli	r3,r4,3
   23b40:	01003fc4 	movi	r4,255
   23b44:	8805883a 	mov	r2,r17
   23b48:	8100241e 	bne	r16,r4,23bdc <__addsf3+0x200>
   23b4c:	18006e26 	beq	r3,zero,23d08 <__addsf3+0x32c>
   23b50:	19001034 	orhi	r4,r3,64
   23b54:	00c02034 	movhi	r3,128
   23b58:	18ffffc4 	addi	r3,r3,-1
   23b5c:	043fffc4 	movi	r16,-1
   23b60:	20c8703a 	and	r4,r4,r3
   23b64:	003fc206 	br	23a70 <__alt_data_end+0xfffe4670>
   23b68:	8187c83a 	sub	r3,r16,r6
   23b6c:	00c03e0e 	bge	zero,r3,23c68 <__addsf3+0x28c>
   23b70:	30002326 	beq	r6,zero,23c00 <__addsf3+0x224>
   23b74:	01803fc4 	movi	r6,255
   23b78:	81bfaf26 	beq	r16,r6,23a38 <__alt_data_end+0xfffe4638>
   23b7c:	29410034 	orhi	r5,r5,1024
   23b80:	018006c4 	movi	r6,27
   23b84:	30c07416 	blt	r6,r3,23d58 <__addsf3+0x37c>
   23b88:	01800804 	movi	r6,32
   23b8c:	30cdc83a 	sub	r6,r6,r3
   23b90:	298c983a 	sll	r6,r5,r6
   23b94:	28cad83a 	srl	r5,r5,r3
   23b98:	3006c03a 	cmpne	r3,r6,zero
   23b9c:	28cab03a 	or	r5,r5,r3
   23ba0:	2149883a 	add	r4,r4,r5
   23ba4:	20c1002c 	andhi	r3,r4,1024
   23ba8:	183fe226 	beq	r3,zero,23b34 <__alt_data_end+0xfffe4734>
   23bac:	84000044 	addi	r16,r16,1
   23bb0:	00c03fc4 	movi	r3,255
   23bb4:	80c05426 	beq	r16,r3,23d08 <__addsf3+0x32c>
   23bb8:	00bf0034 	movhi	r2,64512
   23bbc:	10bfffc4 	addi	r2,r2,-1
   23bc0:	20c0004c 	andi	r3,r4,1
   23bc4:	2088703a 	and	r4,r4,r2
   23bc8:	2008d07a 	srli	r4,r4,1
   23bcc:	20c8b03a 	or	r4,r4,r3
   23bd0:	003f9906 	br	23a38 <__alt_data_end+0xfffe4638>
   23bd4:	0007883a 	mov	r3,zero
   23bd8:	0005883a 	mov	r2,zero
   23bdc:	01002034 	movhi	r4,128
   23be0:	213fffc4 	addi	r4,r4,-1
   23be4:	1908703a 	and	r4,r3,r4
   23be8:	003fa106 	br	23a70 <__alt_data_end+0xfffe4670>
   23bec:	10bfffc4 	addi	r2,r2,-1
   23bf0:	103fb926 	beq	r2,zero,23ad8 <__alt_data_end+0xfffe46d8>
   23bf4:	00c03fc4 	movi	r3,255
   23bf8:	80ffaf1e 	bne	r16,r3,23ab8 <__alt_data_end+0xfffe46b8>
   23bfc:	003f8e06 	br	23a38 <__alt_data_end+0xfffe4638>
   23c00:	283f8d26 	beq	r5,zero,23a38 <__alt_data_end+0xfffe4638>
   23c04:	18ffffc4 	addi	r3,r3,-1
   23c08:	183fe526 	beq	r3,zero,23ba0 <__alt_data_end+0xfffe47a0>
   23c0c:	01803fc4 	movi	r6,255
   23c10:	81bfdb1e 	bne	r16,r6,23b80 <__alt_data_end+0xfffe4780>
   23c14:	003f8806 	br	23a38 <__alt_data_end+0xfffe4638>
   23c18:	1000201e 	bne	r2,zero,23c9c <__addsf3+0x2c0>
   23c1c:	80800044 	addi	r2,r16,1
   23c20:	10803fcc 	andi	r2,r2,255
   23c24:	01800044 	movi	r6,1
   23c28:	3080450e 	bge	r6,r2,23d40 <__addsf3+0x364>
   23c2c:	2165c83a 	sub	r18,r4,r5
   23c30:	90c1002c 	andhi	r3,r18,1024
   23c34:	18002b26 	beq	r3,zero,23ce4 <__addsf3+0x308>
   23c38:	2925c83a 	sub	r18,r5,r4
   23c3c:	3823883a 	mov	r17,r7
   23c40:	003fab06 	br	23af0 <__alt_data_end+0xfffe46f0>
   23c44:	8805883a 	mov	r2,r17
   23c48:	043fffc4 	movi	r16,-1
   23c4c:	0009883a 	mov	r4,zero
   23c50:	003f8706 	br	23a70 <__alt_data_end+0xfffe4670>
   23c54:	013f0034 	movhi	r4,64512
   23c58:	213fffc4 	addi	r4,r4,-1
   23c5c:	80a1c83a 	sub	r16,r16,r2
   23c60:	9108703a 	and	r4,r18,r4
   23c64:	003f7406 	br	23a38 <__alt_data_end+0xfffe4638>
   23c68:	1800411e 	bne	r3,zero,23d70 <__addsf3+0x394>
   23c6c:	80c00044 	addi	r3,r16,1
   23c70:	19c03fcc 	andi	r7,r3,255
   23c74:	01800044 	movi	r6,1
   23c78:	31c0260e 	bge	r6,r7,23d14 <__addsf3+0x338>
   23c7c:	01803fc4 	movi	r6,255
   23c80:	19802126 	beq	r3,r6,23d08 <__addsf3+0x32c>
   23c84:	2149883a 	add	r4,r4,r5
   23c88:	2008d07a 	srli	r4,r4,1
   23c8c:	1821883a 	mov	r16,r3
   23c90:	003f6906 	br	23a38 <__alt_data_end+0xfffe4638>
   23c94:	01400044 	movi	r5,1
   23c98:	003f8f06 	br	23ad8 <__alt_data_end+0xfffe46d8>
   23c9c:	8000151e 	bne	r16,zero,23cf4 <__addsf3+0x318>
   23ca0:	20002f26 	beq	r4,zero,23d60 <__addsf3+0x384>
   23ca4:	0084303a 	nor	r2,zero,r2
   23ca8:	10000a26 	beq	r2,zero,23cd4 <__addsf3+0x2f8>
   23cac:	00c03fc4 	movi	r3,255
   23cb0:	30c02b26 	beq	r6,r3,23d60 <__addsf3+0x384>
   23cb4:	00c006c4 	movi	r3,27
   23cb8:	18806d16 	blt	r3,r2,23e70 <__addsf3+0x494>
   23cbc:	00c00804 	movi	r3,32
   23cc0:	1887c83a 	sub	r3,r3,r2
   23cc4:	20c6983a 	sll	r3,r4,r3
   23cc8:	2084d83a 	srl	r2,r4,r2
   23ccc:	1808c03a 	cmpne	r4,r3,zero
   23cd0:	1108b03a 	or	r4,r2,r4
   23cd4:	2909c83a 	sub	r4,r5,r4
   23cd8:	3021883a 	mov	r16,r6
   23cdc:	3823883a 	mov	r17,r7
   23ce0:	003f7e06 	br	23adc <__alt_data_end+0xfffe46dc>
   23ce4:	903f821e 	bne	r18,zero,23af0 <__alt_data_end+0xfffe46f0>
   23ce8:	0005883a 	mov	r2,zero
   23cec:	0021883a 	mov	r16,zero
   23cf0:	003fba06 	br	23bdc <__alt_data_end+0xfffe47dc>
   23cf4:	00c03fc4 	movi	r3,255
   23cf8:	30c01926 	beq	r6,r3,23d60 <__addsf3+0x384>
   23cfc:	0085c83a 	sub	r2,zero,r2
   23d00:	21010034 	orhi	r4,r4,1024
   23d04:	003feb06 	br	23cb4 <__alt_data_end+0xfffe48b4>
   23d08:	043fffc4 	movi	r16,-1
   23d0c:	0009883a 	mov	r4,zero
   23d10:	003f5706 	br	23a70 <__alt_data_end+0xfffe4670>
   23d14:	80004a1e 	bne	r16,zero,23e40 <__addsf3+0x464>
   23d18:	20005926 	beq	r4,zero,23e80 <__addsf3+0x4a4>
   23d1c:	283f4626 	beq	r5,zero,23a38 <__alt_data_end+0xfffe4638>
   23d20:	2149883a 	add	r4,r4,r5
   23d24:	2081002c 	andhi	r2,r4,1024
   23d28:	103f8226 	beq	r2,zero,23b34 <__alt_data_end+0xfffe4734>
   23d2c:	00bf0034 	movhi	r2,64512
   23d30:	10bfffc4 	addi	r2,r2,-1
   23d34:	3021883a 	mov	r16,r6
   23d38:	2088703a 	and	r4,r4,r2
   23d3c:	003f3e06 	br	23a38 <__alt_data_end+0xfffe4638>
   23d40:	8000121e 	bne	r16,zero,23d8c <__addsf3+0x3b0>
   23d44:	2000261e 	bne	r4,zero,23de0 <__addsf3+0x404>
   23d48:	283fa226 	beq	r5,zero,23bd4 <__alt_data_end+0xfffe47d4>
   23d4c:	2809883a 	mov	r4,r5
   23d50:	3823883a 	mov	r17,r7
   23d54:	003f3806 	br	23a38 <__alt_data_end+0xfffe4638>
   23d58:	01400044 	movi	r5,1
   23d5c:	003f9006 	br	23ba0 <__alt_data_end+0xfffe47a0>
   23d60:	2809883a 	mov	r4,r5
   23d64:	3021883a 	mov	r16,r6
   23d68:	3823883a 	mov	r17,r7
   23d6c:	003f3206 	br	23a38 <__alt_data_end+0xfffe4638>
   23d70:	80000c1e 	bne	r16,zero,23da4 <__addsf3+0x3c8>
   23d74:	20002f26 	beq	r4,zero,23e34 <__addsf3+0x458>
   23d78:	00c6303a 	nor	r3,zero,r3
   23d7c:	18002b1e 	bne	r3,zero,23e2c <__addsf3+0x450>
   23d80:	2149883a 	add	r4,r4,r5
   23d84:	3021883a 	mov	r16,r6
   23d88:	003f8606 	br	23ba4 <__alt_data_end+0xfffe47a4>
   23d8c:	20001b1e 	bne	r4,zero,23dfc <__addsf3+0x420>
   23d90:	28003926 	beq	r5,zero,23e78 <__addsf3+0x49c>
   23d94:	2809883a 	mov	r4,r5
   23d98:	3823883a 	mov	r17,r7
   23d9c:	04003fc4 	movi	r16,255
   23da0:	003f2506 	br	23a38 <__alt_data_end+0xfffe4638>
   23da4:	01c03fc4 	movi	r7,255
   23da8:	31c02226 	beq	r6,r7,23e34 <__addsf3+0x458>
   23dac:	00c7c83a 	sub	r3,zero,r3
   23db0:	21010034 	orhi	r4,r4,1024
   23db4:	01c006c4 	movi	r7,27
   23db8:	38c03616 	blt	r7,r3,23e94 <__addsf3+0x4b8>
   23dbc:	01c00804 	movi	r7,32
   23dc0:	38cfc83a 	sub	r7,r7,r3
   23dc4:	21ce983a 	sll	r7,r4,r7
   23dc8:	20c6d83a 	srl	r3,r4,r3
   23dcc:	3808c03a 	cmpne	r4,r7,zero
   23dd0:	1906b03a 	or	r3,r3,r4
   23dd4:	1949883a 	add	r4,r3,r5
   23dd8:	3021883a 	mov	r16,r6
   23ddc:	003f7106 	br	23ba4 <__alt_data_end+0xfffe47a4>
   23de0:	283f1526 	beq	r5,zero,23a38 <__alt_data_end+0xfffe4638>
   23de4:	2145c83a 	sub	r2,r4,r5
   23de8:	10c1002c 	andhi	r3,r2,1024
   23dec:	183f4f26 	beq	r3,zero,23b2c <__alt_data_end+0xfffe472c>
   23df0:	2909c83a 	sub	r4,r5,r4
   23df4:	3823883a 	mov	r17,r7
   23df8:	003f0f06 	br	23a38 <__alt_data_end+0xfffe4638>
   23dfc:	28001a26 	beq	r5,zero,23e68 <__addsf3+0x48c>
   23e00:	2008d0fa 	srli	r4,r4,3
   23e04:	2080102c 	andhi	r2,r4,64
   23e08:	10000526 	beq	r2,zero,23e20 <__addsf3+0x444>
   23e0c:	280ad0fa 	srli	r5,r5,3
   23e10:	2880102c 	andhi	r2,r5,64
   23e14:	1000021e 	bne	r2,zero,23e20 <__addsf3+0x444>
   23e18:	2809883a 	mov	r4,r5
   23e1c:	3823883a 	mov	r17,r7
   23e20:	200890fa 	slli	r4,r4,3
   23e24:	04003fc4 	movi	r16,255
   23e28:	003f0306 	br	23a38 <__alt_data_end+0xfffe4638>
   23e2c:	01c03fc4 	movi	r7,255
   23e30:	31ffe01e 	bne	r6,r7,23db4 <__alt_data_end+0xfffe49b4>
   23e34:	2809883a 	mov	r4,r5
   23e38:	3021883a 	mov	r16,r6
   23e3c:	003efe06 	br	23a38 <__alt_data_end+0xfffe4638>
   23e40:	20001126 	beq	r4,zero,23e88 <__addsf3+0x4ac>
   23e44:	28000826 	beq	r5,zero,23e68 <__addsf3+0x48c>
   23e48:	2008d0fa 	srli	r4,r4,3
   23e4c:	2080102c 	andhi	r2,r4,64
   23e50:	103ff326 	beq	r2,zero,23e20 <__alt_data_end+0xfffe4a20>
   23e54:	280ad0fa 	srli	r5,r5,3
   23e58:	2880102c 	andhi	r2,r5,64
   23e5c:	103ff01e 	bne	r2,zero,23e20 <__alt_data_end+0xfffe4a20>
   23e60:	2809883a 	mov	r4,r5
   23e64:	003fee06 	br	23e20 <__alt_data_end+0xfffe4a20>
   23e68:	04003fc4 	movi	r16,255
   23e6c:	003ef206 	br	23a38 <__alt_data_end+0xfffe4638>
   23e70:	01000044 	movi	r4,1
   23e74:	003f9706 	br	23cd4 <__alt_data_end+0xfffe48d4>
   23e78:	0005883a 	mov	r2,zero
   23e7c:	003f3406 	br	23b50 <__alt_data_end+0xfffe4750>
   23e80:	2809883a 	mov	r4,r5
   23e84:	003eec06 	br	23a38 <__alt_data_end+0xfffe4638>
   23e88:	2809883a 	mov	r4,r5
   23e8c:	04003fc4 	movi	r16,255
   23e90:	003ee906 	br	23a38 <__alt_data_end+0xfffe4638>
   23e94:	00c00044 	movi	r3,1
   23e98:	003fce06 	br	23dd4 <__alt_data_end+0xfffe49d4>
   23e9c:	0005883a 	mov	r2,zero
   23ea0:	003f4e06 	br	23bdc <__alt_data_end+0xfffe47dc>

00023ea4 <__divsf3>:
   23ea4:	defff504 	addi	sp,sp,-44
   23ea8:	200cd5fa 	srli	r6,r4,23
   23eac:	dcc00415 	stw	r19,16(sp)
   23eb0:	2026d7fa 	srli	r19,r4,31
   23eb4:	00c02034 	movhi	r3,128
   23eb8:	dd800715 	stw	r22,28(sp)
   23ebc:	dd000515 	stw	r20,20(sp)
   23ec0:	dc800315 	stw	r18,12(sp)
   23ec4:	18ffffc4 	addi	r3,r3,-1
   23ec8:	dfc00a15 	stw	ra,40(sp)
   23ecc:	df000915 	stw	fp,36(sp)
   23ed0:	ddc00815 	stw	r23,32(sp)
   23ed4:	dd400615 	stw	r21,24(sp)
   23ed8:	dc400215 	stw	r17,8(sp)
   23edc:	dc000115 	stw	r16,4(sp)
   23ee0:	35003fcc 	andi	r20,r6,255
   23ee4:	1924703a 	and	r18,r3,r4
   23ee8:	9d803fcc 	andi	r22,r19,255
   23eec:	a0005226 	beq	r20,zero,24038 <__divsf3+0x194>
   23ef0:	00803fc4 	movi	r2,255
   23ef4:	a0802e26 	beq	r20,r2,23fb0 <__divsf3+0x10c>
   23ef8:	91002034 	orhi	r4,r18,128
   23efc:	202490fa 	slli	r18,r4,3
   23f00:	a53fe044 	addi	r20,r20,-127
   23f04:	0021883a 	mov	r16,zero
   23f08:	002f883a 	mov	r23,zero
   23f0c:	280cd5fa 	srli	r6,r5,23
   23f10:	282ad7fa 	srli	r21,r5,31
   23f14:	00c02034 	movhi	r3,128
   23f18:	18ffffc4 	addi	r3,r3,-1
   23f1c:	31803fcc 	andi	r6,r6,255
   23f20:	1962703a 	and	r17,r3,r5
   23f24:	af003fcc 	andi	fp,r21,255
   23f28:	30004a26 	beq	r6,zero,24054 <__divsf3+0x1b0>
   23f2c:	00803fc4 	movi	r2,255
   23f30:	30804526 	beq	r6,r2,24048 <__divsf3+0x1a4>
   23f34:	89402034 	orhi	r5,r17,128
   23f38:	282290fa 	slli	r17,r5,3
   23f3c:	31bfe044 	addi	r6,r6,-127
   23f40:	000b883a 	mov	r5,zero
   23f44:	2c20b03a 	or	r16,r5,r16
   23f48:	802090ba 	slli	r16,r16,2
   23f4c:	008000b4 	movhi	r2,2
   23f50:	108fdc04 	addi	r2,r2,16240
   23f54:	80a1883a 	add	r16,r16,r2
   23f58:	81000017 	ldw	r4,0(r16)
   23f5c:	9d46f03a 	xor	r3,r19,r21
   23f60:	180f883a 	mov	r7,r3
   23f64:	18803fcc 	andi	r2,r3,255
   23f68:	a18dc83a 	sub	r6,r20,r6
   23f6c:	2000683a 	jmp	r4
   23f70:	00024154 	movui	zero,2309
   23f74:	00023fd8 	cmpnei	zero,zero,2303
   23f78:	00024148 	cmpgei	zero,zero,2309
   23f7c:	00023fc4 	movi	zero,2303
   23f80:	00024148 	cmpgei	zero,zero,2309
   23f84:	00024120 	cmpeqi	zero,zero,2308
   23f88:	00024148 	cmpgei	zero,zero,2309
   23f8c:	00023fc4 	movi	zero,2303
   23f90:	00023fd8 	cmpnei	zero,zero,2303
   23f94:	00023fd8 	cmpnei	zero,zero,2303
   23f98:	00024120 	cmpeqi	zero,zero,2308
   23f9c:	00023fc4 	movi	zero,2303
   23fa0:	00024234 	movhi	zero,2312
   23fa4:	00024234 	movhi	zero,2312
   23fa8:	00024234 	movhi	zero,2312
   23fac:	000241e8 	cmpgeui	zero,zero,2311
   23fb0:	9000581e 	bne	r18,zero,24114 <__divsf3+0x270>
   23fb4:	04000204 	movi	r16,8
   23fb8:	05c00084 	movi	r23,2
   23fbc:	003fd306 	br	23f0c <__alt_data_end+0xfffe4b0c>
   23fc0:	0023883a 	mov	r17,zero
   23fc4:	e02d883a 	mov	r22,fp
   23fc8:	282f883a 	mov	r23,r5
   23fcc:	00800084 	movi	r2,2
   23fd0:	b8808f1e 	bne	r23,r2,24210 <__divsf3+0x36c>
   23fd4:	b005883a 	mov	r2,r22
   23fd8:	11c0004c 	andi	r7,r2,1
   23fdc:	013fffc4 	movi	r4,-1
   23fe0:	000d883a 	mov	r6,zero
   23fe4:	21003fcc 	andi	r4,r4,255
   23fe8:	200895fa 	slli	r4,r4,23
   23fec:	38803fcc 	andi	r2,r7,255
   23ff0:	00c02034 	movhi	r3,128
   23ff4:	100497fa 	slli	r2,r2,31
   23ff8:	18ffffc4 	addi	r3,r3,-1
   23ffc:	30c6703a 	and	r3,r6,r3
   24000:	1906b03a 	or	r3,r3,r4
   24004:	1884b03a 	or	r2,r3,r2
   24008:	dfc00a17 	ldw	ra,40(sp)
   2400c:	df000917 	ldw	fp,36(sp)
   24010:	ddc00817 	ldw	r23,32(sp)
   24014:	dd800717 	ldw	r22,28(sp)
   24018:	dd400617 	ldw	r21,24(sp)
   2401c:	dd000517 	ldw	r20,20(sp)
   24020:	dcc00417 	ldw	r19,16(sp)
   24024:	dc800317 	ldw	r18,12(sp)
   24028:	dc400217 	ldw	r17,8(sp)
   2402c:	dc000117 	ldw	r16,4(sp)
   24030:	dec00b04 	addi	sp,sp,44
   24034:	f800283a 	ret
   24038:	90002b1e 	bne	r18,zero,240e8 <__divsf3+0x244>
   2403c:	04000104 	movi	r16,4
   24040:	05c00044 	movi	r23,1
   24044:	003fb106 	br	23f0c <__alt_data_end+0xfffe4b0c>
   24048:	8800251e 	bne	r17,zero,240e0 <__divsf3+0x23c>
   2404c:	01400084 	movi	r5,2
   24050:	00000206 	br	2405c <__divsf3+0x1b8>
   24054:	88001a1e 	bne	r17,zero,240c0 <__divsf3+0x21c>
   24058:	01400044 	movi	r5,1
   2405c:	8160b03a 	or	r16,r16,r5
   24060:	802090ba 	slli	r16,r16,2
   24064:	00c000b4 	movhi	r3,2
   24068:	18d02004 	addi	r3,r3,16512
   2406c:	80e1883a 	add	r16,r16,r3
   24070:	80c00017 	ldw	r3,0(r16)
   24074:	9d44f03a 	xor	r2,r19,r21
   24078:	a18dc83a 	sub	r6,r20,r6
   2407c:	1800683a 	jmp	r3
   24080:	00023fd8 	cmpnei	zero,zero,2303
   24084:	00023fd8 	cmpnei	zero,zero,2303
   24088:	00024224 	muli	zero,zero,2312
   2408c:	00023fc0 	call	23fc <__reset-0x1dc04>
   24090:	00024224 	muli	zero,zero,2312
   24094:	00024120 	cmpeqi	zero,zero,2308
   24098:	00024224 	muli	zero,zero,2312
   2409c:	00023fc0 	call	23fc <__reset-0x1dc04>
   240a0:	00023fd8 	cmpnei	zero,zero,2303
   240a4:	00023fd8 	cmpnei	zero,zero,2303
   240a8:	00024120 	cmpeqi	zero,zero,2308
   240ac:	00023fc0 	call	23fc <__reset-0x1dc04>
   240b0:	00024234 	movhi	zero,2312
   240b4:	00024234 	movhi	zero,2312
   240b8:	00024234 	movhi	zero,2312
   240bc:	0002424c 	andi	zero,zero,2313
   240c0:	8809883a 	mov	r4,r17
   240c4:	00272380 	call	27238 <__clzsi2>
   240c8:	10fffec4 	addi	r3,r2,-5
   240cc:	10801d84 	addi	r2,r2,118
   240d0:	88e2983a 	sll	r17,r17,r3
   240d4:	008dc83a 	sub	r6,zero,r2
   240d8:	000b883a 	mov	r5,zero
   240dc:	003f9906 	br	23f44 <__alt_data_end+0xfffe4b44>
   240e0:	014000c4 	movi	r5,3
   240e4:	003f9706 	br	23f44 <__alt_data_end+0xfffe4b44>
   240e8:	9009883a 	mov	r4,r18
   240ec:	d9400015 	stw	r5,0(sp)
   240f0:	00272380 	call	27238 <__clzsi2>
   240f4:	10fffec4 	addi	r3,r2,-5
   240f8:	11801d84 	addi	r6,r2,118
   240fc:	90e4983a 	sll	r18,r18,r3
   24100:	01a9c83a 	sub	r20,zero,r6
   24104:	0021883a 	mov	r16,zero
   24108:	002f883a 	mov	r23,zero
   2410c:	d9400017 	ldw	r5,0(sp)
   24110:	003f7e06 	br	23f0c <__alt_data_end+0xfffe4b0c>
   24114:	04000304 	movi	r16,12
   24118:	05c000c4 	movi	r23,3
   2411c:	003f7b06 	br	23f0c <__alt_data_end+0xfffe4b0c>
   24120:	01802034 	movhi	r6,128
   24124:	000f883a 	mov	r7,zero
   24128:	31bfffc4 	addi	r6,r6,-1
   2412c:	013fffc4 	movi	r4,-1
   24130:	003fac06 	br	23fe4 <__alt_data_end+0xfffe4be4>
   24134:	01400044 	movi	r5,1
   24138:	2909c83a 	sub	r4,r5,r4
   2413c:	00c006c4 	movi	r3,27
   24140:	19004b0e 	bge	r3,r4,24270 <__divsf3+0x3cc>
   24144:	114e703a 	and	r7,r2,r5
   24148:	0009883a 	mov	r4,zero
   2414c:	000d883a 	mov	r6,zero
   24150:	003fa406 	br	23fe4 <__alt_data_end+0xfffe4be4>
   24154:	9006917a 	slli	r3,r18,5
   24158:	8822917a 	slli	r17,r17,5
   2415c:	1c40372e 	bgeu	r3,r17,2423c <__divsf3+0x398>
   24160:	31bfffc4 	addi	r6,r6,-1
   24164:	010006c4 	movi	r4,27
   24168:	000b883a 	mov	r5,zero
   2416c:	180f883a 	mov	r7,r3
   24170:	294b883a 	add	r5,r5,r5
   24174:	18c7883a 	add	r3,r3,r3
   24178:	38000116 	blt	r7,zero,24180 <__divsf3+0x2dc>
   2417c:	1c400236 	bltu	r3,r17,24188 <__divsf3+0x2e4>
   24180:	1c47c83a 	sub	r3,r3,r17
   24184:	29400054 	ori	r5,r5,1
   24188:	213fffc4 	addi	r4,r4,-1
   2418c:	203ff71e 	bne	r4,zero,2416c <__alt_data_end+0xfffe4d6c>
   24190:	1806c03a 	cmpne	r3,r3,zero
   24194:	1962b03a 	or	r17,r3,r5
   24198:	31001fc4 	addi	r4,r6,127
   2419c:	013fe50e 	bge	zero,r4,24134 <__alt_data_end+0xfffe4d34>
   241a0:	88c001cc 	andi	r3,r17,7
   241a4:	18000426 	beq	r3,zero,241b8 <__divsf3+0x314>
   241a8:	88c003cc 	andi	r3,r17,15
   241ac:	01400104 	movi	r5,4
   241b0:	19400126 	beq	r3,r5,241b8 <__divsf3+0x314>
   241b4:	8963883a 	add	r17,r17,r5
   241b8:	88c2002c 	andhi	r3,r17,2048
   241bc:	18000426 	beq	r3,zero,241d0 <__divsf3+0x32c>
   241c0:	00fe0034 	movhi	r3,63488
   241c4:	18ffffc4 	addi	r3,r3,-1
   241c8:	31002004 	addi	r4,r6,128
   241cc:	88e2703a 	and	r17,r17,r3
   241d0:	00c03f84 	movi	r3,254
   241d4:	193f8016 	blt	r3,r4,23fd8 <__alt_data_end+0xfffe4bd8>
   241d8:	880c91ba 	slli	r6,r17,6
   241dc:	11c0004c 	andi	r7,r2,1
   241e0:	300cd27a 	srli	r6,r6,9
   241e4:	003f7f06 	br	23fe4 <__alt_data_end+0xfffe4be4>
   241e8:	9080102c 	andhi	r2,r18,64
   241ec:	10000226 	beq	r2,zero,241f8 <__divsf3+0x354>
   241f0:	8880102c 	andhi	r2,r17,64
   241f4:	10001826 	beq	r2,zero,24258 <__divsf3+0x3b4>
   241f8:	00802034 	movhi	r2,128
   241fc:	91801034 	orhi	r6,r18,64
   24200:	10bfffc4 	addi	r2,r2,-1
   24204:	980f883a 	mov	r7,r19
   24208:	308c703a 	and	r6,r6,r2
   2420c:	003fc706 	br	2412c <__alt_data_end+0xfffe4d2c>
   24210:	008000c4 	movi	r2,3
   24214:	b8802d26 	beq	r23,r2,242cc <__divsf3+0x428>
   24218:	00c00044 	movi	r3,1
   2421c:	b005883a 	mov	r2,r22
   24220:	b8ffdd1e 	bne	r23,r3,24198 <__alt_data_end+0xfffe4d98>
   24224:	11c0004c 	andi	r7,r2,1
   24228:	0009883a 	mov	r4,zero
   2422c:	000d883a 	mov	r6,zero
   24230:	003f6c06 	br	23fe4 <__alt_data_end+0xfffe4be4>
   24234:	9023883a 	mov	r17,r18
   24238:	003f6406 	br	23fcc <__alt_data_end+0xfffe4bcc>
   2423c:	1c47c83a 	sub	r3,r3,r17
   24240:	01000684 	movi	r4,26
   24244:	01400044 	movi	r5,1
   24248:	003fc806 	br	2416c <__alt_data_end+0xfffe4d6c>
   2424c:	9080102c 	andhi	r2,r18,64
   24250:	103fe926 	beq	r2,zero,241f8 <__alt_data_end+0xfffe4df8>
   24254:	0023883a 	mov	r17,zero
   24258:	00802034 	movhi	r2,128
   2425c:	89801034 	orhi	r6,r17,64
   24260:	10bfffc4 	addi	r2,r2,-1
   24264:	a80f883a 	mov	r7,r21
   24268:	308c703a 	and	r6,r6,r2
   2426c:	003faf06 	br	2412c <__alt_data_end+0xfffe4d2c>
   24270:	01c00804 	movi	r7,32
   24274:	390fc83a 	sub	r7,r7,r4
   24278:	89ce983a 	sll	r7,r17,r7
   2427c:	890ad83a 	srl	r5,r17,r4
   24280:	380ec03a 	cmpne	r7,r7,zero
   24284:	29cab03a 	or	r5,r5,r7
   24288:	28c001cc 	andi	r3,r5,7
   2428c:	18000426 	beq	r3,zero,242a0 <__divsf3+0x3fc>
   24290:	28c003cc 	andi	r3,r5,15
   24294:	01000104 	movi	r4,4
   24298:	19000126 	beq	r3,r4,242a0 <__divsf3+0x3fc>
   2429c:	290b883a 	add	r5,r5,r4
   242a0:	28c1002c 	andhi	r3,r5,1024
   242a4:	18000426 	beq	r3,zero,242b8 <__divsf3+0x414>
   242a8:	11c0004c 	andi	r7,r2,1
   242ac:	01000044 	movi	r4,1
   242b0:	000d883a 	mov	r6,zero
   242b4:	003f4b06 	br	23fe4 <__alt_data_end+0xfffe4be4>
   242b8:	280a91ba 	slli	r5,r5,6
   242bc:	11c0004c 	andi	r7,r2,1
   242c0:	0009883a 	mov	r4,zero
   242c4:	280cd27a 	srli	r6,r5,9
   242c8:	003f4606 	br	23fe4 <__alt_data_end+0xfffe4be4>
   242cc:	00802034 	movhi	r2,128
   242d0:	89801034 	orhi	r6,r17,64
   242d4:	10bfffc4 	addi	r2,r2,-1
   242d8:	b00f883a 	mov	r7,r22
   242dc:	308c703a 	and	r6,r6,r2
   242e0:	003f9206 	br	2412c <__alt_data_end+0xfffe4d2c>

000242e4 <__mulsf3>:
   242e4:	defff504 	addi	sp,sp,-44
   242e8:	dc000115 	stw	r16,4(sp)
   242ec:	2020d5fa 	srli	r16,r4,23
   242f0:	dd400615 	stw	r21,24(sp)
   242f4:	202ad7fa 	srli	r21,r4,31
   242f8:	dc800315 	stw	r18,12(sp)
   242fc:	04802034 	movhi	r18,128
   24300:	df000915 	stw	fp,36(sp)
   24304:	dd000515 	stw	r20,20(sp)
   24308:	94bfffc4 	addi	r18,r18,-1
   2430c:	dfc00a15 	stw	ra,40(sp)
   24310:	ddc00815 	stw	r23,32(sp)
   24314:	dd800715 	stw	r22,28(sp)
   24318:	dcc00415 	stw	r19,16(sp)
   2431c:	dc400215 	stw	r17,8(sp)
   24320:	84003fcc 	andi	r16,r16,255
   24324:	9124703a 	and	r18,r18,r4
   24328:	a829883a 	mov	r20,r21
   2432c:	af003fcc 	andi	fp,r21,255
   24330:	80005426 	beq	r16,zero,24484 <__mulsf3+0x1a0>
   24334:	00803fc4 	movi	r2,255
   24338:	80802f26 	beq	r16,r2,243f8 <__mulsf3+0x114>
   2433c:	91002034 	orhi	r4,r18,128
   24340:	202490fa 	slli	r18,r4,3
   24344:	843fe044 	addi	r16,r16,-127
   24348:	0023883a 	mov	r17,zero
   2434c:	002f883a 	mov	r23,zero
   24350:	2804d5fa 	srli	r2,r5,23
   24354:	282cd7fa 	srli	r22,r5,31
   24358:	01002034 	movhi	r4,128
   2435c:	213fffc4 	addi	r4,r4,-1
   24360:	10803fcc 	andi	r2,r2,255
   24364:	2166703a 	and	r19,r4,r5
   24368:	b1803fcc 	andi	r6,r22,255
   2436c:	10004c26 	beq	r2,zero,244a0 <__mulsf3+0x1bc>
   24370:	00c03fc4 	movi	r3,255
   24374:	10c04726 	beq	r2,r3,24494 <__mulsf3+0x1b0>
   24378:	99002034 	orhi	r4,r19,128
   2437c:	202690fa 	slli	r19,r4,3
   24380:	10bfe044 	addi	r2,r2,-127
   24384:	0007883a 	mov	r3,zero
   24388:	80a1883a 	add	r16,r16,r2
   2438c:	010003c4 	movi	r4,15
   24390:	1c44b03a 	or	r2,r3,r17
   24394:	b56af03a 	xor	r21,r22,r21
   24398:	81c00044 	addi	r7,r16,1
   2439c:	20806b36 	bltu	r4,r2,2454c <__mulsf3+0x268>
   243a0:	100490ba 	slli	r2,r2,2
   243a4:	010000b4 	movhi	r4,2
   243a8:	2110ee04 	addi	r4,r4,17336
   243ac:	1105883a 	add	r2,r2,r4
   243b0:	10800017 	ldw	r2,0(r2)
   243b4:	1000683a 	jmp	r2
   243b8:	0002454c 	andi	zero,zero,2325
   243bc:	0002440c 	andi	zero,zero,2320
   243c0:	0002440c 	andi	zero,zero,2320
   243c4:	00024408 	cmpgei	zero,zero,2320
   243c8:	00024530 	cmpltui	zero,zero,2324
   243cc:	00024530 	cmpltui	zero,zero,2324
   243d0:	0002451c 	xori	zero,zero,2324
   243d4:	00024408 	cmpgei	zero,zero,2320
   243d8:	00024530 	cmpltui	zero,zero,2324
   243dc:	0002451c 	xori	zero,zero,2324
   243e0:	00024530 	cmpltui	zero,zero,2324
   243e4:	00024408 	cmpgei	zero,zero,2320
   243e8:	0002453c 	xorhi	zero,zero,2324
   243ec:	0002453c 	xorhi	zero,zero,2324
   243f0:	0002453c 	xorhi	zero,zero,2324
   243f4:	00024618 	cmpnei	zero,zero,2328
   243f8:	90003b1e 	bne	r18,zero,244e8 <__mulsf3+0x204>
   243fc:	04400204 	movi	r17,8
   24400:	05c00084 	movi	r23,2
   24404:	003fd206 	br	24350 <__alt_data_end+0xfffe4f50>
   24408:	302b883a 	mov	r21,r6
   2440c:	00800084 	movi	r2,2
   24410:	18802626 	beq	r3,r2,244ac <__mulsf3+0x1c8>
   24414:	008000c4 	movi	r2,3
   24418:	1880ab26 	beq	r3,r2,246c8 <__mulsf3+0x3e4>
   2441c:	00800044 	movi	r2,1
   24420:	1880a21e 	bne	r3,r2,246ac <__mulsf3+0x3c8>
   24424:	a829883a 	mov	r20,r21
   24428:	0007883a 	mov	r3,zero
   2442c:	0009883a 	mov	r4,zero
   24430:	18803fcc 	andi	r2,r3,255
   24434:	100695fa 	slli	r3,r2,23
   24438:	a0803fcc 	andi	r2,r20,255
   2443c:	100a97fa 	slli	r5,r2,31
   24440:	00802034 	movhi	r2,128
   24444:	10bfffc4 	addi	r2,r2,-1
   24448:	2084703a 	and	r2,r4,r2
   2444c:	10c4b03a 	or	r2,r2,r3
   24450:	1144b03a 	or	r2,r2,r5
   24454:	dfc00a17 	ldw	ra,40(sp)
   24458:	df000917 	ldw	fp,36(sp)
   2445c:	ddc00817 	ldw	r23,32(sp)
   24460:	dd800717 	ldw	r22,28(sp)
   24464:	dd400617 	ldw	r21,24(sp)
   24468:	dd000517 	ldw	r20,20(sp)
   2446c:	dcc00417 	ldw	r19,16(sp)
   24470:	dc800317 	ldw	r18,12(sp)
   24474:	dc400217 	ldw	r17,8(sp)
   24478:	dc000117 	ldw	r16,4(sp)
   2447c:	dec00b04 	addi	sp,sp,44
   24480:	f800283a 	ret
   24484:	90000d1e 	bne	r18,zero,244bc <__mulsf3+0x1d8>
   24488:	04400104 	movi	r17,4
   2448c:	05c00044 	movi	r23,1
   24490:	003faf06 	br	24350 <__alt_data_end+0xfffe4f50>
   24494:	9806c03a 	cmpne	r3,r19,zero
   24498:	18c00084 	addi	r3,r3,2
   2449c:	003fba06 	br	24388 <__alt_data_end+0xfffe4f88>
   244a0:	9800141e 	bne	r19,zero,244f4 <__mulsf3+0x210>
   244a4:	00c00044 	movi	r3,1
   244a8:	003fb706 	br	24388 <__alt_data_end+0xfffe4f88>
   244ac:	a829883a 	mov	r20,r21
   244b0:	00ffffc4 	movi	r3,-1
   244b4:	0009883a 	mov	r4,zero
   244b8:	003fdd06 	br	24430 <__alt_data_end+0xfffe5030>
   244bc:	9009883a 	mov	r4,r18
   244c0:	d9400015 	stw	r5,0(sp)
   244c4:	00272380 	call	27238 <__clzsi2>
   244c8:	10fffec4 	addi	r3,r2,-5
   244cc:	10801d84 	addi	r2,r2,118
   244d0:	90e4983a 	sll	r18,r18,r3
   244d4:	00a1c83a 	sub	r16,zero,r2
   244d8:	0023883a 	mov	r17,zero
   244dc:	002f883a 	mov	r23,zero
   244e0:	d9400017 	ldw	r5,0(sp)
   244e4:	003f9a06 	br	24350 <__alt_data_end+0xfffe4f50>
   244e8:	04400304 	movi	r17,12
   244ec:	05c000c4 	movi	r23,3
   244f0:	003f9706 	br	24350 <__alt_data_end+0xfffe4f50>
   244f4:	9809883a 	mov	r4,r19
   244f8:	d9800015 	stw	r6,0(sp)
   244fc:	00272380 	call	27238 <__clzsi2>
   24500:	10fffec4 	addi	r3,r2,-5
   24504:	10801d84 	addi	r2,r2,118
   24508:	98e6983a 	sll	r19,r19,r3
   2450c:	0085c83a 	sub	r2,zero,r2
   24510:	0007883a 	mov	r3,zero
   24514:	d9800017 	ldw	r6,0(sp)
   24518:	003f9b06 	br	24388 <__alt_data_end+0xfffe4f88>
   2451c:	01002034 	movhi	r4,128
   24520:	0029883a 	mov	r20,zero
   24524:	213fffc4 	addi	r4,r4,-1
   24528:	00ffffc4 	movi	r3,-1
   2452c:	003fc006 	br	24430 <__alt_data_end+0xfffe5030>
   24530:	9027883a 	mov	r19,r18
   24534:	b807883a 	mov	r3,r23
   24538:	003fb406 	br	2440c <__alt_data_end+0xfffe500c>
   2453c:	9027883a 	mov	r19,r18
   24540:	e02b883a 	mov	r21,fp
   24544:	b807883a 	mov	r3,r23
   24548:	003fb006 	br	2440c <__alt_data_end+0xfffe500c>
   2454c:	9004d43a 	srli	r2,r18,16
   24550:	9810d43a 	srli	r8,r19,16
   24554:	94bfffcc 	andi	r18,r18,65535
   24558:	993fffcc 	andi	r4,r19,65535
   2455c:	910d383a 	mul	r6,r18,r4
   24560:	20a7383a 	mul	r19,r4,r2
   24564:	9225383a 	mul	r18,r18,r8
   24568:	3006d43a 	srli	r3,r6,16
   2456c:	1211383a 	mul	r8,r2,r8
   24570:	94e5883a 	add	r18,r18,r19
   24574:	1c87883a 	add	r3,r3,r18
   24578:	1cc0022e 	bgeu	r3,r19,24584 <__mulsf3+0x2a0>
   2457c:	00800074 	movhi	r2,1
   24580:	4091883a 	add	r8,r8,r2
   24584:	1804943a 	slli	r2,r3,16
   24588:	31bfffcc 	andi	r6,r6,65535
   2458c:	1806d43a 	srli	r3,r3,16
   24590:	1185883a 	add	r2,r2,r6
   24594:	102691ba 	slli	r19,r2,6
   24598:	1a07883a 	add	r3,r3,r8
   2459c:	1004d6ba 	srli	r2,r2,26
   245a0:	180891ba 	slli	r4,r3,6
   245a4:	9826c03a 	cmpne	r19,r19,zero
   245a8:	9884b03a 	or	r2,r19,r2
   245ac:	1126b03a 	or	r19,r2,r4
   245b0:	9882002c 	andhi	r2,r19,2048
   245b4:	10000426 	beq	r2,zero,245c8 <__mulsf3+0x2e4>
   245b8:	9804d07a 	srli	r2,r19,1
   245bc:	9900004c 	andi	r4,r19,1
   245c0:	3821883a 	mov	r16,r7
   245c4:	1126b03a 	or	r19,r2,r4
   245c8:	80c01fc4 	addi	r3,r16,127
   245cc:	00c0210e 	bge	zero,r3,24654 <__mulsf3+0x370>
   245d0:	988001cc 	andi	r2,r19,7
   245d4:	10000426 	beq	r2,zero,245e8 <__mulsf3+0x304>
   245d8:	988003cc 	andi	r2,r19,15
   245dc:	01000104 	movi	r4,4
   245e0:	11000126 	beq	r2,r4,245e8 <__mulsf3+0x304>
   245e4:	9927883a 	add	r19,r19,r4
   245e8:	9882002c 	andhi	r2,r19,2048
   245ec:	10000426 	beq	r2,zero,24600 <__mulsf3+0x31c>
   245f0:	00be0034 	movhi	r2,63488
   245f4:	10bfffc4 	addi	r2,r2,-1
   245f8:	80c02004 	addi	r3,r16,128
   245fc:	98a6703a 	and	r19,r19,r2
   24600:	00803f84 	movi	r2,254
   24604:	10ffa916 	blt	r2,r3,244ac <__alt_data_end+0xfffe50ac>
   24608:	980891ba 	slli	r4,r19,6
   2460c:	a829883a 	mov	r20,r21
   24610:	2008d27a 	srli	r4,r4,9
   24614:	003f8606 	br	24430 <__alt_data_end+0xfffe5030>
   24618:	9080102c 	andhi	r2,r18,64
   2461c:	10000826 	beq	r2,zero,24640 <__mulsf3+0x35c>
   24620:	9880102c 	andhi	r2,r19,64
   24624:	1000061e 	bne	r2,zero,24640 <__mulsf3+0x35c>
   24628:	00802034 	movhi	r2,128
   2462c:	99001034 	orhi	r4,r19,64
   24630:	10bfffc4 	addi	r2,r2,-1
   24634:	b029883a 	mov	r20,r22
   24638:	2088703a 	and	r4,r4,r2
   2463c:	003fba06 	br	24528 <__alt_data_end+0xfffe5128>
   24640:	00802034 	movhi	r2,128
   24644:	91001034 	orhi	r4,r18,64
   24648:	10bfffc4 	addi	r2,r2,-1
   2464c:	2088703a 	and	r4,r4,r2
   24650:	003fb506 	br	24528 <__alt_data_end+0xfffe5128>
   24654:	00800044 	movi	r2,1
   24658:	10c7c83a 	sub	r3,r2,r3
   2465c:	008006c4 	movi	r2,27
   24660:	10ff7016 	blt	r2,r3,24424 <__alt_data_end+0xfffe5024>
   24664:	00800804 	movi	r2,32
   24668:	10c5c83a 	sub	r2,r2,r3
   2466c:	9884983a 	sll	r2,r19,r2
   24670:	98c6d83a 	srl	r3,r19,r3
   24674:	1004c03a 	cmpne	r2,r2,zero
   24678:	1884b03a 	or	r2,r3,r2
   2467c:	10c001cc 	andi	r3,r2,7
   24680:	18000426 	beq	r3,zero,24694 <__mulsf3+0x3b0>
   24684:	10c003cc 	andi	r3,r2,15
   24688:	01000104 	movi	r4,4
   2468c:	19000126 	beq	r3,r4,24694 <__mulsf3+0x3b0>
   24690:	1105883a 	add	r2,r2,r4
   24694:	10c1002c 	andhi	r3,r2,1024
   24698:	18000626 	beq	r3,zero,246b4 <__mulsf3+0x3d0>
   2469c:	a829883a 	mov	r20,r21
   246a0:	00c00044 	movi	r3,1
   246a4:	0009883a 	mov	r4,zero
   246a8:	003f6106 	br	24430 <__alt_data_end+0xfffe5030>
   246ac:	3821883a 	mov	r16,r7
   246b0:	003fc506 	br	245c8 <__alt_data_end+0xfffe51c8>
   246b4:	100491ba 	slli	r2,r2,6
   246b8:	a829883a 	mov	r20,r21
   246bc:	0007883a 	mov	r3,zero
   246c0:	1008d27a 	srli	r4,r2,9
   246c4:	003f5a06 	br	24430 <__alt_data_end+0xfffe5030>
   246c8:	00802034 	movhi	r2,128
   246cc:	99001034 	orhi	r4,r19,64
   246d0:	10bfffc4 	addi	r2,r2,-1
   246d4:	a829883a 	mov	r20,r21
   246d8:	2088703a 	and	r4,r4,r2
   246dc:	003f9206 	br	24528 <__alt_data_end+0xfffe5128>

000246e0 <__subsf3>:
   246e0:	defffc04 	addi	sp,sp,-16
   246e4:	280cd5fa 	srli	r6,r5,23
   246e8:	dc000015 	stw	r16,0(sp)
   246ec:	01c02034 	movhi	r7,128
   246f0:	2020d5fa 	srli	r16,r4,23
   246f4:	39ffffc4 	addi	r7,r7,-1
   246f8:	3906703a 	and	r3,r7,r4
   246fc:	dc400115 	stw	r17,4(sp)
   24700:	394e703a 	and	r7,r7,r5
   24704:	2022d7fa 	srli	r17,r4,31
   24708:	dfc00315 	stw	ra,12(sp)
   2470c:	dc800215 	stw	r18,8(sp)
   24710:	31803fcc 	andi	r6,r6,255
   24714:	01003fc4 	movi	r4,255
   24718:	84003fcc 	andi	r16,r16,255
   2471c:	180690fa 	slli	r3,r3,3
   24720:	2804d7fa 	srli	r2,r5,31
   24724:	380e90fa 	slli	r7,r7,3
   24728:	31006d26 	beq	r6,r4,248e0 <__subsf3+0x200>
   2472c:	1080005c 	xori	r2,r2,1
   24730:	8189c83a 	sub	r4,r16,r6
   24734:	14404f26 	beq	r2,r17,24874 <__subsf3+0x194>
   24738:	0100770e 	bge	zero,r4,24918 <__subsf3+0x238>
   2473c:	30001e1e 	bne	r6,zero,247b8 <__subsf3+0xd8>
   24740:	38006a1e 	bne	r7,zero,248ec <__subsf3+0x20c>
   24744:	188001cc 	andi	r2,r3,7
   24748:	10000426 	beq	r2,zero,2475c <__subsf3+0x7c>
   2474c:	188003cc 	andi	r2,r3,15
   24750:	01000104 	movi	r4,4
   24754:	11000126 	beq	r2,r4,2475c <__subsf3+0x7c>
   24758:	1907883a 	add	r3,r3,r4
   2475c:	1881002c 	andhi	r2,r3,1024
   24760:	10003926 	beq	r2,zero,24848 <__subsf3+0x168>
   24764:	84000044 	addi	r16,r16,1
   24768:	00803fc4 	movi	r2,255
   2476c:	80807526 	beq	r16,r2,24944 <__subsf3+0x264>
   24770:	180691ba 	slli	r3,r3,6
   24774:	8880004c 	andi	r2,r17,1
   24778:	180ad27a 	srli	r5,r3,9
   2477c:	84003fcc 	andi	r16,r16,255
   24780:	800695fa 	slli	r3,r16,23
   24784:	10803fcc 	andi	r2,r2,255
   24788:	01002034 	movhi	r4,128
   2478c:	213fffc4 	addi	r4,r4,-1
   24790:	100497fa 	slli	r2,r2,31
   24794:	2920703a 	and	r16,r5,r4
   24798:	80e0b03a 	or	r16,r16,r3
   2479c:	8084b03a 	or	r2,r16,r2
   247a0:	dfc00317 	ldw	ra,12(sp)
   247a4:	dc800217 	ldw	r18,8(sp)
   247a8:	dc400117 	ldw	r17,4(sp)
   247ac:	dc000017 	ldw	r16,0(sp)
   247b0:	dec00404 	addi	sp,sp,16
   247b4:	f800283a 	ret
   247b8:	00803fc4 	movi	r2,255
   247bc:	80bfe126 	beq	r16,r2,24744 <__alt_data_end+0xfffe5344>
   247c0:	39c10034 	orhi	r7,r7,1024
   247c4:	008006c4 	movi	r2,27
   247c8:	11007416 	blt	r2,r4,2499c <__subsf3+0x2bc>
   247cc:	00800804 	movi	r2,32
   247d0:	1105c83a 	sub	r2,r2,r4
   247d4:	3884983a 	sll	r2,r7,r2
   247d8:	390ed83a 	srl	r7,r7,r4
   247dc:	1008c03a 	cmpne	r4,r2,zero
   247e0:	390eb03a 	or	r7,r7,r4
   247e4:	19c7c83a 	sub	r3,r3,r7
   247e8:	1881002c 	andhi	r2,r3,1024
   247ec:	10001426 	beq	r2,zero,24840 <__subsf3+0x160>
   247f0:	04810034 	movhi	r18,1024
   247f4:	94bfffc4 	addi	r18,r18,-1
   247f8:	1ca4703a 	and	r18,r3,r18
   247fc:	9009883a 	mov	r4,r18
   24800:	00272380 	call	27238 <__clzsi2>
   24804:	10bffec4 	addi	r2,r2,-5
   24808:	90a4983a 	sll	r18,r18,r2
   2480c:	14005116 	blt	r2,r16,24954 <__subsf3+0x274>
   24810:	1405c83a 	sub	r2,r2,r16
   24814:	10c00044 	addi	r3,r2,1
   24818:	00800804 	movi	r2,32
   2481c:	10c5c83a 	sub	r2,r2,r3
   24820:	9084983a 	sll	r2,r18,r2
   24824:	90e4d83a 	srl	r18,r18,r3
   24828:	0021883a 	mov	r16,zero
   2482c:	1006c03a 	cmpne	r3,r2,zero
   24830:	90c6b03a 	or	r3,r18,r3
   24834:	003fc306 	br	24744 <__alt_data_end+0xfffe5344>
   24838:	2000e026 	beq	r4,zero,24bbc <__subsf3+0x4dc>
   2483c:	2007883a 	mov	r3,r4
   24840:	188001cc 	andi	r2,r3,7
   24844:	103fc11e 	bne	r2,zero,2474c <__alt_data_end+0xfffe534c>
   24848:	180ad0fa 	srli	r5,r3,3
   2484c:	00c03fc4 	movi	r3,255
   24850:	8880004c 	andi	r2,r17,1
   24854:	80c0031e 	bne	r16,r3,24864 <__subsf3+0x184>
   24858:	28006d26 	beq	r5,zero,24a10 <__subsf3+0x330>
   2485c:	29401034 	orhi	r5,r5,64
   24860:	043fffc4 	movi	r16,-1
   24864:	00c02034 	movhi	r3,128
   24868:	18ffffc4 	addi	r3,r3,-1
   2486c:	28ca703a 	and	r5,r5,r3
   24870:	003fc206 	br	2477c <__alt_data_end+0xfffe537c>
   24874:	01003c0e 	bge	zero,r4,24968 <__subsf3+0x288>
   24878:	30002126 	beq	r6,zero,24900 <__subsf3+0x220>
   2487c:	01403fc4 	movi	r5,255
   24880:	817fb026 	beq	r16,r5,24744 <__alt_data_end+0xfffe5344>
   24884:	39c10034 	orhi	r7,r7,1024
   24888:	014006c4 	movi	r5,27
   2488c:	29007416 	blt	r5,r4,24a60 <__subsf3+0x380>
   24890:	01400804 	movi	r5,32
   24894:	290bc83a 	sub	r5,r5,r4
   24898:	394a983a 	sll	r5,r7,r5
   2489c:	390ed83a 	srl	r7,r7,r4
   248a0:	2808c03a 	cmpne	r4,r5,zero
   248a4:	390eb03a 	or	r7,r7,r4
   248a8:	19c7883a 	add	r3,r3,r7
   248ac:	1901002c 	andhi	r4,r3,1024
   248b0:	20003826 	beq	r4,zero,24994 <__subsf3+0x2b4>
   248b4:	84000044 	addi	r16,r16,1
   248b8:	01003fc4 	movi	r4,255
   248bc:	81005426 	beq	r16,r4,24a10 <__subsf3+0x330>
   248c0:	1023883a 	mov	r17,r2
   248c4:	00bf0034 	movhi	r2,64512
   248c8:	10bfffc4 	addi	r2,r2,-1
   248cc:	1900004c 	andi	r4,r3,1
   248d0:	1886703a 	and	r3,r3,r2
   248d4:	1806d07a 	srli	r3,r3,1
   248d8:	1906b03a 	or	r3,r3,r4
   248dc:	003f9906 	br	24744 <__alt_data_end+0xfffe5344>
   248e0:	383f9226 	beq	r7,zero,2472c <__alt_data_end+0xfffe532c>
   248e4:	10803fcc 	andi	r2,r2,255
   248e8:	003f9106 	br	24730 <__alt_data_end+0xfffe5330>
   248ec:	213fffc4 	addi	r4,r4,-1
   248f0:	203fbc26 	beq	r4,zero,247e4 <__alt_data_end+0xfffe53e4>
   248f4:	00803fc4 	movi	r2,255
   248f8:	80bfb21e 	bne	r16,r2,247c4 <__alt_data_end+0xfffe53c4>
   248fc:	003f9106 	br	24744 <__alt_data_end+0xfffe5344>
   24900:	383f9026 	beq	r7,zero,24744 <__alt_data_end+0xfffe5344>
   24904:	213fffc4 	addi	r4,r4,-1
   24908:	203fe726 	beq	r4,zero,248a8 <__alt_data_end+0xfffe54a8>
   2490c:	01403fc4 	movi	r5,255
   24910:	817fdd1e 	bne	r16,r5,24888 <__alt_data_end+0xfffe5488>
   24914:	003f8b06 	br	24744 <__alt_data_end+0xfffe5344>
   24918:	2000221e 	bne	r4,zero,249a4 <__subsf3+0x2c4>
   2491c:	81000044 	addi	r4,r16,1
   24920:	21003fcc 	andi	r4,r4,255
   24924:	01400044 	movi	r5,1
   24928:	2900470e 	bge	r5,r4,24a48 <__subsf3+0x368>
   2492c:	19e5c83a 	sub	r18,r3,r7
   24930:	9141002c 	andhi	r5,r18,1024
   24934:	28002d26 	beq	r5,zero,249ec <__subsf3+0x30c>
   24938:	38e5c83a 	sub	r18,r7,r3
   2493c:	1023883a 	mov	r17,r2
   24940:	003fae06 	br	247fc <__alt_data_end+0xfffe53fc>
   24944:	8880004c 	andi	r2,r17,1
   24948:	043fffc4 	movi	r16,-1
   2494c:	000b883a 	mov	r5,zero
   24950:	003f8a06 	br	2477c <__alt_data_end+0xfffe537c>
   24954:	00ff0034 	movhi	r3,64512
   24958:	18ffffc4 	addi	r3,r3,-1
   2495c:	80a1c83a 	sub	r16,r16,r2
   24960:	90c6703a 	and	r3,r18,r3
   24964:	003f7706 	br	24744 <__alt_data_end+0xfffe5344>
   24968:	2000431e 	bne	r4,zero,24a78 <__subsf3+0x398>
   2496c:	81000044 	addi	r4,r16,1
   24970:	21803fcc 	andi	r6,r4,255
   24974:	01400044 	movi	r5,1
   24978:	2980280e 	bge	r5,r6,24a1c <__subsf3+0x33c>
   2497c:	01403fc4 	movi	r5,255
   24980:	21402326 	beq	r4,r5,24a10 <__subsf3+0x330>
   24984:	19c7883a 	add	r3,r3,r7
   24988:	1806d07a 	srli	r3,r3,1
   2498c:	2021883a 	mov	r16,r4
   24990:	003f6c06 	br	24744 <__alt_data_end+0xfffe5344>
   24994:	1023883a 	mov	r17,r2
   24998:	003fa906 	br	24840 <__alt_data_end+0xfffe5440>
   2499c:	01c00044 	movi	r7,1
   249a0:	003f9006 	br	247e4 <__alt_data_end+0xfffe53e4>
   249a4:	8000151e 	bne	r16,zero,249fc <__subsf3+0x31c>
   249a8:	18002f26 	beq	r3,zero,24a68 <__subsf3+0x388>
   249ac:	0108303a 	nor	r4,zero,r4
   249b0:	20000a26 	beq	r4,zero,249dc <__subsf3+0x2fc>
   249b4:	01403fc4 	movi	r5,255
   249b8:	31402b26 	beq	r6,r5,24a68 <__subsf3+0x388>
   249bc:	014006c4 	movi	r5,27
   249c0:	29006e16 	blt	r5,r4,24b7c <__subsf3+0x49c>
   249c4:	01400804 	movi	r5,32
   249c8:	290bc83a 	sub	r5,r5,r4
   249cc:	194a983a 	sll	r5,r3,r5
   249d0:	1908d83a 	srl	r4,r3,r4
   249d4:	2806c03a 	cmpne	r3,r5,zero
   249d8:	20c6b03a 	or	r3,r4,r3
   249dc:	38c7c83a 	sub	r3,r7,r3
   249e0:	3021883a 	mov	r16,r6
   249e4:	1023883a 	mov	r17,r2
   249e8:	003f7f06 	br	247e8 <__alt_data_end+0xfffe53e8>
   249ec:	903f831e 	bne	r18,zero,247fc <__alt_data_end+0xfffe53fc>
   249f0:	0005883a 	mov	r2,zero
   249f4:	0021883a 	mov	r16,zero
   249f8:	003f9a06 	br	24864 <__alt_data_end+0xfffe5464>
   249fc:	01403fc4 	movi	r5,255
   24a00:	31401926 	beq	r6,r5,24a68 <__subsf3+0x388>
   24a04:	0109c83a 	sub	r4,zero,r4
   24a08:	18c10034 	orhi	r3,r3,1024
   24a0c:	003feb06 	br	249bc <__alt_data_end+0xfffe55bc>
   24a10:	043fffc4 	movi	r16,-1
   24a14:	000b883a 	mov	r5,zero
   24a18:	003f5806 	br	2477c <__alt_data_end+0xfffe537c>
   24a1c:	8000481e 	bne	r16,zero,24b40 <__subsf3+0x460>
   24a20:	18006226 	beq	r3,zero,24bac <__subsf3+0x4cc>
   24a24:	383f4726 	beq	r7,zero,24744 <__alt_data_end+0xfffe5344>
   24a28:	19c7883a 	add	r3,r3,r7
   24a2c:	1881002c 	andhi	r2,r3,1024
   24a30:	103f8326 	beq	r2,zero,24840 <__alt_data_end+0xfffe5440>
   24a34:	00bf0034 	movhi	r2,64512
   24a38:	10bfffc4 	addi	r2,r2,-1
   24a3c:	2821883a 	mov	r16,r5
   24a40:	1886703a 	and	r3,r3,r2
   24a44:	003f3f06 	br	24744 <__alt_data_end+0xfffe5344>
   24a48:	80001c1e 	bne	r16,zero,24abc <__subsf3+0x3dc>
   24a4c:	1800261e 	bne	r3,zero,24ae8 <__subsf3+0x408>
   24a50:	38004c26 	beq	r7,zero,24b84 <__subsf3+0x4a4>
   24a54:	3807883a 	mov	r3,r7
   24a58:	1023883a 	mov	r17,r2
   24a5c:	003f3906 	br	24744 <__alt_data_end+0xfffe5344>
   24a60:	01c00044 	movi	r7,1
   24a64:	003f9006 	br	248a8 <__alt_data_end+0xfffe54a8>
   24a68:	3807883a 	mov	r3,r7
   24a6c:	3021883a 	mov	r16,r6
   24a70:	1023883a 	mov	r17,r2
   24a74:	003f3306 	br	24744 <__alt_data_end+0xfffe5344>
   24a78:	8000161e 	bne	r16,zero,24ad4 <__subsf3+0x3f4>
   24a7c:	18002d26 	beq	r3,zero,24b34 <__subsf3+0x454>
   24a80:	0108303a 	nor	r4,zero,r4
   24a84:	20000a26 	beq	r4,zero,24ab0 <__subsf3+0x3d0>
   24a88:	01403fc4 	movi	r5,255
   24a8c:	31402926 	beq	r6,r5,24b34 <__subsf3+0x454>
   24a90:	014006c4 	movi	r5,27
   24a94:	29004716 	blt	r5,r4,24bb4 <__subsf3+0x4d4>
   24a98:	01400804 	movi	r5,32
   24a9c:	290bc83a 	sub	r5,r5,r4
   24aa0:	194a983a 	sll	r5,r3,r5
   24aa4:	1908d83a 	srl	r4,r3,r4
   24aa8:	2806c03a 	cmpne	r3,r5,zero
   24aac:	20c6b03a 	or	r3,r4,r3
   24ab0:	19c7883a 	add	r3,r3,r7
   24ab4:	3021883a 	mov	r16,r6
   24ab8:	003f7c06 	br	248ac <__alt_data_end+0xfffe54ac>
   24abc:	1800111e 	bne	r3,zero,24b04 <__subsf3+0x424>
   24ac0:	38003326 	beq	r7,zero,24b90 <__subsf3+0x4b0>
   24ac4:	3807883a 	mov	r3,r7
   24ac8:	1023883a 	mov	r17,r2
   24acc:	04003fc4 	movi	r16,255
   24ad0:	003f1c06 	br	24744 <__alt_data_end+0xfffe5344>
   24ad4:	01403fc4 	movi	r5,255
   24ad8:	31401626 	beq	r6,r5,24b34 <__subsf3+0x454>
   24adc:	0109c83a 	sub	r4,zero,r4
   24ae0:	18c10034 	orhi	r3,r3,1024
   24ae4:	003fea06 	br	24a90 <__alt_data_end+0xfffe5690>
   24ae8:	383f1626 	beq	r7,zero,24744 <__alt_data_end+0xfffe5344>
   24aec:	19c9c83a 	sub	r4,r3,r7
   24af0:	2141002c 	andhi	r5,r4,1024
   24af4:	283f5026 	beq	r5,zero,24838 <__alt_data_end+0xfffe5438>
   24af8:	38c7c83a 	sub	r3,r7,r3
   24afc:	1023883a 	mov	r17,r2
   24b00:	003f1006 	br	24744 <__alt_data_end+0xfffe5344>
   24b04:	38001b26 	beq	r7,zero,24b74 <__subsf3+0x494>
   24b08:	1806d0fa 	srli	r3,r3,3
   24b0c:	1900102c 	andhi	r4,r3,64
   24b10:	20000526 	beq	r4,zero,24b28 <__subsf3+0x448>
   24b14:	380ed0fa 	srli	r7,r7,3
   24b18:	3900102c 	andhi	r4,r7,64
   24b1c:	2000021e 	bne	r4,zero,24b28 <__subsf3+0x448>
   24b20:	3807883a 	mov	r3,r7
   24b24:	1023883a 	mov	r17,r2
   24b28:	180690fa 	slli	r3,r3,3
   24b2c:	04003fc4 	movi	r16,255
   24b30:	003f0406 	br	24744 <__alt_data_end+0xfffe5344>
   24b34:	3807883a 	mov	r3,r7
   24b38:	3021883a 	mov	r16,r6
   24b3c:	003f0106 	br	24744 <__alt_data_end+0xfffe5344>
   24b40:	18001726 	beq	r3,zero,24ba0 <__subsf3+0x4c0>
   24b44:	38000b26 	beq	r7,zero,24b74 <__subsf3+0x494>
   24b48:	1806d0fa 	srli	r3,r3,3
   24b4c:	1900102c 	andhi	r4,r3,64
   24b50:	20000426 	beq	r4,zero,24b64 <__subsf3+0x484>
   24b54:	380ed0fa 	srli	r7,r7,3
   24b58:	3900102c 	andhi	r4,r7,64
   24b5c:	2000011e 	bne	r4,zero,24b64 <__subsf3+0x484>
   24b60:	3807883a 	mov	r3,r7
   24b64:	180690fa 	slli	r3,r3,3
   24b68:	1023883a 	mov	r17,r2
   24b6c:	04003fc4 	movi	r16,255
   24b70:	003ef406 	br	24744 <__alt_data_end+0xfffe5344>
   24b74:	04003fc4 	movi	r16,255
   24b78:	003ef206 	br	24744 <__alt_data_end+0xfffe5344>
   24b7c:	00c00044 	movi	r3,1
   24b80:	003f9606 	br	249dc <__alt_data_end+0xfffe55dc>
   24b84:	000b883a 	mov	r5,zero
   24b88:	0005883a 	mov	r2,zero
   24b8c:	003f3506 	br	24864 <__alt_data_end+0xfffe5464>
   24b90:	01402034 	movhi	r5,128
   24b94:	297fffc4 	addi	r5,r5,-1
   24b98:	0005883a 	mov	r2,zero
   24b9c:	003f2f06 	br	2485c <__alt_data_end+0xfffe545c>
   24ba0:	3807883a 	mov	r3,r7
   24ba4:	04003fc4 	movi	r16,255
   24ba8:	003ee606 	br	24744 <__alt_data_end+0xfffe5344>
   24bac:	3807883a 	mov	r3,r7
   24bb0:	003ee406 	br	24744 <__alt_data_end+0xfffe5344>
   24bb4:	00c00044 	movi	r3,1
   24bb8:	003fbd06 	br	24ab0 <__alt_data_end+0xfffe56b0>
   24bbc:	0005883a 	mov	r2,zero
   24bc0:	003f2806 	br	24864 <__alt_data_end+0xfffe5464>

00024bc4 <__floatsisf>:
   24bc4:	defffd04 	addi	sp,sp,-12
   24bc8:	dfc00215 	stw	ra,8(sp)
   24bcc:	dc400115 	stw	r17,4(sp)
   24bd0:	dc000015 	stw	r16,0(sp)
   24bd4:	20003526 	beq	r4,zero,24cac <__floatsisf+0xe8>
   24bd8:	2021883a 	mov	r16,r4
   24bdc:	2022d7fa 	srli	r17,r4,31
   24be0:	20003616 	blt	r4,zero,24cbc <__floatsisf+0xf8>
   24be4:	8009883a 	mov	r4,r16
   24be8:	00272380 	call	27238 <__clzsi2>
   24bec:	00c02784 	movi	r3,158
   24bf0:	1887c83a 	sub	r3,r3,r2
   24bf4:	01002584 	movi	r4,150
   24bf8:	20c01416 	blt	r4,r3,24c4c <__floatsisf+0x88>
   24bfc:	20c9c83a 	sub	r4,r4,r3
   24c00:	8120983a 	sll	r16,r16,r4
   24c04:	00802034 	movhi	r2,128
   24c08:	10bfffc4 	addi	r2,r2,-1
   24c0c:	8809883a 	mov	r4,r17
   24c10:	80a0703a 	and	r16,r16,r2
   24c14:	18803fcc 	andi	r2,r3,255
   24c18:	100695fa 	slli	r3,r2,23
   24c1c:	20803fcc 	andi	r2,r4,255
   24c20:	100897fa 	slli	r4,r2,31
   24c24:	00802034 	movhi	r2,128
   24c28:	10bfffc4 	addi	r2,r2,-1
   24c2c:	8084703a 	and	r2,r16,r2
   24c30:	10c4b03a 	or	r2,r2,r3
   24c34:	1104b03a 	or	r2,r2,r4
   24c38:	dfc00217 	ldw	ra,8(sp)
   24c3c:	dc400117 	ldw	r17,4(sp)
   24c40:	dc000017 	ldw	r16,0(sp)
   24c44:	dec00304 	addi	sp,sp,12
   24c48:	f800283a 	ret
   24c4c:	01002644 	movi	r4,153
   24c50:	20c01c16 	blt	r4,r3,24cc4 <__floatsisf+0x100>
   24c54:	20c9c83a 	sub	r4,r4,r3
   24c58:	8120983a 	sll	r16,r16,r4
   24c5c:	013f0034 	movhi	r4,64512
   24c60:	213fffc4 	addi	r4,r4,-1
   24c64:	814001cc 	andi	r5,r16,7
   24c68:	8108703a 	and	r4,r16,r4
   24c6c:	28000426 	beq	r5,zero,24c80 <__floatsisf+0xbc>
   24c70:	840003cc 	andi	r16,r16,15
   24c74:	01400104 	movi	r5,4
   24c78:	81400126 	beq	r16,r5,24c80 <__floatsisf+0xbc>
   24c7c:	2149883a 	add	r4,r4,r5
   24c80:	2141002c 	andhi	r5,r4,1024
   24c84:	28000526 	beq	r5,zero,24c9c <__floatsisf+0xd8>
   24c88:	00c027c4 	movi	r3,159
   24c8c:	1887c83a 	sub	r3,r3,r2
   24c90:	00bf0034 	movhi	r2,64512
   24c94:	10bfffc4 	addi	r2,r2,-1
   24c98:	2088703a 	and	r4,r4,r2
   24c9c:	202091ba 	slli	r16,r4,6
   24ca0:	8809883a 	mov	r4,r17
   24ca4:	8020d27a 	srli	r16,r16,9
   24ca8:	003fda06 	br	24c14 <__alt_data_end+0xfffe5814>
   24cac:	0009883a 	mov	r4,zero
   24cb0:	0007883a 	mov	r3,zero
   24cb4:	0021883a 	mov	r16,zero
   24cb8:	003fd606 	br	24c14 <__alt_data_end+0xfffe5814>
   24cbc:	0121c83a 	sub	r16,zero,r4
   24cc0:	003fc806 	br	24be4 <__alt_data_end+0xfffe57e4>
   24cc4:	01002e44 	movi	r4,185
   24cc8:	20c9c83a 	sub	r4,r4,r3
   24ccc:	01400144 	movi	r5,5
   24cd0:	8108983a 	sll	r4,r16,r4
   24cd4:	288bc83a 	sub	r5,r5,r2
   24cd8:	8160d83a 	srl	r16,r16,r5
   24cdc:	2008c03a 	cmpne	r4,r4,zero
   24ce0:	8120b03a 	or	r16,r16,r4
   24ce4:	003fdd06 	br	24c5c <__alt_data_end+0xfffe585c>

00024ce8 <__floatunsisf>:
   24ce8:	defffe04 	addi	sp,sp,-8
   24cec:	dfc00115 	stw	ra,4(sp)
   24cf0:	dc000015 	stw	r16,0(sp)
   24cf4:	20002c26 	beq	r4,zero,24da8 <__floatunsisf+0xc0>
   24cf8:	2021883a 	mov	r16,r4
   24cfc:	00272380 	call	27238 <__clzsi2>
   24d00:	00c02784 	movi	r3,158
   24d04:	1887c83a 	sub	r3,r3,r2
   24d08:	01002584 	movi	r4,150
   24d0c:	20c00f16 	blt	r4,r3,24d4c <__floatunsisf+0x64>
   24d10:	20c9c83a 	sub	r4,r4,r3
   24d14:	8108983a 	sll	r4,r16,r4
   24d18:	00802034 	movhi	r2,128
   24d1c:	10bfffc4 	addi	r2,r2,-1
   24d20:	2088703a 	and	r4,r4,r2
   24d24:	18803fcc 	andi	r2,r3,255
   24d28:	100695fa 	slli	r3,r2,23
   24d2c:	00802034 	movhi	r2,128
   24d30:	10bfffc4 	addi	r2,r2,-1
   24d34:	2084703a 	and	r2,r4,r2
   24d38:	10c4b03a 	or	r2,r2,r3
   24d3c:	dfc00117 	ldw	ra,4(sp)
   24d40:	dc000017 	ldw	r16,0(sp)
   24d44:	dec00204 	addi	sp,sp,8
   24d48:	f800283a 	ret
   24d4c:	01002644 	movi	r4,153
   24d50:	20c01816 	blt	r4,r3,24db4 <__floatunsisf+0xcc>
   24d54:	20c9c83a 	sub	r4,r4,r3
   24d58:	8108983a 	sll	r4,r16,r4
   24d5c:	017f0034 	movhi	r5,64512
   24d60:	297fffc4 	addi	r5,r5,-1
   24d64:	218001cc 	andi	r6,r4,7
   24d68:	214a703a 	and	r5,r4,r5
   24d6c:	30000426 	beq	r6,zero,24d80 <__floatunsisf+0x98>
   24d70:	210003cc 	andi	r4,r4,15
   24d74:	01800104 	movi	r6,4
   24d78:	21800126 	beq	r4,r6,24d80 <__floatunsisf+0x98>
   24d7c:	298b883a 	add	r5,r5,r6
   24d80:	2901002c 	andhi	r4,r5,1024
   24d84:	20000526 	beq	r4,zero,24d9c <__floatunsisf+0xb4>
   24d88:	00c027c4 	movi	r3,159
   24d8c:	1887c83a 	sub	r3,r3,r2
   24d90:	00bf0034 	movhi	r2,64512
   24d94:	10bfffc4 	addi	r2,r2,-1
   24d98:	288a703a 	and	r5,r5,r2
   24d9c:	280891ba 	slli	r4,r5,6
   24da0:	2008d27a 	srli	r4,r4,9
   24da4:	003fdf06 	br	24d24 <__alt_data_end+0xfffe5924>
   24da8:	0007883a 	mov	r3,zero
   24dac:	0009883a 	mov	r4,zero
   24db0:	003fdc06 	br	24d24 <__alt_data_end+0xfffe5924>
   24db4:	01402e44 	movi	r5,185
   24db8:	28cbc83a 	sub	r5,r5,r3
   24dbc:	01000144 	movi	r4,5
   24dc0:	2089c83a 	sub	r4,r4,r2
   24dc4:	814a983a 	sll	r5,r16,r5
   24dc8:	8108d83a 	srl	r4,r16,r4
   24dcc:	2820c03a 	cmpne	r16,r5,zero
   24dd0:	2408b03a 	or	r4,r4,r16
   24dd4:	003fe106 	br	24d5c <__alt_data_end+0xfffe595c>

00024dd8 <__adddf3>:
   24dd8:	02c00434 	movhi	r11,16
   24ddc:	5affffc4 	addi	r11,r11,-1
   24de0:	2806d7fa 	srli	r3,r5,31
   24de4:	2ad4703a 	and	r10,r5,r11
   24de8:	3ad2703a 	and	r9,r7,r11
   24dec:	3804d53a 	srli	r2,r7,20
   24df0:	3018d77a 	srli	r12,r6,29
   24df4:	280ad53a 	srli	r5,r5,20
   24df8:	501490fa 	slli	r10,r10,3
   24dfc:	2010d77a 	srli	r8,r4,29
   24e00:	481290fa 	slli	r9,r9,3
   24e04:	380ed7fa 	srli	r7,r7,31
   24e08:	defffb04 	addi	sp,sp,-20
   24e0c:	dc800215 	stw	r18,8(sp)
   24e10:	dc400115 	stw	r17,4(sp)
   24e14:	dc000015 	stw	r16,0(sp)
   24e18:	dfc00415 	stw	ra,16(sp)
   24e1c:	dcc00315 	stw	r19,12(sp)
   24e20:	1c803fcc 	andi	r18,r3,255
   24e24:	2c01ffcc 	andi	r16,r5,2047
   24e28:	5210b03a 	or	r8,r10,r8
   24e2c:	202290fa 	slli	r17,r4,3
   24e30:	1081ffcc 	andi	r2,r2,2047
   24e34:	4b12b03a 	or	r9,r9,r12
   24e38:	300c90fa 	slli	r6,r6,3
   24e3c:	91c07526 	beq	r18,r7,25014 <__adddf3+0x23c>
   24e40:	8087c83a 	sub	r3,r16,r2
   24e44:	00c0ab0e 	bge	zero,r3,250f4 <__adddf3+0x31c>
   24e48:	10002a1e 	bne	r2,zero,24ef4 <__adddf3+0x11c>
   24e4c:	4984b03a 	or	r2,r9,r6
   24e50:	1000961e 	bne	r2,zero,250ac <__adddf3+0x2d4>
   24e54:	888001cc 	andi	r2,r17,7
   24e58:	10000726 	beq	r2,zero,24e78 <__adddf3+0xa0>
   24e5c:	888003cc 	andi	r2,r17,15
   24e60:	00c00104 	movi	r3,4
   24e64:	10c00426 	beq	r2,r3,24e78 <__adddf3+0xa0>
   24e68:	88c7883a 	add	r3,r17,r3
   24e6c:	1c63803a 	cmpltu	r17,r3,r17
   24e70:	4451883a 	add	r8,r8,r17
   24e74:	1823883a 	mov	r17,r3
   24e78:	4080202c 	andhi	r2,r8,128
   24e7c:	10005926 	beq	r2,zero,24fe4 <__adddf3+0x20c>
   24e80:	84000044 	addi	r16,r16,1
   24e84:	0081ffc4 	movi	r2,2047
   24e88:	8080ba26 	beq	r16,r2,25174 <__adddf3+0x39c>
   24e8c:	00bfe034 	movhi	r2,65408
   24e90:	10bfffc4 	addi	r2,r2,-1
   24e94:	4090703a 	and	r8,r8,r2
   24e98:	4004977a 	slli	r2,r8,29
   24e9c:	4010927a 	slli	r8,r8,9
   24ea0:	8822d0fa 	srli	r17,r17,3
   24ea4:	8401ffcc 	andi	r16,r16,2047
   24ea8:	4010d33a 	srli	r8,r8,12
   24eac:	9007883a 	mov	r3,r18
   24eb0:	1444b03a 	or	r2,r2,r17
   24eb4:	8401ffcc 	andi	r16,r16,2047
   24eb8:	8020953a 	slli	r16,r16,20
   24ebc:	18c03fcc 	andi	r3,r3,255
   24ec0:	01000434 	movhi	r4,16
   24ec4:	213fffc4 	addi	r4,r4,-1
   24ec8:	180697fa 	slli	r3,r3,31
   24ecc:	4110703a 	and	r8,r8,r4
   24ed0:	4410b03a 	or	r8,r8,r16
   24ed4:	40c6b03a 	or	r3,r8,r3
   24ed8:	dfc00417 	ldw	ra,16(sp)
   24edc:	dcc00317 	ldw	r19,12(sp)
   24ee0:	dc800217 	ldw	r18,8(sp)
   24ee4:	dc400117 	ldw	r17,4(sp)
   24ee8:	dc000017 	ldw	r16,0(sp)
   24eec:	dec00504 	addi	sp,sp,20
   24ef0:	f800283a 	ret
   24ef4:	0081ffc4 	movi	r2,2047
   24ef8:	80bfd626 	beq	r16,r2,24e54 <__alt_data_end+0xfffe5a54>
   24efc:	4a402034 	orhi	r9,r9,128
   24f00:	00800e04 	movi	r2,56
   24f04:	10c09f16 	blt	r2,r3,25184 <__adddf3+0x3ac>
   24f08:	008007c4 	movi	r2,31
   24f0c:	10c0c216 	blt	r2,r3,25218 <__adddf3+0x440>
   24f10:	00800804 	movi	r2,32
   24f14:	10c5c83a 	sub	r2,r2,r3
   24f18:	488a983a 	sll	r5,r9,r2
   24f1c:	30c8d83a 	srl	r4,r6,r3
   24f20:	3084983a 	sll	r2,r6,r2
   24f24:	48c6d83a 	srl	r3,r9,r3
   24f28:	290cb03a 	or	r6,r5,r4
   24f2c:	1004c03a 	cmpne	r2,r2,zero
   24f30:	308cb03a 	or	r6,r6,r2
   24f34:	898dc83a 	sub	r6,r17,r6
   24f38:	89a3803a 	cmpltu	r17,r17,r6
   24f3c:	40d1c83a 	sub	r8,r8,r3
   24f40:	4451c83a 	sub	r8,r8,r17
   24f44:	3023883a 	mov	r17,r6
   24f48:	4080202c 	andhi	r2,r8,128
   24f4c:	10002326 	beq	r2,zero,24fdc <__adddf3+0x204>
   24f50:	04c02034 	movhi	r19,128
   24f54:	9cffffc4 	addi	r19,r19,-1
   24f58:	44e6703a 	and	r19,r8,r19
   24f5c:	98007626 	beq	r19,zero,25138 <__adddf3+0x360>
   24f60:	9809883a 	mov	r4,r19
   24f64:	00272380 	call	27238 <__clzsi2>
   24f68:	10fffe04 	addi	r3,r2,-8
   24f6c:	010007c4 	movi	r4,31
   24f70:	20c07716 	blt	r4,r3,25150 <__adddf3+0x378>
   24f74:	00800804 	movi	r2,32
   24f78:	10c5c83a 	sub	r2,r2,r3
   24f7c:	8884d83a 	srl	r2,r17,r2
   24f80:	98d0983a 	sll	r8,r19,r3
   24f84:	88e2983a 	sll	r17,r17,r3
   24f88:	1204b03a 	or	r2,r2,r8
   24f8c:	1c007416 	blt	r3,r16,25160 <__adddf3+0x388>
   24f90:	1c21c83a 	sub	r16,r3,r16
   24f94:	82000044 	addi	r8,r16,1
   24f98:	00c007c4 	movi	r3,31
   24f9c:	1a009116 	blt	r3,r8,251e4 <__adddf3+0x40c>
   24fa0:	00c00804 	movi	r3,32
   24fa4:	1a07c83a 	sub	r3,r3,r8
   24fa8:	8a08d83a 	srl	r4,r17,r8
   24fac:	88e2983a 	sll	r17,r17,r3
   24fb0:	10c6983a 	sll	r3,r2,r3
   24fb4:	1210d83a 	srl	r8,r2,r8
   24fb8:	8804c03a 	cmpne	r2,r17,zero
   24fbc:	1906b03a 	or	r3,r3,r4
   24fc0:	18a2b03a 	or	r17,r3,r2
   24fc4:	0021883a 	mov	r16,zero
   24fc8:	003fa206 	br	24e54 <__alt_data_end+0xfffe5a54>
   24fcc:	1890b03a 	or	r8,r3,r2
   24fd0:	40017d26 	beq	r8,zero,255c8 <__adddf3+0x7f0>
   24fd4:	1011883a 	mov	r8,r2
   24fd8:	1823883a 	mov	r17,r3
   24fdc:	888001cc 	andi	r2,r17,7
   24fe0:	103f9e1e 	bne	r2,zero,24e5c <__alt_data_end+0xfffe5a5c>
   24fe4:	4004977a 	slli	r2,r8,29
   24fe8:	8822d0fa 	srli	r17,r17,3
   24fec:	4010d0fa 	srli	r8,r8,3
   24ff0:	9007883a 	mov	r3,r18
   24ff4:	1444b03a 	or	r2,r2,r17
   24ff8:	0101ffc4 	movi	r4,2047
   24ffc:	81002426 	beq	r16,r4,25090 <__adddf3+0x2b8>
   25000:	8120703a 	and	r16,r16,r4
   25004:	01000434 	movhi	r4,16
   25008:	213fffc4 	addi	r4,r4,-1
   2500c:	4110703a 	and	r8,r8,r4
   25010:	003fa806 	br	24eb4 <__alt_data_end+0xfffe5ab4>
   25014:	8089c83a 	sub	r4,r16,r2
   25018:	01005e0e 	bge	zero,r4,25194 <__adddf3+0x3bc>
   2501c:	10002b26 	beq	r2,zero,250cc <__adddf3+0x2f4>
   25020:	0081ffc4 	movi	r2,2047
   25024:	80bf8b26 	beq	r16,r2,24e54 <__alt_data_end+0xfffe5a54>
   25028:	4a402034 	orhi	r9,r9,128
   2502c:	00800e04 	movi	r2,56
   25030:	1100a40e 	bge	r2,r4,252c4 <__adddf3+0x4ec>
   25034:	498cb03a 	or	r6,r9,r6
   25038:	300ac03a 	cmpne	r5,r6,zero
   2503c:	0013883a 	mov	r9,zero
   25040:	2c4b883a 	add	r5,r5,r17
   25044:	2c63803a 	cmpltu	r17,r5,r17
   25048:	4a11883a 	add	r8,r9,r8
   2504c:	8a11883a 	add	r8,r17,r8
   25050:	2823883a 	mov	r17,r5
   25054:	4080202c 	andhi	r2,r8,128
   25058:	103fe026 	beq	r2,zero,24fdc <__alt_data_end+0xfffe5bdc>
   2505c:	84000044 	addi	r16,r16,1
   25060:	0081ffc4 	movi	r2,2047
   25064:	8080d226 	beq	r16,r2,253b0 <__adddf3+0x5d8>
   25068:	00bfe034 	movhi	r2,65408
   2506c:	10bfffc4 	addi	r2,r2,-1
   25070:	4090703a 	and	r8,r8,r2
   25074:	880ad07a 	srli	r5,r17,1
   25078:	400897fa 	slli	r4,r8,31
   2507c:	88c0004c 	andi	r3,r17,1
   25080:	28e2b03a 	or	r17,r5,r3
   25084:	4010d07a 	srli	r8,r8,1
   25088:	2462b03a 	or	r17,r4,r17
   2508c:	003f7106 	br	24e54 <__alt_data_end+0xfffe5a54>
   25090:	4088b03a 	or	r4,r8,r2
   25094:	20014526 	beq	r4,zero,255ac <__adddf3+0x7d4>
   25098:	01000434 	movhi	r4,16
   2509c:	42000234 	orhi	r8,r8,8
   250a0:	213fffc4 	addi	r4,r4,-1
   250a4:	4110703a 	and	r8,r8,r4
   250a8:	003f8206 	br	24eb4 <__alt_data_end+0xfffe5ab4>
   250ac:	18ffffc4 	addi	r3,r3,-1
   250b0:	1800491e 	bne	r3,zero,251d8 <__adddf3+0x400>
   250b4:	898bc83a 	sub	r5,r17,r6
   250b8:	8963803a 	cmpltu	r17,r17,r5
   250bc:	4251c83a 	sub	r8,r8,r9
   250c0:	4451c83a 	sub	r8,r8,r17
   250c4:	2823883a 	mov	r17,r5
   250c8:	003f9f06 	br	24f48 <__alt_data_end+0xfffe5b48>
   250cc:	4984b03a 	or	r2,r9,r6
   250d0:	103f6026 	beq	r2,zero,24e54 <__alt_data_end+0xfffe5a54>
   250d4:	213fffc4 	addi	r4,r4,-1
   250d8:	2000931e 	bne	r4,zero,25328 <__adddf3+0x550>
   250dc:	898d883a 	add	r6,r17,r6
   250e0:	3463803a 	cmpltu	r17,r6,r17
   250e4:	4251883a 	add	r8,r8,r9
   250e8:	8a11883a 	add	r8,r17,r8
   250ec:	3023883a 	mov	r17,r6
   250f0:	003fd806 	br	25054 <__alt_data_end+0xfffe5c54>
   250f4:	1800541e 	bne	r3,zero,25248 <__adddf3+0x470>
   250f8:	80800044 	addi	r2,r16,1
   250fc:	1081ffcc 	andi	r2,r2,2047
   25100:	00c00044 	movi	r3,1
   25104:	1880a00e 	bge	r3,r2,25388 <__adddf3+0x5b0>
   25108:	8989c83a 	sub	r4,r17,r6
   2510c:	8905803a 	cmpltu	r2,r17,r4
   25110:	4267c83a 	sub	r19,r8,r9
   25114:	98a7c83a 	sub	r19,r19,r2
   25118:	9880202c 	andhi	r2,r19,128
   2511c:	10006326 	beq	r2,zero,252ac <__adddf3+0x4d4>
   25120:	3463c83a 	sub	r17,r6,r17
   25124:	4a07c83a 	sub	r3,r9,r8
   25128:	344d803a 	cmpltu	r6,r6,r17
   2512c:	19a7c83a 	sub	r19,r3,r6
   25130:	3825883a 	mov	r18,r7
   25134:	983f8a1e 	bne	r19,zero,24f60 <__alt_data_end+0xfffe5b60>
   25138:	8809883a 	mov	r4,r17
   2513c:	00272380 	call	27238 <__clzsi2>
   25140:	10800804 	addi	r2,r2,32
   25144:	10fffe04 	addi	r3,r2,-8
   25148:	010007c4 	movi	r4,31
   2514c:	20ff890e 	bge	r4,r3,24f74 <__alt_data_end+0xfffe5b74>
   25150:	10bff604 	addi	r2,r2,-40
   25154:	8884983a 	sll	r2,r17,r2
   25158:	0023883a 	mov	r17,zero
   2515c:	1c3f8c0e 	bge	r3,r16,24f90 <__alt_data_end+0xfffe5b90>
   25160:	023fe034 	movhi	r8,65408
   25164:	423fffc4 	addi	r8,r8,-1
   25168:	80e1c83a 	sub	r16,r16,r3
   2516c:	1210703a 	and	r8,r2,r8
   25170:	003f3806 	br	24e54 <__alt_data_end+0xfffe5a54>
   25174:	9007883a 	mov	r3,r18
   25178:	0011883a 	mov	r8,zero
   2517c:	0005883a 	mov	r2,zero
   25180:	003f4c06 	br	24eb4 <__alt_data_end+0xfffe5ab4>
   25184:	498cb03a 	or	r6,r9,r6
   25188:	300cc03a 	cmpne	r6,r6,zero
   2518c:	0007883a 	mov	r3,zero
   25190:	003f6806 	br	24f34 <__alt_data_end+0xfffe5b34>
   25194:	20009c1e 	bne	r4,zero,25408 <__adddf3+0x630>
   25198:	80800044 	addi	r2,r16,1
   2519c:	1141ffcc 	andi	r5,r2,2047
   251a0:	01000044 	movi	r4,1
   251a4:	2140670e 	bge	r4,r5,25344 <__adddf3+0x56c>
   251a8:	0101ffc4 	movi	r4,2047
   251ac:	11007f26 	beq	r2,r4,253ac <__adddf3+0x5d4>
   251b0:	898d883a 	add	r6,r17,r6
   251b4:	4247883a 	add	r3,r8,r9
   251b8:	3451803a 	cmpltu	r8,r6,r17
   251bc:	40d1883a 	add	r8,r8,r3
   251c0:	402297fa 	slli	r17,r8,31
   251c4:	300cd07a 	srli	r6,r6,1
   251c8:	4010d07a 	srli	r8,r8,1
   251cc:	1021883a 	mov	r16,r2
   251d0:	89a2b03a 	or	r17,r17,r6
   251d4:	003f1f06 	br	24e54 <__alt_data_end+0xfffe5a54>
   251d8:	0081ffc4 	movi	r2,2047
   251dc:	80bf481e 	bne	r16,r2,24f00 <__alt_data_end+0xfffe5b00>
   251e0:	003f1c06 	br	24e54 <__alt_data_end+0xfffe5a54>
   251e4:	843ff844 	addi	r16,r16,-31
   251e8:	01000804 	movi	r4,32
   251ec:	1406d83a 	srl	r3,r2,r16
   251f0:	41005026 	beq	r8,r4,25334 <__adddf3+0x55c>
   251f4:	01001004 	movi	r4,64
   251f8:	2211c83a 	sub	r8,r4,r8
   251fc:	1204983a 	sll	r2,r2,r8
   25200:	88a2b03a 	or	r17,r17,r2
   25204:	8822c03a 	cmpne	r17,r17,zero
   25208:	1c62b03a 	or	r17,r3,r17
   2520c:	0011883a 	mov	r8,zero
   25210:	0021883a 	mov	r16,zero
   25214:	003f7106 	br	24fdc <__alt_data_end+0xfffe5bdc>
   25218:	193ff804 	addi	r4,r3,-32
   2521c:	00800804 	movi	r2,32
   25220:	4908d83a 	srl	r4,r9,r4
   25224:	18804526 	beq	r3,r2,2533c <__adddf3+0x564>
   25228:	00801004 	movi	r2,64
   2522c:	10c5c83a 	sub	r2,r2,r3
   25230:	4886983a 	sll	r3,r9,r2
   25234:	198cb03a 	or	r6,r3,r6
   25238:	300cc03a 	cmpne	r6,r6,zero
   2523c:	218cb03a 	or	r6,r4,r6
   25240:	0007883a 	mov	r3,zero
   25244:	003f3b06 	br	24f34 <__alt_data_end+0xfffe5b34>
   25248:	80002a26 	beq	r16,zero,252f4 <__adddf3+0x51c>
   2524c:	0101ffc4 	movi	r4,2047
   25250:	11006826 	beq	r2,r4,253f4 <__adddf3+0x61c>
   25254:	00c7c83a 	sub	r3,zero,r3
   25258:	42002034 	orhi	r8,r8,128
   2525c:	01000e04 	movi	r4,56
   25260:	20c07c16 	blt	r4,r3,25454 <__adddf3+0x67c>
   25264:	010007c4 	movi	r4,31
   25268:	20c0da16 	blt	r4,r3,255d4 <__adddf3+0x7fc>
   2526c:	01000804 	movi	r4,32
   25270:	20c9c83a 	sub	r4,r4,r3
   25274:	4114983a 	sll	r10,r8,r4
   25278:	88cad83a 	srl	r5,r17,r3
   2527c:	8908983a 	sll	r4,r17,r4
   25280:	40c6d83a 	srl	r3,r8,r3
   25284:	5162b03a 	or	r17,r10,r5
   25288:	2008c03a 	cmpne	r4,r4,zero
   2528c:	8922b03a 	or	r17,r17,r4
   25290:	3463c83a 	sub	r17,r6,r17
   25294:	48c7c83a 	sub	r3,r9,r3
   25298:	344d803a 	cmpltu	r6,r6,r17
   2529c:	1991c83a 	sub	r8,r3,r6
   252a0:	1021883a 	mov	r16,r2
   252a4:	3825883a 	mov	r18,r7
   252a8:	003f2706 	br	24f48 <__alt_data_end+0xfffe5b48>
   252ac:	24d0b03a 	or	r8,r4,r19
   252b0:	40001b1e 	bne	r8,zero,25320 <__adddf3+0x548>
   252b4:	0005883a 	mov	r2,zero
   252b8:	0007883a 	mov	r3,zero
   252bc:	0021883a 	mov	r16,zero
   252c0:	003f4d06 	br	24ff8 <__alt_data_end+0xfffe5bf8>
   252c4:	008007c4 	movi	r2,31
   252c8:	11003c16 	blt	r2,r4,253bc <__adddf3+0x5e4>
   252cc:	00800804 	movi	r2,32
   252d0:	1105c83a 	sub	r2,r2,r4
   252d4:	488e983a 	sll	r7,r9,r2
   252d8:	310ad83a 	srl	r5,r6,r4
   252dc:	3084983a 	sll	r2,r6,r2
   252e0:	4912d83a 	srl	r9,r9,r4
   252e4:	394ab03a 	or	r5,r7,r5
   252e8:	1004c03a 	cmpne	r2,r2,zero
   252ec:	288ab03a 	or	r5,r5,r2
   252f0:	003f5306 	br	25040 <__alt_data_end+0xfffe5c40>
   252f4:	4448b03a 	or	r4,r8,r17
   252f8:	20003e26 	beq	r4,zero,253f4 <__adddf3+0x61c>
   252fc:	00c6303a 	nor	r3,zero,r3
   25300:	18003a1e 	bne	r3,zero,253ec <__adddf3+0x614>
   25304:	3463c83a 	sub	r17,r6,r17
   25308:	4a07c83a 	sub	r3,r9,r8
   2530c:	344d803a 	cmpltu	r6,r6,r17
   25310:	1991c83a 	sub	r8,r3,r6
   25314:	1021883a 	mov	r16,r2
   25318:	3825883a 	mov	r18,r7
   2531c:	003f0a06 	br	24f48 <__alt_data_end+0xfffe5b48>
   25320:	2023883a 	mov	r17,r4
   25324:	003f0d06 	br	24f5c <__alt_data_end+0xfffe5b5c>
   25328:	0081ffc4 	movi	r2,2047
   2532c:	80bf3f1e 	bne	r16,r2,2502c <__alt_data_end+0xfffe5c2c>
   25330:	003ec806 	br	24e54 <__alt_data_end+0xfffe5a54>
   25334:	0005883a 	mov	r2,zero
   25338:	003fb106 	br	25200 <__alt_data_end+0xfffe5e00>
   2533c:	0007883a 	mov	r3,zero
   25340:	003fbc06 	br	25234 <__alt_data_end+0xfffe5e34>
   25344:	4444b03a 	or	r2,r8,r17
   25348:	8000871e 	bne	r16,zero,25568 <__adddf3+0x790>
   2534c:	1000ba26 	beq	r2,zero,25638 <__adddf3+0x860>
   25350:	4984b03a 	or	r2,r9,r6
   25354:	103ebf26 	beq	r2,zero,24e54 <__alt_data_end+0xfffe5a54>
   25358:	8985883a 	add	r2,r17,r6
   2535c:	4247883a 	add	r3,r8,r9
   25360:	1451803a 	cmpltu	r8,r2,r17
   25364:	40d1883a 	add	r8,r8,r3
   25368:	40c0202c 	andhi	r3,r8,128
   2536c:	1023883a 	mov	r17,r2
   25370:	183f1a26 	beq	r3,zero,24fdc <__alt_data_end+0xfffe5bdc>
   25374:	00bfe034 	movhi	r2,65408
   25378:	10bfffc4 	addi	r2,r2,-1
   2537c:	2021883a 	mov	r16,r4
   25380:	4090703a 	and	r8,r8,r2
   25384:	003eb306 	br	24e54 <__alt_data_end+0xfffe5a54>
   25388:	4444b03a 	or	r2,r8,r17
   2538c:	8000291e 	bne	r16,zero,25434 <__adddf3+0x65c>
   25390:	10004b1e 	bne	r2,zero,254c0 <__adddf3+0x6e8>
   25394:	4990b03a 	or	r8,r9,r6
   25398:	40008b26 	beq	r8,zero,255c8 <__adddf3+0x7f0>
   2539c:	4811883a 	mov	r8,r9
   253a0:	3023883a 	mov	r17,r6
   253a4:	3825883a 	mov	r18,r7
   253a8:	003eaa06 	br	24e54 <__alt_data_end+0xfffe5a54>
   253ac:	1021883a 	mov	r16,r2
   253b0:	0011883a 	mov	r8,zero
   253b4:	0005883a 	mov	r2,zero
   253b8:	003f0f06 	br	24ff8 <__alt_data_end+0xfffe5bf8>
   253bc:	217ff804 	addi	r5,r4,-32
   253c0:	00800804 	movi	r2,32
   253c4:	494ad83a 	srl	r5,r9,r5
   253c8:	20807d26 	beq	r4,r2,255c0 <__adddf3+0x7e8>
   253cc:	00801004 	movi	r2,64
   253d0:	1109c83a 	sub	r4,r2,r4
   253d4:	4912983a 	sll	r9,r9,r4
   253d8:	498cb03a 	or	r6,r9,r6
   253dc:	300cc03a 	cmpne	r6,r6,zero
   253e0:	298ab03a 	or	r5,r5,r6
   253e4:	0013883a 	mov	r9,zero
   253e8:	003f1506 	br	25040 <__alt_data_end+0xfffe5c40>
   253ec:	0101ffc4 	movi	r4,2047
   253f0:	113f9a1e 	bne	r2,r4,2525c <__alt_data_end+0xfffe5e5c>
   253f4:	4811883a 	mov	r8,r9
   253f8:	3023883a 	mov	r17,r6
   253fc:	1021883a 	mov	r16,r2
   25400:	3825883a 	mov	r18,r7
   25404:	003e9306 	br	24e54 <__alt_data_end+0xfffe5a54>
   25408:	8000161e 	bne	r16,zero,25464 <__adddf3+0x68c>
   2540c:	444ab03a 	or	r5,r8,r17
   25410:	28005126 	beq	r5,zero,25558 <__adddf3+0x780>
   25414:	0108303a 	nor	r4,zero,r4
   25418:	20004d1e 	bne	r4,zero,25550 <__adddf3+0x778>
   2541c:	89a3883a 	add	r17,r17,r6
   25420:	4253883a 	add	r9,r8,r9
   25424:	898d803a 	cmpltu	r6,r17,r6
   25428:	3251883a 	add	r8,r6,r9
   2542c:	1021883a 	mov	r16,r2
   25430:	003f0806 	br	25054 <__alt_data_end+0xfffe5c54>
   25434:	1000301e 	bne	r2,zero,254f8 <__adddf3+0x720>
   25438:	4984b03a 	or	r2,r9,r6
   2543c:	10007126 	beq	r2,zero,25604 <__adddf3+0x82c>
   25440:	4811883a 	mov	r8,r9
   25444:	3023883a 	mov	r17,r6
   25448:	3825883a 	mov	r18,r7
   2544c:	0401ffc4 	movi	r16,2047
   25450:	003e8006 	br	24e54 <__alt_data_end+0xfffe5a54>
   25454:	4462b03a 	or	r17,r8,r17
   25458:	8822c03a 	cmpne	r17,r17,zero
   2545c:	0007883a 	mov	r3,zero
   25460:	003f8b06 	br	25290 <__alt_data_end+0xfffe5e90>
   25464:	0141ffc4 	movi	r5,2047
   25468:	11403b26 	beq	r2,r5,25558 <__adddf3+0x780>
   2546c:	0109c83a 	sub	r4,zero,r4
   25470:	42002034 	orhi	r8,r8,128
   25474:	01400e04 	movi	r5,56
   25478:	29006716 	blt	r5,r4,25618 <__adddf3+0x840>
   2547c:	014007c4 	movi	r5,31
   25480:	29007016 	blt	r5,r4,25644 <__adddf3+0x86c>
   25484:	01400804 	movi	r5,32
   25488:	290bc83a 	sub	r5,r5,r4
   2548c:	4154983a 	sll	r10,r8,r5
   25490:	890ed83a 	srl	r7,r17,r4
   25494:	894a983a 	sll	r5,r17,r5
   25498:	4108d83a 	srl	r4,r8,r4
   2549c:	51e2b03a 	or	r17,r10,r7
   254a0:	280ac03a 	cmpne	r5,r5,zero
   254a4:	8962b03a 	or	r17,r17,r5
   254a8:	89a3883a 	add	r17,r17,r6
   254ac:	2253883a 	add	r9,r4,r9
   254b0:	898d803a 	cmpltu	r6,r17,r6
   254b4:	3251883a 	add	r8,r6,r9
   254b8:	1021883a 	mov	r16,r2
   254bc:	003ee506 	br	25054 <__alt_data_end+0xfffe5c54>
   254c0:	4984b03a 	or	r2,r9,r6
   254c4:	103e6326 	beq	r2,zero,24e54 <__alt_data_end+0xfffe5a54>
   254c8:	8987c83a 	sub	r3,r17,r6
   254cc:	88c9803a 	cmpltu	r4,r17,r3
   254d0:	4245c83a 	sub	r2,r8,r9
   254d4:	1105c83a 	sub	r2,r2,r4
   254d8:	1100202c 	andhi	r4,r2,128
   254dc:	203ebb26 	beq	r4,zero,24fcc <__alt_data_end+0xfffe5bcc>
   254e0:	3463c83a 	sub	r17,r6,r17
   254e4:	4a07c83a 	sub	r3,r9,r8
   254e8:	344d803a 	cmpltu	r6,r6,r17
   254ec:	1991c83a 	sub	r8,r3,r6
   254f0:	3825883a 	mov	r18,r7
   254f4:	003e5706 	br	24e54 <__alt_data_end+0xfffe5a54>
   254f8:	4984b03a 	or	r2,r9,r6
   254fc:	10002e26 	beq	r2,zero,255b8 <__adddf3+0x7e0>
   25500:	4004d0fa 	srli	r2,r8,3
   25504:	8822d0fa 	srli	r17,r17,3
   25508:	4010977a 	slli	r8,r8,29
   2550c:	10c0022c 	andhi	r3,r2,8
   25510:	4462b03a 	or	r17,r8,r17
   25514:	18000826 	beq	r3,zero,25538 <__adddf3+0x760>
   25518:	4808d0fa 	srli	r4,r9,3
   2551c:	20c0022c 	andhi	r3,r4,8
   25520:	1800051e 	bne	r3,zero,25538 <__adddf3+0x760>
   25524:	300cd0fa 	srli	r6,r6,3
   25528:	4806977a 	slli	r3,r9,29
   2552c:	2005883a 	mov	r2,r4
   25530:	3825883a 	mov	r18,r7
   25534:	19a2b03a 	or	r17,r3,r6
   25538:	8810d77a 	srli	r8,r17,29
   2553c:	100490fa 	slli	r2,r2,3
   25540:	882290fa 	slli	r17,r17,3
   25544:	0401ffc4 	movi	r16,2047
   25548:	4090b03a 	or	r8,r8,r2
   2554c:	003e4106 	br	24e54 <__alt_data_end+0xfffe5a54>
   25550:	0141ffc4 	movi	r5,2047
   25554:	117fc71e 	bne	r2,r5,25474 <__alt_data_end+0xfffe6074>
   25558:	4811883a 	mov	r8,r9
   2555c:	3023883a 	mov	r17,r6
   25560:	1021883a 	mov	r16,r2
   25564:	003e3b06 	br	24e54 <__alt_data_end+0xfffe5a54>
   25568:	10002f26 	beq	r2,zero,25628 <__adddf3+0x850>
   2556c:	4984b03a 	or	r2,r9,r6
   25570:	10001126 	beq	r2,zero,255b8 <__adddf3+0x7e0>
   25574:	4004d0fa 	srli	r2,r8,3
   25578:	8822d0fa 	srli	r17,r17,3
   2557c:	4010977a 	slli	r8,r8,29
   25580:	10c0022c 	andhi	r3,r2,8
   25584:	4462b03a 	or	r17,r8,r17
   25588:	183feb26 	beq	r3,zero,25538 <__alt_data_end+0xfffe6138>
   2558c:	4808d0fa 	srli	r4,r9,3
   25590:	20c0022c 	andhi	r3,r4,8
   25594:	183fe81e 	bne	r3,zero,25538 <__alt_data_end+0xfffe6138>
   25598:	300cd0fa 	srli	r6,r6,3
   2559c:	4806977a 	slli	r3,r9,29
   255a0:	2005883a 	mov	r2,r4
   255a4:	19a2b03a 	or	r17,r3,r6
   255a8:	003fe306 	br	25538 <__alt_data_end+0xfffe6138>
   255ac:	0011883a 	mov	r8,zero
   255b0:	0005883a 	mov	r2,zero
   255b4:	003e3f06 	br	24eb4 <__alt_data_end+0xfffe5ab4>
   255b8:	0401ffc4 	movi	r16,2047
   255bc:	003e2506 	br	24e54 <__alt_data_end+0xfffe5a54>
   255c0:	0013883a 	mov	r9,zero
   255c4:	003f8406 	br	253d8 <__alt_data_end+0xfffe5fd8>
   255c8:	0005883a 	mov	r2,zero
   255cc:	0007883a 	mov	r3,zero
   255d0:	003e8906 	br	24ff8 <__alt_data_end+0xfffe5bf8>
   255d4:	197ff804 	addi	r5,r3,-32
   255d8:	01000804 	movi	r4,32
   255dc:	414ad83a 	srl	r5,r8,r5
   255e0:	19002426 	beq	r3,r4,25674 <__adddf3+0x89c>
   255e4:	01001004 	movi	r4,64
   255e8:	20c7c83a 	sub	r3,r4,r3
   255ec:	40c6983a 	sll	r3,r8,r3
   255f0:	1c46b03a 	or	r3,r3,r17
   255f4:	1806c03a 	cmpne	r3,r3,zero
   255f8:	28e2b03a 	or	r17,r5,r3
   255fc:	0007883a 	mov	r3,zero
   25600:	003f2306 	br	25290 <__alt_data_end+0xfffe5e90>
   25604:	0007883a 	mov	r3,zero
   25608:	5811883a 	mov	r8,r11
   2560c:	00bfffc4 	movi	r2,-1
   25610:	0401ffc4 	movi	r16,2047
   25614:	003e7806 	br	24ff8 <__alt_data_end+0xfffe5bf8>
   25618:	4462b03a 	or	r17,r8,r17
   2561c:	8822c03a 	cmpne	r17,r17,zero
   25620:	0009883a 	mov	r4,zero
   25624:	003fa006 	br	254a8 <__alt_data_end+0xfffe60a8>
   25628:	4811883a 	mov	r8,r9
   2562c:	3023883a 	mov	r17,r6
   25630:	0401ffc4 	movi	r16,2047
   25634:	003e0706 	br	24e54 <__alt_data_end+0xfffe5a54>
   25638:	4811883a 	mov	r8,r9
   2563c:	3023883a 	mov	r17,r6
   25640:	003e0406 	br	24e54 <__alt_data_end+0xfffe5a54>
   25644:	21fff804 	addi	r7,r4,-32
   25648:	01400804 	movi	r5,32
   2564c:	41ced83a 	srl	r7,r8,r7
   25650:	21400a26 	beq	r4,r5,2567c <__adddf3+0x8a4>
   25654:	01401004 	movi	r5,64
   25658:	2909c83a 	sub	r4,r5,r4
   2565c:	4108983a 	sll	r4,r8,r4
   25660:	2448b03a 	or	r4,r4,r17
   25664:	2008c03a 	cmpne	r4,r4,zero
   25668:	3922b03a 	or	r17,r7,r4
   2566c:	0009883a 	mov	r4,zero
   25670:	003f8d06 	br	254a8 <__alt_data_end+0xfffe60a8>
   25674:	0007883a 	mov	r3,zero
   25678:	003fdd06 	br	255f0 <__alt_data_end+0xfffe61f0>
   2567c:	0009883a 	mov	r4,zero
   25680:	003ff706 	br	25660 <__alt_data_end+0xfffe6260>

00025684 <__divdf3>:
   25684:	defff204 	addi	sp,sp,-56
   25688:	dd400915 	stw	r21,36(sp)
   2568c:	282ad53a 	srli	r21,r5,20
   25690:	dd000815 	stw	r20,32(sp)
   25694:	2828d7fa 	srli	r20,r5,31
   25698:	dc000415 	stw	r16,16(sp)
   2569c:	04000434 	movhi	r16,16
   256a0:	df000c15 	stw	fp,48(sp)
   256a4:	843fffc4 	addi	r16,r16,-1
   256a8:	dfc00d15 	stw	ra,52(sp)
   256ac:	ddc00b15 	stw	r23,44(sp)
   256b0:	dd800a15 	stw	r22,40(sp)
   256b4:	dcc00715 	stw	r19,28(sp)
   256b8:	dc800615 	stw	r18,24(sp)
   256bc:	dc400515 	stw	r17,20(sp)
   256c0:	ad41ffcc 	andi	r21,r21,2047
   256c4:	2c20703a 	and	r16,r5,r16
   256c8:	a7003fcc 	andi	fp,r20,255
   256cc:	a8006126 	beq	r21,zero,25854 <__divdf3+0x1d0>
   256d0:	0081ffc4 	movi	r2,2047
   256d4:	2025883a 	mov	r18,r4
   256d8:	a8803726 	beq	r21,r2,257b8 <__divdf3+0x134>
   256dc:	80800434 	orhi	r2,r16,16
   256e0:	100490fa 	slli	r2,r2,3
   256e4:	2020d77a 	srli	r16,r4,29
   256e8:	202490fa 	slli	r18,r4,3
   256ec:	ad7f0044 	addi	r21,r21,-1023
   256f0:	80a0b03a 	or	r16,r16,r2
   256f4:	0027883a 	mov	r19,zero
   256f8:	0013883a 	mov	r9,zero
   256fc:	3804d53a 	srli	r2,r7,20
   25700:	382cd7fa 	srli	r22,r7,31
   25704:	04400434 	movhi	r17,16
   25708:	8c7fffc4 	addi	r17,r17,-1
   2570c:	1081ffcc 	andi	r2,r2,2047
   25710:	3011883a 	mov	r8,r6
   25714:	3c62703a 	and	r17,r7,r17
   25718:	b5c03fcc 	andi	r23,r22,255
   2571c:	10006c26 	beq	r2,zero,258d0 <__divdf3+0x24c>
   25720:	00c1ffc4 	movi	r3,2047
   25724:	10c06426 	beq	r2,r3,258b8 <__divdf3+0x234>
   25728:	88c00434 	orhi	r3,r17,16
   2572c:	180690fa 	slli	r3,r3,3
   25730:	3022d77a 	srli	r17,r6,29
   25734:	301090fa 	slli	r8,r6,3
   25738:	10bf0044 	addi	r2,r2,-1023
   2573c:	88e2b03a 	or	r17,r17,r3
   25740:	000f883a 	mov	r7,zero
   25744:	a58cf03a 	xor	r6,r20,r22
   25748:	3cc8b03a 	or	r4,r7,r19
   2574c:	a8abc83a 	sub	r21,r21,r2
   25750:	008003c4 	movi	r2,15
   25754:	3007883a 	mov	r3,r6
   25758:	34c03fcc 	andi	r19,r6,255
   2575c:	11009036 	bltu	r2,r4,259a0 <__divdf3+0x31c>
   25760:	200890ba 	slli	r4,r4,2
   25764:	008000b4 	movhi	r2,2
   25768:	1095de04 	addi	r2,r2,22392
   2576c:	2089883a 	add	r4,r4,r2
   25770:	20800017 	ldw	r2,0(r4)
   25774:	1000683a 	jmp	r2
   25778:	000259a0 	cmpeqi	zero,zero,2406
   2577c:	000257f0 	cmpltui	zero,zero,2399
   25780:	00025990 	cmplti	zero,zero,2406
   25784:	000257e4 	muli	zero,zero,2399
   25788:	00025990 	cmplti	zero,zero,2406
   2578c:	00025964 	muli	zero,zero,2405
   25790:	00025990 	cmplti	zero,zero,2406
   25794:	000257e4 	muli	zero,zero,2399
   25798:	000257f0 	cmpltui	zero,zero,2399
   2579c:	000257f0 	cmpltui	zero,zero,2399
   257a0:	00025964 	muli	zero,zero,2405
   257a4:	000257e4 	muli	zero,zero,2399
   257a8:	000257d4 	movui	zero,2399
   257ac:	000257d4 	movui	zero,2399
   257b0:	000257d4 	movui	zero,2399
   257b4:	00025c84 	movi	zero,2418
   257b8:	2404b03a 	or	r2,r4,r16
   257bc:	1000661e 	bne	r2,zero,25958 <__divdf3+0x2d4>
   257c0:	04c00204 	movi	r19,8
   257c4:	0021883a 	mov	r16,zero
   257c8:	0025883a 	mov	r18,zero
   257cc:	02400084 	movi	r9,2
   257d0:	003fca06 	br	256fc <__alt_data_end+0xfffe62fc>
   257d4:	8023883a 	mov	r17,r16
   257d8:	9011883a 	mov	r8,r18
   257dc:	e02f883a 	mov	r23,fp
   257e0:	480f883a 	mov	r7,r9
   257e4:	00800084 	movi	r2,2
   257e8:	3881311e 	bne	r7,r2,25cb0 <__divdf3+0x62c>
   257ec:	b827883a 	mov	r19,r23
   257f0:	98c0004c 	andi	r3,r19,1
   257f4:	0081ffc4 	movi	r2,2047
   257f8:	000b883a 	mov	r5,zero
   257fc:	0025883a 	mov	r18,zero
   25800:	1004953a 	slli	r2,r2,20
   25804:	18c03fcc 	andi	r3,r3,255
   25808:	04400434 	movhi	r17,16
   2580c:	8c7fffc4 	addi	r17,r17,-1
   25810:	180697fa 	slli	r3,r3,31
   25814:	2c4a703a 	and	r5,r5,r17
   25818:	288ab03a 	or	r5,r5,r2
   2581c:	28c6b03a 	or	r3,r5,r3
   25820:	9005883a 	mov	r2,r18
   25824:	dfc00d17 	ldw	ra,52(sp)
   25828:	df000c17 	ldw	fp,48(sp)
   2582c:	ddc00b17 	ldw	r23,44(sp)
   25830:	dd800a17 	ldw	r22,40(sp)
   25834:	dd400917 	ldw	r21,36(sp)
   25838:	dd000817 	ldw	r20,32(sp)
   2583c:	dcc00717 	ldw	r19,28(sp)
   25840:	dc800617 	ldw	r18,24(sp)
   25844:	dc400517 	ldw	r17,20(sp)
   25848:	dc000417 	ldw	r16,16(sp)
   2584c:	dec00e04 	addi	sp,sp,56
   25850:	f800283a 	ret
   25854:	2404b03a 	or	r2,r4,r16
   25858:	2027883a 	mov	r19,r4
   2585c:	10003926 	beq	r2,zero,25944 <__divdf3+0x2c0>
   25860:	80012e26 	beq	r16,zero,25d1c <__divdf3+0x698>
   25864:	8009883a 	mov	r4,r16
   25868:	d9800315 	stw	r6,12(sp)
   2586c:	d9c00215 	stw	r7,8(sp)
   25870:	00272380 	call	27238 <__clzsi2>
   25874:	d9800317 	ldw	r6,12(sp)
   25878:	d9c00217 	ldw	r7,8(sp)
   2587c:	113ffd44 	addi	r4,r2,-11
   25880:	00c00704 	movi	r3,28
   25884:	19012116 	blt	r3,r4,25d0c <__divdf3+0x688>
   25888:	00c00744 	movi	r3,29
   2588c:	147ffe04 	addi	r17,r2,-8
   25890:	1907c83a 	sub	r3,r3,r4
   25894:	8460983a 	sll	r16,r16,r17
   25898:	98c6d83a 	srl	r3,r19,r3
   2589c:	9c64983a 	sll	r18,r19,r17
   258a0:	1c20b03a 	or	r16,r3,r16
   258a4:	1080fcc4 	addi	r2,r2,1011
   258a8:	00abc83a 	sub	r21,zero,r2
   258ac:	0027883a 	mov	r19,zero
   258b0:	0013883a 	mov	r9,zero
   258b4:	003f9106 	br	256fc <__alt_data_end+0xfffe62fc>
   258b8:	3446b03a 	or	r3,r6,r17
   258bc:	18001f1e 	bne	r3,zero,2593c <__divdf3+0x2b8>
   258c0:	0023883a 	mov	r17,zero
   258c4:	0011883a 	mov	r8,zero
   258c8:	01c00084 	movi	r7,2
   258cc:	003f9d06 	br	25744 <__alt_data_end+0xfffe6344>
   258d0:	3446b03a 	or	r3,r6,r17
   258d4:	18001526 	beq	r3,zero,2592c <__divdf3+0x2a8>
   258d8:	88011b26 	beq	r17,zero,25d48 <__divdf3+0x6c4>
   258dc:	8809883a 	mov	r4,r17
   258e0:	d9800315 	stw	r6,12(sp)
   258e4:	da400115 	stw	r9,4(sp)
   258e8:	00272380 	call	27238 <__clzsi2>
   258ec:	d9800317 	ldw	r6,12(sp)
   258f0:	da400117 	ldw	r9,4(sp)
   258f4:	113ffd44 	addi	r4,r2,-11
   258f8:	00c00704 	movi	r3,28
   258fc:	19010e16 	blt	r3,r4,25d38 <__divdf3+0x6b4>
   25900:	00c00744 	movi	r3,29
   25904:	123ffe04 	addi	r8,r2,-8
   25908:	1907c83a 	sub	r3,r3,r4
   2590c:	8a22983a 	sll	r17,r17,r8
   25910:	30c6d83a 	srl	r3,r6,r3
   25914:	3210983a 	sll	r8,r6,r8
   25918:	1c62b03a 	or	r17,r3,r17
   2591c:	1080fcc4 	addi	r2,r2,1011
   25920:	0085c83a 	sub	r2,zero,r2
   25924:	000f883a 	mov	r7,zero
   25928:	003f8606 	br	25744 <__alt_data_end+0xfffe6344>
   2592c:	0023883a 	mov	r17,zero
   25930:	0011883a 	mov	r8,zero
   25934:	01c00044 	movi	r7,1
   25938:	003f8206 	br	25744 <__alt_data_end+0xfffe6344>
   2593c:	01c000c4 	movi	r7,3
   25940:	003f8006 	br	25744 <__alt_data_end+0xfffe6344>
   25944:	04c00104 	movi	r19,4
   25948:	0021883a 	mov	r16,zero
   2594c:	0025883a 	mov	r18,zero
   25950:	02400044 	movi	r9,1
   25954:	003f6906 	br	256fc <__alt_data_end+0xfffe62fc>
   25958:	04c00304 	movi	r19,12
   2595c:	024000c4 	movi	r9,3
   25960:	003f6606 	br	256fc <__alt_data_end+0xfffe62fc>
   25964:	01400434 	movhi	r5,16
   25968:	0007883a 	mov	r3,zero
   2596c:	297fffc4 	addi	r5,r5,-1
   25970:	04bfffc4 	movi	r18,-1
   25974:	0081ffc4 	movi	r2,2047
   25978:	003fa106 	br	25800 <__alt_data_end+0xfffe6400>
   2597c:	00c00044 	movi	r3,1
   25980:	1887c83a 	sub	r3,r3,r2
   25984:	01000e04 	movi	r4,56
   25988:	20c1210e 	bge	r4,r3,25e10 <__divdf3+0x78c>
   2598c:	98c0004c 	andi	r3,r19,1
   25990:	0005883a 	mov	r2,zero
   25994:	000b883a 	mov	r5,zero
   25998:	0025883a 	mov	r18,zero
   2599c:	003f9806 	br	25800 <__alt_data_end+0xfffe6400>
   259a0:	8c00fd36 	bltu	r17,r16,25d98 <__divdf3+0x714>
   259a4:	8440fb26 	beq	r16,r17,25d94 <__divdf3+0x710>
   259a8:	8007883a 	mov	r3,r16
   259ac:	ad7fffc4 	addi	r21,r21,-1
   259b0:	0021883a 	mov	r16,zero
   259b4:	4004d63a 	srli	r2,r8,24
   259b8:	8822923a 	slli	r17,r17,8
   259bc:	1809883a 	mov	r4,r3
   259c0:	402c923a 	slli	r22,r8,8
   259c4:	88b8b03a 	or	fp,r17,r2
   259c8:	e028d43a 	srli	r20,fp,16
   259cc:	d8c00015 	stw	r3,0(sp)
   259d0:	e5ffffcc 	andi	r23,fp,65535
   259d4:	a00b883a 	mov	r5,r20
   259d8:	00239200 	call	23920 <__udivsi3>
   259dc:	d8c00017 	ldw	r3,0(sp)
   259e0:	a00b883a 	mov	r5,r20
   259e4:	d8800315 	stw	r2,12(sp)
   259e8:	1809883a 	mov	r4,r3
   259ec:	00239840 	call	23984 <__umodsi3>
   259f0:	d9800317 	ldw	r6,12(sp)
   259f4:	1006943a 	slli	r3,r2,16
   259f8:	9004d43a 	srli	r2,r18,16
   259fc:	b9a3383a 	mul	r17,r23,r6
   25a00:	10c4b03a 	or	r2,r2,r3
   25a04:	1440062e 	bgeu	r2,r17,25a20 <__divdf3+0x39c>
   25a08:	1705883a 	add	r2,r2,fp
   25a0c:	30ffffc4 	addi	r3,r6,-1
   25a10:	1700ee36 	bltu	r2,fp,25dcc <__divdf3+0x748>
   25a14:	1440ed2e 	bgeu	r2,r17,25dcc <__divdf3+0x748>
   25a18:	31bfff84 	addi	r6,r6,-2
   25a1c:	1705883a 	add	r2,r2,fp
   25a20:	1463c83a 	sub	r17,r2,r17
   25a24:	a00b883a 	mov	r5,r20
   25a28:	8809883a 	mov	r4,r17
   25a2c:	d9800315 	stw	r6,12(sp)
   25a30:	00239200 	call	23920 <__udivsi3>
   25a34:	a00b883a 	mov	r5,r20
   25a38:	8809883a 	mov	r4,r17
   25a3c:	d8800215 	stw	r2,8(sp)
   25a40:	00239840 	call	23984 <__umodsi3>
   25a44:	d9c00217 	ldw	r7,8(sp)
   25a48:	1004943a 	slli	r2,r2,16
   25a4c:	94bfffcc 	andi	r18,r18,65535
   25a50:	b9d1383a 	mul	r8,r23,r7
   25a54:	90a4b03a 	or	r18,r18,r2
   25a58:	d9800317 	ldw	r6,12(sp)
   25a5c:	9200062e 	bgeu	r18,r8,25a78 <__divdf3+0x3f4>
   25a60:	9725883a 	add	r18,r18,fp
   25a64:	38bfffc4 	addi	r2,r7,-1
   25a68:	9700d636 	bltu	r18,fp,25dc4 <__divdf3+0x740>
   25a6c:	9200d52e 	bgeu	r18,r8,25dc4 <__divdf3+0x740>
   25a70:	39ffff84 	addi	r7,r7,-2
   25a74:	9725883a 	add	r18,r18,fp
   25a78:	3004943a 	slli	r2,r6,16
   25a7c:	b012d43a 	srli	r9,r22,16
   25a80:	b1bfffcc 	andi	r6,r22,65535
   25a84:	11e2b03a 	or	r17,r2,r7
   25a88:	8806d43a 	srli	r3,r17,16
   25a8c:	893fffcc 	andi	r4,r17,65535
   25a90:	218b383a 	mul	r5,r4,r6
   25a94:	30c5383a 	mul	r2,r6,r3
   25a98:	2249383a 	mul	r4,r4,r9
   25a9c:	280ed43a 	srli	r7,r5,16
   25aa0:	9225c83a 	sub	r18,r18,r8
   25aa4:	2089883a 	add	r4,r4,r2
   25aa8:	3909883a 	add	r4,r7,r4
   25aac:	1a47383a 	mul	r3,r3,r9
   25ab0:	2080022e 	bgeu	r4,r2,25abc <__divdf3+0x438>
   25ab4:	00800074 	movhi	r2,1
   25ab8:	1887883a 	add	r3,r3,r2
   25abc:	2004d43a 	srli	r2,r4,16
   25ac0:	2008943a 	slli	r4,r4,16
   25ac4:	297fffcc 	andi	r5,r5,65535
   25ac8:	10c7883a 	add	r3,r2,r3
   25acc:	2149883a 	add	r4,r4,r5
   25ad0:	90c0a536 	bltu	r18,r3,25d68 <__divdf3+0x6e4>
   25ad4:	90c0bf26 	beq	r18,r3,25dd4 <__divdf3+0x750>
   25ad8:	90c7c83a 	sub	r3,r18,r3
   25adc:	810fc83a 	sub	r7,r16,r4
   25ae0:	81e5803a 	cmpltu	r18,r16,r7
   25ae4:	1ca5c83a 	sub	r18,r3,r18
   25ae8:	e480c126 	beq	fp,r18,25df0 <__divdf3+0x76c>
   25aec:	a00b883a 	mov	r5,r20
   25af0:	9009883a 	mov	r4,r18
   25af4:	d9800315 	stw	r6,12(sp)
   25af8:	d9c00215 	stw	r7,8(sp)
   25afc:	da400115 	stw	r9,4(sp)
   25b00:	00239200 	call	23920 <__udivsi3>
   25b04:	a00b883a 	mov	r5,r20
   25b08:	9009883a 	mov	r4,r18
   25b0c:	d8800015 	stw	r2,0(sp)
   25b10:	00239840 	call	23984 <__umodsi3>
   25b14:	d9c00217 	ldw	r7,8(sp)
   25b18:	da000017 	ldw	r8,0(sp)
   25b1c:	1006943a 	slli	r3,r2,16
   25b20:	3804d43a 	srli	r2,r7,16
   25b24:	ba21383a 	mul	r16,r23,r8
   25b28:	d9800317 	ldw	r6,12(sp)
   25b2c:	10c4b03a 	or	r2,r2,r3
   25b30:	da400117 	ldw	r9,4(sp)
   25b34:	1400062e 	bgeu	r2,r16,25b50 <__divdf3+0x4cc>
   25b38:	1705883a 	add	r2,r2,fp
   25b3c:	40ffffc4 	addi	r3,r8,-1
   25b40:	1700ad36 	bltu	r2,fp,25df8 <__divdf3+0x774>
   25b44:	1400ac2e 	bgeu	r2,r16,25df8 <__divdf3+0x774>
   25b48:	423fff84 	addi	r8,r8,-2
   25b4c:	1705883a 	add	r2,r2,fp
   25b50:	1421c83a 	sub	r16,r2,r16
   25b54:	a00b883a 	mov	r5,r20
   25b58:	8009883a 	mov	r4,r16
   25b5c:	d9800315 	stw	r6,12(sp)
   25b60:	d9c00215 	stw	r7,8(sp)
   25b64:	da000015 	stw	r8,0(sp)
   25b68:	da400115 	stw	r9,4(sp)
   25b6c:	00239200 	call	23920 <__udivsi3>
   25b70:	8009883a 	mov	r4,r16
   25b74:	a00b883a 	mov	r5,r20
   25b78:	1025883a 	mov	r18,r2
   25b7c:	00239840 	call	23984 <__umodsi3>
   25b80:	d9c00217 	ldw	r7,8(sp)
   25b84:	1004943a 	slli	r2,r2,16
   25b88:	bcaf383a 	mul	r23,r23,r18
   25b8c:	393fffcc 	andi	r4,r7,65535
   25b90:	2088b03a 	or	r4,r4,r2
   25b94:	d9800317 	ldw	r6,12(sp)
   25b98:	da000017 	ldw	r8,0(sp)
   25b9c:	da400117 	ldw	r9,4(sp)
   25ba0:	25c0062e 	bgeu	r4,r23,25bbc <__divdf3+0x538>
   25ba4:	2709883a 	add	r4,r4,fp
   25ba8:	90bfffc4 	addi	r2,r18,-1
   25bac:	27009436 	bltu	r4,fp,25e00 <__divdf3+0x77c>
   25bb0:	25c0932e 	bgeu	r4,r23,25e00 <__divdf3+0x77c>
   25bb4:	94bfff84 	addi	r18,r18,-2
   25bb8:	2709883a 	add	r4,r4,fp
   25bbc:	4004943a 	slli	r2,r8,16
   25bc0:	25efc83a 	sub	r23,r4,r23
   25bc4:	1490b03a 	or	r8,r2,r18
   25bc8:	4008d43a 	srli	r4,r8,16
   25bcc:	40ffffcc 	andi	r3,r8,65535
   25bd0:	30c5383a 	mul	r2,r6,r3
   25bd4:	1a47383a 	mul	r3,r3,r9
   25bd8:	310d383a 	mul	r6,r6,r4
   25bdc:	100ad43a 	srli	r5,r2,16
   25be0:	4913383a 	mul	r9,r9,r4
   25be4:	1987883a 	add	r3,r3,r6
   25be8:	28c7883a 	add	r3,r5,r3
   25bec:	1980022e 	bgeu	r3,r6,25bf8 <__divdf3+0x574>
   25bf0:	01000074 	movhi	r4,1
   25bf4:	4913883a 	add	r9,r9,r4
   25bf8:	1808d43a 	srli	r4,r3,16
   25bfc:	1806943a 	slli	r3,r3,16
   25c00:	10bfffcc 	andi	r2,r2,65535
   25c04:	2253883a 	add	r9,r4,r9
   25c08:	1887883a 	add	r3,r3,r2
   25c0c:	ba403836 	bltu	r23,r9,25cf0 <__divdf3+0x66c>
   25c10:	ba403626 	beq	r23,r9,25cec <__divdf3+0x668>
   25c14:	42000054 	ori	r8,r8,1
   25c18:	a880ffc4 	addi	r2,r21,1023
   25c1c:	00bf570e 	bge	zero,r2,2597c <__alt_data_end+0xfffe657c>
   25c20:	40c001cc 	andi	r3,r8,7
   25c24:	18000726 	beq	r3,zero,25c44 <__divdf3+0x5c0>
   25c28:	40c003cc 	andi	r3,r8,15
   25c2c:	01000104 	movi	r4,4
   25c30:	19000426 	beq	r3,r4,25c44 <__divdf3+0x5c0>
   25c34:	4107883a 	add	r3,r8,r4
   25c38:	1a11803a 	cmpltu	r8,r3,r8
   25c3c:	8a23883a 	add	r17,r17,r8
   25c40:	1811883a 	mov	r8,r3
   25c44:	88c0402c 	andhi	r3,r17,256
   25c48:	18000426 	beq	r3,zero,25c5c <__divdf3+0x5d8>
   25c4c:	00ffc034 	movhi	r3,65280
   25c50:	18ffffc4 	addi	r3,r3,-1
   25c54:	a8810004 	addi	r2,r21,1024
   25c58:	88e2703a 	and	r17,r17,r3
   25c5c:	00c1ff84 	movi	r3,2046
   25c60:	18bee316 	blt	r3,r2,257f0 <__alt_data_end+0xfffe63f0>
   25c64:	8824977a 	slli	r18,r17,29
   25c68:	4010d0fa 	srli	r8,r8,3
   25c6c:	8822927a 	slli	r17,r17,9
   25c70:	1081ffcc 	andi	r2,r2,2047
   25c74:	9224b03a 	or	r18,r18,r8
   25c78:	880ad33a 	srli	r5,r17,12
   25c7c:	98c0004c 	andi	r3,r19,1
   25c80:	003edf06 	br	25800 <__alt_data_end+0xfffe6400>
   25c84:	8080022c 	andhi	r2,r16,8
   25c88:	10001226 	beq	r2,zero,25cd4 <__divdf3+0x650>
   25c8c:	8880022c 	andhi	r2,r17,8
   25c90:	1000101e 	bne	r2,zero,25cd4 <__divdf3+0x650>
   25c94:	00800434 	movhi	r2,16
   25c98:	89400234 	orhi	r5,r17,8
   25c9c:	10bfffc4 	addi	r2,r2,-1
   25ca0:	b007883a 	mov	r3,r22
   25ca4:	288a703a 	and	r5,r5,r2
   25ca8:	4025883a 	mov	r18,r8
   25cac:	003f3106 	br	25974 <__alt_data_end+0xfffe6574>
   25cb0:	008000c4 	movi	r2,3
   25cb4:	3880a626 	beq	r7,r2,25f50 <__divdf3+0x8cc>
   25cb8:	00800044 	movi	r2,1
   25cbc:	3880521e 	bne	r7,r2,25e08 <__divdf3+0x784>
   25cc0:	b807883a 	mov	r3,r23
   25cc4:	0005883a 	mov	r2,zero
   25cc8:	000b883a 	mov	r5,zero
   25ccc:	0025883a 	mov	r18,zero
   25cd0:	003ecb06 	br	25800 <__alt_data_end+0xfffe6400>
   25cd4:	00800434 	movhi	r2,16
   25cd8:	81400234 	orhi	r5,r16,8
   25cdc:	10bfffc4 	addi	r2,r2,-1
   25ce0:	a007883a 	mov	r3,r20
   25ce4:	288a703a 	and	r5,r5,r2
   25ce8:	003f2206 	br	25974 <__alt_data_end+0xfffe6574>
   25cec:	183fca26 	beq	r3,zero,25c18 <__alt_data_end+0xfffe6818>
   25cf0:	e5ef883a 	add	r23,fp,r23
   25cf4:	40bfffc4 	addi	r2,r8,-1
   25cf8:	bf00392e 	bgeu	r23,fp,25de0 <__divdf3+0x75c>
   25cfc:	1011883a 	mov	r8,r2
   25d00:	ba7fc41e 	bne	r23,r9,25c14 <__alt_data_end+0xfffe6814>
   25d04:	b0ffc31e 	bne	r22,r3,25c14 <__alt_data_end+0xfffe6814>
   25d08:	003fc306 	br	25c18 <__alt_data_end+0xfffe6818>
   25d0c:	143ff604 	addi	r16,r2,-40
   25d10:	9c20983a 	sll	r16,r19,r16
   25d14:	0025883a 	mov	r18,zero
   25d18:	003ee206 	br	258a4 <__alt_data_end+0xfffe64a4>
   25d1c:	d9800315 	stw	r6,12(sp)
   25d20:	d9c00215 	stw	r7,8(sp)
   25d24:	00272380 	call	27238 <__clzsi2>
   25d28:	10800804 	addi	r2,r2,32
   25d2c:	d9c00217 	ldw	r7,8(sp)
   25d30:	d9800317 	ldw	r6,12(sp)
   25d34:	003ed106 	br	2587c <__alt_data_end+0xfffe647c>
   25d38:	147ff604 	addi	r17,r2,-40
   25d3c:	3462983a 	sll	r17,r6,r17
   25d40:	0011883a 	mov	r8,zero
   25d44:	003ef506 	br	2591c <__alt_data_end+0xfffe651c>
   25d48:	3009883a 	mov	r4,r6
   25d4c:	d9800315 	stw	r6,12(sp)
   25d50:	da400115 	stw	r9,4(sp)
   25d54:	00272380 	call	27238 <__clzsi2>
   25d58:	10800804 	addi	r2,r2,32
   25d5c:	da400117 	ldw	r9,4(sp)
   25d60:	d9800317 	ldw	r6,12(sp)
   25d64:	003ee306 	br	258f4 <__alt_data_end+0xfffe64f4>
   25d68:	85a1883a 	add	r16,r16,r22
   25d6c:	8585803a 	cmpltu	r2,r16,r22
   25d70:	1705883a 	add	r2,r2,fp
   25d74:	14a5883a 	add	r18,r2,r18
   25d78:	88bfffc4 	addi	r2,r17,-1
   25d7c:	e4800c2e 	bgeu	fp,r18,25db0 <__divdf3+0x72c>
   25d80:	90c03e36 	bltu	r18,r3,25e7c <__divdf3+0x7f8>
   25d84:	1c806926 	beq	r3,r18,25f2c <__divdf3+0x8a8>
   25d88:	90c7c83a 	sub	r3,r18,r3
   25d8c:	1023883a 	mov	r17,r2
   25d90:	003f5206 	br	25adc <__alt_data_end+0xfffe66dc>
   25d94:	923f0436 	bltu	r18,r8,259a8 <__alt_data_end+0xfffe65a8>
   25d98:	800897fa 	slli	r4,r16,31
   25d9c:	9004d07a 	srli	r2,r18,1
   25da0:	8006d07a 	srli	r3,r16,1
   25da4:	902097fa 	slli	r16,r18,31
   25da8:	20a4b03a 	or	r18,r4,r2
   25dac:	003f0106 	br	259b4 <__alt_data_end+0xfffe65b4>
   25db0:	e4bff51e 	bne	fp,r18,25d88 <__alt_data_end+0xfffe6988>
   25db4:	85bff22e 	bgeu	r16,r22,25d80 <__alt_data_end+0xfffe6980>
   25db8:	e0c7c83a 	sub	r3,fp,r3
   25dbc:	1023883a 	mov	r17,r2
   25dc0:	003f4606 	br	25adc <__alt_data_end+0xfffe66dc>
   25dc4:	100f883a 	mov	r7,r2
   25dc8:	003f2b06 	br	25a78 <__alt_data_end+0xfffe6678>
   25dcc:	180d883a 	mov	r6,r3
   25dd0:	003f1306 	br	25a20 <__alt_data_end+0xfffe6620>
   25dd4:	813fe436 	bltu	r16,r4,25d68 <__alt_data_end+0xfffe6968>
   25dd8:	0007883a 	mov	r3,zero
   25ddc:	003f3f06 	br	25adc <__alt_data_end+0xfffe66dc>
   25de0:	ba402c36 	bltu	r23,r9,25e94 <__divdf3+0x810>
   25de4:	4dc05426 	beq	r9,r23,25f38 <__divdf3+0x8b4>
   25de8:	1011883a 	mov	r8,r2
   25dec:	003f8906 	br	25c14 <__alt_data_end+0xfffe6814>
   25df0:	023fffc4 	movi	r8,-1
   25df4:	003f8806 	br	25c18 <__alt_data_end+0xfffe6818>
   25df8:	1811883a 	mov	r8,r3
   25dfc:	003f5406 	br	25b50 <__alt_data_end+0xfffe6750>
   25e00:	1025883a 	mov	r18,r2
   25e04:	003f6d06 	br	25bbc <__alt_data_end+0xfffe67bc>
   25e08:	b827883a 	mov	r19,r23
   25e0c:	003f8206 	br	25c18 <__alt_data_end+0xfffe6818>
   25e10:	010007c4 	movi	r4,31
   25e14:	20c02616 	blt	r4,r3,25eb0 <__divdf3+0x82c>
   25e18:	00800804 	movi	r2,32
   25e1c:	10c5c83a 	sub	r2,r2,r3
   25e20:	888a983a 	sll	r5,r17,r2
   25e24:	40c8d83a 	srl	r4,r8,r3
   25e28:	4084983a 	sll	r2,r8,r2
   25e2c:	88e2d83a 	srl	r17,r17,r3
   25e30:	2906b03a 	or	r3,r5,r4
   25e34:	1004c03a 	cmpne	r2,r2,zero
   25e38:	1886b03a 	or	r3,r3,r2
   25e3c:	188001cc 	andi	r2,r3,7
   25e40:	10000726 	beq	r2,zero,25e60 <__divdf3+0x7dc>
   25e44:	188003cc 	andi	r2,r3,15
   25e48:	01000104 	movi	r4,4
   25e4c:	11000426 	beq	r2,r4,25e60 <__divdf3+0x7dc>
   25e50:	1805883a 	mov	r2,r3
   25e54:	10c00104 	addi	r3,r2,4
   25e58:	1885803a 	cmpltu	r2,r3,r2
   25e5c:	88a3883a 	add	r17,r17,r2
   25e60:	8880202c 	andhi	r2,r17,128
   25e64:	10002726 	beq	r2,zero,25f04 <__divdf3+0x880>
   25e68:	98c0004c 	andi	r3,r19,1
   25e6c:	00800044 	movi	r2,1
   25e70:	000b883a 	mov	r5,zero
   25e74:	0025883a 	mov	r18,zero
   25e78:	003e6106 	br	25800 <__alt_data_end+0xfffe6400>
   25e7c:	85a1883a 	add	r16,r16,r22
   25e80:	8585803a 	cmpltu	r2,r16,r22
   25e84:	1705883a 	add	r2,r2,fp
   25e88:	14a5883a 	add	r18,r2,r18
   25e8c:	8c7fff84 	addi	r17,r17,-2
   25e90:	003f1106 	br	25ad8 <__alt_data_end+0xfffe66d8>
   25e94:	b589883a 	add	r4,r22,r22
   25e98:	25ad803a 	cmpltu	r22,r4,r22
   25e9c:	b739883a 	add	fp,r22,fp
   25ea0:	40bfff84 	addi	r2,r8,-2
   25ea4:	bf2f883a 	add	r23,r23,fp
   25ea8:	202d883a 	mov	r22,r4
   25eac:	003f9306 	br	25cfc <__alt_data_end+0xfffe68fc>
   25eb0:	013ff844 	movi	r4,-31
   25eb4:	2085c83a 	sub	r2,r4,r2
   25eb8:	8888d83a 	srl	r4,r17,r2
   25ebc:	00800804 	movi	r2,32
   25ec0:	18802126 	beq	r3,r2,25f48 <__divdf3+0x8c4>
   25ec4:	00801004 	movi	r2,64
   25ec8:	10c5c83a 	sub	r2,r2,r3
   25ecc:	8884983a 	sll	r2,r17,r2
   25ed0:	1204b03a 	or	r2,r2,r8
   25ed4:	1004c03a 	cmpne	r2,r2,zero
   25ed8:	2084b03a 	or	r2,r4,r2
   25edc:	144001cc 	andi	r17,r2,7
   25ee0:	88000d1e 	bne	r17,zero,25f18 <__divdf3+0x894>
   25ee4:	000b883a 	mov	r5,zero
   25ee8:	1024d0fa 	srli	r18,r2,3
   25eec:	98c0004c 	andi	r3,r19,1
   25ef0:	0005883a 	mov	r2,zero
   25ef4:	9464b03a 	or	r18,r18,r17
   25ef8:	003e4106 	br	25800 <__alt_data_end+0xfffe6400>
   25efc:	1007883a 	mov	r3,r2
   25f00:	0023883a 	mov	r17,zero
   25f04:	880a927a 	slli	r5,r17,9
   25f08:	1805883a 	mov	r2,r3
   25f0c:	8822977a 	slli	r17,r17,29
   25f10:	280ad33a 	srli	r5,r5,12
   25f14:	003ff406 	br	25ee8 <__alt_data_end+0xfffe6ae8>
   25f18:	10c003cc 	andi	r3,r2,15
   25f1c:	01000104 	movi	r4,4
   25f20:	193ff626 	beq	r3,r4,25efc <__alt_data_end+0xfffe6afc>
   25f24:	0023883a 	mov	r17,zero
   25f28:	003fca06 	br	25e54 <__alt_data_end+0xfffe6a54>
   25f2c:	813fd336 	bltu	r16,r4,25e7c <__alt_data_end+0xfffe6a7c>
   25f30:	1023883a 	mov	r17,r2
   25f34:	003fa806 	br	25dd8 <__alt_data_end+0xfffe69d8>
   25f38:	b0ffd636 	bltu	r22,r3,25e94 <__alt_data_end+0xfffe6a94>
   25f3c:	1011883a 	mov	r8,r2
   25f40:	b0ff341e 	bne	r22,r3,25c14 <__alt_data_end+0xfffe6814>
   25f44:	003f3406 	br	25c18 <__alt_data_end+0xfffe6818>
   25f48:	0005883a 	mov	r2,zero
   25f4c:	003fe006 	br	25ed0 <__alt_data_end+0xfffe6ad0>
   25f50:	00800434 	movhi	r2,16
   25f54:	89400234 	orhi	r5,r17,8
   25f58:	10bfffc4 	addi	r2,r2,-1
   25f5c:	b807883a 	mov	r3,r23
   25f60:	288a703a 	and	r5,r5,r2
   25f64:	4025883a 	mov	r18,r8
   25f68:	003e8206 	br	25974 <__alt_data_end+0xfffe6574>

00025f6c <__muldf3>:
   25f6c:	defff304 	addi	sp,sp,-52
   25f70:	2804d53a 	srli	r2,r5,20
   25f74:	dd800915 	stw	r22,36(sp)
   25f78:	282cd7fa 	srli	r22,r5,31
   25f7c:	dc000315 	stw	r16,12(sp)
   25f80:	04000434 	movhi	r16,16
   25f84:	dd400815 	stw	r21,32(sp)
   25f88:	dc800515 	stw	r18,20(sp)
   25f8c:	843fffc4 	addi	r16,r16,-1
   25f90:	dfc00c15 	stw	ra,48(sp)
   25f94:	df000b15 	stw	fp,44(sp)
   25f98:	ddc00a15 	stw	r23,40(sp)
   25f9c:	dd000715 	stw	r20,28(sp)
   25fa0:	dcc00615 	stw	r19,24(sp)
   25fa4:	dc400415 	stw	r17,16(sp)
   25fa8:	1481ffcc 	andi	r18,r2,2047
   25fac:	2c20703a 	and	r16,r5,r16
   25fb0:	b02b883a 	mov	r21,r22
   25fb4:	b2403fcc 	andi	r9,r22,255
   25fb8:	90006026 	beq	r18,zero,2613c <__muldf3+0x1d0>
   25fbc:	0081ffc4 	movi	r2,2047
   25fc0:	2029883a 	mov	r20,r4
   25fc4:	90803626 	beq	r18,r2,260a0 <__muldf3+0x134>
   25fc8:	80800434 	orhi	r2,r16,16
   25fcc:	100490fa 	slli	r2,r2,3
   25fd0:	2020d77a 	srli	r16,r4,29
   25fd4:	202890fa 	slli	r20,r4,3
   25fd8:	94bf0044 	addi	r18,r18,-1023
   25fdc:	80a0b03a 	or	r16,r16,r2
   25fe0:	0027883a 	mov	r19,zero
   25fe4:	0039883a 	mov	fp,zero
   25fe8:	3804d53a 	srli	r2,r7,20
   25fec:	382ed7fa 	srli	r23,r7,31
   25ff0:	04400434 	movhi	r17,16
   25ff4:	8c7fffc4 	addi	r17,r17,-1
   25ff8:	1081ffcc 	andi	r2,r2,2047
   25ffc:	3011883a 	mov	r8,r6
   26000:	3c62703a 	and	r17,r7,r17
   26004:	ba803fcc 	andi	r10,r23,255
   26008:	10006d26 	beq	r2,zero,261c0 <__muldf3+0x254>
   2600c:	00c1ffc4 	movi	r3,2047
   26010:	10c06526 	beq	r2,r3,261a8 <__muldf3+0x23c>
   26014:	88c00434 	orhi	r3,r17,16
   26018:	180690fa 	slli	r3,r3,3
   2601c:	3022d77a 	srli	r17,r6,29
   26020:	301090fa 	slli	r8,r6,3
   26024:	10bf0044 	addi	r2,r2,-1023
   26028:	88e2b03a 	or	r17,r17,r3
   2602c:	000b883a 	mov	r5,zero
   26030:	9085883a 	add	r2,r18,r2
   26034:	2cc8b03a 	or	r4,r5,r19
   26038:	00c003c4 	movi	r3,15
   2603c:	bdacf03a 	xor	r22,r23,r22
   26040:	12c00044 	addi	r11,r2,1
   26044:	19009936 	bltu	r3,r4,262ac <__muldf3+0x340>
   26048:	200890ba 	slli	r4,r4,2
   2604c:	00c000b4 	movhi	r3,2
   26050:	18d81804 	addi	r3,r3,24672
   26054:	20c9883a 	add	r4,r4,r3
   26058:	20c00017 	ldw	r3,0(r4)
   2605c:	1800683a 	jmp	r3
   26060:	000262ac 	andhi	zero,zero,2442
   26064:	000260c0 	call	260c <__reset-0x1d9f4>
   26068:	000260c0 	call	260c <__reset-0x1d9f4>
   2606c:	000260bc 	xorhi	zero,zero,2434
   26070:	00026288 	cmpgei	zero,zero,2442
   26074:	00026288 	cmpgei	zero,zero,2442
   26078:	00026270 	cmpltui	zero,zero,2441
   2607c:	000260bc 	xorhi	zero,zero,2434
   26080:	00026288 	cmpgei	zero,zero,2442
   26084:	00026270 	cmpltui	zero,zero,2441
   26088:	00026288 	cmpgei	zero,zero,2442
   2608c:	000260bc 	xorhi	zero,zero,2434
   26090:	00026298 	cmpnei	zero,zero,2442
   26094:	00026298 	cmpnei	zero,zero,2442
   26098:	00026298 	cmpnei	zero,zero,2442
   2609c:	000264b4 	movhi	zero,2450
   260a0:	2404b03a 	or	r2,r4,r16
   260a4:	10006f1e 	bne	r2,zero,26264 <__muldf3+0x2f8>
   260a8:	04c00204 	movi	r19,8
   260ac:	0021883a 	mov	r16,zero
   260b0:	0029883a 	mov	r20,zero
   260b4:	07000084 	movi	fp,2
   260b8:	003fcb06 	br	25fe8 <__alt_data_end+0xfffe6be8>
   260bc:	502d883a 	mov	r22,r10
   260c0:	00800084 	movi	r2,2
   260c4:	28805726 	beq	r5,r2,26224 <__muldf3+0x2b8>
   260c8:	008000c4 	movi	r2,3
   260cc:	28816626 	beq	r5,r2,26668 <__muldf3+0x6fc>
   260d0:	00800044 	movi	r2,1
   260d4:	2881411e 	bne	r5,r2,265dc <__muldf3+0x670>
   260d8:	b02b883a 	mov	r21,r22
   260dc:	0005883a 	mov	r2,zero
   260e0:	000b883a 	mov	r5,zero
   260e4:	0029883a 	mov	r20,zero
   260e8:	1004953a 	slli	r2,r2,20
   260ec:	a8c03fcc 	andi	r3,r21,255
   260f0:	04400434 	movhi	r17,16
   260f4:	8c7fffc4 	addi	r17,r17,-1
   260f8:	180697fa 	slli	r3,r3,31
   260fc:	2c4a703a 	and	r5,r5,r17
   26100:	288ab03a 	or	r5,r5,r2
   26104:	28c6b03a 	or	r3,r5,r3
   26108:	a005883a 	mov	r2,r20
   2610c:	dfc00c17 	ldw	ra,48(sp)
   26110:	df000b17 	ldw	fp,44(sp)
   26114:	ddc00a17 	ldw	r23,40(sp)
   26118:	dd800917 	ldw	r22,36(sp)
   2611c:	dd400817 	ldw	r21,32(sp)
   26120:	dd000717 	ldw	r20,28(sp)
   26124:	dcc00617 	ldw	r19,24(sp)
   26128:	dc800517 	ldw	r18,20(sp)
   2612c:	dc400417 	ldw	r17,16(sp)
   26130:	dc000317 	ldw	r16,12(sp)
   26134:	dec00d04 	addi	sp,sp,52
   26138:	f800283a 	ret
   2613c:	2404b03a 	or	r2,r4,r16
   26140:	2027883a 	mov	r19,r4
   26144:	10004226 	beq	r2,zero,26250 <__muldf3+0x2e4>
   26148:	8000fc26 	beq	r16,zero,2653c <__muldf3+0x5d0>
   2614c:	8009883a 	mov	r4,r16
   26150:	d9800215 	stw	r6,8(sp)
   26154:	d9c00015 	stw	r7,0(sp)
   26158:	da400115 	stw	r9,4(sp)
   2615c:	00272380 	call	27238 <__clzsi2>
   26160:	d9800217 	ldw	r6,8(sp)
   26164:	d9c00017 	ldw	r7,0(sp)
   26168:	da400117 	ldw	r9,4(sp)
   2616c:	113ffd44 	addi	r4,r2,-11
   26170:	00c00704 	movi	r3,28
   26174:	1900ed16 	blt	r3,r4,2652c <__muldf3+0x5c0>
   26178:	00c00744 	movi	r3,29
   2617c:	147ffe04 	addi	r17,r2,-8
   26180:	1907c83a 	sub	r3,r3,r4
   26184:	8460983a 	sll	r16,r16,r17
   26188:	98c6d83a 	srl	r3,r19,r3
   2618c:	9c68983a 	sll	r20,r19,r17
   26190:	1c20b03a 	or	r16,r3,r16
   26194:	1080fcc4 	addi	r2,r2,1011
   26198:	00a5c83a 	sub	r18,zero,r2
   2619c:	0027883a 	mov	r19,zero
   261a0:	0039883a 	mov	fp,zero
   261a4:	003f9006 	br	25fe8 <__alt_data_end+0xfffe6be8>
   261a8:	3446b03a 	or	r3,r6,r17
   261ac:	1800261e 	bne	r3,zero,26248 <__muldf3+0x2dc>
   261b0:	0023883a 	mov	r17,zero
   261b4:	0011883a 	mov	r8,zero
   261b8:	01400084 	movi	r5,2
   261bc:	003f9c06 	br	26030 <__alt_data_end+0xfffe6c30>
   261c0:	3446b03a 	or	r3,r6,r17
   261c4:	18001c26 	beq	r3,zero,26238 <__muldf3+0x2cc>
   261c8:	8800ce26 	beq	r17,zero,26504 <__muldf3+0x598>
   261cc:	8809883a 	mov	r4,r17
   261d0:	d9800215 	stw	r6,8(sp)
   261d4:	da400115 	stw	r9,4(sp)
   261d8:	da800015 	stw	r10,0(sp)
   261dc:	00272380 	call	27238 <__clzsi2>
   261e0:	d9800217 	ldw	r6,8(sp)
   261e4:	da400117 	ldw	r9,4(sp)
   261e8:	da800017 	ldw	r10,0(sp)
   261ec:	113ffd44 	addi	r4,r2,-11
   261f0:	00c00704 	movi	r3,28
   261f4:	1900bf16 	blt	r3,r4,264f4 <__muldf3+0x588>
   261f8:	00c00744 	movi	r3,29
   261fc:	123ffe04 	addi	r8,r2,-8
   26200:	1907c83a 	sub	r3,r3,r4
   26204:	8a22983a 	sll	r17,r17,r8
   26208:	30c6d83a 	srl	r3,r6,r3
   2620c:	3210983a 	sll	r8,r6,r8
   26210:	1c62b03a 	or	r17,r3,r17
   26214:	1080fcc4 	addi	r2,r2,1011
   26218:	0085c83a 	sub	r2,zero,r2
   2621c:	000b883a 	mov	r5,zero
   26220:	003f8306 	br	26030 <__alt_data_end+0xfffe6c30>
   26224:	b02b883a 	mov	r21,r22
   26228:	0081ffc4 	movi	r2,2047
   2622c:	000b883a 	mov	r5,zero
   26230:	0029883a 	mov	r20,zero
   26234:	003fac06 	br	260e8 <__alt_data_end+0xfffe6ce8>
   26238:	0023883a 	mov	r17,zero
   2623c:	0011883a 	mov	r8,zero
   26240:	01400044 	movi	r5,1
   26244:	003f7a06 	br	26030 <__alt_data_end+0xfffe6c30>
   26248:	014000c4 	movi	r5,3
   2624c:	003f7806 	br	26030 <__alt_data_end+0xfffe6c30>
   26250:	04c00104 	movi	r19,4
   26254:	0021883a 	mov	r16,zero
   26258:	0029883a 	mov	r20,zero
   2625c:	07000044 	movi	fp,1
   26260:	003f6106 	br	25fe8 <__alt_data_end+0xfffe6be8>
   26264:	04c00304 	movi	r19,12
   26268:	070000c4 	movi	fp,3
   2626c:	003f5e06 	br	25fe8 <__alt_data_end+0xfffe6be8>
   26270:	01400434 	movhi	r5,16
   26274:	002b883a 	mov	r21,zero
   26278:	297fffc4 	addi	r5,r5,-1
   2627c:	053fffc4 	movi	r20,-1
   26280:	0081ffc4 	movi	r2,2047
   26284:	003f9806 	br	260e8 <__alt_data_end+0xfffe6ce8>
   26288:	8023883a 	mov	r17,r16
   2628c:	a011883a 	mov	r8,r20
   26290:	e00b883a 	mov	r5,fp
   26294:	003f8a06 	br	260c0 <__alt_data_end+0xfffe6cc0>
   26298:	8023883a 	mov	r17,r16
   2629c:	a011883a 	mov	r8,r20
   262a0:	482d883a 	mov	r22,r9
   262a4:	e00b883a 	mov	r5,fp
   262a8:	003f8506 	br	260c0 <__alt_data_end+0xfffe6cc0>
   262ac:	a00ad43a 	srli	r5,r20,16
   262b0:	401ad43a 	srli	r13,r8,16
   262b4:	a53fffcc 	andi	r20,r20,65535
   262b8:	423fffcc 	andi	r8,r8,65535
   262bc:	4519383a 	mul	r12,r8,r20
   262c0:	4147383a 	mul	r3,r8,r5
   262c4:	6d09383a 	mul	r4,r13,r20
   262c8:	600cd43a 	srli	r6,r12,16
   262cc:	2b5d383a 	mul	r14,r5,r13
   262d0:	20c9883a 	add	r4,r4,r3
   262d4:	310d883a 	add	r6,r6,r4
   262d8:	30c0022e 	bgeu	r6,r3,262e4 <__muldf3+0x378>
   262dc:	00c00074 	movhi	r3,1
   262e0:	70dd883a 	add	r14,r14,r3
   262e4:	8826d43a 	srli	r19,r17,16
   262e8:	8bffffcc 	andi	r15,r17,65535
   262ec:	7d23383a 	mul	r17,r15,r20
   262f0:	7949383a 	mul	r4,r15,r5
   262f4:	9d29383a 	mul	r20,r19,r20
   262f8:	8814d43a 	srli	r10,r17,16
   262fc:	3012943a 	slli	r9,r6,16
   26300:	a129883a 	add	r20,r20,r4
   26304:	633fffcc 	andi	r12,r12,65535
   26308:	5515883a 	add	r10,r10,r20
   2630c:	3006d43a 	srli	r3,r6,16
   26310:	4b13883a 	add	r9,r9,r12
   26314:	2ccb383a 	mul	r5,r5,r19
   26318:	5100022e 	bgeu	r10,r4,26324 <__muldf3+0x3b8>
   2631c:	01000074 	movhi	r4,1
   26320:	290b883a 	add	r5,r5,r4
   26324:	802ad43a 	srli	r21,r16,16
   26328:	843fffcc 	andi	r16,r16,65535
   2632c:	440d383a 	mul	r6,r8,r16
   26330:	4565383a 	mul	r18,r8,r21
   26334:	8349383a 	mul	r4,r16,r13
   26338:	500e943a 	slli	r7,r10,16
   2633c:	3010d43a 	srli	r8,r6,16
   26340:	5028d43a 	srli	r20,r10,16
   26344:	2489883a 	add	r4,r4,r18
   26348:	8abfffcc 	andi	r10,r17,65535
   2634c:	3a95883a 	add	r10,r7,r10
   26350:	4119883a 	add	r12,r8,r4
   26354:	a169883a 	add	r20,r20,r5
   26358:	1a87883a 	add	r3,r3,r10
   2635c:	6d5b383a 	mul	r13,r13,r21
   26360:	6480022e 	bgeu	r12,r18,2636c <__muldf3+0x400>
   26364:	01000074 	movhi	r4,1
   26368:	691b883a 	add	r13,r13,r4
   2636c:	7c25383a 	mul	r18,r15,r16
   26370:	7d4b383a 	mul	r5,r15,r21
   26374:	84cf383a 	mul	r7,r16,r19
   26378:	901ed43a 	srli	r15,r18,16
   2637c:	6008d43a 	srli	r4,r12,16
   26380:	6010943a 	slli	r8,r12,16
   26384:	394f883a 	add	r7,r7,r5
   26388:	333fffcc 	andi	r12,r6,65535
   2638c:	79df883a 	add	r15,r15,r7
   26390:	235b883a 	add	r13,r4,r13
   26394:	9d63383a 	mul	r17,r19,r21
   26398:	4309883a 	add	r4,r8,r12
   2639c:	7940022e 	bgeu	r15,r5,263a8 <__muldf3+0x43c>
   263a0:	01400074 	movhi	r5,1
   263a4:	8963883a 	add	r17,r17,r5
   263a8:	780a943a 	slli	r5,r15,16
   263ac:	91bfffcc 	andi	r6,r18,65535
   263b0:	70c7883a 	add	r3,r14,r3
   263b4:	298d883a 	add	r6,r5,r6
   263b8:	1a8f803a 	cmpltu	r7,r3,r10
   263bc:	350b883a 	add	r5,r6,r20
   263c0:	20c7883a 	add	r3,r4,r3
   263c4:	3955883a 	add	r10,r7,r5
   263c8:	1909803a 	cmpltu	r4,r3,r4
   263cc:	6a91883a 	add	r8,r13,r10
   263d0:	780cd43a 	srli	r6,r15,16
   263d4:	2219883a 	add	r12,r4,r8
   263d8:	2d0b803a 	cmpltu	r5,r5,r20
   263dc:	51cf803a 	cmpltu	r7,r10,r7
   263e0:	29ceb03a 	or	r7,r5,r7
   263e4:	4351803a 	cmpltu	r8,r8,r13
   263e8:	610b803a 	cmpltu	r5,r12,r4
   263ec:	4148b03a 	or	r4,r8,r5
   263f0:	398f883a 	add	r7,r7,r6
   263f4:	3909883a 	add	r4,r7,r4
   263f8:	1810927a 	slli	r8,r3,9
   263fc:	2449883a 	add	r4,r4,r17
   26400:	2008927a 	slli	r4,r4,9
   26404:	6022d5fa 	srli	r17,r12,23
   26408:	1806d5fa 	srli	r3,r3,23
   2640c:	4252b03a 	or	r9,r8,r9
   26410:	600a927a 	slli	r5,r12,9
   26414:	4810c03a 	cmpne	r8,r9,zero
   26418:	2462b03a 	or	r17,r4,r17
   2641c:	40c6b03a 	or	r3,r8,r3
   26420:	8900402c 	andhi	r4,r17,256
   26424:	1950b03a 	or	r8,r3,r5
   26428:	20000726 	beq	r4,zero,26448 <__muldf3+0x4dc>
   2642c:	4006d07a 	srli	r3,r8,1
   26430:	880497fa 	slli	r2,r17,31
   26434:	4200004c 	andi	r8,r8,1
   26438:	8822d07a 	srli	r17,r17,1
   2643c:	1a10b03a 	or	r8,r3,r8
   26440:	1210b03a 	or	r8,r2,r8
   26444:	5805883a 	mov	r2,r11
   26448:	1140ffc4 	addi	r5,r2,1023
   2644c:	0140440e 	bge	zero,r5,26560 <__muldf3+0x5f4>
   26450:	40c001cc 	andi	r3,r8,7
   26454:	18000726 	beq	r3,zero,26474 <__muldf3+0x508>
   26458:	40c003cc 	andi	r3,r8,15
   2645c:	01000104 	movi	r4,4
   26460:	19000426 	beq	r3,r4,26474 <__muldf3+0x508>
   26464:	4107883a 	add	r3,r8,r4
   26468:	1a11803a 	cmpltu	r8,r3,r8
   2646c:	8a23883a 	add	r17,r17,r8
   26470:	1811883a 	mov	r8,r3
   26474:	88c0402c 	andhi	r3,r17,256
   26478:	18000426 	beq	r3,zero,2648c <__muldf3+0x520>
   2647c:	11410004 	addi	r5,r2,1024
   26480:	00bfc034 	movhi	r2,65280
   26484:	10bfffc4 	addi	r2,r2,-1
   26488:	88a2703a 	and	r17,r17,r2
   2648c:	0081ff84 	movi	r2,2046
   26490:	117f6416 	blt	r2,r5,26224 <__alt_data_end+0xfffe6e24>
   26494:	8828977a 	slli	r20,r17,29
   26498:	4010d0fa 	srli	r8,r8,3
   2649c:	8822927a 	slli	r17,r17,9
   264a0:	2881ffcc 	andi	r2,r5,2047
   264a4:	a228b03a 	or	r20,r20,r8
   264a8:	880ad33a 	srli	r5,r17,12
   264ac:	b02b883a 	mov	r21,r22
   264b0:	003f0d06 	br	260e8 <__alt_data_end+0xfffe6ce8>
   264b4:	8080022c 	andhi	r2,r16,8
   264b8:	10000926 	beq	r2,zero,264e0 <__muldf3+0x574>
   264bc:	8880022c 	andhi	r2,r17,8
   264c0:	1000071e 	bne	r2,zero,264e0 <__muldf3+0x574>
   264c4:	00800434 	movhi	r2,16
   264c8:	89400234 	orhi	r5,r17,8
   264cc:	10bfffc4 	addi	r2,r2,-1
   264d0:	b82b883a 	mov	r21,r23
   264d4:	288a703a 	and	r5,r5,r2
   264d8:	4029883a 	mov	r20,r8
   264dc:	003f6806 	br	26280 <__alt_data_end+0xfffe6e80>
   264e0:	00800434 	movhi	r2,16
   264e4:	81400234 	orhi	r5,r16,8
   264e8:	10bfffc4 	addi	r2,r2,-1
   264ec:	288a703a 	and	r5,r5,r2
   264f0:	003f6306 	br	26280 <__alt_data_end+0xfffe6e80>
   264f4:	147ff604 	addi	r17,r2,-40
   264f8:	3462983a 	sll	r17,r6,r17
   264fc:	0011883a 	mov	r8,zero
   26500:	003f4406 	br	26214 <__alt_data_end+0xfffe6e14>
   26504:	3009883a 	mov	r4,r6
   26508:	d9800215 	stw	r6,8(sp)
   2650c:	da400115 	stw	r9,4(sp)
   26510:	da800015 	stw	r10,0(sp)
   26514:	00272380 	call	27238 <__clzsi2>
   26518:	10800804 	addi	r2,r2,32
   2651c:	da800017 	ldw	r10,0(sp)
   26520:	da400117 	ldw	r9,4(sp)
   26524:	d9800217 	ldw	r6,8(sp)
   26528:	003f3006 	br	261ec <__alt_data_end+0xfffe6dec>
   2652c:	143ff604 	addi	r16,r2,-40
   26530:	9c20983a 	sll	r16,r19,r16
   26534:	0029883a 	mov	r20,zero
   26538:	003f1606 	br	26194 <__alt_data_end+0xfffe6d94>
   2653c:	d9800215 	stw	r6,8(sp)
   26540:	d9c00015 	stw	r7,0(sp)
   26544:	da400115 	stw	r9,4(sp)
   26548:	00272380 	call	27238 <__clzsi2>
   2654c:	10800804 	addi	r2,r2,32
   26550:	da400117 	ldw	r9,4(sp)
   26554:	d9c00017 	ldw	r7,0(sp)
   26558:	d9800217 	ldw	r6,8(sp)
   2655c:	003f0306 	br	2616c <__alt_data_end+0xfffe6d6c>
   26560:	00c00044 	movi	r3,1
   26564:	1947c83a 	sub	r3,r3,r5
   26568:	00800e04 	movi	r2,56
   2656c:	10feda16 	blt	r2,r3,260d8 <__alt_data_end+0xfffe6cd8>
   26570:	008007c4 	movi	r2,31
   26574:	10c01b16 	blt	r2,r3,265e4 <__muldf3+0x678>
   26578:	00800804 	movi	r2,32
   2657c:	10c5c83a 	sub	r2,r2,r3
   26580:	888a983a 	sll	r5,r17,r2
   26584:	40c8d83a 	srl	r4,r8,r3
   26588:	4084983a 	sll	r2,r8,r2
   2658c:	88e2d83a 	srl	r17,r17,r3
   26590:	2906b03a 	or	r3,r5,r4
   26594:	1004c03a 	cmpne	r2,r2,zero
   26598:	1886b03a 	or	r3,r3,r2
   2659c:	188001cc 	andi	r2,r3,7
   265a0:	10000726 	beq	r2,zero,265c0 <__muldf3+0x654>
   265a4:	188003cc 	andi	r2,r3,15
   265a8:	01000104 	movi	r4,4
   265ac:	11000426 	beq	r2,r4,265c0 <__muldf3+0x654>
   265b0:	1805883a 	mov	r2,r3
   265b4:	10c00104 	addi	r3,r2,4
   265b8:	1885803a 	cmpltu	r2,r3,r2
   265bc:	88a3883a 	add	r17,r17,r2
   265c0:	8880202c 	andhi	r2,r17,128
   265c4:	10001c26 	beq	r2,zero,26638 <__muldf3+0x6cc>
   265c8:	b02b883a 	mov	r21,r22
   265cc:	00800044 	movi	r2,1
   265d0:	000b883a 	mov	r5,zero
   265d4:	0029883a 	mov	r20,zero
   265d8:	003ec306 	br	260e8 <__alt_data_end+0xfffe6ce8>
   265dc:	5805883a 	mov	r2,r11
   265e0:	003f9906 	br	26448 <__alt_data_end+0xfffe7048>
   265e4:	00bff844 	movi	r2,-31
   265e8:	1145c83a 	sub	r2,r2,r5
   265ec:	8888d83a 	srl	r4,r17,r2
   265f0:	00800804 	movi	r2,32
   265f4:	18801a26 	beq	r3,r2,26660 <__muldf3+0x6f4>
   265f8:	00801004 	movi	r2,64
   265fc:	10c5c83a 	sub	r2,r2,r3
   26600:	8884983a 	sll	r2,r17,r2
   26604:	1204b03a 	or	r2,r2,r8
   26608:	1004c03a 	cmpne	r2,r2,zero
   2660c:	2084b03a 	or	r2,r4,r2
   26610:	144001cc 	andi	r17,r2,7
   26614:	88000d1e 	bne	r17,zero,2664c <__muldf3+0x6e0>
   26618:	000b883a 	mov	r5,zero
   2661c:	1028d0fa 	srli	r20,r2,3
   26620:	b02b883a 	mov	r21,r22
   26624:	0005883a 	mov	r2,zero
   26628:	a468b03a 	or	r20,r20,r17
   2662c:	003eae06 	br	260e8 <__alt_data_end+0xfffe6ce8>
   26630:	1007883a 	mov	r3,r2
   26634:	0023883a 	mov	r17,zero
   26638:	880a927a 	slli	r5,r17,9
   2663c:	1805883a 	mov	r2,r3
   26640:	8822977a 	slli	r17,r17,29
   26644:	280ad33a 	srli	r5,r5,12
   26648:	003ff406 	br	2661c <__alt_data_end+0xfffe721c>
   2664c:	10c003cc 	andi	r3,r2,15
   26650:	01000104 	movi	r4,4
   26654:	193ff626 	beq	r3,r4,26630 <__alt_data_end+0xfffe7230>
   26658:	0023883a 	mov	r17,zero
   2665c:	003fd506 	br	265b4 <__alt_data_end+0xfffe71b4>
   26660:	0005883a 	mov	r2,zero
   26664:	003fe706 	br	26604 <__alt_data_end+0xfffe7204>
   26668:	00800434 	movhi	r2,16
   2666c:	89400234 	orhi	r5,r17,8
   26670:	10bfffc4 	addi	r2,r2,-1
   26674:	b02b883a 	mov	r21,r22
   26678:	288a703a 	and	r5,r5,r2
   2667c:	4029883a 	mov	r20,r8
   26680:	003eff06 	br	26280 <__alt_data_end+0xfffe6e80>

00026684 <__subdf3>:
   26684:	02000434 	movhi	r8,16
   26688:	423fffc4 	addi	r8,r8,-1
   2668c:	defffb04 	addi	sp,sp,-20
   26690:	2a14703a 	and	r10,r5,r8
   26694:	3812d53a 	srli	r9,r7,20
   26698:	3a10703a 	and	r8,r7,r8
   2669c:	2006d77a 	srli	r3,r4,29
   266a0:	3004d77a 	srli	r2,r6,29
   266a4:	dc000015 	stw	r16,0(sp)
   266a8:	501490fa 	slli	r10,r10,3
   266ac:	2820d53a 	srli	r16,r5,20
   266b0:	401090fa 	slli	r8,r8,3
   266b4:	dc800215 	stw	r18,8(sp)
   266b8:	dc400115 	stw	r17,4(sp)
   266bc:	dfc00415 	stw	ra,16(sp)
   266c0:	202290fa 	slli	r17,r4,3
   266c4:	dcc00315 	stw	r19,12(sp)
   266c8:	4a41ffcc 	andi	r9,r9,2047
   266cc:	0101ffc4 	movi	r4,2047
   266d0:	2824d7fa 	srli	r18,r5,31
   266d4:	8401ffcc 	andi	r16,r16,2047
   266d8:	50c6b03a 	or	r3,r10,r3
   266dc:	380ed7fa 	srli	r7,r7,31
   266e0:	408ab03a 	or	r5,r8,r2
   266e4:	300c90fa 	slli	r6,r6,3
   266e8:	49009626 	beq	r9,r4,26944 <__subdf3+0x2c0>
   266ec:	39c0005c 	xori	r7,r7,1
   266f0:	8245c83a 	sub	r2,r16,r9
   266f4:	3c807426 	beq	r7,r18,268c8 <__subdf3+0x244>
   266f8:	0080af0e 	bge	zero,r2,269b8 <__subdf3+0x334>
   266fc:	48002a1e 	bne	r9,zero,267a8 <__subdf3+0x124>
   26700:	2988b03a 	or	r4,r5,r6
   26704:	20009a1e 	bne	r4,zero,26970 <__subdf3+0x2ec>
   26708:	888001cc 	andi	r2,r17,7
   2670c:	10000726 	beq	r2,zero,2672c <__subdf3+0xa8>
   26710:	888003cc 	andi	r2,r17,15
   26714:	01000104 	movi	r4,4
   26718:	11000426 	beq	r2,r4,2672c <__subdf3+0xa8>
   2671c:	890b883a 	add	r5,r17,r4
   26720:	2c63803a 	cmpltu	r17,r5,r17
   26724:	1c47883a 	add	r3,r3,r17
   26728:	2823883a 	mov	r17,r5
   2672c:	1880202c 	andhi	r2,r3,128
   26730:	10005926 	beq	r2,zero,26898 <__subdf3+0x214>
   26734:	84000044 	addi	r16,r16,1
   26738:	0081ffc4 	movi	r2,2047
   2673c:	8080be26 	beq	r16,r2,26a38 <__subdf3+0x3b4>
   26740:	017fe034 	movhi	r5,65408
   26744:	297fffc4 	addi	r5,r5,-1
   26748:	1946703a 	and	r3,r3,r5
   2674c:	1804977a 	slli	r2,r3,29
   26750:	1806927a 	slli	r3,r3,9
   26754:	8822d0fa 	srli	r17,r17,3
   26758:	8401ffcc 	andi	r16,r16,2047
   2675c:	180ad33a 	srli	r5,r3,12
   26760:	9100004c 	andi	r4,r18,1
   26764:	1444b03a 	or	r2,r2,r17
   26768:	80c1ffcc 	andi	r3,r16,2047
   2676c:	1820953a 	slli	r16,r3,20
   26770:	20c03fcc 	andi	r3,r4,255
   26774:	180897fa 	slli	r4,r3,31
   26778:	00c00434 	movhi	r3,16
   2677c:	18ffffc4 	addi	r3,r3,-1
   26780:	28c6703a 	and	r3,r5,r3
   26784:	1c06b03a 	or	r3,r3,r16
   26788:	1906b03a 	or	r3,r3,r4
   2678c:	dfc00417 	ldw	ra,16(sp)
   26790:	dcc00317 	ldw	r19,12(sp)
   26794:	dc800217 	ldw	r18,8(sp)
   26798:	dc400117 	ldw	r17,4(sp)
   2679c:	dc000017 	ldw	r16,0(sp)
   267a0:	dec00504 	addi	sp,sp,20
   267a4:	f800283a 	ret
   267a8:	0101ffc4 	movi	r4,2047
   267ac:	813fd626 	beq	r16,r4,26708 <__alt_data_end+0xfffe7308>
   267b0:	29402034 	orhi	r5,r5,128
   267b4:	01000e04 	movi	r4,56
   267b8:	2080a316 	blt	r4,r2,26a48 <__subdf3+0x3c4>
   267bc:	010007c4 	movi	r4,31
   267c0:	2080c616 	blt	r4,r2,26adc <__subdf3+0x458>
   267c4:	01000804 	movi	r4,32
   267c8:	2089c83a 	sub	r4,r4,r2
   267cc:	2910983a 	sll	r8,r5,r4
   267d0:	308ed83a 	srl	r7,r6,r2
   267d4:	3108983a 	sll	r4,r6,r4
   267d8:	2884d83a 	srl	r2,r5,r2
   267dc:	41ccb03a 	or	r6,r8,r7
   267e0:	2008c03a 	cmpne	r4,r4,zero
   267e4:	310cb03a 	or	r6,r6,r4
   267e8:	898dc83a 	sub	r6,r17,r6
   267ec:	89a3803a 	cmpltu	r17,r17,r6
   267f0:	1887c83a 	sub	r3,r3,r2
   267f4:	1c47c83a 	sub	r3,r3,r17
   267f8:	3023883a 	mov	r17,r6
   267fc:	1880202c 	andhi	r2,r3,128
   26800:	10002326 	beq	r2,zero,26890 <__subdf3+0x20c>
   26804:	04c02034 	movhi	r19,128
   26808:	9cffffc4 	addi	r19,r19,-1
   2680c:	1ce6703a 	and	r19,r3,r19
   26810:	98007a26 	beq	r19,zero,269fc <__subdf3+0x378>
   26814:	9809883a 	mov	r4,r19
   26818:	00272380 	call	27238 <__clzsi2>
   2681c:	113ffe04 	addi	r4,r2,-8
   26820:	00c007c4 	movi	r3,31
   26824:	19007b16 	blt	r3,r4,26a14 <__subdf3+0x390>
   26828:	00800804 	movi	r2,32
   2682c:	1105c83a 	sub	r2,r2,r4
   26830:	8884d83a 	srl	r2,r17,r2
   26834:	9906983a 	sll	r3,r19,r4
   26838:	8922983a 	sll	r17,r17,r4
   2683c:	10c4b03a 	or	r2,r2,r3
   26840:	24007816 	blt	r4,r16,26a24 <__subdf3+0x3a0>
   26844:	2421c83a 	sub	r16,r4,r16
   26848:	80c00044 	addi	r3,r16,1
   2684c:	010007c4 	movi	r4,31
   26850:	20c09516 	blt	r4,r3,26aa8 <__subdf3+0x424>
   26854:	01400804 	movi	r5,32
   26858:	28cbc83a 	sub	r5,r5,r3
   2685c:	88c8d83a 	srl	r4,r17,r3
   26860:	8962983a 	sll	r17,r17,r5
   26864:	114a983a 	sll	r5,r2,r5
   26868:	10c6d83a 	srl	r3,r2,r3
   2686c:	8804c03a 	cmpne	r2,r17,zero
   26870:	290ab03a 	or	r5,r5,r4
   26874:	28a2b03a 	or	r17,r5,r2
   26878:	0021883a 	mov	r16,zero
   2687c:	003fa206 	br	26708 <__alt_data_end+0xfffe7308>
   26880:	2090b03a 	or	r8,r4,r2
   26884:	40018e26 	beq	r8,zero,26ec0 <__subdf3+0x83c>
   26888:	1007883a 	mov	r3,r2
   2688c:	2023883a 	mov	r17,r4
   26890:	888001cc 	andi	r2,r17,7
   26894:	103f9e1e 	bne	r2,zero,26710 <__alt_data_end+0xfffe7310>
   26898:	1804977a 	slli	r2,r3,29
   2689c:	8822d0fa 	srli	r17,r17,3
   268a0:	1810d0fa 	srli	r8,r3,3
   268a4:	9100004c 	andi	r4,r18,1
   268a8:	1444b03a 	or	r2,r2,r17
   268ac:	00c1ffc4 	movi	r3,2047
   268b0:	80c02826 	beq	r16,r3,26954 <__subdf3+0x2d0>
   268b4:	01400434 	movhi	r5,16
   268b8:	297fffc4 	addi	r5,r5,-1
   268bc:	80e0703a 	and	r16,r16,r3
   268c0:	414a703a 	and	r5,r8,r5
   268c4:	003fa806 	br	26768 <__alt_data_end+0xfffe7368>
   268c8:	0080630e 	bge	zero,r2,26a58 <__subdf3+0x3d4>
   268cc:	48003026 	beq	r9,zero,26990 <__subdf3+0x30c>
   268d0:	0101ffc4 	movi	r4,2047
   268d4:	813f8c26 	beq	r16,r4,26708 <__alt_data_end+0xfffe7308>
   268d8:	29402034 	orhi	r5,r5,128
   268dc:	01000e04 	movi	r4,56
   268e0:	2080a90e 	bge	r4,r2,26b88 <__subdf3+0x504>
   268e4:	298cb03a 	or	r6,r5,r6
   268e8:	3012c03a 	cmpne	r9,r6,zero
   268ec:	0005883a 	mov	r2,zero
   268f0:	4c53883a 	add	r9,r9,r17
   268f4:	4c63803a 	cmpltu	r17,r9,r17
   268f8:	10c7883a 	add	r3,r2,r3
   268fc:	88c7883a 	add	r3,r17,r3
   26900:	4823883a 	mov	r17,r9
   26904:	1880202c 	andhi	r2,r3,128
   26908:	1000d026 	beq	r2,zero,26c4c <__subdf3+0x5c8>
   2690c:	84000044 	addi	r16,r16,1
   26910:	0081ffc4 	movi	r2,2047
   26914:	8080fe26 	beq	r16,r2,26d10 <__subdf3+0x68c>
   26918:	00bfe034 	movhi	r2,65408
   2691c:	10bfffc4 	addi	r2,r2,-1
   26920:	1886703a 	and	r3,r3,r2
   26924:	880ad07a 	srli	r5,r17,1
   26928:	180497fa 	slli	r2,r3,31
   2692c:	8900004c 	andi	r4,r17,1
   26930:	2922b03a 	or	r17,r5,r4
   26934:	1806d07a 	srli	r3,r3,1
   26938:	1462b03a 	or	r17,r2,r17
   2693c:	3825883a 	mov	r18,r7
   26940:	003f7106 	br	26708 <__alt_data_end+0xfffe7308>
   26944:	2984b03a 	or	r2,r5,r6
   26948:	103f6826 	beq	r2,zero,266ec <__alt_data_end+0xfffe72ec>
   2694c:	39c03fcc 	andi	r7,r7,255
   26950:	003f6706 	br	266f0 <__alt_data_end+0xfffe72f0>
   26954:	4086b03a 	or	r3,r8,r2
   26958:	18015226 	beq	r3,zero,26ea4 <__subdf3+0x820>
   2695c:	00c00434 	movhi	r3,16
   26960:	41400234 	orhi	r5,r8,8
   26964:	18ffffc4 	addi	r3,r3,-1
   26968:	28ca703a 	and	r5,r5,r3
   2696c:	003f7e06 	br	26768 <__alt_data_end+0xfffe7368>
   26970:	10bfffc4 	addi	r2,r2,-1
   26974:	1000491e 	bne	r2,zero,26a9c <__subdf3+0x418>
   26978:	898fc83a 	sub	r7,r17,r6
   2697c:	89e3803a 	cmpltu	r17,r17,r7
   26980:	1947c83a 	sub	r3,r3,r5
   26984:	1c47c83a 	sub	r3,r3,r17
   26988:	3823883a 	mov	r17,r7
   2698c:	003f9b06 	br	267fc <__alt_data_end+0xfffe73fc>
   26990:	2988b03a 	or	r4,r5,r6
   26994:	203f5c26 	beq	r4,zero,26708 <__alt_data_end+0xfffe7308>
   26998:	10bfffc4 	addi	r2,r2,-1
   2699c:	1000931e 	bne	r2,zero,26bec <__subdf3+0x568>
   269a0:	898d883a 	add	r6,r17,r6
   269a4:	3463803a 	cmpltu	r17,r6,r17
   269a8:	1947883a 	add	r3,r3,r5
   269ac:	88c7883a 	add	r3,r17,r3
   269b0:	3023883a 	mov	r17,r6
   269b4:	003fd306 	br	26904 <__alt_data_end+0xfffe7504>
   269b8:	1000541e 	bne	r2,zero,26b0c <__subdf3+0x488>
   269bc:	80800044 	addi	r2,r16,1
   269c0:	1081ffcc 	andi	r2,r2,2047
   269c4:	01000044 	movi	r4,1
   269c8:	2080a20e 	bge	r4,r2,26c54 <__subdf3+0x5d0>
   269cc:	8989c83a 	sub	r4,r17,r6
   269d0:	8905803a 	cmpltu	r2,r17,r4
   269d4:	1967c83a 	sub	r19,r3,r5
   269d8:	98a7c83a 	sub	r19,r19,r2
   269dc:	9880202c 	andhi	r2,r19,128
   269e0:	10006326 	beq	r2,zero,26b70 <__subdf3+0x4ec>
   269e4:	3463c83a 	sub	r17,r6,r17
   269e8:	28c7c83a 	sub	r3,r5,r3
   269ec:	344d803a 	cmpltu	r6,r6,r17
   269f0:	19a7c83a 	sub	r19,r3,r6
   269f4:	3825883a 	mov	r18,r7
   269f8:	983f861e 	bne	r19,zero,26814 <__alt_data_end+0xfffe7414>
   269fc:	8809883a 	mov	r4,r17
   26a00:	00272380 	call	27238 <__clzsi2>
   26a04:	10800804 	addi	r2,r2,32
   26a08:	113ffe04 	addi	r4,r2,-8
   26a0c:	00c007c4 	movi	r3,31
   26a10:	193f850e 	bge	r3,r4,26828 <__alt_data_end+0xfffe7428>
   26a14:	10bff604 	addi	r2,r2,-40
   26a18:	8884983a 	sll	r2,r17,r2
   26a1c:	0023883a 	mov	r17,zero
   26a20:	243f880e 	bge	r4,r16,26844 <__alt_data_end+0xfffe7444>
   26a24:	00ffe034 	movhi	r3,65408
   26a28:	18ffffc4 	addi	r3,r3,-1
   26a2c:	8121c83a 	sub	r16,r16,r4
   26a30:	10c6703a 	and	r3,r2,r3
   26a34:	003f3406 	br	26708 <__alt_data_end+0xfffe7308>
   26a38:	9100004c 	andi	r4,r18,1
   26a3c:	000b883a 	mov	r5,zero
   26a40:	0005883a 	mov	r2,zero
   26a44:	003f4806 	br	26768 <__alt_data_end+0xfffe7368>
   26a48:	298cb03a 	or	r6,r5,r6
   26a4c:	300cc03a 	cmpne	r6,r6,zero
   26a50:	0005883a 	mov	r2,zero
   26a54:	003f6406 	br	267e8 <__alt_data_end+0xfffe73e8>
   26a58:	10009a1e 	bne	r2,zero,26cc4 <__subdf3+0x640>
   26a5c:	82400044 	addi	r9,r16,1
   26a60:	4881ffcc 	andi	r2,r9,2047
   26a64:	02800044 	movi	r10,1
   26a68:	5080670e 	bge	r10,r2,26c08 <__subdf3+0x584>
   26a6c:	0081ffc4 	movi	r2,2047
   26a70:	4880af26 	beq	r9,r2,26d30 <__subdf3+0x6ac>
   26a74:	898d883a 	add	r6,r17,r6
   26a78:	1945883a 	add	r2,r3,r5
   26a7c:	3447803a 	cmpltu	r3,r6,r17
   26a80:	1887883a 	add	r3,r3,r2
   26a84:	182297fa 	slli	r17,r3,31
   26a88:	300cd07a 	srli	r6,r6,1
   26a8c:	1806d07a 	srli	r3,r3,1
   26a90:	4821883a 	mov	r16,r9
   26a94:	89a2b03a 	or	r17,r17,r6
   26a98:	003f1b06 	br	26708 <__alt_data_end+0xfffe7308>
   26a9c:	0101ffc4 	movi	r4,2047
   26aa0:	813f441e 	bne	r16,r4,267b4 <__alt_data_end+0xfffe73b4>
   26aa4:	003f1806 	br	26708 <__alt_data_end+0xfffe7308>
   26aa8:	843ff844 	addi	r16,r16,-31
   26aac:	01400804 	movi	r5,32
   26ab0:	1408d83a 	srl	r4,r2,r16
   26ab4:	19405026 	beq	r3,r5,26bf8 <__subdf3+0x574>
   26ab8:	01401004 	movi	r5,64
   26abc:	28c7c83a 	sub	r3,r5,r3
   26ac0:	10c4983a 	sll	r2,r2,r3
   26ac4:	88a2b03a 	or	r17,r17,r2
   26ac8:	8822c03a 	cmpne	r17,r17,zero
   26acc:	2462b03a 	or	r17,r4,r17
   26ad0:	0007883a 	mov	r3,zero
   26ad4:	0021883a 	mov	r16,zero
   26ad8:	003f6d06 	br	26890 <__alt_data_end+0xfffe7490>
   26adc:	11fff804 	addi	r7,r2,-32
   26ae0:	01000804 	movi	r4,32
   26ae4:	29ced83a 	srl	r7,r5,r7
   26ae8:	11004526 	beq	r2,r4,26c00 <__subdf3+0x57c>
   26aec:	01001004 	movi	r4,64
   26af0:	2089c83a 	sub	r4,r4,r2
   26af4:	2904983a 	sll	r2,r5,r4
   26af8:	118cb03a 	or	r6,r2,r6
   26afc:	300cc03a 	cmpne	r6,r6,zero
   26b00:	398cb03a 	or	r6,r7,r6
   26b04:	0005883a 	mov	r2,zero
   26b08:	003f3706 	br	267e8 <__alt_data_end+0xfffe73e8>
   26b0c:	80002a26 	beq	r16,zero,26bb8 <__subdf3+0x534>
   26b10:	0101ffc4 	movi	r4,2047
   26b14:	49006626 	beq	r9,r4,26cb0 <__subdf3+0x62c>
   26b18:	0085c83a 	sub	r2,zero,r2
   26b1c:	18c02034 	orhi	r3,r3,128
   26b20:	01000e04 	movi	r4,56
   26b24:	20807e16 	blt	r4,r2,26d20 <__subdf3+0x69c>
   26b28:	010007c4 	movi	r4,31
   26b2c:	2080e716 	blt	r4,r2,26ecc <__subdf3+0x848>
   26b30:	01000804 	movi	r4,32
   26b34:	2089c83a 	sub	r4,r4,r2
   26b38:	1914983a 	sll	r10,r3,r4
   26b3c:	8890d83a 	srl	r8,r17,r2
   26b40:	8908983a 	sll	r4,r17,r4
   26b44:	1884d83a 	srl	r2,r3,r2
   26b48:	5222b03a 	or	r17,r10,r8
   26b4c:	2006c03a 	cmpne	r3,r4,zero
   26b50:	88e2b03a 	or	r17,r17,r3
   26b54:	3463c83a 	sub	r17,r6,r17
   26b58:	2885c83a 	sub	r2,r5,r2
   26b5c:	344d803a 	cmpltu	r6,r6,r17
   26b60:	1187c83a 	sub	r3,r2,r6
   26b64:	4821883a 	mov	r16,r9
   26b68:	3825883a 	mov	r18,r7
   26b6c:	003f2306 	br	267fc <__alt_data_end+0xfffe73fc>
   26b70:	24d0b03a 	or	r8,r4,r19
   26b74:	40001b1e 	bne	r8,zero,26be4 <__subdf3+0x560>
   26b78:	0005883a 	mov	r2,zero
   26b7c:	0009883a 	mov	r4,zero
   26b80:	0021883a 	mov	r16,zero
   26b84:	003f4906 	br	268ac <__alt_data_end+0xfffe74ac>
   26b88:	010007c4 	movi	r4,31
   26b8c:	20803a16 	blt	r4,r2,26c78 <__subdf3+0x5f4>
   26b90:	01000804 	movi	r4,32
   26b94:	2089c83a 	sub	r4,r4,r2
   26b98:	2912983a 	sll	r9,r5,r4
   26b9c:	3090d83a 	srl	r8,r6,r2
   26ba0:	3108983a 	sll	r4,r6,r4
   26ba4:	2884d83a 	srl	r2,r5,r2
   26ba8:	4a12b03a 	or	r9,r9,r8
   26bac:	2008c03a 	cmpne	r4,r4,zero
   26bb0:	4912b03a 	or	r9,r9,r4
   26bb4:	003f4e06 	br	268f0 <__alt_data_end+0xfffe74f0>
   26bb8:	1c48b03a 	or	r4,r3,r17
   26bbc:	20003c26 	beq	r4,zero,26cb0 <__subdf3+0x62c>
   26bc0:	0084303a 	nor	r2,zero,r2
   26bc4:	1000381e 	bne	r2,zero,26ca8 <__subdf3+0x624>
   26bc8:	3463c83a 	sub	r17,r6,r17
   26bcc:	28c5c83a 	sub	r2,r5,r3
   26bd0:	344d803a 	cmpltu	r6,r6,r17
   26bd4:	1187c83a 	sub	r3,r2,r6
   26bd8:	4821883a 	mov	r16,r9
   26bdc:	3825883a 	mov	r18,r7
   26be0:	003f0606 	br	267fc <__alt_data_end+0xfffe73fc>
   26be4:	2023883a 	mov	r17,r4
   26be8:	003f0906 	br	26810 <__alt_data_end+0xfffe7410>
   26bec:	0101ffc4 	movi	r4,2047
   26bf0:	813f3a1e 	bne	r16,r4,268dc <__alt_data_end+0xfffe74dc>
   26bf4:	003ec406 	br	26708 <__alt_data_end+0xfffe7308>
   26bf8:	0005883a 	mov	r2,zero
   26bfc:	003fb106 	br	26ac4 <__alt_data_end+0xfffe76c4>
   26c00:	0005883a 	mov	r2,zero
   26c04:	003fbc06 	br	26af8 <__alt_data_end+0xfffe76f8>
   26c08:	1c44b03a 	or	r2,r3,r17
   26c0c:	80008e1e 	bne	r16,zero,26e48 <__subdf3+0x7c4>
   26c10:	1000c826 	beq	r2,zero,26f34 <__subdf3+0x8b0>
   26c14:	2984b03a 	or	r2,r5,r6
   26c18:	103ebb26 	beq	r2,zero,26708 <__alt_data_end+0xfffe7308>
   26c1c:	8989883a 	add	r4,r17,r6
   26c20:	1945883a 	add	r2,r3,r5
   26c24:	2447803a 	cmpltu	r3,r4,r17
   26c28:	1887883a 	add	r3,r3,r2
   26c2c:	1880202c 	andhi	r2,r3,128
   26c30:	2023883a 	mov	r17,r4
   26c34:	103f1626 	beq	r2,zero,26890 <__alt_data_end+0xfffe7490>
   26c38:	00bfe034 	movhi	r2,65408
   26c3c:	10bfffc4 	addi	r2,r2,-1
   26c40:	5021883a 	mov	r16,r10
   26c44:	1886703a 	and	r3,r3,r2
   26c48:	003eaf06 	br	26708 <__alt_data_end+0xfffe7308>
   26c4c:	3825883a 	mov	r18,r7
   26c50:	003f0f06 	br	26890 <__alt_data_end+0xfffe7490>
   26c54:	1c44b03a 	or	r2,r3,r17
   26c58:	8000251e 	bne	r16,zero,26cf0 <__subdf3+0x66c>
   26c5c:	1000661e 	bne	r2,zero,26df8 <__subdf3+0x774>
   26c60:	2990b03a 	or	r8,r5,r6
   26c64:	40009626 	beq	r8,zero,26ec0 <__subdf3+0x83c>
   26c68:	2807883a 	mov	r3,r5
   26c6c:	3023883a 	mov	r17,r6
   26c70:	3825883a 	mov	r18,r7
   26c74:	003ea406 	br	26708 <__alt_data_end+0xfffe7308>
   26c78:	127ff804 	addi	r9,r2,-32
   26c7c:	01000804 	movi	r4,32
   26c80:	2a52d83a 	srl	r9,r5,r9
   26c84:	11008c26 	beq	r2,r4,26eb8 <__subdf3+0x834>
   26c88:	01001004 	movi	r4,64
   26c8c:	2085c83a 	sub	r2,r4,r2
   26c90:	2884983a 	sll	r2,r5,r2
   26c94:	118cb03a 	or	r6,r2,r6
   26c98:	300cc03a 	cmpne	r6,r6,zero
   26c9c:	4992b03a 	or	r9,r9,r6
   26ca0:	0005883a 	mov	r2,zero
   26ca4:	003f1206 	br	268f0 <__alt_data_end+0xfffe74f0>
   26ca8:	0101ffc4 	movi	r4,2047
   26cac:	493f9c1e 	bne	r9,r4,26b20 <__alt_data_end+0xfffe7720>
   26cb0:	2807883a 	mov	r3,r5
   26cb4:	3023883a 	mov	r17,r6
   26cb8:	4821883a 	mov	r16,r9
   26cbc:	3825883a 	mov	r18,r7
   26cc0:	003e9106 	br	26708 <__alt_data_end+0xfffe7308>
   26cc4:	80001f1e 	bne	r16,zero,26d44 <__subdf3+0x6c0>
   26cc8:	1c48b03a 	or	r4,r3,r17
   26ccc:	20005a26 	beq	r4,zero,26e38 <__subdf3+0x7b4>
   26cd0:	0084303a 	nor	r2,zero,r2
   26cd4:	1000561e 	bne	r2,zero,26e30 <__subdf3+0x7ac>
   26cd8:	89a3883a 	add	r17,r17,r6
   26cdc:	1945883a 	add	r2,r3,r5
   26ce0:	898d803a 	cmpltu	r6,r17,r6
   26ce4:	3087883a 	add	r3,r6,r2
   26ce8:	4821883a 	mov	r16,r9
   26cec:	003f0506 	br	26904 <__alt_data_end+0xfffe7504>
   26cf0:	10002b1e 	bne	r2,zero,26da0 <__subdf3+0x71c>
   26cf4:	2984b03a 	or	r2,r5,r6
   26cf8:	10008026 	beq	r2,zero,26efc <__subdf3+0x878>
   26cfc:	2807883a 	mov	r3,r5
   26d00:	3023883a 	mov	r17,r6
   26d04:	3825883a 	mov	r18,r7
   26d08:	0401ffc4 	movi	r16,2047
   26d0c:	003e7e06 	br	26708 <__alt_data_end+0xfffe7308>
   26d10:	3809883a 	mov	r4,r7
   26d14:	0011883a 	mov	r8,zero
   26d18:	0005883a 	mov	r2,zero
   26d1c:	003ee306 	br	268ac <__alt_data_end+0xfffe74ac>
   26d20:	1c62b03a 	or	r17,r3,r17
   26d24:	8822c03a 	cmpne	r17,r17,zero
   26d28:	0005883a 	mov	r2,zero
   26d2c:	003f8906 	br	26b54 <__alt_data_end+0xfffe7754>
   26d30:	3809883a 	mov	r4,r7
   26d34:	4821883a 	mov	r16,r9
   26d38:	0011883a 	mov	r8,zero
   26d3c:	0005883a 	mov	r2,zero
   26d40:	003eda06 	br	268ac <__alt_data_end+0xfffe74ac>
   26d44:	0101ffc4 	movi	r4,2047
   26d48:	49003b26 	beq	r9,r4,26e38 <__subdf3+0x7b4>
   26d4c:	0085c83a 	sub	r2,zero,r2
   26d50:	18c02034 	orhi	r3,r3,128
   26d54:	01000e04 	movi	r4,56
   26d58:	20806e16 	blt	r4,r2,26f14 <__subdf3+0x890>
   26d5c:	010007c4 	movi	r4,31
   26d60:	20807716 	blt	r4,r2,26f40 <__subdf3+0x8bc>
   26d64:	01000804 	movi	r4,32
   26d68:	2089c83a 	sub	r4,r4,r2
   26d6c:	1914983a 	sll	r10,r3,r4
   26d70:	8890d83a 	srl	r8,r17,r2
   26d74:	8908983a 	sll	r4,r17,r4
   26d78:	1884d83a 	srl	r2,r3,r2
   26d7c:	5222b03a 	or	r17,r10,r8
   26d80:	2006c03a 	cmpne	r3,r4,zero
   26d84:	88e2b03a 	or	r17,r17,r3
   26d88:	89a3883a 	add	r17,r17,r6
   26d8c:	1145883a 	add	r2,r2,r5
   26d90:	898d803a 	cmpltu	r6,r17,r6
   26d94:	3087883a 	add	r3,r6,r2
   26d98:	4821883a 	mov	r16,r9
   26d9c:	003ed906 	br	26904 <__alt_data_end+0xfffe7504>
   26da0:	2984b03a 	or	r2,r5,r6
   26da4:	10004226 	beq	r2,zero,26eb0 <__subdf3+0x82c>
   26da8:	1808d0fa 	srli	r4,r3,3
   26dac:	8822d0fa 	srli	r17,r17,3
   26db0:	1806977a 	slli	r3,r3,29
   26db4:	2080022c 	andhi	r2,r4,8
   26db8:	1c62b03a 	or	r17,r3,r17
   26dbc:	10000826 	beq	r2,zero,26de0 <__subdf3+0x75c>
   26dc0:	2812d0fa 	srli	r9,r5,3
   26dc4:	4880022c 	andhi	r2,r9,8
   26dc8:	1000051e 	bne	r2,zero,26de0 <__subdf3+0x75c>
   26dcc:	300cd0fa 	srli	r6,r6,3
   26dd0:	2804977a 	slli	r2,r5,29
   26dd4:	4809883a 	mov	r4,r9
   26dd8:	3825883a 	mov	r18,r7
   26ddc:	11a2b03a 	or	r17,r2,r6
   26de0:	8806d77a 	srli	r3,r17,29
   26de4:	200890fa 	slli	r4,r4,3
   26de8:	882290fa 	slli	r17,r17,3
   26dec:	0401ffc4 	movi	r16,2047
   26df0:	1906b03a 	or	r3,r3,r4
   26df4:	003e4406 	br	26708 <__alt_data_end+0xfffe7308>
   26df8:	2984b03a 	or	r2,r5,r6
   26dfc:	103e4226 	beq	r2,zero,26708 <__alt_data_end+0xfffe7308>
   26e00:	8989c83a 	sub	r4,r17,r6
   26e04:	8911803a 	cmpltu	r8,r17,r4
   26e08:	1945c83a 	sub	r2,r3,r5
   26e0c:	1205c83a 	sub	r2,r2,r8
   26e10:	1200202c 	andhi	r8,r2,128
   26e14:	403e9a26 	beq	r8,zero,26880 <__alt_data_end+0xfffe7480>
   26e18:	3463c83a 	sub	r17,r6,r17
   26e1c:	28c5c83a 	sub	r2,r5,r3
   26e20:	344d803a 	cmpltu	r6,r6,r17
   26e24:	1187c83a 	sub	r3,r2,r6
   26e28:	3825883a 	mov	r18,r7
   26e2c:	003e3606 	br	26708 <__alt_data_end+0xfffe7308>
   26e30:	0101ffc4 	movi	r4,2047
   26e34:	493fc71e 	bne	r9,r4,26d54 <__alt_data_end+0xfffe7954>
   26e38:	2807883a 	mov	r3,r5
   26e3c:	3023883a 	mov	r17,r6
   26e40:	4821883a 	mov	r16,r9
   26e44:	003e3006 	br	26708 <__alt_data_end+0xfffe7308>
   26e48:	10003626 	beq	r2,zero,26f24 <__subdf3+0x8a0>
   26e4c:	2984b03a 	or	r2,r5,r6
   26e50:	10001726 	beq	r2,zero,26eb0 <__subdf3+0x82c>
   26e54:	1808d0fa 	srli	r4,r3,3
   26e58:	8822d0fa 	srli	r17,r17,3
   26e5c:	1806977a 	slli	r3,r3,29
   26e60:	2080022c 	andhi	r2,r4,8
   26e64:	1c62b03a 	or	r17,r3,r17
   26e68:	10000726 	beq	r2,zero,26e88 <__subdf3+0x804>
   26e6c:	2812d0fa 	srli	r9,r5,3
   26e70:	4880022c 	andhi	r2,r9,8
   26e74:	1000041e 	bne	r2,zero,26e88 <__subdf3+0x804>
   26e78:	300cd0fa 	srli	r6,r6,3
   26e7c:	2804977a 	slli	r2,r5,29
   26e80:	4809883a 	mov	r4,r9
   26e84:	11a2b03a 	or	r17,r2,r6
   26e88:	8806d77a 	srli	r3,r17,29
   26e8c:	200890fa 	slli	r4,r4,3
   26e90:	882290fa 	slli	r17,r17,3
   26e94:	3825883a 	mov	r18,r7
   26e98:	1906b03a 	or	r3,r3,r4
   26e9c:	0401ffc4 	movi	r16,2047
   26ea0:	003e1906 	br	26708 <__alt_data_end+0xfffe7308>
   26ea4:	000b883a 	mov	r5,zero
   26ea8:	0005883a 	mov	r2,zero
   26eac:	003e2e06 	br	26768 <__alt_data_end+0xfffe7368>
   26eb0:	0401ffc4 	movi	r16,2047
   26eb4:	003e1406 	br	26708 <__alt_data_end+0xfffe7308>
   26eb8:	0005883a 	mov	r2,zero
   26ebc:	003f7506 	br	26c94 <__alt_data_end+0xfffe7894>
   26ec0:	0005883a 	mov	r2,zero
   26ec4:	0009883a 	mov	r4,zero
   26ec8:	003e7806 	br	268ac <__alt_data_end+0xfffe74ac>
   26ecc:	123ff804 	addi	r8,r2,-32
   26ed0:	01000804 	movi	r4,32
   26ed4:	1a10d83a 	srl	r8,r3,r8
   26ed8:	11002526 	beq	r2,r4,26f70 <__subdf3+0x8ec>
   26edc:	01001004 	movi	r4,64
   26ee0:	2085c83a 	sub	r2,r4,r2
   26ee4:	1884983a 	sll	r2,r3,r2
   26ee8:	1444b03a 	or	r2,r2,r17
   26eec:	1004c03a 	cmpne	r2,r2,zero
   26ef0:	40a2b03a 	or	r17,r8,r2
   26ef4:	0005883a 	mov	r2,zero
   26ef8:	003f1606 	br	26b54 <__alt_data_end+0xfffe7754>
   26efc:	02000434 	movhi	r8,16
   26f00:	0009883a 	mov	r4,zero
   26f04:	423fffc4 	addi	r8,r8,-1
   26f08:	00bfffc4 	movi	r2,-1
   26f0c:	0401ffc4 	movi	r16,2047
   26f10:	003e6606 	br	268ac <__alt_data_end+0xfffe74ac>
   26f14:	1c62b03a 	or	r17,r3,r17
   26f18:	8822c03a 	cmpne	r17,r17,zero
   26f1c:	0005883a 	mov	r2,zero
   26f20:	003f9906 	br	26d88 <__alt_data_end+0xfffe7988>
   26f24:	2807883a 	mov	r3,r5
   26f28:	3023883a 	mov	r17,r6
   26f2c:	0401ffc4 	movi	r16,2047
   26f30:	003df506 	br	26708 <__alt_data_end+0xfffe7308>
   26f34:	2807883a 	mov	r3,r5
   26f38:	3023883a 	mov	r17,r6
   26f3c:	003df206 	br	26708 <__alt_data_end+0xfffe7308>
   26f40:	123ff804 	addi	r8,r2,-32
   26f44:	01000804 	movi	r4,32
   26f48:	1a10d83a 	srl	r8,r3,r8
   26f4c:	11000a26 	beq	r2,r4,26f78 <__subdf3+0x8f4>
   26f50:	01001004 	movi	r4,64
   26f54:	2085c83a 	sub	r2,r4,r2
   26f58:	1884983a 	sll	r2,r3,r2
   26f5c:	1444b03a 	or	r2,r2,r17
   26f60:	1004c03a 	cmpne	r2,r2,zero
   26f64:	40a2b03a 	or	r17,r8,r2
   26f68:	0005883a 	mov	r2,zero
   26f6c:	003f8606 	br	26d88 <__alt_data_end+0xfffe7988>
   26f70:	0005883a 	mov	r2,zero
   26f74:	003fdc06 	br	26ee8 <__alt_data_end+0xfffe7ae8>
   26f78:	0005883a 	mov	r2,zero
   26f7c:	003ff706 	br	26f5c <__alt_data_end+0xfffe7b5c>

00026f80 <__extendsfdf2>:
   26f80:	200ad5fa 	srli	r5,r4,23
   26f84:	defffd04 	addi	sp,sp,-12
   26f88:	dc400115 	stw	r17,4(sp)
   26f8c:	29403fcc 	andi	r5,r5,255
   26f90:	29800044 	addi	r6,r5,1
   26f94:	04402034 	movhi	r17,128
   26f98:	dc000015 	stw	r16,0(sp)
   26f9c:	8c7fffc4 	addi	r17,r17,-1
   26fa0:	dfc00215 	stw	ra,8(sp)
   26fa4:	31803fcc 	andi	r6,r6,255
   26fa8:	00800044 	movi	r2,1
   26fac:	8922703a 	and	r17,r17,r4
   26fb0:	2020d7fa 	srli	r16,r4,31
   26fb4:	1180110e 	bge	r2,r6,26ffc <__extendsfdf2+0x7c>
   26fb8:	880cd0fa 	srli	r6,r17,3
   26fbc:	8822977a 	slli	r17,r17,29
   26fc0:	2940e004 	addi	r5,r5,896
   26fc4:	2941ffcc 	andi	r5,r5,2047
   26fc8:	2804953a 	slli	r2,r5,20
   26fcc:	01400434 	movhi	r5,16
   26fd0:	800697fa 	slli	r3,r16,31
   26fd4:	297fffc4 	addi	r5,r5,-1
   26fd8:	314a703a 	and	r5,r6,r5
   26fdc:	288ab03a 	or	r5,r5,r2
   26fe0:	28c6b03a 	or	r3,r5,r3
   26fe4:	8805883a 	mov	r2,r17
   26fe8:	dfc00217 	ldw	ra,8(sp)
   26fec:	dc400117 	ldw	r17,4(sp)
   26ff0:	dc000017 	ldw	r16,0(sp)
   26ff4:	dec00304 	addi	sp,sp,12
   26ff8:	f800283a 	ret
   26ffc:	2800111e 	bne	r5,zero,27044 <__extendsfdf2+0xc4>
   27000:	88001c26 	beq	r17,zero,27074 <__extendsfdf2+0xf4>
   27004:	8809883a 	mov	r4,r17
   27008:	00272380 	call	27238 <__clzsi2>
   2700c:	00c00284 	movi	r3,10
   27010:	18801b16 	blt	r3,r2,27080 <__extendsfdf2+0x100>
   27014:	018002c4 	movi	r6,11
   27018:	308dc83a 	sub	r6,r6,r2
   2701c:	11000544 	addi	r4,r2,21
   27020:	8986d83a 	srl	r3,r17,r6
   27024:	8922983a 	sll	r17,r17,r4
   27028:	0180e244 	movi	r6,905
   2702c:	01400434 	movhi	r5,16
   27030:	3085c83a 	sub	r2,r6,r2
   27034:	297fffc4 	addi	r5,r5,-1
   27038:	194c703a 	and	r6,r3,r5
   2703c:	1141ffcc 	andi	r5,r2,2047
   27040:	003fe006 	br	26fc4 <__alt_data_end+0xfffe7bc4>
   27044:	88000826 	beq	r17,zero,27068 <__extendsfdf2+0xe8>
   27048:	880cd0fa 	srli	r6,r17,3
   2704c:	00800434 	movhi	r2,16
   27050:	10bfffc4 	addi	r2,r2,-1
   27054:	31800234 	orhi	r6,r6,8
   27058:	8822977a 	slli	r17,r17,29
   2705c:	308c703a 	and	r6,r6,r2
   27060:	0141ffc4 	movi	r5,2047
   27064:	003fd706 	br	26fc4 <__alt_data_end+0xfffe7bc4>
   27068:	0141ffc4 	movi	r5,2047
   2706c:	000d883a 	mov	r6,zero
   27070:	003fd406 	br	26fc4 <__alt_data_end+0xfffe7bc4>
   27074:	000b883a 	mov	r5,zero
   27078:	000d883a 	mov	r6,zero
   2707c:	003fd106 	br	26fc4 <__alt_data_end+0xfffe7bc4>
   27080:	11bffd44 	addi	r6,r2,-11
   27084:	8986983a 	sll	r3,r17,r6
   27088:	0023883a 	mov	r17,zero
   2708c:	003fe606 	br	27028 <__alt_data_end+0xfffe7c28>

00027090 <__truncdfsf2>:
   27090:	2810d53a 	srli	r8,r5,20
   27094:	01c00434 	movhi	r7,16
   27098:	39ffffc4 	addi	r7,r7,-1
   2709c:	29ce703a 	and	r7,r5,r7
   270a0:	4201ffcc 	andi	r8,r8,2047
   270a4:	380e90fa 	slli	r7,r7,3
   270a8:	200cd77a 	srli	r6,r4,29
   270ac:	42400044 	addi	r9,r8,1
   270b0:	4a41ffcc 	andi	r9,r9,2047
   270b4:	00c00044 	movi	r3,1
   270b8:	280ad7fa 	srli	r5,r5,31
   270bc:	31ceb03a 	or	r7,r6,r7
   270c0:	200490fa 	slli	r2,r4,3
   270c4:	1a40230e 	bge	r3,r9,27154 <__truncdfsf2+0xc4>
   270c8:	40ff2004 	addi	r3,r8,-896
   270cc:	01803f84 	movi	r6,254
   270d0:	30c01516 	blt	r6,r3,27128 <__truncdfsf2+0x98>
   270d4:	00c0380e 	bge	zero,r3,271b8 <__truncdfsf2+0x128>
   270d8:	200c91ba 	slli	r6,r4,6
   270dc:	380e90fa 	slli	r7,r7,3
   270e0:	1004d77a 	srli	r2,r2,29
   270e4:	300cc03a 	cmpne	r6,r6,zero
   270e8:	31ccb03a 	or	r6,r6,r7
   270ec:	308cb03a 	or	r6,r6,r2
   270f0:	308001cc 	andi	r2,r6,7
   270f4:	10000426 	beq	r2,zero,27108 <__truncdfsf2+0x78>
   270f8:	308003cc 	andi	r2,r6,15
   270fc:	01000104 	movi	r4,4
   27100:	11000126 	beq	r2,r4,27108 <__truncdfsf2+0x78>
   27104:	31800104 	addi	r6,r6,4
   27108:	3081002c 	andhi	r2,r6,1024
   2710c:	10001626 	beq	r2,zero,27168 <__truncdfsf2+0xd8>
   27110:	18c00044 	addi	r3,r3,1
   27114:	00803fc4 	movi	r2,255
   27118:	18800326 	beq	r3,r2,27128 <__truncdfsf2+0x98>
   2711c:	300c91ba 	slli	r6,r6,6
   27120:	300cd27a 	srli	r6,r6,9
   27124:	00000206 	br	27130 <__truncdfsf2+0xa0>
   27128:	00ffffc4 	movi	r3,-1
   2712c:	000d883a 	mov	r6,zero
   27130:	18c03fcc 	andi	r3,r3,255
   27134:	180895fa 	slli	r4,r3,23
   27138:	00c02034 	movhi	r3,128
   2713c:	280a97fa 	slli	r5,r5,31
   27140:	18ffffc4 	addi	r3,r3,-1
   27144:	30c6703a 	and	r3,r6,r3
   27148:	1906b03a 	or	r3,r3,r4
   2714c:	1944b03a 	or	r2,r3,r5
   27150:	f800283a 	ret
   27154:	40000b1e 	bne	r8,zero,27184 <__truncdfsf2+0xf4>
   27158:	388cb03a 	or	r6,r7,r2
   2715c:	0007883a 	mov	r3,zero
   27160:	30000426 	beq	r6,zero,27174 <__truncdfsf2+0xe4>
   27164:	01800144 	movi	r6,5
   27168:	00803fc4 	movi	r2,255
   2716c:	300cd0fa 	srli	r6,r6,3
   27170:	18800a26 	beq	r3,r2,2719c <__truncdfsf2+0x10c>
   27174:	00802034 	movhi	r2,128
   27178:	10bfffc4 	addi	r2,r2,-1
   2717c:	308c703a 	and	r6,r6,r2
   27180:	003feb06 	br	27130 <__alt_data_end+0xfffe7d30>
   27184:	3888b03a 	or	r4,r7,r2
   27188:	203fe726 	beq	r4,zero,27128 <__alt_data_end+0xfffe7d28>
   2718c:	380c90fa 	slli	r6,r7,3
   27190:	00c03fc4 	movi	r3,255
   27194:	31808034 	orhi	r6,r6,512
   27198:	003fd506 	br	270f0 <__alt_data_end+0xfffe7cf0>
   2719c:	303fe226 	beq	r6,zero,27128 <__alt_data_end+0xfffe7d28>
   271a0:	00802034 	movhi	r2,128
   271a4:	31801034 	orhi	r6,r6,64
   271a8:	10bfffc4 	addi	r2,r2,-1
   271ac:	00ffffc4 	movi	r3,-1
   271b0:	308c703a 	and	r6,r6,r2
   271b4:	003fde06 	br	27130 <__alt_data_end+0xfffe7d30>
   271b8:	013ffa44 	movi	r4,-23
   271bc:	19000e16 	blt	r3,r4,271f8 <__truncdfsf2+0x168>
   271c0:	01000784 	movi	r4,30
   271c4:	20c9c83a 	sub	r4,r4,r3
   271c8:	018007c4 	movi	r6,31
   271cc:	39c02034 	orhi	r7,r7,128
   271d0:	31000b16 	blt	r6,r4,27200 <__truncdfsf2+0x170>
   271d4:	423f2084 	addi	r8,r8,-894
   271d8:	120c983a 	sll	r6,r2,r8
   271dc:	3a0e983a 	sll	r7,r7,r8
   271e0:	1104d83a 	srl	r2,r2,r4
   271e4:	300cc03a 	cmpne	r6,r6,zero
   271e8:	31ceb03a 	or	r7,r6,r7
   271ec:	388cb03a 	or	r6,r7,r2
   271f0:	0007883a 	mov	r3,zero
   271f4:	003fbe06 	br	270f0 <__alt_data_end+0xfffe7cf0>
   271f8:	0007883a 	mov	r3,zero
   271fc:	003fd906 	br	27164 <__alt_data_end+0xfffe7d64>
   27200:	01bfff84 	movi	r6,-2
   27204:	30cdc83a 	sub	r6,r6,r3
   27208:	00c00804 	movi	r3,32
   2720c:	398cd83a 	srl	r6,r7,r6
   27210:	20c00726 	beq	r4,r3,27230 <__truncdfsf2+0x1a0>
   27214:	423f2884 	addi	r8,r8,-862
   27218:	3a0e983a 	sll	r7,r7,r8
   2721c:	3884b03a 	or	r2,r7,r2
   27220:	1004c03a 	cmpne	r2,r2,zero
   27224:	118cb03a 	or	r6,r2,r6
   27228:	0007883a 	mov	r3,zero
   2722c:	003fb006 	br	270f0 <__alt_data_end+0xfffe7cf0>
   27230:	000f883a 	mov	r7,zero
   27234:	003ff906 	br	2721c <__alt_data_end+0xfffe7e1c>

00027238 <__clzsi2>:
   27238:	00bfffd4 	movui	r2,65535
   2723c:	11000536 	bltu	r2,r4,27254 <__clzsi2+0x1c>
   27240:	00803fc4 	movi	r2,255
   27244:	11000f36 	bltu	r2,r4,27284 <__clzsi2+0x4c>
   27248:	00800804 	movi	r2,32
   2724c:	0007883a 	mov	r3,zero
   27250:	00000506 	br	27268 <__clzsi2+0x30>
   27254:	00804034 	movhi	r2,256
   27258:	10bfffc4 	addi	r2,r2,-1
   2725c:	11000c2e 	bgeu	r2,r4,27290 <__clzsi2+0x58>
   27260:	00800204 	movi	r2,8
   27264:	00c00604 	movi	r3,24
   27268:	20c8d83a 	srl	r4,r4,r3
   2726c:	00c000f4 	movhi	r3,3
   27270:	18d230c4 	addi	r3,r3,18627
   27274:	1909883a 	add	r4,r3,r4
   27278:	20c00003 	ldbu	r3,0(r4)
   2727c:	10c5c83a 	sub	r2,r2,r3
   27280:	f800283a 	ret
   27284:	00800604 	movi	r2,24
   27288:	00c00204 	movi	r3,8
   2728c:	003ff606 	br	27268 <__alt_data_end+0xfffe7e68>
   27290:	00800404 	movi	r2,16
   27294:	1007883a 	mov	r3,r2
   27298:	003ff306 	br	27268 <__alt_data_end+0xfffe7e68>

0002729c <_printf_r>:
   2729c:	defffd04 	addi	sp,sp,-12
   272a0:	2805883a 	mov	r2,r5
   272a4:	dfc00015 	stw	ra,0(sp)
   272a8:	d9800115 	stw	r6,4(sp)
   272ac:	d9c00215 	stw	r7,8(sp)
   272b0:	21400217 	ldw	r5,8(r4)
   272b4:	d9c00104 	addi	r7,sp,4
   272b8:	100d883a 	mov	r6,r2
   272bc:	00274740 	call	27474 <___vfprintf_internal_r>
   272c0:	dfc00017 	ldw	ra,0(sp)
   272c4:	dec00304 	addi	sp,sp,12
   272c8:	f800283a 	ret

000272cc <printf>:
   272cc:	defffc04 	addi	sp,sp,-16
   272d0:	dfc00015 	stw	ra,0(sp)
   272d4:	d9400115 	stw	r5,4(sp)
   272d8:	d9800215 	stw	r6,8(sp)
   272dc:	d9c00315 	stw	r7,12(sp)
   272e0:	008000f4 	movhi	r2,3
   272e4:	10999c04 	addi	r2,r2,26224
   272e8:	10800017 	ldw	r2,0(r2)
   272ec:	200b883a 	mov	r5,r4
   272f0:	d9800104 	addi	r6,sp,4
   272f4:	11000217 	ldw	r4,8(r2)
   272f8:	002966c0 	call	2966c <__vfprintf_internal>
   272fc:	dfc00017 	ldw	ra,0(sp)
   27300:	dec00404 	addi	sp,sp,16
   27304:	f800283a 	ret

00027308 <_puts_r>:
   27308:	defff604 	addi	sp,sp,-40
   2730c:	dc000715 	stw	r16,28(sp)
   27310:	2021883a 	mov	r16,r4
   27314:	2809883a 	mov	r4,r5
   27318:	dc400815 	stw	r17,32(sp)
   2731c:	dfc00915 	stw	ra,36(sp)
   27320:	2823883a 	mov	r17,r5
   27324:	00273dc0 	call	273dc <strlen>
   27328:	10c00044 	addi	r3,r2,1
   2732c:	d8800115 	stw	r2,4(sp)
   27330:	008000f4 	movhi	r2,3
   27334:	10927104 	addi	r2,r2,18884
   27338:	d8800215 	stw	r2,8(sp)
   2733c:	00800044 	movi	r2,1
   27340:	d8800315 	stw	r2,12(sp)
   27344:	00800084 	movi	r2,2
   27348:	dc400015 	stw	r17,0(sp)
   2734c:	d8c00615 	stw	r3,24(sp)
   27350:	dec00415 	stw	sp,16(sp)
   27354:	d8800515 	stw	r2,20(sp)
   27358:	80000226 	beq	r16,zero,27364 <_puts_r+0x5c>
   2735c:	80800e17 	ldw	r2,56(r16)
   27360:	10001426 	beq	r2,zero,273b4 <_puts_r+0xac>
   27364:	81400217 	ldw	r5,8(r16)
   27368:	2880030b 	ldhu	r2,12(r5)
   2736c:	10c8000c 	andi	r3,r2,8192
   27370:	1800061e 	bne	r3,zero,2738c <_puts_r+0x84>
   27374:	29001917 	ldw	r4,100(r5)
   27378:	00f7ffc4 	movi	r3,-8193
   2737c:	10880014 	ori	r2,r2,8192
   27380:	20c6703a 	and	r3,r4,r3
   27384:	2880030d 	sth	r2,12(r5)
   27388:	28c01915 	stw	r3,100(r5)
   2738c:	d9800404 	addi	r6,sp,16
   27390:	8009883a 	mov	r4,r16
   27394:	002bb9c0 	call	2bb9c <__sfvwrite_r>
   27398:	1000091e 	bne	r2,zero,273c0 <_puts_r+0xb8>
   2739c:	00800284 	movi	r2,10
   273a0:	dfc00917 	ldw	ra,36(sp)
   273a4:	dc400817 	ldw	r17,32(sp)
   273a8:	dc000717 	ldw	r16,28(sp)
   273ac:	dec00a04 	addi	sp,sp,40
   273b0:	f800283a 	ret
   273b4:	8009883a 	mov	r4,r16
   273b8:	002b7180 	call	2b718 <__sinit>
   273bc:	003fe906 	br	27364 <__alt_data_end+0xfffe7f64>
   273c0:	00bfffc4 	movi	r2,-1
   273c4:	003ff606 	br	273a0 <__alt_data_end+0xfffe7fa0>

000273c8 <puts>:
   273c8:	008000f4 	movhi	r2,3
   273cc:	10999c04 	addi	r2,r2,26224
   273d0:	200b883a 	mov	r5,r4
   273d4:	11000017 	ldw	r4,0(r2)
   273d8:	00273081 	jmpi	27308 <_puts_r>

000273dc <strlen>:
   273dc:	208000cc 	andi	r2,r4,3
   273e0:	10002026 	beq	r2,zero,27464 <strlen+0x88>
   273e4:	20800007 	ldb	r2,0(r4)
   273e8:	10002026 	beq	r2,zero,2746c <strlen+0x90>
   273ec:	2005883a 	mov	r2,r4
   273f0:	00000206 	br	273fc <strlen+0x20>
   273f4:	10c00007 	ldb	r3,0(r2)
   273f8:	18001826 	beq	r3,zero,2745c <strlen+0x80>
   273fc:	10800044 	addi	r2,r2,1
   27400:	10c000cc 	andi	r3,r2,3
   27404:	183ffb1e 	bne	r3,zero,273f4 <__alt_data_end+0xfffe7ff4>
   27408:	10c00017 	ldw	r3,0(r2)
   2740c:	01ffbff4 	movhi	r7,65279
   27410:	39ffbfc4 	addi	r7,r7,-257
   27414:	00ca303a 	nor	r5,zero,r3
   27418:	01a02074 	movhi	r6,32897
   2741c:	19c7883a 	add	r3,r3,r7
   27420:	31a02004 	addi	r6,r6,-32640
   27424:	1946703a 	and	r3,r3,r5
   27428:	1986703a 	and	r3,r3,r6
   2742c:	1800091e 	bne	r3,zero,27454 <strlen+0x78>
   27430:	10800104 	addi	r2,r2,4
   27434:	10c00017 	ldw	r3,0(r2)
   27438:	19cb883a 	add	r5,r3,r7
   2743c:	00c6303a 	nor	r3,zero,r3
   27440:	28c6703a 	and	r3,r5,r3
   27444:	1986703a 	and	r3,r3,r6
   27448:	183ff926 	beq	r3,zero,27430 <__alt_data_end+0xfffe8030>
   2744c:	00000106 	br	27454 <strlen+0x78>
   27450:	10800044 	addi	r2,r2,1
   27454:	10c00007 	ldb	r3,0(r2)
   27458:	183ffd1e 	bne	r3,zero,27450 <__alt_data_end+0xfffe8050>
   2745c:	1105c83a 	sub	r2,r2,r4
   27460:	f800283a 	ret
   27464:	2005883a 	mov	r2,r4
   27468:	003fe706 	br	27408 <__alt_data_end+0xfffe8008>
   2746c:	0005883a 	mov	r2,zero
   27470:	f800283a 	ret

00027474 <___vfprintf_internal_r>:
   27474:	deffb804 	addi	sp,sp,-288
   27478:	dfc04715 	stw	ra,284(sp)
   2747c:	ddc04515 	stw	r23,276(sp)
   27480:	dd404315 	stw	r21,268(sp)
   27484:	d9002c15 	stw	r4,176(sp)
   27488:	282f883a 	mov	r23,r5
   2748c:	302b883a 	mov	r21,r6
   27490:	d9c02d15 	stw	r7,180(sp)
   27494:	df004615 	stw	fp,280(sp)
   27498:	dd804415 	stw	r22,272(sp)
   2749c:	dd004215 	stw	r20,264(sp)
   274a0:	dcc04115 	stw	r19,260(sp)
   274a4:	dc804015 	stw	r18,256(sp)
   274a8:	dc403f15 	stw	r17,252(sp)
   274ac:	dc003e15 	stw	r16,248(sp)
   274b0:	002c28c0 	call	2c28c <_localeconv_r>
   274b4:	10800017 	ldw	r2,0(r2)
   274b8:	1009883a 	mov	r4,r2
   274bc:	d8803415 	stw	r2,208(sp)
   274c0:	00273dc0 	call	273dc <strlen>
   274c4:	d8803715 	stw	r2,220(sp)
   274c8:	d8802c17 	ldw	r2,176(sp)
   274cc:	10000226 	beq	r2,zero,274d8 <___vfprintf_internal_r+0x64>
   274d0:	10800e17 	ldw	r2,56(r2)
   274d4:	1000f926 	beq	r2,zero,278bc <___vfprintf_internal_r+0x448>
   274d8:	b880030b 	ldhu	r2,12(r23)
   274dc:	10c8000c 	andi	r3,r2,8192
   274e0:	1800061e 	bne	r3,zero,274fc <___vfprintf_internal_r+0x88>
   274e4:	b9001917 	ldw	r4,100(r23)
   274e8:	00f7ffc4 	movi	r3,-8193
   274ec:	10880014 	ori	r2,r2,8192
   274f0:	20c6703a 	and	r3,r4,r3
   274f4:	b880030d 	sth	r2,12(r23)
   274f8:	b8c01915 	stw	r3,100(r23)
   274fc:	10c0020c 	andi	r3,r2,8
   27500:	1800c126 	beq	r3,zero,27808 <___vfprintf_internal_r+0x394>
   27504:	b8c00417 	ldw	r3,16(r23)
   27508:	1800bf26 	beq	r3,zero,27808 <___vfprintf_internal_r+0x394>
   2750c:	1080068c 	andi	r2,r2,26
   27510:	00c00284 	movi	r3,10
   27514:	10c0c426 	beq	r2,r3,27828 <___vfprintf_internal_r+0x3b4>
   27518:	d8c00404 	addi	r3,sp,16
   2751c:	050000f4 	movhi	r20,3
   27520:	d9001e04 	addi	r4,sp,120
   27524:	a5128284 	addi	r20,r20,18954
   27528:	d8c01e15 	stw	r3,120(sp)
   2752c:	d8002015 	stw	zero,128(sp)
   27530:	d8001f15 	stw	zero,124(sp)
   27534:	d8003315 	stw	zero,204(sp)
   27538:	d8003615 	stw	zero,216(sp)
   2753c:	d8003815 	stw	zero,224(sp)
   27540:	1811883a 	mov	r8,r3
   27544:	d8003915 	stw	zero,228(sp)
   27548:	d8003a15 	stw	zero,232(sp)
   2754c:	d8002f15 	stw	zero,188(sp)
   27550:	d9002815 	stw	r4,160(sp)
   27554:	a8800007 	ldb	r2,0(r21)
   27558:	10027b26 	beq	r2,zero,27f48 <___vfprintf_internal_r+0xad4>
   2755c:	00c00944 	movi	r3,37
   27560:	a821883a 	mov	r16,r21
   27564:	10c0021e 	bne	r2,r3,27570 <___vfprintf_internal_r+0xfc>
   27568:	00001406 	br	275bc <___vfprintf_internal_r+0x148>
   2756c:	10c00326 	beq	r2,r3,2757c <___vfprintf_internal_r+0x108>
   27570:	84000044 	addi	r16,r16,1
   27574:	80800007 	ldb	r2,0(r16)
   27578:	103ffc1e 	bne	r2,zero,2756c <__alt_data_end+0xfffe816c>
   2757c:	8563c83a 	sub	r17,r16,r21
   27580:	88000e26 	beq	r17,zero,275bc <___vfprintf_internal_r+0x148>
   27584:	d8c02017 	ldw	r3,128(sp)
   27588:	d8801f17 	ldw	r2,124(sp)
   2758c:	45400015 	stw	r21,0(r8)
   27590:	1c47883a 	add	r3,r3,r17
   27594:	10800044 	addi	r2,r2,1
   27598:	d8c02015 	stw	r3,128(sp)
   2759c:	44400115 	stw	r17,4(r8)
   275a0:	d8801f15 	stw	r2,124(sp)
   275a4:	00c001c4 	movi	r3,7
   275a8:	1880a716 	blt	r3,r2,27848 <___vfprintf_internal_r+0x3d4>
   275ac:	42000204 	addi	r8,r8,8
   275b0:	d9402f17 	ldw	r5,188(sp)
   275b4:	2c4b883a 	add	r5,r5,r17
   275b8:	d9402f15 	stw	r5,188(sp)
   275bc:	80800007 	ldb	r2,0(r16)
   275c0:	1000a826 	beq	r2,zero,27864 <___vfprintf_internal_r+0x3f0>
   275c4:	84400047 	ldb	r17,1(r16)
   275c8:	00bfffc4 	movi	r2,-1
   275cc:	85400044 	addi	r21,r16,1
   275d0:	d8002785 	stb	zero,158(sp)
   275d4:	0007883a 	mov	r3,zero
   275d8:	000f883a 	mov	r7,zero
   275dc:	d8802915 	stw	r2,164(sp)
   275e0:	d8003115 	stw	zero,196(sp)
   275e4:	0025883a 	mov	r18,zero
   275e8:	01401604 	movi	r5,88
   275ec:	01800244 	movi	r6,9
   275f0:	02800a84 	movi	r10,42
   275f4:	02401b04 	movi	r9,108
   275f8:	ad400044 	addi	r21,r21,1
   275fc:	88bff804 	addi	r2,r17,-32
   27600:	28830436 	bltu	r5,r2,28214 <___vfprintf_internal_r+0xda0>
   27604:	100490ba 	slli	r2,r2,2
   27608:	010000b4 	movhi	r4,2
   2760c:	211d8704 	addi	r4,r4,30236
   27610:	1105883a 	add	r2,r2,r4
   27614:	10800017 	ldw	r2,0(r2)
   27618:	1000683a 	jmp	r2
   2761c:	00028134 	movhi	zero,2564
   27620:	00028214 	movui	zero,2568
   27624:	00028214 	movui	zero,2568
   27628:	00028154 	movui	zero,2565
   2762c:	00028214 	movui	zero,2568
   27630:	00028214 	movui	zero,2568
   27634:	00028214 	movui	zero,2568
   27638:	00028214 	movui	zero,2568
   2763c:	00028214 	movui	zero,2568
   27640:	00028214 	movui	zero,2568
   27644:	000278c8 	cmpgei	zero,zero,2531
   27648:	00028070 	cmpltui	zero,zero,2561
   2764c:	00028214 	movui	zero,2568
   27650:	00027790 	cmplti	zero,zero,2526
   27654:	000278f0 	cmpltui	zero,zero,2531
   27658:	00028214 	movui	zero,2568
   2765c:	00027930 	cmpltui	zero,zero,2532
   27660:	0002793c 	xorhi	zero,zero,2532
   27664:	0002793c 	xorhi	zero,zero,2532
   27668:	0002793c 	xorhi	zero,zero,2532
   2766c:	0002793c 	xorhi	zero,zero,2532
   27670:	0002793c 	xorhi	zero,zero,2532
   27674:	0002793c 	xorhi	zero,zero,2532
   27678:	0002793c 	xorhi	zero,zero,2532
   2767c:	0002793c 	xorhi	zero,zero,2532
   27680:	0002793c 	xorhi	zero,zero,2532
   27684:	00028214 	movui	zero,2568
   27688:	00028214 	movui	zero,2568
   2768c:	00028214 	movui	zero,2568
   27690:	00028214 	movui	zero,2568
   27694:	00028214 	movui	zero,2568
   27698:	00028214 	movui	zero,2568
   2769c:	00028214 	movui	zero,2568
   276a0:	00028214 	movui	zero,2568
   276a4:	00028214 	movui	zero,2568
   276a8:	00028214 	movui	zero,2568
   276ac:	00027970 	cmpltui	zero,zero,2533
   276b0:	00027a2c 	andhi	zero,zero,2536
   276b4:	00028214 	movui	zero,2568
   276b8:	00027a2c 	andhi	zero,zero,2536
   276bc:	00028214 	movui	zero,2568
   276c0:	00028214 	movui	zero,2568
   276c4:	00028214 	movui	zero,2568
   276c8:	00028214 	movui	zero,2568
   276cc:	00027acc 	andi	zero,zero,2539
   276d0:	00028214 	movui	zero,2568
   276d4:	00028214 	movui	zero,2568
   276d8:	00027ad8 	cmpnei	zero,zero,2539
   276dc:	00028214 	movui	zero,2568
   276e0:	00028214 	movui	zero,2568
   276e4:	00028214 	movui	zero,2568
   276e8:	00028214 	movui	zero,2568
   276ec:	00028214 	movui	zero,2568
   276f0:	00027f50 	cmplti	zero,zero,2557
   276f4:	00028214 	movui	zero,2568
   276f8:	00028214 	movui	zero,2568
   276fc:	00027fb0 	cmpltui	zero,zero,2558
   27700:	00028214 	movui	zero,2568
   27704:	00028214 	movui	zero,2568
   27708:	00028214 	movui	zero,2568
   2770c:	00028214 	movui	zero,2568
   27710:	00028214 	movui	zero,2568
   27714:	00028214 	movui	zero,2568
   27718:	00028214 	movui	zero,2568
   2771c:	00028214 	movui	zero,2568
   27720:	00028214 	movui	zero,2568
   27724:	00028214 	movui	zero,2568
   27728:	000281c0 	call	281c <__reset-0x1d7e4>
   2772c:	00028160 	cmpeqi	zero,zero,2565
   27730:	00027a2c 	andhi	zero,zero,2536
   27734:	00027a2c 	andhi	zero,zero,2536
   27738:	00027a2c 	andhi	zero,zero,2536
   2773c:	00028170 	cmpltui	zero,zero,2565
   27740:	00028160 	cmpeqi	zero,zero,2565
   27744:	00028214 	movui	zero,2568
   27748:	00028214 	movui	zero,2568
   2774c:	0002817c 	xorhi	zero,zero,2565
   27750:	00028214 	movui	zero,2568
   27754:	0002818c 	andi	zero,zero,2566
   27758:	00028060 	cmpeqi	zero,zero,2561
   2775c:	0002779c 	xori	zero,zero,2526
   27760:	00028080 	call	2808 <__reset-0x1d7f8>
   27764:	00028214 	movui	zero,2568
   27768:	0002808c 	andi	zero,zero,2562
   2776c:	00028214 	movui	zero,2568
   27770:	000280e8 	cmpgeui	zero,zero,2563
   27774:	00028214 	movui	zero,2568
   27778:	00028214 	movui	zero,2568
   2777c:	000280f8 	rdprs	zero,zero,2563
   27780:	d9003117 	ldw	r4,196(sp)
   27784:	d8802d15 	stw	r2,180(sp)
   27788:	0109c83a 	sub	r4,zero,r4
   2778c:	d9003115 	stw	r4,196(sp)
   27790:	94800114 	ori	r18,r18,4
   27794:	ac400007 	ldb	r17,0(r21)
   27798:	003f9706 	br	275f8 <__alt_data_end+0xfffe81f8>
   2779c:	00800c04 	movi	r2,48
   277a0:	d9002d17 	ldw	r4,180(sp)
   277a4:	d9402917 	ldw	r5,164(sp)
   277a8:	d8802705 	stb	r2,156(sp)
   277ac:	00801e04 	movi	r2,120
   277b0:	d8802745 	stb	r2,157(sp)
   277b4:	d8002785 	stb	zero,158(sp)
   277b8:	20c00104 	addi	r3,r4,4
   277bc:	24c00017 	ldw	r19,0(r4)
   277c0:	002d883a 	mov	r22,zero
   277c4:	90800094 	ori	r2,r18,2
   277c8:	28029a16 	blt	r5,zero,28234 <___vfprintf_internal_r+0xdc0>
   277cc:	00bfdfc4 	movi	r2,-129
   277d0:	90a4703a 	and	r18,r18,r2
   277d4:	d8c02d15 	stw	r3,180(sp)
   277d8:	94800094 	ori	r18,r18,2
   277dc:	9802871e 	bne	r19,zero,281fc <___vfprintf_internal_r+0xd88>
   277e0:	008000f4 	movhi	r2,3
   277e4:	10927b04 	addi	r2,r2,18924
   277e8:	d8803915 	stw	r2,228(sp)
   277ec:	04401e04 	movi	r17,120
   277f0:	d8802917 	ldw	r2,164(sp)
   277f4:	0039883a 	mov	fp,zero
   277f8:	1001e926 	beq	r2,zero,27fa0 <___vfprintf_internal_r+0xb2c>
   277fc:	0027883a 	mov	r19,zero
   27800:	002d883a 	mov	r22,zero
   27804:	00020506 	br	2801c <___vfprintf_internal_r+0xba8>
   27808:	d9002c17 	ldw	r4,176(sp)
   2780c:	b80b883a 	mov	r5,r23
   27810:	00297440 	call	29744 <__swsetup_r>
   27814:	1005ac1e 	bne	r2,zero,28ec8 <___vfprintf_internal_r+0x1a54>
   27818:	b880030b 	ldhu	r2,12(r23)
   2781c:	00c00284 	movi	r3,10
   27820:	1080068c 	andi	r2,r2,26
   27824:	10ff3c1e 	bne	r2,r3,27518 <__alt_data_end+0xfffe8118>
   27828:	b880038f 	ldh	r2,14(r23)
   2782c:	103f3a16 	blt	r2,zero,27518 <__alt_data_end+0xfffe8118>
   27830:	d9c02d17 	ldw	r7,180(sp)
   27834:	d9002c17 	ldw	r4,176(sp)
   27838:	a80d883a 	mov	r6,r21
   2783c:	b80b883a 	mov	r5,r23
   27840:	00296880 	call	29688 <__sbprintf>
   27844:	00001106 	br	2788c <___vfprintf_internal_r+0x418>
   27848:	d9002c17 	ldw	r4,176(sp)
   2784c:	d9801e04 	addi	r6,sp,120
   27850:	b80b883a 	mov	r5,r23
   27854:	002ea700 	call	2ea70 <__sprint_r>
   27858:	1000081e 	bne	r2,zero,2787c <___vfprintf_internal_r+0x408>
   2785c:	da000404 	addi	r8,sp,16
   27860:	003f5306 	br	275b0 <__alt_data_end+0xfffe81b0>
   27864:	d8802017 	ldw	r2,128(sp)
   27868:	10000426 	beq	r2,zero,2787c <___vfprintf_internal_r+0x408>
   2786c:	d9002c17 	ldw	r4,176(sp)
   27870:	d9801e04 	addi	r6,sp,120
   27874:	b80b883a 	mov	r5,r23
   27878:	002ea700 	call	2ea70 <__sprint_r>
   2787c:	b880030b 	ldhu	r2,12(r23)
   27880:	1080100c 	andi	r2,r2,64
   27884:	1005901e 	bne	r2,zero,28ec8 <___vfprintf_internal_r+0x1a54>
   27888:	d8802f17 	ldw	r2,188(sp)
   2788c:	dfc04717 	ldw	ra,284(sp)
   27890:	df004617 	ldw	fp,280(sp)
   27894:	ddc04517 	ldw	r23,276(sp)
   27898:	dd804417 	ldw	r22,272(sp)
   2789c:	dd404317 	ldw	r21,268(sp)
   278a0:	dd004217 	ldw	r20,264(sp)
   278a4:	dcc04117 	ldw	r19,260(sp)
   278a8:	dc804017 	ldw	r18,256(sp)
   278ac:	dc403f17 	ldw	r17,252(sp)
   278b0:	dc003e17 	ldw	r16,248(sp)
   278b4:	dec04804 	addi	sp,sp,288
   278b8:	f800283a 	ret
   278bc:	d9002c17 	ldw	r4,176(sp)
   278c0:	002b7180 	call	2b718 <__sinit>
   278c4:	003f0406 	br	274d8 <__alt_data_end+0xfffe80d8>
   278c8:	d8802d17 	ldw	r2,180(sp)
   278cc:	d9002d17 	ldw	r4,180(sp)
   278d0:	10800017 	ldw	r2,0(r2)
   278d4:	d8803115 	stw	r2,196(sp)
   278d8:	20800104 	addi	r2,r4,4
   278dc:	d9003117 	ldw	r4,196(sp)
   278e0:	203fa716 	blt	r4,zero,27780 <__alt_data_end+0xfffe8380>
   278e4:	d8802d15 	stw	r2,180(sp)
   278e8:	ac400007 	ldb	r17,0(r21)
   278ec:	003f4206 	br	275f8 <__alt_data_end+0xfffe81f8>
   278f0:	ac400007 	ldb	r17,0(r21)
   278f4:	aac00044 	addi	r11,r21,1
   278f8:	8a872826 	beq	r17,r10,2959c <___vfprintf_internal_r+0x2128>
   278fc:	88bff404 	addi	r2,r17,-48
   27900:	0009883a 	mov	r4,zero
   27904:	30867d36 	bltu	r6,r2,292fc <___vfprintf_internal_r+0x1e88>
   27908:	5c400007 	ldb	r17,0(r11)
   2790c:	210002a4 	muli	r4,r4,10
   27910:	5d400044 	addi	r21,r11,1
   27914:	a817883a 	mov	r11,r21
   27918:	2089883a 	add	r4,r4,r2
   2791c:	88bff404 	addi	r2,r17,-48
   27920:	30bff92e 	bgeu	r6,r2,27908 <__alt_data_end+0xfffe8508>
   27924:	2005c916 	blt	r4,zero,2904c <___vfprintf_internal_r+0x1bd8>
   27928:	d9002915 	stw	r4,164(sp)
   2792c:	003f3306 	br	275fc <__alt_data_end+0xfffe81fc>
   27930:	94802014 	ori	r18,r18,128
   27934:	ac400007 	ldb	r17,0(r21)
   27938:	003f2f06 	br	275f8 <__alt_data_end+0xfffe81f8>
   2793c:	a809883a 	mov	r4,r21
   27940:	d8003115 	stw	zero,196(sp)
   27944:	88bff404 	addi	r2,r17,-48
   27948:	0017883a 	mov	r11,zero
   2794c:	24400007 	ldb	r17,0(r4)
   27950:	5ac002a4 	muli	r11,r11,10
   27954:	ad400044 	addi	r21,r21,1
   27958:	a809883a 	mov	r4,r21
   2795c:	12d7883a 	add	r11,r2,r11
   27960:	88bff404 	addi	r2,r17,-48
   27964:	30bff92e 	bgeu	r6,r2,2794c <__alt_data_end+0xfffe854c>
   27968:	dac03115 	stw	r11,196(sp)
   2796c:	003f2306 	br	275fc <__alt_data_end+0xfffe81fc>
   27970:	18c03fcc 	andi	r3,r3,255
   27974:	18072b1e 	bne	r3,zero,29624 <___vfprintf_internal_r+0x21b0>
   27978:	94800414 	ori	r18,r18,16
   2797c:	9080080c 	andi	r2,r18,32
   27980:	10037b26 	beq	r2,zero,28770 <___vfprintf_internal_r+0x12fc>
   27984:	d9402d17 	ldw	r5,180(sp)
   27988:	28800117 	ldw	r2,4(r5)
   2798c:	2cc00017 	ldw	r19,0(r5)
   27990:	29400204 	addi	r5,r5,8
   27994:	d9402d15 	stw	r5,180(sp)
   27998:	102d883a 	mov	r22,r2
   2799c:	10044b16 	blt	r2,zero,28acc <___vfprintf_internal_r+0x1658>
   279a0:	d9402917 	ldw	r5,164(sp)
   279a4:	df002783 	ldbu	fp,158(sp)
   279a8:	2803bc16 	blt	r5,zero,2889c <___vfprintf_internal_r+0x1428>
   279ac:	00ffdfc4 	movi	r3,-129
   279b0:	9d84b03a 	or	r2,r19,r22
   279b4:	90e4703a 	and	r18,r18,r3
   279b8:	10017726 	beq	r2,zero,27f98 <___vfprintf_internal_r+0xb24>
   279bc:	b0038326 	beq	r22,zero,287cc <___vfprintf_internal_r+0x1358>
   279c0:	dc402a15 	stw	r17,168(sp)
   279c4:	dc001e04 	addi	r16,sp,120
   279c8:	b023883a 	mov	r17,r22
   279cc:	402d883a 	mov	r22,r8
   279d0:	9809883a 	mov	r4,r19
   279d4:	880b883a 	mov	r5,r17
   279d8:	01800284 	movi	r6,10
   279dc:	000f883a 	mov	r7,zero
   279e0:	0030e680 	call	30e68 <__umoddi3>
   279e4:	10800c04 	addi	r2,r2,48
   279e8:	843fffc4 	addi	r16,r16,-1
   279ec:	9809883a 	mov	r4,r19
   279f0:	880b883a 	mov	r5,r17
   279f4:	80800005 	stb	r2,0(r16)
   279f8:	01800284 	movi	r6,10
   279fc:	000f883a 	mov	r7,zero
   27a00:	00308f00 	call	308f0 <__udivdi3>
   27a04:	1027883a 	mov	r19,r2
   27a08:	10c4b03a 	or	r2,r2,r3
   27a0c:	1823883a 	mov	r17,r3
   27a10:	103fef1e 	bne	r2,zero,279d0 <__alt_data_end+0xfffe85d0>
   27a14:	d8c02817 	ldw	r3,160(sp)
   27a18:	dc402a17 	ldw	r17,168(sp)
   27a1c:	b011883a 	mov	r8,r22
   27a20:	1c07c83a 	sub	r3,r3,r16
   27a24:	d8c02e15 	stw	r3,184(sp)
   27a28:	00005906 	br	27b90 <___vfprintf_internal_r+0x71c>
   27a2c:	18c03fcc 	andi	r3,r3,255
   27a30:	1806fa1e 	bne	r3,zero,2961c <___vfprintf_internal_r+0x21a8>
   27a34:	9080020c 	andi	r2,r18,8
   27a38:	10048a26 	beq	r2,zero,28c64 <___vfprintf_internal_r+0x17f0>
   27a3c:	d8c02d17 	ldw	r3,180(sp)
   27a40:	d9002d17 	ldw	r4,180(sp)
   27a44:	d9402d17 	ldw	r5,180(sp)
   27a48:	18c00017 	ldw	r3,0(r3)
   27a4c:	21000117 	ldw	r4,4(r4)
   27a50:	29400204 	addi	r5,r5,8
   27a54:	d8c03615 	stw	r3,216(sp)
   27a58:	d9003815 	stw	r4,224(sp)
   27a5c:	d9402d15 	stw	r5,180(sp)
   27a60:	d9003617 	ldw	r4,216(sp)
   27a64:	d9403817 	ldw	r5,224(sp)
   27a68:	da003d15 	stw	r8,244(sp)
   27a6c:	04000044 	movi	r16,1
   27a70:	002e6940 	call	2e694 <__fpclassifyd>
   27a74:	da003d17 	ldw	r8,244(sp)
   27a78:	14041f1e 	bne	r2,r16,28af8 <___vfprintf_internal_r+0x1684>
   27a7c:	d9003617 	ldw	r4,216(sp)
   27a80:	d9403817 	ldw	r5,224(sp)
   27a84:	000d883a 	mov	r6,zero
   27a88:	000f883a 	mov	r7,zero
   27a8c:	00315040 	call	31504 <__ledf2>
   27a90:	da003d17 	ldw	r8,244(sp)
   27a94:	1005be16 	blt	r2,zero,29190 <___vfprintf_internal_r+0x1d1c>
   27a98:	df002783 	ldbu	fp,158(sp)
   27a9c:	008011c4 	movi	r2,71
   27aa0:	1445330e 	bge	r2,r17,28f70 <___vfprintf_internal_r+0x1afc>
   27aa4:	040000f4 	movhi	r16,3
   27aa8:	84127304 	addi	r16,r16,18892
   27aac:	00c000c4 	movi	r3,3
   27ab0:	00bfdfc4 	movi	r2,-129
   27ab4:	d8c02a15 	stw	r3,168(sp)
   27ab8:	90a4703a 	and	r18,r18,r2
   27abc:	d8c02e15 	stw	r3,184(sp)
   27ac0:	d8002915 	stw	zero,164(sp)
   27ac4:	d8003215 	stw	zero,200(sp)
   27ac8:	00003706 	br	27ba8 <___vfprintf_internal_r+0x734>
   27acc:	94800214 	ori	r18,r18,8
   27ad0:	ac400007 	ldb	r17,0(r21)
   27ad4:	003ec806 	br	275f8 <__alt_data_end+0xfffe81f8>
   27ad8:	18c03fcc 	andi	r3,r3,255
   27adc:	1806db1e 	bne	r3,zero,2964c <___vfprintf_internal_r+0x21d8>
   27ae0:	94800414 	ori	r18,r18,16
   27ae4:	9080080c 	andi	r2,r18,32
   27ae8:	1002d826 	beq	r2,zero,2864c <___vfprintf_internal_r+0x11d8>
   27aec:	d9402d17 	ldw	r5,180(sp)
   27af0:	d8c02917 	ldw	r3,164(sp)
   27af4:	d8002785 	stb	zero,158(sp)
   27af8:	28800204 	addi	r2,r5,8
   27afc:	2cc00017 	ldw	r19,0(r5)
   27b00:	2d800117 	ldw	r22,4(r5)
   27b04:	18048f16 	blt	r3,zero,28d44 <___vfprintf_internal_r+0x18d0>
   27b08:	013fdfc4 	movi	r4,-129
   27b0c:	9d86b03a 	or	r3,r19,r22
   27b10:	d8802d15 	stw	r2,180(sp)
   27b14:	9124703a 	and	r18,r18,r4
   27b18:	1802d91e 	bne	r3,zero,28680 <___vfprintf_internal_r+0x120c>
   27b1c:	d8c02917 	ldw	r3,164(sp)
   27b20:	0039883a 	mov	fp,zero
   27b24:	1805c326 	beq	r3,zero,29234 <___vfprintf_internal_r+0x1dc0>
   27b28:	0027883a 	mov	r19,zero
   27b2c:	002d883a 	mov	r22,zero
   27b30:	dc001e04 	addi	r16,sp,120
   27b34:	9806d0fa 	srli	r3,r19,3
   27b38:	b008977a 	slli	r4,r22,29
   27b3c:	b02cd0fa 	srli	r22,r22,3
   27b40:	9cc001cc 	andi	r19,r19,7
   27b44:	98800c04 	addi	r2,r19,48
   27b48:	843fffc4 	addi	r16,r16,-1
   27b4c:	20e6b03a 	or	r19,r4,r3
   27b50:	80800005 	stb	r2,0(r16)
   27b54:	9d86b03a 	or	r3,r19,r22
   27b58:	183ff61e 	bne	r3,zero,27b34 <__alt_data_end+0xfffe8734>
   27b5c:	90c0004c 	andi	r3,r18,1
   27b60:	18013b26 	beq	r3,zero,28050 <___vfprintf_internal_r+0xbdc>
   27b64:	10803fcc 	andi	r2,r2,255
   27b68:	1080201c 	xori	r2,r2,128
   27b6c:	10bfe004 	addi	r2,r2,-128
   27b70:	00c00c04 	movi	r3,48
   27b74:	10c13626 	beq	r2,r3,28050 <___vfprintf_internal_r+0xbdc>
   27b78:	80ffffc5 	stb	r3,-1(r16)
   27b7c:	d8c02817 	ldw	r3,160(sp)
   27b80:	80bfffc4 	addi	r2,r16,-1
   27b84:	1021883a 	mov	r16,r2
   27b88:	1887c83a 	sub	r3,r3,r2
   27b8c:	d8c02e15 	stw	r3,184(sp)
   27b90:	d8802e17 	ldw	r2,184(sp)
   27b94:	d9002917 	ldw	r4,164(sp)
   27b98:	1100010e 	bge	r2,r4,27ba0 <___vfprintf_internal_r+0x72c>
   27b9c:	2005883a 	mov	r2,r4
   27ba0:	d8802a15 	stw	r2,168(sp)
   27ba4:	d8003215 	stw	zero,200(sp)
   27ba8:	e7003fcc 	andi	fp,fp,255
   27bac:	e700201c 	xori	fp,fp,128
   27bb0:	e73fe004 	addi	fp,fp,-128
   27bb4:	e0000326 	beq	fp,zero,27bc4 <___vfprintf_internal_r+0x750>
   27bb8:	d8c02a17 	ldw	r3,168(sp)
   27bbc:	18c00044 	addi	r3,r3,1
   27bc0:	d8c02a15 	stw	r3,168(sp)
   27bc4:	90c0008c 	andi	r3,r18,2
   27bc8:	d8c02b15 	stw	r3,172(sp)
   27bcc:	18000326 	beq	r3,zero,27bdc <___vfprintf_internal_r+0x768>
   27bd0:	d8c02a17 	ldw	r3,168(sp)
   27bd4:	18c00084 	addi	r3,r3,2
   27bd8:	d8c02a15 	stw	r3,168(sp)
   27bdc:	90c0210c 	andi	r3,r18,132
   27be0:	d8c03015 	stw	r3,192(sp)
   27be4:	1801a31e 	bne	r3,zero,28274 <___vfprintf_internal_r+0xe00>
   27be8:	d9003117 	ldw	r4,196(sp)
   27bec:	d8c02a17 	ldw	r3,168(sp)
   27bf0:	20e7c83a 	sub	r19,r4,r3
   27bf4:	04c19f0e 	bge	zero,r19,28274 <___vfprintf_internal_r+0xe00>
   27bf8:	02400404 	movi	r9,16
   27bfc:	d8c02017 	ldw	r3,128(sp)
   27c00:	d8801f17 	ldw	r2,124(sp)
   27c04:	4cc50d0e 	bge	r9,r19,2903c <___vfprintf_internal_r+0x1bc8>
   27c08:	014000f4 	movhi	r5,3
   27c0c:	29528684 	addi	r5,r5,18970
   27c10:	dc403b15 	stw	r17,236(sp)
   27c14:	d9403515 	stw	r5,212(sp)
   27c18:	9823883a 	mov	r17,r19
   27c1c:	482d883a 	mov	r22,r9
   27c20:	9027883a 	mov	r19,r18
   27c24:	070001c4 	movi	fp,7
   27c28:	8025883a 	mov	r18,r16
   27c2c:	dc002c17 	ldw	r16,176(sp)
   27c30:	00000306 	br	27c40 <___vfprintf_internal_r+0x7cc>
   27c34:	8c7ffc04 	addi	r17,r17,-16
   27c38:	42000204 	addi	r8,r8,8
   27c3c:	b440130e 	bge	r22,r17,27c8c <___vfprintf_internal_r+0x818>
   27c40:	010000f4 	movhi	r4,3
   27c44:	18c00404 	addi	r3,r3,16
   27c48:	10800044 	addi	r2,r2,1
   27c4c:	21128684 	addi	r4,r4,18970
   27c50:	41000015 	stw	r4,0(r8)
   27c54:	45800115 	stw	r22,4(r8)
   27c58:	d8c02015 	stw	r3,128(sp)
   27c5c:	d8801f15 	stw	r2,124(sp)
   27c60:	e0bff40e 	bge	fp,r2,27c34 <__alt_data_end+0xfffe8834>
   27c64:	d9801e04 	addi	r6,sp,120
   27c68:	b80b883a 	mov	r5,r23
   27c6c:	8009883a 	mov	r4,r16
   27c70:	002ea700 	call	2ea70 <__sprint_r>
   27c74:	103f011e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   27c78:	8c7ffc04 	addi	r17,r17,-16
   27c7c:	d8c02017 	ldw	r3,128(sp)
   27c80:	d8801f17 	ldw	r2,124(sp)
   27c84:	da000404 	addi	r8,sp,16
   27c88:	b47fed16 	blt	r22,r17,27c40 <__alt_data_end+0xfffe8840>
   27c8c:	9021883a 	mov	r16,r18
   27c90:	9825883a 	mov	r18,r19
   27c94:	8827883a 	mov	r19,r17
   27c98:	dc403b17 	ldw	r17,236(sp)
   27c9c:	d9403517 	ldw	r5,212(sp)
   27ca0:	98c7883a 	add	r3,r19,r3
   27ca4:	10800044 	addi	r2,r2,1
   27ca8:	41400015 	stw	r5,0(r8)
   27cac:	44c00115 	stw	r19,4(r8)
   27cb0:	d8c02015 	stw	r3,128(sp)
   27cb4:	d8801f15 	stw	r2,124(sp)
   27cb8:	010001c4 	movi	r4,7
   27cbc:	2082a316 	blt	r4,r2,2874c <___vfprintf_internal_r+0x12d8>
   27cc0:	df002787 	ldb	fp,158(sp)
   27cc4:	42000204 	addi	r8,r8,8
   27cc8:	e0000c26 	beq	fp,zero,27cfc <___vfprintf_internal_r+0x888>
   27ccc:	d8801f17 	ldw	r2,124(sp)
   27cd0:	d9002784 	addi	r4,sp,158
   27cd4:	18c00044 	addi	r3,r3,1
   27cd8:	10800044 	addi	r2,r2,1
   27cdc:	41000015 	stw	r4,0(r8)
   27ce0:	01000044 	movi	r4,1
   27ce4:	41000115 	stw	r4,4(r8)
   27ce8:	d8c02015 	stw	r3,128(sp)
   27cec:	d8801f15 	stw	r2,124(sp)
   27cf0:	010001c4 	movi	r4,7
   27cf4:	20823c16 	blt	r4,r2,285e8 <___vfprintf_internal_r+0x1174>
   27cf8:	42000204 	addi	r8,r8,8
   27cfc:	d8802b17 	ldw	r2,172(sp)
   27d00:	10000c26 	beq	r2,zero,27d34 <___vfprintf_internal_r+0x8c0>
   27d04:	d8801f17 	ldw	r2,124(sp)
   27d08:	d9002704 	addi	r4,sp,156
   27d0c:	18c00084 	addi	r3,r3,2
   27d10:	10800044 	addi	r2,r2,1
   27d14:	41000015 	stw	r4,0(r8)
   27d18:	01000084 	movi	r4,2
   27d1c:	41000115 	stw	r4,4(r8)
   27d20:	d8c02015 	stw	r3,128(sp)
   27d24:	d8801f15 	stw	r2,124(sp)
   27d28:	010001c4 	movi	r4,7
   27d2c:	20823616 	blt	r4,r2,28608 <___vfprintf_internal_r+0x1194>
   27d30:	42000204 	addi	r8,r8,8
   27d34:	d9003017 	ldw	r4,192(sp)
   27d38:	00802004 	movi	r2,128
   27d3c:	20819926 	beq	r4,r2,283a4 <___vfprintf_internal_r+0xf30>
   27d40:	d9402917 	ldw	r5,164(sp)
   27d44:	d8802e17 	ldw	r2,184(sp)
   27d48:	28adc83a 	sub	r22,r5,r2
   27d4c:	0580310e 	bge	zero,r22,27e14 <___vfprintf_internal_r+0x9a0>
   27d50:	07000404 	movi	fp,16
   27d54:	d8801f17 	ldw	r2,124(sp)
   27d58:	e584140e 	bge	fp,r22,28dac <___vfprintf_internal_r+0x1938>
   27d5c:	014000f4 	movhi	r5,3
   27d60:	29528284 	addi	r5,r5,18954
   27d64:	dc402915 	stw	r17,164(sp)
   27d68:	d9402b15 	stw	r5,172(sp)
   27d6c:	b023883a 	mov	r17,r22
   27d70:	04c001c4 	movi	r19,7
   27d74:	a82d883a 	mov	r22,r21
   27d78:	902b883a 	mov	r21,r18
   27d7c:	8025883a 	mov	r18,r16
   27d80:	dc002c17 	ldw	r16,176(sp)
   27d84:	00000306 	br	27d94 <___vfprintf_internal_r+0x920>
   27d88:	8c7ffc04 	addi	r17,r17,-16
   27d8c:	42000204 	addi	r8,r8,8
   27d90:	e440110e 	bge	fp,r17,27dd8 <___vfprintf_internal_r+0x964>
   27d94:	18c00404 	addi	r3,r3,16
   27d98:	10800044 	addi	r2,r2,1
   27d9c:	45000015 	stw	r20,0(r8)
   27da0:	47000115 	stw	fp,4(r8)
   27da4:	d8c02015 	stw	r3,128(sp)
   27da8:	d8801f15 	stw	r2,124(sp)
   27dac:	98bff60e 	bge	r19,r2,27d88 <__alt_data_end+0xfffe8988>
   27db0:	d9801e04 	addi	r6,sp,120
   27db4:	b80b883a 	mov	r5,r23
   27db8:	8009883a 	mov	r4,r16
   27dbc:	002ea700 	call	2ea70 <__sprint_r>
   27dc0:	103eae1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   27dc4:	8c7ffc04 	addi	r17,r17,-16
   27dc8:	d8c02017 	ldw	r3,128(sp)
   27dcc:	d8801f17 	ldw	r2,124(sp)
   27dd0:	da000404 	addi	r8,sp,16
   27dd4:	e47fef16 	blt	fp,r17,27d94 <__alt_data_end+0xfffe8994>
   27dd8:	9021883a 	mov	r16,r18
   27ddc:	a825883a 	mov	r18,r21
   27de0:	b02b883a 	mov	r21,r22
   27de4:	882d883a 	mov	r22,r17
   27de8:	dc402917 	ldw	r17,164(sp)
   27dec:	d9002b17 	ldw	r4,172(sp)
   27df0:	1d87883a 	add	r3,r3,r22
   27df4:	10800044 	addi	r2,r2,1
   27df8:	41000015 	stw	r4,0(r8)
   27dfc:	45800115 	stw	r22,4(r8)
   27e00:	d8c02015 	stw	r3,128(sp)
   27e04:	d8801f15 	stw	r2,124(sp)
   27e08:	010001c4 	movi	r4,7
   27e0c:	2081ee16 	blt	r4,r2,285c8 <___vfprintf_internal_r+0x1154>
   27e10:	42000204 	addi	r8,r8,8
   27e14:	9080400c 	andi	r2,r18,256
   27e18:	1001181e 	bne	r2,zero,2827c <___vfprintf_internal_r+0xe08>
   27e1c:	d9402e17 	ldw	r5,184(sp)
   27e20:	d8801f17 	ldw	r2,124(sp)
   27e24:	44000015 	stw	r16,0(r8)
   27e28:	1947883a 	add	r3,r3,r5
   27e2c:	10800044 	addi	r2,r2,1
   27e30:	41400115 	stw	r5,4(r8)
   27e34:	d8c02015 	stw	r3,128(sp)
   27e38:	d8801f15 	stw	r2,124(sp)
   27e3c:	010001c4 	movi	r4,7
   27e40:	2081d316 	blt	r4,r2,28590 <___vfprintf_internal_r+0x111c>
   27e44:	42000204 	addi	r8,r8,8
   27e48:	9480010c 	andi	r18,r18,4
   27e4c:	90003226 	beq	r18,zero,27f18 <___vfprintf_internal_r+0xaa4>
   27e50:	d9403117 	ldw	r5,196(sp)
   27e54:	d8802a17 	ldw	r2,168(sp)
   27e58:	28a1c83a 	sub	r16,r5,r2
   27e5c:	04002e0e 	bge	zero,r16,27f18 <___vfprintf_internal_r+0xaa4>
   27e60:	04400404 	movi	r17,16
   27e64:	d8801f17 	ldw	r2,124(sp)
   27e68:	8c04a20e 	bge	r17,r16,290f4 <___vfprintf_internal_r+0x1c80>
   27e6c:	014000f4 	movhi	r5,3
   27e70:	29528684 	addi	r5,r5,18970
   27e74:	d9403515 	stw	r5,212(sp)
   27e78:	048001c4 	movi	r18,7
   27e7c:	dcc02c17 	ldw	r19,176(sp)
   27e80:	00000306 	br	27e90 <___vfprintf_internal_r+0xa1c>
   27e84:	843ffc04 	addi	r16,r16,-16
   27e88:	42000204 	addi	r8,r8,8
   27e8c:	8c00130e 	bge	r17,r16,27edc <___vfprintf_internal_r+0xa68>
   27e90:	010000f4 	movhi	r4,3
   27e94:	18c00404 	addi	r3,r3,16
   27e98:	10800044 	addi	r2,r2,1
   27e9c:	21128684 	addi	r4,r4,18970
   27ea0:	41000015 	stw	r4,0(r8)
   27ea4:	44400115 	stw	r17,4(r8)
   27ea8:	d8c02015 	stw	r3,128(sp)
   27eac:	d8801f15 	stw	r2,124(sp)
   27eb0:	90bff40e 	bge	r18,r2,27e84 <__alt_data_end+0xfffe8a84>
   27eb4:	d9801e04 	addi	r6,sp,120
   27eb8:	b80b883a 	mov	r5,r23
   27ebc:	9809883a 	mov	r4,r19
   27ec0:	002ea700 	call	2ea70 <__sprint_r>
   27ec4:	103e6d1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   27ec8:	843ffc04 	addi	r16,r16,-16
   27ecc:	d8c02017 	ldw	r3,128(sp)
   27ed0:	d8801f17 	ldw	r2,124(sp)
   27ed4:	da000404 	addi	r8,sp,16
   27ed8:	8c3fed16 	blt	r17,r16,27e90 <__alt_data_end+0xfffe8a90>
   27edc:	d9403517 	ldw	r5,212(sp)
   27ee0:	1c07883a 	add	r3,r3,r16
   27ee4:	10800044 	addi	r2,r2,1
   27ee8:	41400015 	stw	r5,0(r8)
   27eec:	44000115 	stw	r16,4(r8)
   27ef0:	d8c02015 	stw	r3,128(sp)
   27ef4:	d8801f15 	stw	r2,124(sp)
   27ef8:	010001c4 	movi	r4,7
   27efc:	2080060e 	bge	r4,r2,27f18 <___vfprintf_internal_r+0xaa4>
   27f00:	d9002c17 	ldw	r4,176(sp)
   27f04:	d9801e04 	addi	r6,sp,120
   27f08:	b80b883a 	mov	r5,r23
   27f0c:	002ea700 	call	2ea70 <__sprint_r>
   27f10:	103e5a1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   27f14:	d8c02017 	ldw	r3,128(sp)
   27f18:	d8803117 	ldw	r2,196(sp)
   27f1c:	d9002a17 	ldw	r4,168(sp)
   27f20:	1100010e 	bge	r2,r4,27f28 <___vfprintf_internal_r+0xab4>
   27f24:	2005883a 	mov	r2,r4
   27f28:	d9402f17 	ldw	r5,188(sp)
   27f2c:	288b883a 	add	r5,r5,r2
   27f30:	d9402f15 	stw	r5,188(sp)
   27f34:	18019e1e 	bne	r3,zero,285b0 <___vfprintf_internal_r+0x113c>
   27f38:	a8800007 	ldb	r2,0(r21)
   27f3c:	d8001f15 	stw	zero,124(sp)
   27f40:	da000404 	addi	r8,sp,16
   27f44:	103d851e 	bne	r2,zero,2755c <__alt_data_end+0xfffe815c>
   27f48:	a821883a 	mov	r16,r21
   27f4c:	003d9b06 	br	275bc <__alt_data_end+0xfffe81bc>
   27f50:	18c03fcc 	andi	r3,r3,255
   27f54:	1805c11e 	bne	r3,zero,2965c <___vfprintf_internal_r+0x21e8>
   27f58:	94800414 	ori	r18,r18,16
   27f5c:	9080080c 	andi	r2,r18,32
   27f60:	10020c26 	beq	r2,zero,28794 <___vfprintf_internal_r+0x1320>
   27f64:	d8802d17 	ldw	r2,180(sp)
   27f68:	d9002917 	ldw	r4,164(sp)
   27f6c:	d8002785 	stb	zero,158(sp)
   27f70:	10c00204 	addi	r3,r2,8
   27f74:	14c00017 	ldw	r19,0(r2)
   27f78:	15800117 	ldw	r22,4(r2)
   27f7c:	20040f16 	blt	r4,zero,28fbc <___vfprintf_internal_r+0x1b48>
   27f80:	013fdfc4 	movi	r4,-129
   27f84:	9d84b03a 	or	r2,r19,r22
   27f88:	d8c02d15 	stw	r3,180(sp)
   27f8c:	9124703a 	and	r18,r18,r4
   27f90:	0039883a 	mov	fp,zero
   27f94:	103e891e 	bne	r2,zero,279bc <__alt_data_end+0xfffe85bc>
   27f98:	d9002917 	ldw	r4,164(sp)
   27f9c:	2002c11e 	bne	r4,zero,28aa4 <___vfprintf_internal_r+0x1630>
   27fa0:	d8002915 	stw	zero,164(sp)
   27fa4:	d8002e15 	stw	zero,184(sp)
   27fa8:	dc001e04 	addi	r16,sp,120
   27fac:	003ef806 	br	27b90 <__alt_data_end+0xfffe8790>
   27fb0:	18c03fcc 	andi	r3,r3,255
   27fb4:	18059d1e 	bne	r3,zero,2962c <___vfprintf_internal_r+0x21b8>
   27fb8:	014000f4 	movhi	r5,3
   27fbc:	29527604 	addi	r5,r5,18904
   27fc0:	d9403915 	stw	r5,228(sp)
   27fc4:	9080080c 	andi	r2,r18,32
   27fc8:	10005226 	beq	r2,zero,28114 <___vfprintf_internal_r+0xca0>
   27fcc:	d8802d17 	ldw	r2,180(sp)
   27fd0:	14c00017 	ldw	r19,0(r2)
   27fd4:	15800117 	ldw	r22,4(r2)
   27fd8:	10800204 	addi	r2,r2,8
   27fdc:	d8802d15 	stw	r2,180(sp)
   27fe0:	9080004c 	andi	r2,r18,1
   27fe4:	10019026 	beq	r2,zero,28628 <___vfprintf_internal_r+0x11b4>
   27fe8:	9d84b03a 	or	r2,r19,r22
   27fec:	10036926 	beq	r2,zero,28d94 <___vfprintf_internal_r+0x1920>
   27ff0:	d8c02917 	ldw	r3,164(sp)
   27ff4:	00800c04 	movi	r2,48
   27ff8:	d8802705 	stb	r2,156(sp)
   27ffc:	dc402745 	stb	r17,157(sp)
   28000:	d8002785 	stb	zero,158(sp)
   28004:	90800094 	ori	r2,r18,2
   28008:	18045d16 	blt	r3,zero,29180 <___vfprintf_internal_r+0x1d0c>
   2800c:	00bfdfc4 	movi	r2,-129
   28010:	90a4703a 	and	r18,r18,r2
   28014:	94800094 	ori	r18,r18,2
   28018:	0039883a 	mov	fp,zero
   2801c:	d9003917 	ldw	r4,228(sp)
   28020:	dc001e04 	addi	r16,sp,120
   28024:	988003cc 	andi	r2,r19,15
   28028:	b006973a 	slli	r3,r22,28
   2802c:	2085883a 	add	r2,r4,r2
   28030:	9826d13a 	srli	r19,r19,4
   28034:	10800003 	ldbu	r2,0(r2)
   28038:	b02cd13a 	srli	r22,r22,4
   2803c:	843fffc4 	addi	r16,r16,-1
   28040:	1ce6b03a 	or	r19,r3,r19
   28044:	80800005 	stb	r2,0(r16)
   28048:	9d84b03a 	or	r2,r19,r22
   2804c:	103ff51e 	bne	r2,zero,28024 <__alt_data_end+0xfffe8c24>
   28050:	d8c02817 	ldw	r3,160(sp)
   28054:	1c07c83a 	sub	r3,r3,r16
   28058:	d8c02e15 	stw	r3,184(sp)
   2805c:	003ecc06 	br	27b90 <__alt_data_end+0xfffe8790>
   28060:	18c03fcc 	andi	r3,r3,255
   28064:	183e9f26 	beq	r3,zero,27ae4 <__alt_data_end+0xfffe86e4>
   28068:	d9c02785 	stb	r7,158(sp)
   2806c:	003e9d06 	br	27ae4 <__alt_data_end+0xfffe86e4>
   28070:	00c00044 	movi	r3,1
   28074:	01c00ac4 	movi	r7,43
   28078:	ac400007 	ldb	r17,0(r21)
   2807c:	003d5e06 	br	275f8 <__alt_data_end+0xfffe81f8>
   28080:	94800814 	ori	r18,r18,32
   28084:	ac400007 	ldb	r17,0(r21)
   28088:	003d5b06 	br	275f8 <__alt_data_end+0xfffe81f8>
   2808c:	d8c02d17 	ldw	r3,180(sp)
   28090:	d8002785 	stb	zero,158(sp)
   28094:	1c000017 	ldw	r16,0(r3)
   28098:	1cc00104 	addi	r19,r3,4
   2809c:	80041926 	beq	r16,zero,29104 <___vfprintf_internal_r+0x1c90>
   280a0:	d9002917 	ldw	r4,164(sp)
   280a4:	2003d016 	blt	r4,zero,28fe8 <___vfprintf_internal_r+0x1b74>
   280a8:	200d883a 	mov	r6,r4
   280ac:	000b883a 	mov	r5,zero
   280b0:	8009883a 	mov	r4,r16
   280b4:	da003d15 	stw	r8,244(sp)
   280b8:	002cc840 	call	2cc84 <memchr>
   280bc:	da003d17 	ldw	r8,244(sp)
   280c0:	10045426 	beq	r2,zero,29214 <___vfprintf_internal_r+0x1da0>
   280c4:	1405c83a 	sub	r2,r2,r16
   280c8:	d8802e15 	stw	r2,184(sp)
   280cc:	1003cc16 	blt	r2,zero,29000 <___vfprintf_internal_r+0x1b8c>
   280d0:	df002783 	ldbu	fp,158(sp)
   280d4:	d8802a15 	stw	r2,168(sp)
   280d8:	dcc02d15 	stw	r19,180(sp)
   280dc:	d8002915 	stw	zero,164(sp)
   280e0:	d8003215 	stw	zero,200(sp)
   280e4:	003eb006 	br	27ba8 <__alt_data_end+0xfffe87a8>
   280e8:	18c03fcc 	andi	r3,r3,255
   280ec:	183f9b26 	beq	r3,zero,27f5c <__alt_data_end+0xfffe8b5c>
   280f0:	d9c02785 	stb	r7,158(sp)
   280f4:	003f9906 	br	27f5c <__alt_data_end+0xfffe8b5c>
   280f8:	18c03fcc 	andi	r3,r3,255
   280fc:	1805551e 	bne	r3,zero,29654 <___vfprintf_internal_r+0x21e0>
   28100:	014000f4 	movhi	r5,3
   28104:	29527b04 	addi	r5,r5,18924
   28108:	d9403915 	stw	r5,228(sp)
   2810c:	9080080c 	andi	r2,r18,32
   28110:	103fae1e 	bne	r2,zero,27fcc <__alt_data_end+0xfffe8bcc>
   28114:	9080040c 	andi	r2,r18,16
   28118:	1002de26 	beq	r2,zero,28c94 <___vfprintf_internal_r+0x1820>
   2811c:	d8c02d17 	ldw	r3,180(sp)
   28120:	002d883a 	mov	r22,zero
   28124:	1cc00017 	ldw	r19,0(r3)
   28128:	18c00104 	addi	r3,r3,4
   2812c:	d8c02d15 	stw	r3,180(sp)
   28130:	003fab06 	br	27fe0 <__alt_data_end+0xfffe8be0>
   28134:	38803fcc 	andi	r2,r7,255
   28138:	1080201c 	xori	r2,r2,128
   2813c:	10bfe004 	addi	r2,r2,-128
   28140:	1002d21e 	bne	r2,zero,28c8c <___vfprintf_internal_r+0x1818>
   28144:	00c00044 	movi	r3,1
   28148:	01c00804 	movi	r7,32
   2814c:	ac400007 	ldb	r17,0(r21)
   28150:	003d2906 	br	275f8 <__alt_data_end+0xfffe81f8>
   28154:	94800054 	ori	r18,r18,1
   28158:	ac400007 	ldb	r17,0(r21)
   2815c:	003d2606 	br	275f8 <__alt_data_end+0xfffe81f8>
   28160:	18c03fcc 	andi	r3,r3,255
   28164:	183e0526 	beq	r3,zero,2797c <__alt_data_end+0xfffe857c>
   28168:	d9c02785 	stb	r7,158(sp)
   2816c:	003e0306 	br	2797c <__alt_data_end+0xfffe857c>
   28170:	94801014 	ori	r18,r18,64
   28174:	ac400007 	ldb	r17,0(r21)
   28178:	003d1f06 	br	275f8 <__alt_data_end+0xfffe81f8>
   2817c:	ac400007 	ldb	r17,0(r21)
   28180:	8a438726 	beq	r17,r9,28fa0 <___vfprintf_internal_r+0x1b2c>
   28184:	94800414 	ori	r18,r18,16
   28188:	003d1b06 	br	275f8 <__alt_data_end+0xfffe81f8>
   2818c:	18c03fcc 	andi	r3,r3,255
   28190:	1805341e 	bne	r3,zero,29664 <___vfprintf_internal_r+0x21f0>
   28194:	9080080c 	andi	r2,r18,32
   28198:	1002cd26 	beq	r2,zero,28cd0 <___vfprintf_internal_r+0x185c>
   2819c:	d9402d17 	ldw	r5,180(sp)
   281a0:	d9002f17 	ldw	r4,188(sp)
   281a4:	28800017 	ldw	r2,0(r5)
   281a8:	2007d7fa 	srai	r3,r4,31
   281ac:	29400104 	addi	r5,r5,4
   281b0:	d9402d15 	stw	r5,180(sp)
   281b4:	11000015 	stw	r4,0(r2)
   281b8:	10c00115 	stw	r3,4(r2)
   281bc:	003ce506 	br	27554 <__alt_data_end+0xfffe8154>
   281c0:	d8c02d17 	ldw	r3,180(sp)
   281c4:	d9002d17 	ldw	r4,180(sp)
   281c8:	d8002785 	stb	zero,158(sp)
   281cc:	18800017 	ldw	r2,0(r3)
   281d0:	21000104 	addi	r4,r4,4
   281d4:	00c00044 	movi	r3,1
   281d8:	d8c02a15 	stw	r3,168(sp)
   281dc:	d8801405 	stb	r2,80(sp)
   281e0:	d9002d15 	stw	r4,180(sp)
   281e4:	d8c02e15 	stw	r3,184(sp)
   281e8:	d8002915 	stw	zero,164(sp)
   281ec:	d8003215 	stw	zero,200(sp)
   281f0:	dc001404 	addi	r16,sp,80
   281f4:	0039883a 	mov	fp,zero
   281f8:	003e7206 	br	27bc4 <__alt_data_end+0xfffe87c4>
   281fc:	010000f4 	movhi	r4,3
   28200:	21127b04 	addi	r4,r4,18924
   28204:	0039883a 	mov	fp,zero
   28208:	d9003915 	stw	r4,228(sp)
   2820c:	04401e04 	movi	r17,120
   28210:	003f8206 	br	2801c <__alt_data_end+0xfffe8c1c>
   28214:	18c03fcc 	andi	r3,r3,255
   28218:	1805061e 	bne	r3,zero,29634 <___vfprintf_internal_r+0x21c0>
   2821c:	883d9126 	beq	r17,zero,27864 <__alt_data_end+0xfffe8464>
   28220:	00c00044 	movi	r3,1
   28224:	d8c02a15 	stw	r3,168(sp)
   28228:	dc401405 	stb	r17,80(sp)
   2822c:	d8002785 	stb	zero,158(sp)
   28230:	003fec06 	br	281e4 <__alt_data_end+0xfffe8de4>
   28234:	014000f4 	movhi	r5,3
   28238:	29527b04 	addi	r5,r5,18924
   2823c:	d9403915 	stw	r5,228(sp)
   28240:	d8c02d15 	stw	r3,180(sp)
   28244:	1025883a 	mov	r18,r2
   28248:	04401e04 	movi	r17,120
   2824c:	9d84b03a 	or	r2,r19,r22
   28250:	1000fc1e 	bne	r2,zero,28644 <___vfprintf_internal_r+0x11d0>
   28254:	0039883a 	mov	fp,zero
   28258:	00800084 	movi	r2,2
   2825c:	10803fcc 	andi	r2,r2,255
   28260:	00c00044 	movi	r3,1
   28264:	10c20f26 	beq	r2,r3,28aa4 <___vfprintf_internal_r+0x1630>
   28268:	00c00084 	movi	r3,2
   2826c:	10fd6326 	beq	r2,r3,277fc <__alt_data_end+0xfffe83fc>
   28270:	003e2d06 	br	27b28 <__alt_data_end+0xfffe8728>
   28274:	d8c02017 	ldw	r3,128(sp)
   28278:	003e9306 	br	27cc8 <__alt_data_end+0xfffe88c8>
   2827c:	00801944 	movi	r2,101
   28280:	14407e0e 	bge	r2,r17,2847c <___vfprintf_internal_r+0x1008>
   28284:	d9003617 	ldw	r4,216(sp)
   28288:	d9403817 	ldw	r5,224(sp)
   2828c:	000d883a 	mov	r6,zero
   28290:	000f883a 	mov	r7,zero
   28294:	d8c03c15 	stw	r3,240(sp)
   28298:	da003d15 	stw	r8,244(sp)
   2829c:	00313a00 	call	313a0 <__eqdf2>
   282a0:	d8c03c17 	ldw	r3,240(sp)
   282a4:	da003d17 	ldw	r8,244(sp)
   282a8:	1000f71e 	bne	r2,zero,28688 <___vfprintf_internal_r+0x1214>
   282ac:	d8801f17 	ldw	r2,124(sp)
   282b0:	010000f4 	movhi	r4,3
   282b4:	21128204 	addi	r4,r4,18952
   282b8:	18c00044 	addi	r3,r3,1
   282bc:	10800044 	addi	r2,r2,1
   282c0:	41000015 	stw	r4,0(r8)
   282c4:	01000044 	movi	r4,1
   282c8:	41000115 	stw	r4,4(r8)
   282cc:	d8c02015 	stw	r3,128(sp)
   282d0:	d8801f15 	stw	r2,124(sp)
   282d4:	010001c4 	movi	r4,7
   282d8:	2082b816 	blt	r4,r2,28dbc <___vfprintf_internal_r+0x1948>
   282dc:	42000204 	addi	r8,r8,8
   282e0:	d8802617 	ldw	r2,152(sp)
   282e4:	d9403317 	ldw	r5,204(sp)
   282e8:	11400216 	blt	r2,r5,282f4 <___vfprintf_internal_r+0xe80>
   282ec:	9080004c 	andi	r2,r18,1
   282f0:	103ed526 	beq	r2,zero,27e48 <__alt_data_end+0xfffe8a48>
   282f4:	d8803717 	ldw	r2,220(sp)
   282f8:	d9003417 	ldw	r4,208(sp)
   282fc:	d9403717 	ldw	r5,220(sp)
   28300:	1887883a 	add	r3,r3,r2
   28304:	d8801f17 	ldw	r2,124(sp)
   28308:	41000015 	stw	r4,0(r8)
   2830c:	41400115 	stw	r5,4(r8)
   28310:	10800044 	addi	r2,r2,1
   28314:	d8c02015 	stw	r3,128(sp)
   28318:	d8801f15 	stw	r2,124(sp)
   2831c:	010001c4 	movi	r4,7
   28320:	20832916 	blt	r4,r2,28fc8 <___vfprintf_internal_r+0x1b54>
   28324:	42000204 	addi	r8,r8,8
   28328:	d8803317 	ldw	r2,204(sp)
   2832c:	143fffc4 	addi	r16,r2,-1
   28330:	043ec50e 	bge	zero,r16,27e48 <__alt_data_end+0xfffe8a48>
   28334:	04400404 	movi	r17,16
   28338:	d8801f17 	ldw	r2,124(sp)
   2833c:	8c00880e 	bge	r17,r16,28560 <___vfprintf_internal_r+0x10ec>
   28340:	014000f4 	movhi	r5,3
   28344:	29528284 	addi	r5,r5,18954
   28348:	d9402b15 	stw	r5,172(sp)
   2834c:	058001c4 	movi	r22,7
   28350:	dcc02c17 	ldw	r19,176(sp)
   28354:	00000306 	br	28364 <___vfprintf_internal_r+0xef0>
   28358:	42000204 	addi	r8,r8,8
   2835c:	843ffc04 	addi	r16,r16,-16
   28360:	8c00820e 	bge	r17,r16,2856c <___vfprintf_internal_r+0x10f8>
   28364:	18c00404 	addi	r3,r3,16
   28368:	10800044 	addi	r2,r2,1
   2836c:	45000015 	stw	r20,0(r8)
   28370:	44400115 	stw	r17,4(r8)
   28374:	d8c02015 	stw	r3,128(sp)
   28378:	d8801f15 	stw	r2,124(sp)
   2837c:	b0bff60e 	bge	r22,r2,28358 <__alt_data_end+0xfffe8f58>
   28380:	d9801e04 	addi	r6,sp,120
   28384:	b80b883a 	mov	r5,r23
   28388:	9809883a 	mov	r4,r19
   2838c:	002ea700 	call	2ea70 <__sprint_r>
   28390:	103d3a1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28394:	d8c02017 	ldw	r3,128(sp)
   28398:	d8801f17 	ldw	r2,124(sp)
   2839c:	da000404 	addi	r8,sp,16
   283a0:	003fee06 	br	2835c <__alt_data_end+0xfffe8f5c>
   283a4:	d9403117 	ldw	r5,196(sp)
   283a8:	d8802a17 	ldw	r2,168(sp)
   283ac:	28adc83a 	sub	r22,r5,r2
   283b0:	05be630e 	bge	zero,r22,27d40 <__alt_data_end+0xfffe8940>
   283b4:	07000404 	movi	fp,16
   283b8:	d8801f17 	ldw	r2,124(sp)
   283bc:	e5838f0e 	bge	fp,r22,291fc <___vfprintf_internal_r+0x1d88>
   283c0:	014000f4 	movhi	r5,3
   283c4:	29528284 	addi	r5,r5,18954
   283c8:	dc403015 	stw	r17,192(sp)
   283cc:	d9402b15 	stw	r5,172(sp)
   283d0:	b023883a 	mov	r17,r22
   283d4:	04c001c4 	movi	r19,7
   283d8:	a82d883a 	mov	r22,r21
   283dc:	902b883a 	mov	r21,r18
   283e0:	8025883a 	mov	r18,r16
   283e4:	dc002c17 	ldw	r16,176(sp)
   283e8:	00000306 	br	283f8 <___vfprintf_internal_r+0xf84>
   283ec:	8c7ffc04 	addi	r17,r17,-16
   283f0:	42000204 	addi	r8,r8,8
   283f4:	e440110e 	bge	fp,r17,2843c <___vfprintf_internal_r+0xfc8>
   283f8:	18c00404 	addi	r3,r3,16
   283fc:	10800044 	addi	r2,r2,1
   28400:	45000015 	stw	r20,0(r8)
   28404:	47000115 	stw	fp,4(r8)
   28408:	d8c02015 	stw	r3,128(sp)
   2840c:	d8801f15 	stw	r2,124(sp)
   28410:	98bff60e 	bge	r19,r2,283ec <__alt_data_end+0xfffe8fec>
   28414:	d9801e04 	addi	r6,sp,120
   28418:	b80b883a 	mov	r5,r23
   2841c:	8009883a 	mov	r4,r16
   28420:	002ea700 	call	2ea70 <__sprint_r>
   28424:	103d151e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28428:	8c7ffc04 	addi	r17,r17,-16
   2842c:	d8c02017 	ldw	r3,128(sp)
   28430:	d8801f17 	ldw	r2,124(sp)
   28434:	da000404 	addi	r8,sp,16
   28438:	e47fef16 	blt	fp,r17,283f8 <__alt_data_end+0xfffe8ff8>
   2843c:	9021883a 	mov	r16,r18
   28440:	a825883a 	mov	r18,r21
   28444:	b02b883a 	mov	r21,r22
   28448:	882d883a 	mov	r22,r17
   2844c:	dc403017 	ldw	r17,192(sp)
   28450:	d9002b17 	ldw	r4,172(sp)
   28454:	1d87883a 	add	r3,r3,r22
   28458:	10800044 	addi	r2,r2,1
   2845c:	41000015 	stw	r4,0(r8)
   28460:	45800115 	stw	r22,4(r8)
   28464:	d8c02015 	stw	r3,128(sp)
   28468:	d8801f15 	stw	r2,124(sp)
   2846c:	010001c4 	movi	r4,7
   28470:	20818e16 	blt	r4,r2,28aac <___vfprintf_internal_r+0x1638>
   28474:	42000204 	addi	r8,r8,8
   28478:	003e3106 	br	27d40 <__alt_data_end+0xfffe8940>
   2847c:	d9403317 	ldw	r5,204(sp)
   28480:	00800044 	movi	r2,1
   28484:	18c00044 	addi	r3,r3,1
   28488:	1141530e 	bge	r2,r5,289d8 <___vfprintf_internal_r+0x1564>
   2848c:	dc401f17 	ldw	r17,124(sp)
   28490:	00800044 	movi	r2,1
   28494:	40800115 	stw	r2,4(r8)
   28498:	8c400044 	addi	r17,r17,1
   2849c:	44000015 	stw	r16,0(r8)
   284a0:	d8c02015 	stw	r3,128(sp)
   284a4:	dc401f15 	stw	r17,124(sp)
   284a8:	008001c4 	movi	r2,7
   284ac:	14416b16 	blt	r2,r17,28a5c <___vfprintf_internal_r+0x15e8>
   284b0:	42000204 	addi	r8,r8,8
   284b4:	d8803717 	ldw	r2,220(sp)
   284b8:	d9003417 	ldw	r4,208(sp)
   284bc:	8c400044 	addi	r17,r17,1
   284c0:	10c7883a 	add	r3,r2,r3
   284c4:	40800115 	stw	r2,4(r8)
   284c8:	41000015 	stw	r4,0(r8)
   284cc:	d8c02015 	stw	r3,128(sp)
   284d0:	dc401f15 	stw	r17,124(sp)
   284d4:	008001c4 	movi	r2,7
   284d8:	14416916 	blt	r2,r17,28a80 <___vfprintf_internal_r+0x160c>
   284dc:	45800204 	addi	r22,r8,8
   284e0:	d9003617 	ldw	r4,216(sp)
   284e4:	d9403817 	ldw	r5,224(sp)
   284e8:	000d883a 	mov	r6,zero
   284ec:	000f883a 	mov	r7,zero
   284f0:	d8c03c15 	stw	r3,240(sp)
   284f4:	00313a00 	call	313a0 <__eqdf2>
   284f8:	d8c03c17 	ldw	r3,240(sp)
   284fc:	1000bc26 	beq	r2,zero,287f0 <___vfprintf_internal_r+0x137c>
   28500:	d9403317 	ldw	r5,204(sp)
   28504:	84000044 	addi	r16,r16,1
   28508:	8c400044 	addi	r17,r17,1
   2850c:	28bfffc4 	addi	r2,r5,-1
   28510:	1887883a 	add	r3,r3,r2
   28514:	b0800115 	stw	r2,4(r22)
   28518:	b4000015 	stw	r16,0(r22)
   2851c:	d8c02015 	stw	r3,128(sp)
   28520:	dc401f15 	stw	r17,124(sp)
   28524:	008001c4 	movi	r2,7
   28528:	14414316 	blt	r2,r17,28a38 <___vfprintf_internal_r+0x15c4>
   2852c:	b5800204 	addi	r22,r22,8
   28530:	d9003a17 	ldw	r4,232(sp)
   28534:	df0022c4 	addi	fp,sp,139
   28538:	8c400044 	addi	r17,r17,1
   2853c:	20c7883a 	add	r3,r4,r3
   28540:	b7000015 	stw	fp,0(r22)
   28544:	b1000115 	stw	r4,4(r22)
   28548:	d8c02015 	stw	r3,128(sp)
   2854c:	dc401f15 	stw	r17,124(sp)
   28550:	008001c4 	movi	r2,7
   28554:	14400e16 	blt	r2,r17,28590 <___vfprintf_internal_r+0x111c>
   28558:	b2000204 	addi	r8,r22,8
   2855c:	003e3a06 	br	27e48 <__alt_data_end+0xfffe8a48>
   28560:	010000f4 	movhi	r4,3
   28564:	21128284 	addi	r4,r4,18954
   28568:	d9002b15 	stw	r4,172(sp)
   2856c:	d9002b17 	ldw	r4,172(sp)
   28570:	1c07883a 	add	r3,r3,r16
   28574:	44000115 	stw	r16,4(r8)
   28578:	41000015 	stw	r4,0(r8)
   2857c:	10800044 	addi	r2,r2,1
   28580:	d8c02015 	stw	r3,128(sp)
   28584:	d8801f15 	stw	r2,124(sp)
   28588:	010001c4 	movi	r4,7
   2858c:	20be2d0e 	bge	r4,r2,27e44 <__alt_data_end+0xfffe8a44>
   28590:	d9002c17 	ldw	r4,176(sp)
   28594:	d9801e04 	addi	r6,sp,120
   28598:	b80b883a 	mov	r5,r23
   2859c:	002ea700 	call	2ea70 <__sprint_r>
   285a0:	103cb61e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   285a4:	d8c02017 	ldw	r3,128(sp)
   285a8:	da000404 	addi	r8,sp,16
   285ac:	003e2606 	br	27e48 <__alt_data_end+0xfffe8a48>
   285b0:	d9002c17 	ldw	r4,176(sp)
   285b4:	d9801e04 	addi	r6,sp,120
   285b8:	b80b883a 	mov	r5,r23
   285bc:	002ea700 	call	2ea70 <__sprint_r>
   285c0:	103e5d26 	beq	r2,zero,27f38 <__alt_data_end+0xfffe8b38>
   285c4:	003cad06 	br	2787c <__alt_data_end+0xfffe847c>
   285c8:	d9002c17 	ldw	r4,176(sp)
   285cc:	d9801e04 	addi	r6,sp,120
   285d0:	b80b883a 	mov	r5,r23
   285d4:	002ea700 	call	2ea70 <__sprint_r>
   285d8:	103ca81e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   285dc:	d8c02017 	ldw	r3,128(sp)
   285e0:	da000404 	addi	r8,sp,16
   285e4:	003e0b06 	br	27e14 <__alt_data_end+0xfffe8a14>
   285e8:	d9002c17 	ldw	r4,176(sp)
   285ec:	d9801e04 	addi	r6,sp,120
   285f0:	b80b883a 	mov	r5,r23
   285f4:	002ea700 	call	2ea70 <__sprint_r>
   285f8:	103ca01e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   285fc:	d8c02017 	ldw	r3,128(sp)
   28600:	da000404 	addi	r8,sp,16
   28604:	003dbd06 	br	27cfc <__alt_data_end+0xfffe88fc>
   28608:	d9002c17 	ldw	r4,176(sp)
   2860c:	d9801e04 	addi	r6,sp,120
   28610:	b80b883a 	mov	r5,r23
   28614:	002ea700 	call	2ea70 <__sprint_r>
   28618:	103c981e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   2861c:	d8c02017 	ldw	r3,128(sp)
   28620:	da000404 	addi	r8,sp,16
   28624:	003dc306 	br	27d34 <__alt_data_end+0xfffe8934>
   28628:	d8802917 	ldw	r2,164(sp)
   2862c:	d8002785 	stb	zero,158(sp)
   28630:	103f0616 	blt	r2,zero,2824c <__alt_data_end+0xfffe8e4c>
   28634:	00ffdfc4 	movi	r3,-129
   28638:	9d84b03a 	or	r2,r19,r22
   2863c:	90e4703a 	and	r18,r18,r3
   28640:	103c6b26 	beq	r2,zero,277f0 <__alt_data_end+0xfffe83f0>
   28644:	0039883a 	mov	fp,zero
   28648:	003e7406 	br	2801c <__alt_data_end+0xfffe8c1c>
   2864c:	9080040c 	andi	r2,r18,16
   28650:	1001b326 	beq	r2,zero,28d20 <___vfprintf_internal_r+0x18ac>
   28654:	d9002d17 	ldw	r4,180(sp)
   28658:	d9402917 	ldw	r5,164(sp)
   2865c:	d8002785 	stb	zero,158(sp)
   28660:	20800104 	addi	r2,r4,4
   28664:	24c00017 	ldw	r19,0(r4)
   28668:	002d883a 	mov	r22,zero
   2866c:	2801b516 	blt	r5,zero,28d44 <___vfprintf_internal_r+0x18d0>
   28670:	00ffdfc4 	movi	r3,-129
   28674:	d8802d15 	stw	r2,180(sp)
   28678:	90e4703a 	and	r18,r18,r3
   2867c:	983d2726 	beq	r19,zero,27b1c <__alt_data_end+0xfffe871c>
   28680:	0039883a 	mov	fp,zero
   28684:	003d2a06 	br	27b30 <__alt_data_end+0xfffe8730>
   28688:	dc402617 	ldw	r17,152(sp)
   2868c:	0441d30e 	bge	zero,r17,28ddc <___vfprintf_internal_r+0x1968>
   28690:	dc403217 	ldw	r17,200(sp)
   28694:	d8803317 	ldw	r2,204(sp)
   28698:	1440010e 	bge	r2,r17,286a0 <___vfprintf_internal_r+0x122c>
   2869c:	1023883a 	mov	r17,r2
   286a0:	04400a0e 	bge	zero,r17,286cc <___vfprintf_internal_r+0x1258>
   286a4:	d8801f17 	ldw	r2,124(sp)
   286a8:	1c47883a 	add	r3,r3,r17
   286ac:	44000015 	stw	r16,0(r8)
   286b0:	10800044 	addi	r2,r2,1
   286b4:	44400115 	stw	r17,4(r8)
   286b8:	d8c02015 	stw	r3,128(sp)
   286bc:	d8801f15 	stw	r2,124(sp)
   286c0:	010001c4 	movi	r4,7
   286c4:	20826516 	blt	r4,r2,2905c <___vfprintf_internal_r+0x1be8>
   286c8:	42000204 	addi	r8,r8,8
   286cc:	88026116 	blt	r17,zero,29054 <___vfprintf_internal_r+0x1be0>
   286d0:	d9003217 	ldw	r4,200(sp)
   286d4:	2463c83a 	sub	r17,r4,r17
   286d8:	04407b0e 	bge	zero,r17,288c8 <___vfprintf_internal_r+0x1454>
   286dc:	05800404 	movi	r22,16
   286e0:	d8801f17 	ldw	r2,124(sp)
   286e4:	b4419d0e 	bge	r22,r17,28d5c <___vfprintf_internal_r+0x18e8>
   286e8:	010000f4 	movhi	r4,3
   286ec:	21128284 	addi	r4,r4,18954
   286f0:	d9002b15 	stw	r4,172(sp)
   286f4:	070001c4 	movi	fp,7
   286f8:	dcc02c17 	ldw	r19,176(sp)
   286fc:	00000306 	br	2870c <___vfprintf_internal_r+0x1298>
   28700:	42000204 	addi	r8,r8,8
   28704:	8c7ffc04 	addi	r17,r17,-16
   28708:	b441970e 	bge	r22,r17,28d68 <___vfprintf_internal_r+0x18f4>
   2870c:	18c00404 	addi	r3,r3,16
   28710:	10800044 	addi	r2,r2,1
   28714:	45000015 	stw	r20,0(r8)
   28718:	45800115 	stw	r22,4(r8)
   2871c:	d8c02015 	stw	r3,128(sp)
   28720:	d8801f15 	stw	r2,124(sp)
   28724:	e0bff60e 	bge	fp,r2,28700 <__alt_data_end+0xfffe9300>
   28728:	d9801e04 	addi	r6,sp,120
   2872c:	b80b883a 	mov	r5,r23
   28730:	9809883a 	mov	r4,r19
   28734:	002ea700 	call	2ea70 <__sprint_r>
   28738:	103c501e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   2873c:	d8c02017 	ldw	r3,128(sp)
   28740:	d8801f17 	ldw	r2,124(sp)
   28744:	da000404 	addi	r8,sp,16
   28748:	003fee06 	br	28704 <__alt_data_end+0xfffe9304>
   2874c:	d9002c17 	ldw	r4,176(sp)
   28750:	d9801e04 	addi	r6,sp,120
   28754:	b80b883a 	mov	r5,r23
   28758:	002ea700 	call	2ea70 <__sprint_r>
   2875c:	103c471e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28760:	d8c02017 	ldw	r3,128(sp)
   28764:	df002787 	ldb	fp,158(sp)
   28768:	da000404 	addi	r8,sp,16
   2876c:	003d5606 	br	27cc8 <__alt_data_end+0xfffe88c8>
   28770:	9080040c 	andi	r2,r18,16
   28774:	10016126 	beq	r2,zero,28cfc <___vfprintf_internal_r+0x1888>
   28778:	d8802d17 	ldw	r2,180(sp)
   2877c:	14c00017 	ldw	r19,0(r2)
   28780:	10800104 	addi	r2,r2,4
   28784:	d8802d15 	stw	r2,180(sp)
   28788:	982dd7fa 	srai	r22,r19,31
   2878c:	b005883a 	mov	r2,r22
   28790:	003c8206 	br	2799c <__alt_data_end+0xfffe859c>
   28794:	9080040c 	andi	r2,r18,16
   28798:	10003526 	beq	r2,zero,28870 <___vfprintf_internal_r+0x13fc>
   2879c:	d9402d17 	ldw	r5,180(sp)
   287a0:	d8c02917 	ldw	r3,164(sp)
   287a4:	d8002785 	stb	zero,158(sp)
   287a8:	28800104 	addi	r2,r5,4
   287ac:	2cc00017 	ldw	r19,0(r5)
   287b0:	002d883a 	mov	r22,zero
   287b4:	18003716 	blt	r3,zero,28894 <___vfprintf_internal_r+0x1420>
   287b8:	00ffdfc4 	movi	r3,-129
   287bc:	d8802d15 	stw	r2,180(sp)
   287c0:	90e4703a 	and	r18,r18,r3
   287c4:	0039883a 	mov	fp,zero
   287c8:	983df326 	beq	r19,zero,27f98 <__alt_data_end+0xfffe8b98>
   287cc:	00800244 	movi	r2,9
   287d0:	14fc7b36 	bltu	r2,r19,279c0 <__alt_data_end+0xfffe85c0>
   287d4:	d8c02817 	ldw	r3,160(sp)
   287d8:	dc001dc4 	addi	r16,sp,119
   287dc:	9cc00c04 	addi	r19,r19,48
   287e0:	1c07c83a 	sub	r3,r3,r16
   287e4:	dcc01dc5 	stb	r19,119(sp)
   287e8:	d8c02e15 	stw	r3,184(sp)
   287ec:	003ce806 	br	27b90 <__alt_data_end+0xfffe8790>
   287f0:	d8803317 	ldw	r2,204(sp)
   287f4:	143fffc4 	addi	r16,r2,-1
   287f8:	043f4d0e 	bge	zero,r16,28530 <__alt_data_end+0xfffe9130>
   287fc:	07000404 	movi	fp,16
   28800:	e400810e 	bge	fp,r16,28a08 <___vfprintf_internal_r+0x1594>
   28804:	014000f4 	movhi	r5,3
   28808:	29528284 	addi	r5,r5,18954
   2880c:	d9402b15 	stw	r5,172(sp)
   28810:	01c001c4 	movi	r7,7
   28814:	dcc02c17 	ldw	r19,176(sp)
   28818:	00000306 	br	28828 <___vfprintf_internal_r+0x13b4>
   2881c:	b5800204 	addi	r22,r22,8
   28820:	843ffc04 	addi	r16,r16,-16
   28824:	e4007b0e 	bge	fp,r16,28a14 <___vfprintf_internal_r+0x15a0>
   28828:	18c00404 	addi	r3,r3,16
   2882c:	8c400044 	addi	r17,r17,1
   28830:	b5000015 	stw	r20,0(r22)
   28834:	b7000115 	stw	fp,4(r22)
   28838:	d8c02015 	stw	r3,128(sp)
   2883c:	dc401f15 	stw	r17,124(sp)
   28840:	3c7ff60e 	bge	r7,r17,2881c <__alt_data_end+0xfffe941c>
   28844:	d9801e04 	addi	r6,sp,120
   28848:	b80b883a 	mov	r5,r23
   2884c:	9809883a 	mov	r4,r19
   28850:	d9c03c15 	stw	r7,240(sp)
   28854:	002ea700 	call	2ea70 <__sprint_r>
   28858:	d9c03c17 	ldw	r7,240(sp)
   2885c:	103c071e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28860:	d8c02017 	ldw	r3,128(sp)
   28864:	dc401f17 	ldw	r17,124(sp)
   28868:	dd800404 	addi	r22,sp,16
   2886c:	003fec06 	br	28820 <__alt_data_end+0xfffe9420>
   28870:	9080100c 	andi	r2,r18,64
   28874:	d8002785 	stb	zero,158(sp)
   28878:	10010e26 	beq	r2,zero,28cb4 <___vfprintf_internal_r+0x1840>
   2887c:	d9002d17 	ldw	r4,180(sp)
   28880:	d9402917 	ldw	r5,164(sp)
   28884:	002d883a 	mov	r22,zero
   28888:	20800104 	addi	r2,r4,4
   2888c:	24c0000b 	ldhu	r19,0(r4)
   28890:	283fc90e 	bge	r5,zero,287b8 <__alt_data_end+0xfffe93b8>
   28894:	d8802d15 	stw	r2,180(sp)
   28898:	0039883a 	mov	fp,zero
   2889c:	9d84b03a 	or	r2,r19,r22
   288a0:	103c461e 	bne	r2,zero,279bc <__alt_data_end+0xfffe85bc>
   288a4:	00800044 	movi	r2,1
   288a8:	003e6c06 	br	2825c <__alt_data_end+0xfffe8e5c>
   288ac:	d9002c17 	ldw	r4,176(sp)
   288b0:	d9801e04 	addi	r6,sp,120
   288b4:	b80b883a 	mov	r5,r23
   288b8:	002ea700 	call	2ea70 <__sprint_r>
   288bc:	103bef1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   288c0:	d8c02017 	ldw	r3,128(sp)
   288c4:	da000404 	addi	r8,sp,16
   288c8:	d9003217 	ldw	r4,200(sp)
   288cc:	d8802617 	ldw	r2,152(sp)
   288d0:	d9403317 	ldw	r5,204(sp)
   288d4:	8123883a 	add	r17,r16,r4
   288d8:	11400216 	blt	r2,r5,288e4 <___vfprintf_internal_r+0x1470>
   288dc:	9100004c 	andi	r4,r18,1
   288e0:	20000d26 	beq	r4,zero,28918 <___vfprintf_internal_r+0x14a4>
   288e4:	d9003717 	ldw	r4,220(sp)
   288e8:	d9403417 	ldw	r5,208(sp)
   288ec:	1907883a 	add	r3,r3,r4
   288f0:	d9001f17 	ldw	r4,124(sp)
   288f4:	41400015 	stw	r5,0(r8)
   288f8:	d9403717 	ldw	r5,220(sp)
   288fc:	21000044 	addi	r4,r4,1
   28900:	d8c02015 	stw	r3,128(sp)
   28904:	41400115 	stw	r5,4(r8)
   28908:	d9001f15 	stw	r4,124(sp)
   2890c:	014001c4 	movi	r5,7
   28910:	2901e816 	blt	r5,r4,290b4 <___vfprintf_internal_r+0x1c40>
   28914:	42000204 	addi	r8,r8,8
   28918:	d9003317 	ldw	r4,204(sp)
   2891c:	8121883a 	add	r16,r16,r4
   28920:	2085c83a 	sub	r2,r4,r2
   28924:	8461c83a 	sub	r16,r16,r17
   28928:	1400010e 	bge	r2,r16,28930 <___vfprintf_internal_r+0x14bc>
   2892c:	1021883a 	mov	r16,r2
   28930:	04000a0e 	bge	zero,r16,2895c <___vfprintf_internal_r+0x14e8>
   28934:	d9001f17 	ldw	r4,124(sp)
   28938:	1c07883a 	add	r3,r3,r16
   2893c:	44400015 	stw	r17,0(r8)
   28940:	21000044 	addi	r4,r4,1
   28944:	44000115 	stw	r16,4(r8)
   28948:	d8c02015 	stw	r3,128(sp)
   2894c:	d9001f15 	stw	r4,124(sp)
   28950:	014001c4 	movi	r5,7
   28954:	2901fb16 	blt	r5,r4,29144 <___vfprintf_internal_r+0x1cd0>
   28958:	42000204 	addi	r8,r8,8
   2895c:	8001f716 	blt	r16,zero,2913c <___vfprintf_internal_r+0x1cc8>
   28960:	1421c83a 	sub	r16,r2,r16
   28964:	043d380e 	bge	zero,r16,27e48 <__alt_data_end+0xfffe8a48>
   28968:	04400404 	movi	r17,16
   2896c:	d8801f17 	ldw	r2,124(sp)
   28970:	8c3efb0e 	bge	r17,r16,28560 <__alt_data_end+0xfffe9160>
   28974:	014000f4 	movhi	r5,3
   28978:	29528284 	addi	r5,r5,18954
   2897c:	d9402b15 	stw	r5,172(sp)
   28980:	058001c4 	movi	r22,7
   28984:	dcc02c17 	ldw	r19,176(sp)
   28988:	00000306 	br	28998 <___vfprintf_internal_r+0x1524>
   2898c:	42000204 	addi	r8,r8,8
   28990:	843ffc04 	addi	r16,r16,-16
   28994:	8c3ef50e 	bge	r17,r16,2856c <__alt_data_end+0xfffe916c>
   28998:	18c00404 	addi	r3,r3,16
   2899c:	10800044 	addi	r2,r2,1
   289a0:	45000015 	stw	r20,0(r8)
   289a4:	44400115 	stw	r17,4(r8)
   289a8:	d8c02015 	stw	r3,128(sp)
   289ac:	d8801f15 	stw	r2,124(sp)
   289b0:	b0bff60e 	bge	r22,r2,2898c <__alt_data_end+0xfffe958c>
   289b4:	d9801e04 	addi	r6,sp,120
   289b8:	b80b883a 	mov	r5,r23
   289bc:	9809883a 	mov	r4,r19
   289c0:	002ea700 	call	2ea70 <__sprint_r>
   289c4:	103bad1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   289c8:	d8c02017 	ldw	r3,128(sp)
   289cc:	d8801f17 	ldw	r2,124(sp)
   289d0:	da000404 	addi	r8,sp,16
   289d4:	003fee06 	br	28990 <__alt_data_end+0xfffe9590>
   289d8:	9088703a 	and	r4,r18,r2
   289dc:	203eab1e 	bne	r4,zero,2848c <__alt_data_end+0xfffe908c>
   289e0:	dc401f17 	ldw	r17,124(sp)
   289e4:	40800115 	stw	r2,4(r8)
   289e8:	44000015 	stw	r16,0(r8)
   289ec:	8c400044 	addi	r17,r17,1
   289f0:	d8c02015 	stw	r3,128(sp)
   289f4:	dc401f15 	stw	r17,124(sp)
   289f8:	008001c4 	movi	r2,7
   289fc:	14400e16 	blt	r2,r17,28a38 <___vfprintf_internal_r+0x15c4>
   28a00:	45800204 	addi	r22,r8,8
   28a04:	003eca06 	br	28530 <__alt_data_end+0xfffe9130>
   28a08:	010000f4 	movhi	r4,3
   28a0c:	21128284 	addi	r4,r4,18954
   28a10:	d9002b15 	stw	r4,172(sp)
   28a14:	d8802b17 	ldw	r2,172(sp)
   28a18:	1c07883a 	add	r3,r3,r16
   28a1c:	8c400044 	addi	r17,r17,1
   28a20:	b0800015 	stw	r2,0(r22)
   28a24:	b4000115 	stw	r16,4(r22)
   28a28:	d8c02015 	stw	r3,128(sp)
   28a2c:	dc401f15 	stw	r17,124(sp)
   28a30:	008001c4 	movi	r2,7
   28a34:	147ebd0e 	bge	r2,r17,2852c <__alt_data_end+0xfffe912c>
   28a38:	d9002c17 	ldw	r4,176(sp)
   28a3c:	d9801e04 	addi	r6,sp,120
   28a40:	b80b883a 	mov	r5,r23
   28a44:	002ea700 	call	2ea70 <__sprint_r>
   28a48:	103b8c1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28a4c:	d8c02017 	ldw	r3,128(sp)
   28a50:	dc401f17 	ldw	r17,124(sp)
   28a54:	dd800404 	addi	r22,sp,16
   28a58:	003eb506 	br	28530 <__alt_data_end+0xfffe9130>
   28a5c:	d9002c17 	ldw	r4,176(sp)
   28a60:	d9801e04 	addi	r6,sp,120
   28a64:	b80b883a 	mov	r5,r23
   28a68:	002ea700 	call	2ea70 <__sprint_r>
   28a6c:	103b831e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28a70:	d8c02017 	ldw	r3,128(sp)
   28a74:	dc401f17 	ldw	r17,124(sp)
   28a78:	da000404 	addi	r8,sp,16
   28a7c:	003e8d06 	br	284b4 <__alt_data_end+0xfffe90b4>
   28a80:	d9002c17 	ldw	r4,176(sp)
   28a84:	d9801e04 	addi	r6,sp,120
   28a88:	b80b883a 	mov	r5,r23
   28a8c:	002ea700 	call	2ea70 <__sprint_r>
   28a90:	103b7a1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28a94:	d8c02017 	ldw	r3,128(sp)
   28a98:	dc401f17 	ldw	r17,124(sp)
   28a9c:	dd800404 	addi	r22,sp,16
   28aa0:	003e8f06 	br	284e0 <__alt_data_end+0xfffe90e0>
   28aa4:	0027883a 	mov	r19,zero
   28aa8:	003f4a06 	br	287d4 <__alt_data_end+0xfffe93d4>
   28aac:	d9002c17 	ldw	r4,176(sp)
   28ab0:	d9801e04 	addi	r6,sp,120
   28ab4:	b80b883a 	mov	r5,r23
   28ab8:	002ea700 	call	2ea70 <__sprint_r>
   28abc:	103b6f1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28ac0:	d8c02017 	ldw	r3,128(sp)
   28ac4:	da000404 	addi	r8,sp,16
   28ac8:	003c9d06 	br	27d40 <__alt_data_end+0xfffe8940>
   28acc:	04e7c83a 	sub	r19,zero,r19
   28ad0:	9804c03a 	cmpne	r2,r19,zero
   28ad4:	05adc83a 	sub	r22,zero,r22
   28ad8:	b0adc83a 	sub	r22,r22,r2
   28adc:	d8802917 	ldw	r2,164(sp)
   28ae0:	07000b44 	movi	fp,45
   28ae4:	df002785 	stb	fp,158(sp)
   28ae8:	10017b16 	blt	r2,zero,290d8 <___vfprintf_internal_r+0x1c64>
   28aec:	00bfdfc4 	movi	r2,-129
   28af0:	90a4703a 	and	r18,r18,r2
   28af4:	003bb106 	br	279bc <__alt_data_end+0xfffe85bc>
   28af8:	d9003617 	ldw	r4,216(sp)
   28afc:	d9403817 	ldw	r5,224(sp)
   28b00:	da003d15 	stw	r8,244(sp)
   28b04:	002e6940 	call	2e694 <__fpclassifyd>
   28b08:	da003d17 	ldw	r8,244(sp)
   28b0c:	1000f026 	beq	r2,zero,28ed0 <___vfprintf_internal_r+0x1a5c>
   28b10:	d9002917 	ldw	r4,164(sp)
   28b14:	05bff7c4 	movi	r22,-33
   28b18:	00bfffc4 	movi	r2,-1
   28b1c:	8dac703a 	and	r22,r17,r22
   28b20:	20820026 	beq	r4,r2,29324 <___vfprintf_internal_r+0x1eb0>
   28b24:	008011c4 	movi	r2,71
   28b28:	b081f726 	beq	r22,r2,29308 <___vfprintf_internal_r+0x1e94>
   28b2c:	d9003817 	ldw	r4,224(sp)
   28b30:	90c04014 	ori	r3,r18,256
   28b34:	d8c02b15 	stw	r3,172(sp)
   28b38:	20021516 	blt	r4,zero,29390 <___vfprintf_internal_r+0x1f1c>
   28b3c:	dcc03817 	ldw	r19,224(sp)
   28b40:	d8002a05 	stb	zero,168(sp)
   28b44:	00801984 	movi	r2,102
   28b48:	8881f926 	beq	r17,r2,29330 <___vfprintf_internal_r+0x1ebc>
   28b4c:	00801184 	movi	r2,70
   28b50:	88821c26 	beq	r17,r2,293c4 <___vfprintf_internal_r+0x1f50>
   28b54:	00801144 	movi	r2,69
   28b58:	b081ef26 	beq	r22,r2,29318 <___vfprintf_internal_r+0x1ea4>
   28b5c:	d8c02917 	ldw	r3,164(sp)
   28b60:	d8802104 	addi	r2,sp,132
   28b64:	d8800315 	stw	r2,12(sp)
   28b68:	d9403617 	ldw	r5,216(sp)
   28b6c:	d8802504 	addi	r2,sp,148
   28b70:	d9002c17 	ldw	r4,176(sp)
   28b74:	d8800215 	stw	r2,8(sp)
   28b78:	d8802604 	addi	r2,sp,152
   28b7c:	d8c00015 	stw	r3,0(sp)
   28b80:	d8800115 	stw	r2,4(sp)
   28b84:	01c00084 	movi	r7,2
   28b88:	980d883a 	mov	r6,r19
   28b8c:	d8c03c15 	stw	r3,240(sp)
   28b90:	da003d15 	stw	r8,244(sp)
   28b94:	0029a980 	call	29a98 <_dtoa_r>
   28b98:	1021883a 	mov	r16,r2
   28b9c:	008019c4 	movi	r2,103
   28ba0:	d8c03c17 	ldw	r3,240(sp)
   28ba4:	da003d17 	ldw	r8,244(sp)
   28ba8:	88817126 	beq	r17,r2,29170 <___vfprintf_internal_r+0x1cfc>
   28bac:	008011c4 	movi	r2,71
   28bb0:	88829226 	beq	r17,r2,295fc <___vfprintf_internal_r+0x2188>
   28bb4:	80f9883a 	add	fp,r16,r3
   28bb8:	d9003617 	ldw	r4,216(sp)
   28bbc:	000d883a 	mov	r6,zero
   28bc0:	000f883a 	mov	r7,zero
   28bc4:	980b883a 	mov	r5,r19
   28bc8:	da003d15 	stw	r8,244(sp)
   28bcc:	00313a00 	call	313a0 <__eqdf2>
   28bd0:	da003d17 	ldw	r8,244(sp)
   28bd4:	10018d26 	beq	r2,zero,2920c <___vfprintf_internal_r+0x1d98>
   28bd8:	d8802117 	ldw	r2,132(sp)
   28bdc:	1700062e 	bgeu	r2,fp,28bf8 <___vfprintf_internal_r+0x1784>
   28be0:	01000c04 	movi	r4,48
   28be4:	10c00044 	addi	r3,r2,1
   28be8:	d8c02115 	stw	r3,132(sp)
   28bec:	11000005 	stb	r4,0(r2)
   28bf0:	d8802117 	ldw	r2,132(sp)
   28bf4:	173ffb36 	bltu	r2,fp,28be4 <__alt_data_end+0xfffe97e4>
   28bf8:	1405c83a 	sub	r2,r2,r16
   28bfc:	d8803315 	stw	r2,204(sp)
   28c00:	008011c4 	movi	r2,71
   28c04:	b0817626 	beq	r22,r2,291e0 <___vfprintf_internal_r+0x1d6c>
   28c08:	00801944 	movi	r2,101
   28c0c:	1442810e 	bge	r2,r17,29614 <___vfprintf_internal_r+0x21a0>
   28c10:	d8c02617 	ldw	r3,152(sp)
   28c14:	00801984 	movi	r2,102
   28c18:	d8c03215 	stw	r3,200(sp)
   28c1c:	8881fe26 	beq	r17,r2,29418 <___vfprintf_internal_r+0x1fa4>
   28c20:	d8c03217 	ldw	r3,200(sp)
   28c24:	d9003317 	ldw	r4,204(sp)
   28c28:	1901dd16 	blt	r3,r4,293a0 <___vfprintf_internal_r+0x1f2c>
   28c2c:	9480004c 	andi	r18,r18,1
   28c30:	90022b1e 	bne	r18,zero,294e0 <___vfprintf_internal_r+0x206c>
   28c34:	1805883a 	mov	r2,r3
   28c38:	18028016 	blt	r3,zero,2963c <___vfprintf_internal_r+0x21c8>
   28c3c:	d8c03217 	ldw	r3,200(sp)
   28c40:	044019c4 	movi	r17,103
   28c44:	d8c02e15 	stw	r3,184(sp)
   28c48:	df002a07 	ldb	fp,168(sp)
   28c4c:	e001531e 	bne	fp,zero,2919c <___vfprintf_internal_r+0x1d28>
   28c50:	df002783 	ldbu	fp,158(sp)
   28c54:	d8802a15 	stw	r2,168(sp)
   28c58:	dc802b17 	ldw	r18,172(sp)
   28c5c:	d8002915 	stw	zero,164(sp)
   28c60:	003bd106 	br	27ba8 <__alt_data_end+0xfffe87a8>
   28c64:	d8802d17 	ldw	r2,180(sp)
   28c68:	d8c02d17 	ldw	r3,180(sp)
   28c6c:	d9002d17 	ldw	r4,180(sp)
   28c70:	10800017 	ldw	r2,0(r2)
   28c74:	18c00117 	ldw	r3,4(r3)
   28c78:	21000204 	addi	r4,r4,8
   28c7c:	d8803615 	stw	r2,216(sp)
   28c80:	d8c03815 	stw	r3,224(sp)
   28c84:	d9002d15 	stw	r4,180(sp)
   28c88:	003b7506 	br	27a60 <__alt_data_end+0xfffe8660>
   28c8c:	ac400007 	ldb	r17,0(r21)
   28c90:	003a5906 	br	275f8 <__alt_data_end+0xfffe81f8>
   28c94:	9080100c 	andi	r2,r18,64
   28c98:	1000a826 	beq	r2,zero,28f3c <___vfprintf_internal_r+0x1ac8>
   28c9c:	d9002d17 	ldw	r4,180(sp)
   28ca0:	002d883a 	mov	r22,zero
   28ca4:	24c0000b 	ldhu	r19,0(r4)
   28ca8:	21000104 	addi	r4,r4,4
   28cac:	d9002d15 	stw	r4,180(sp)
   28cb0:	003ccb06 	br	27fe0 <__alt_data_end+0xfffe8be0>
   28cb4:	d8c02d17 	ldw	r3,180(sp)
   28cb8:	d9002917 	ldw	r4,164(sp)
   28cbc:	002d883a 	mov	r22,zero
   28cc0:	18800104 	addi	r2,r3,4
   28cc4:	1cc00017 	ldw	r19,0(r3)
   28cc8:	203ebb0e 	bge	r4,zero,287b8 <__alt_data_end+0xfffe93b8>
   28ccc:	003ef106 	br	28894 <__alt_data_end+0xfffe9494>
   28cd0:	9080040c 	andi	r2,r18,16
   28cd4:	1000921e 	bne	r2,zero,28f20 <___vfprintf_internal_r+0x1aac>
   28cd8:	9480100c 	andi	r18,r18,64
   28cdc:	90013926 	beq	r18,zero,291c4 <___vfprintf_internal_r+0x1d50>
   28ce0:	d9002d17 	ldw	r4,180(sp)
   28ce4:	d9402f17 	ldw	r5,188(sp)
   28ce8:	20800017 	ldw	r2,0(r4)
   28cec:	21000104 	addi	r4,r4,4
   28cf0:	d9002d15 	stw	r4,180(sp)
   28cf4:	1140000d 	sth	r5,0(r2)
   28cf8:	003a1606 	br	27554 <__alt_data_end+0xfffe8154>
   28cfc:	9080100c 	andi	r2,r18,64
   28d00:	10008026 	beq	r2,zero,28f04 <___vfprintf_internal_r+0x1a90>
   28d04:	d8c02d17 	ldw	r3,180(sp)
   28d08:	1cc0000f 	ldh	r19,0(r3)
   28d0c:	18c00104 	addi	r3,r3,4
   28d10:	d8c02d15 	stw	r3,180(sp)
   28d14:	982dd7fa 	srai	r22,r19,31
   28d18:	b005883a 	mov	r2,r22
   28d1c:	003b1f06 	br	2799c <__alt_data_end+0xfffe859c>
   28d20:	9080100c 	andi	r2,r18,64
   28d24:	d8002785 	stb	zero,158(sp)
   28d28:	10008a1e 	bne	r2,zero,28f54 <___vfprintf_internal_r+0x1ae0>
   28d2c:	d9402d17 	ldw	r5,180(sp)
   28d30:	d8c02917 	ldw	r3,164(sp)
   28d34:	002d883a 	mov	r22,zero
   28d38:	28800104 	addi	r2,r5,4
   28d3c:	2cc00017 	ldw	r19,0(r5)
   28d40:	183e4b0e 	bge	r3,zero,28670 <__alt_data_end+0xfffe9270>
   28d44:	9d86b03a 	or	r3,r19,r22
   28d48:	d8802d15 	stw	r2,180(sp)
   28d4c:	183e4c1e 	bne	r3,zero,28680 <__alt_data_end+0xfffe9280>
   28d50:	0039883a 	mov	fp,zero
   28d54:	0005883a 	mov	r2,zero
   28d58:	003d4006 	br	2825c <__alt_data_end+0xfffe8e5c>
   28d5c:	014000f4 	movhi	r5,3
   28d60:	29528284 	addi	r5,r5,18954
   28d64:	d9402b15 	stw	r5,172(sp)
   28d68:	d9402b17 	ldw	r5,172(sp)
   28d6c:	1c47883a 	add	r3,r3,r17
   28d70:	10800044 	addi	r2,r2,1
   28d74:	41400015 	stw	r5,0(r8)
   28d78:	44400115 	stw	r17,4(r8)
   28d7c:	d8c02015 	stw	r3,128(sp)
   28d80:	d8801f15 	stw	r2,124(sp)
   28d84:	010001c4 	movi	r4,7
   28d88:	20bec816 	blt	r4,r2,288ac <__alt_data_end+0xfffe94ac>
   28d8c:	42000204 	addi	r8,r8,8
   28d90:	003ecd06 	br	288c8 <__alt_data_end+0xfffe94c8>
   28d94:	d9002917 	ldw	r4,164(sp)
   28d98:	d8002785 	stb	zero,158(sp)
   28d9c:	203d2d16 	blt	r4,zero,28254 <__alt_data_end+0xfffe8e54>
   28da0:	00bfdfc4 	movi	r2,-129
   28da4:	90a4703a 	and	r18,r18,r2
   28da8:	003a9106 	br	277f0 <__alt_data_end+0xfffe83f0>
   28dac:	010000f4 	movhi	r4,3
   28db0:	21128284 	addi	r4,r4,18954
   28db4:	d9002b15 	stw	r4,172(sp)
   28db8:	003c0c06 	br	27dec <__alt_data_end+0xfffe89ec>
   28dbc:	d9002c17 	ldw	r4,176(sp)
   28dc0:	d9801e04 	addi	r6,sp,120
   28dc4:	b80b883a 	mov	r5,r23
   28dc8:	002ea700 	call	2ea70 <__sprint_r>
   28dcc:	103aab1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28dd0:	d8c02017 	ldw	r3,128(sp)
   28dd4:	da000404 	addi	r8,sp,16
   28dd8:	003d4106 	br	282e0 <__alt_data_end+0xfffe8ee0>
   28ddc:	d8801f17 	ldw	r2,124(sp)
   28de0:	014000f4 	movhi	r5,3
   28de4:	01000044 	movi	r4,1
   28de8:	18c00044 	addi	r3,r3,1
   28dec:	10800044 	addi	r2,r2,1
   28df0:	29528204 	addi	r5,r5,18952
   28df4:	41000115 	stw	r4,4(r8)
   28df8:	41400015 	stw	r5,0(r8)
   28dfc:	d8c02015 	stw	r3,128(sp)
   28e00:	d8801f15 	stw	r2,124(sp)
   28e04:	010001c4 	movi	r4,7
   28e08:	20805c16 	blt	r4,r2,28f7c <___vfprintf_internal_r+0x1b08>
   28e0c:	42000204 	addi	r8,r8,8
   28e10:	8800041e 	bne	r17,zero,28e24 <___vfprintf_internal_r+0x19b0>
   28e14:	d8803317 	ldw	r2,204(sp)
   28e18:	1000021e 	bne	r2,zero,28e24 <___vfprintf_internal_r+0x19b0>
   28e1c:	9080004c 	andi	r2,r18,1
   28e20:	103c0926 	beq	r2,zero,27e48 <__alt_data_end+0xfffe8a48>
   28e24:	d9003717 	ldw	r4,220(sp)
   28e28:	d8801f17 	ldw	r2,124(sp)
   28e2c:	d9403417 	ldw	r5,208(sp)
   28e30:	20c7883a 	add	r3,r4,r3
   28e34:	10800044 	addi	r2,r2,1
   28e38:	41000115 	stw	r4,4(r8)
   28e3c:	41400015 	stw	r5,0(r8)
   28e40:	d8c02015 	stw	r3,128(sp)
   28e44:	d8801f15 	stw	r2,124(sp)
   28e48:	010001c4 	movi	r4,7
   28e4c:	20812116 	blt	r4,r2,292d4 <___vfprintf_internal_r+0x1e60>
   28e50:	42000204 	addi	r8,r8,8
   28e54:	0463c83a 	sub	r17,zero,r17
   28e58:	0440730e 	bge	zero,r17,29028 <___vfprintf_internal_r+0x1bb4>
   28e5c:	05800404 	movi	r22,16
   28e60:	b440860e 	bge	r22,r17,2907c <___vfprintf_internal_r+0x1c08>
   28e64:	014000f4 	movhi	r5,3
   28e68:	29528284 	addi	r5,r5,18954
   28e6c:	d9402b15 	stw	r5,172(sp)
   28e70:	070001c4 	movi	fp,7
   28e74:	dcc02c17 	ldw	r19,176(sp)
   28e78:	00000306 	br	28e88 <___vfprintf_internal_r+0x1a14>
   28e7c:	42000204 	addi	r8,r8,8
   28e80:	8c7ffc04 	addi	r17,r17,-16
   28e84:	b440800e 	bge	r22,r17,29088 <___vfprintf_internal_r+0x1c14>
   28e88:	18c00404 	addi	r3,r3,16
   28e8c:	10800044 	addi	r2,r2,1
   28e90:	45000015 	stw	r20,0(r8)
   28e94:	45800115 	stw	r22,4(r8)
   28e98:	d8c02015 	stw	r3,128(sp)
   28e9c:	d8801f15 	stw	r2,124(sp)
   28ea0:	e0bff60e 	bge	fp,r2,28e7c <__alt_data_end+0xfffe9a7c>
   28ea4:	d9801e04 	addi	r6,sp,120
   28ea8:	b80b883a 	mov	r5,r23
   28eac:	9809883a 	mov	r4,r19
   28eb0:	002ea700 	call	2ea70 <__sprint_r>
   28eb4:	103a711e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28eb8:	d8c02017 	ldw	r3,128(sp)
   28ebc:	d8801f17 	ldw	r2,124(sp)
   28ec0:	da000404 	addi	r8,sp,16
   28ec4:	003fee06 	br	28e80 <__alt_data_end+0xfffe9a80>
   28ec8:	00bfffc4 	movi	r2,-1
   28ecc:	003a6f06 	br	2788c <__alt_data_end+0xfffe848c>
   28ed0:	008011c4 	movi	r2,71
   28ed4:	1440b816 	blt	r2,r17,291b8 <___vfprintf_internal_r+0x1d44>
   28ed8:	040000f4 	movhi	r16,3
   28edc:	84127404 	addi	r16,r16,18896
   28ee0:	00c000c4 	movi	r3,3
   28ee4:	00bfdfc4 	movi	r2,-129
   28ee8:	d8c02a15 	stw	r3,168(sp)
   28eec:	90a4703a 	and	r18,r18,r2
   28ef0:	df002783 	ldbu	fp,158(sp)
   28ef4:	d8c02e15 	stw	r3,184(sp)
   28ef8:	d8002915 	stw	zero,164(sp)
   28efc:	d8003215 	stw	zero,200(sp)
   28f00:	003b2906 	br	27ba8 <__alt_data_end+0xfffe87a8>
   28f04:	d9002d17 	ldw	r4,180(sp)
   28f08:	24c00017 	ldw	r19,0(r4)
   28f0c:	21000104 	addi	r4,r4,4
   28f10:	d9002d15 	stw	r4,180(sp)
   28f14:	982dd7fa 	srai	r22,r19,31
   28f18:	b005883a 	mov	r2,r22
   28f1c:	003a9f06 	br	2799c <__alt_data_end+0xfffe859c>
   28f20:	d9402d17 	ldw	r5,180(sp)
   28f24:	d8c02f17 	ldw	r3,188(sp)
   28f28:	28800017 	ldw	r2,0(r5)
   28f2c:	29400104 	addi	r5,r5,4
   28f30:	d9402d15 	stw	r5,180(sp)
   28f34:	10c00015 	stw	r3,0(r2)
   28f38:	00398606 	br	27554 <__alt_data_end+0xfffe8154>
   28f3c:	d9402d17 	ldw	r5,180(sp)
   28f40:	002d883a 	mov	r22,zero
   28f44:	2cc00017 	ldw	r19,0(r5)
   28f48:	29400104 	addi	r5,r5,4
   28f4c:	d9402d15 	stw	r5,180(sp)
   28f50:	003c2306 	br	27fe0 <__alt_data_end+0xfffe8be0>
   28f54:	d8c02d17 	ldw	r3,180(sp)
   28f58:	d9002917 	ldw	r4,164(sp)
   28f5c:	002d883a 	mov	r22,zero
   28f60:	18800104 	addi	r2,r3,4
   28f64:	1cc0000b 	ldhu	r19,0(r3)
   28f68:	203dc10e 	bge	r4,zero,28670 <__alt_data_end+0xfffe9270>
   28f6c:	003f7506 	br	28d44 <__alt_data_end+0xfffe9944>
   28f70:	040000f4 	movhi	r16,3
   28f74:	84127204 	addi	r16,r16,18888
   28f78:	003acc06 	br	27aac <__alt_data_end+0xfffe86ac>
   28f7c:	d9002c17 	ldw	r4,176(sp)
   28f80:	d9801e04 	addi	r6,sp,120
   28f84:	b80b883a 	mov	r5,r23
   28f88:	002ea700 	call	2ea70 <__sprint_r>
   28f8c:	103a3b1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28f90:	dc402617 	ldw	r17,152(sp)
   28f94:	d8c02017 	ldw	r3,128(sp)
   28f98:	da000404 	addi	r8,sp,16
   28f9c:	003f9c06 	br	28e10 <__alt_data_end+0xfffe9a10>
   28fa0:	ac400043 	ldbu	r17,1(r21)
   28fa4:	94800814 	ori	r18,r18,32
   28fa8:	ad400044 	addi	r21,r21,1
   28fac:	8c403fcc 	andi	r17,r17,255
   28fb0:	8c40201c 	xori	r17,r17,128
   28fb4:	8c7fe004 	addi	r17,r17,-128
   28fb8:	00398f06 	br	275f8 <__alt_data_end+0xfffe81f8>
   28fbc:	d8c02d15 	stw	r3,180(sp)
   28fc0:	0039883a 	mov	fp,zero
   28fc4:	003e3506 	br	2889c <__alt_data_end+0xfffe949c>
   28fc8:	d9002c17 	ldw	r4,176(sp)
   28fcc:	d9801e04 	addi	r6,sp,120
   28fd0:	b80b883a 	mov	r5,r23
   28fd4:	002ea700 	call	2ea70 <__sprint_r>
   28fd8:	103a281e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   28fdc:	d8c02017 	ldw	r3,128(sp)
   28fe0:	da000404 	addi	r8,sp,16
   28fe4:	003cd006 	br	28328 <__alt_data_end+0xfffe8f28>
   28fe8:	8009883a 	mov	r4,r16
   28fec:	da003d15 	stw	r8,244(sp)
   28ff0:	00273dc0 	call	273dc <strlen>
   28ff4:	d8802e15 	stw	r2,184(sp)
   28ff8:	da003d17 	ldw	r8,244(sp)
   28ffc:	103c340e 	bge	r2,zero,280d0 <__alt_data_end+0xfffe8cd0>
   29000:	0005883a 	mov	r2,zero
   29004:	003c3206 	br	280d0 <__alt_data_end+0xfffe8cd0>
   29008:	d9002c17 	ldw	r4,176(sp)
   2900c:	d9801e04 	addi	r6,sp,120
   29010:	b80b883a 	mov	r5,r23
   29014:	002ea700 	call	2ea70 <__sprint_r>
   29018:	103a181e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   2901c:	d8c02017 	ldw	r3,128(sp)
   29020:	d8801f17 	ldw	r2,124(sp)
   29024:	da000404 	addi	r8,sp,16
   29028:	d9403317 	ldw	r5,204(sp)
   2902c:	10800044 	addi	r2,r2,1
   29030:	44000015 	stw	r16,0(r8)
   29034:	28c7883a 	add	r3,r5,r3
   29038:	003b7d06 	br	27e30 <__alt_data_end+0xfffe8a30>
   2903c:	010000f4 	movhi	r4,3
   29040:	21128684 	addi	r4,r4,18970
   29044:	d9003515 	stw	r4,212(sp)
   29048:	003b1406 	br	27c9c <__alt_data_end+0xfffe889c>
   2904c:	013fffc4 	movi	r4,-1
   29050:	003a3506 	br	27928 <__alt_data_end+0xfffe8528>
   29054:	0023883a 	mov	r17,zero
   29058:	003d9d06 	br	286d0 <__alt_data_end+0xfffe92d0>
   2905c:	d9002c17 	ldw	r4,176(sp)
   29060:	d9801e04 	addi	r6,sp,120
   29064:	b80b883a 	mov	r5,r23
   29068:	002ea700 	call	2ea70 <__sprint_r>
   2906c:	103a031e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   29070:	d8c02017 	ldw	r3,128(sp)
   29074:	da000404 	addi	r8,sp,16
   29078:	003d9406 	br	286cc <__alt_data_end+0xfffe92cc>
   2907c:	010000f4 	movhi	r4,3
   29080:	21128284 	addi	r4,r4,18954
   29084:	d9002b15 	stw	r4,172(sp)
   29088:	d9002b17 	ldw	r4,172(sp)
   2908c:	1c47883a 	add	r3,r3,r17
   29090:	10800044 	addi	r2,r2,1
   29094:	41000015 	stw	r4,0(r8)
   29098:	44400115 	stw	r17,4(r8)
   2909c:	d8c02015 	stw	r3,128(sp)
   290a0:	d8801f15 	stw	r2,124(sp)
   290a4:	010001c4 	movi	r4,7
   290a8:	20bfd716 	blt	r4,r2,29008 <__alt_data_end+0xfffe9c08>
   290ac:	42000204 	addi	r8,r8,8
   290b0:	003fdd06 	br	29028 <__alt_data_end+0xfffe9c28>
   290b4:	d9002c17 	ldw	r4,176(sp)
   290b8:	d9801e04 	addi	r6,sp,120
   290bc:	b80b883a 	mov	r5,r23
   290c0:	002ea700 	call	2ea70 <__sprint_r>
   290c4:	1039ed1e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   290c8:	d8802617 	ldw	r2,152(sp)
   290cc:	d8c02017 	ldw	r3,128(sp)
   290d0:	da000404 	addi	r8,sp,16
   290d4:	003e1006 	br	28918 <__alt_data_end+0xfffe9518>
   290d8:	00800044 	movi	r2,1
   290dc:	10803fcc 	andi	r2,r2,255
   290e0:	00c00044 	movi	r3,1
   290e4:	10fa3526 	beq	r2,r3,279bc <__alt_data_end+0xfffe85bc>
   290e8:	00c00084 	movi	r3,2
   290ec:	10fbcb26 	beq	r2,r3,2801c <__alt_data_end+0xfffe8c1c>
   290f0:	003a8f06 	br	27b30 <__alt_data_end+0xfffe8730>
   290f4:	010000f4 	movhi	r4,3
   290f8:	21128684 	addi	r4,r4,18970
   290fc:	d9003515 	stw	r4,212(sp)
   29100:	003b7606 	br	27edc <__alt_data_end+0xfffe8adc>
   29104:	d8802917 	ldw	r2,164(sp)
   29108:	00c00184 	movi	r3,6
   2910c:	1880012e 	bgeu	r3,r2,29114 <___vfprintf_internal_r+0x1ca0>
   29110:	1805883a 	mov	r2,r3
   29114:	d8802e15 	stw	r2,184(sp)
   29118:	1000ef16 	blt	r2,zero,294d8 <___vfprintf_internal_r+0x2064>
   2911c:	040000f4 	movhi	r16,3
   29120:	d8802a15 	stw	r2,168(sp)
   29124:	dcc02d15 	stw	r19,180(sp)
   29128:	d8002915 	stw	zero,164(sp)
   2912c:	d8003215 	stw	zero,200(sp)
   29130:	84128004 	addi	r16,r16,18944
   29134:	0039883a 	mov	fp,zero
   29138:	003aa206 	br	27bc4 <__alt_data_end+0xfffe87c4>
   2913c:	0021883a 	mov	r16,zero
   29140:	003e0706 	br	28960 <__alt_data_end+0xfffe9560>
   29144:	d9002c17 	ldw	r4,176(sp)
   29148:	d9801e04 	addi	r6,sp,120
   2914c:	b80b883a 	mov	r5,r23
   29150:	002ea700 	call	2ea70 <__sprint_r>
   29154:	1039c91e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   29158:	d8802617 	ldw	r2,152(sp)
   2915c:	d9403317 	ldw	r5,204(sp)
   29160:	d8c02017 	ldw	r3,128(sp)
   29164:	da000404 	addi	r8,sp,16
   29168:	2885c83a 	sub	r2,r5,r2
   2916c:	003dfb06 	br	2895c <__alt_data_end+0xfffe955c>
   29170:	9080004c 	andi	r2,r18,1
   29174:	103e8f1e 	bne	r2,zero,28bb4 <__alt_data_end+0xfffe97b4>
   29178:	d8802117 	ldw	r2,132(sp)
   2917c:	003e9e06 	br	28bf8 <__alt_data_end+0xfffe97f8>
   29180:	1025883a 	mov	r18,r2
   29184:	0039883a 	mov	fp,zero
   29188:	00800084 	movi	r2,2
   2918c:	003fd306 	br	290dc <__alt_data_end+0xfffe9cdc>
   29190:	07000b44 	movi	fp,45
   29194:	df002785 	stb	fp,158(sp)
   29198:	003a4006 	br	27a9c <__alt_data_end+0xfffe869c>
   2919c:	00c00b44 	movi	r3,45
   291a0:	d8c02785 	stb	r3,158(sp)
   291a4:	d8802a15 	stw	r2,168(sp)
   291a8:	dc802b17 	ldw	r18,172(sp)
   291ac:	d8002915 	stw	zero,164(sp)
   291b0:	07000b44 	movi	fp,45
   291b4:	003a8006 	br	27bb8 <__alt_data_end+0xfffe87b8>
   291b8:	040000f4 	movhi	r16,3
   291bc:	84127504 	addi	r16,r16,18900
   291c0:	003f4706 	br	28ee0 <__alt_data_end+0xfffe9ae0>
   291c4:	d8c02d17 	ldw	r3,180(sp)
   291c8:	d9002f17 	ldw	r4,188(sp)
   291cc:	18800017 	ldw	r2,0(r3)
   291d0:	18c00104 	addi	r3,r3,4
   291d4:	d8c02d15 	stw	r3,180(sp)
   291d8:	11000015 	stw	r4,0(r2)
   291dc:	0038dd06 	br	27554 <__alt_data_end+0xfffe8154>
   291e0:	dd802617 	ldw	r22,152(sp)
   291e4:	00bfff44 	movi	r2,-3
   291e8:	b0801c16 	blt	r22,r2,2925c <___vfprintf_internal_r+0x1de8>
   291ec:	d9402917 	ldw	r5,164(sp)
   291f0:	2d801a16 	blt	r5,r22,2925c <___vfprintf_internal_r+0x1de8>
   291f4:	dd803215 	stw	r22,200(sp)
   291f8:	003e8906 	br	28c20 <__alt_data_end+0xfffe9820>
   291fc:	010000f4 	movhi	r4,3
   29200:	21128284 	addi	r4,r4,18954
   29204:	d9002b15 	stw	r4,172(sp)
   29208:	003c9106 	br	28450 <__alt_data_end+0xfffe9050>
   2920c:	e005883a 	mov	r2,fp
   29210:	003e7906 	br	28bf8 <__alt_data_end+0xfffe97f8>
   29214:	d9402917 	ldw	r5,164(sp)
   29218:	df002783 	ldbu	fp,158(sp)
   2921c:	dcc02d15 	stw	r19,180(sp)
   29220:	d9402a15 	stw	r5,168(sp)
   29224:	d9402e15 	stw	r5,184(sp)
   29228:	d8002915 	stw	zero,164(sp)
   2922c:	d8003215 	stw	zero,200(sp)
   29230:	003a5d06 	br	27ba8 <__alt_data_end+0xfffe87a8>
   29234:	9080004c 	andi	r2,r18,1
   29238:	0039883a 	mov	fp,zero
   2923c:	10000426 	beq	r2,zero,29250 <___vfprintf_internal_r+0x1ddc>
   29240:	00800c04 	movi	r2,48
   29244:	dc001dc4 	addi	r16,sp,119
   29248:	d8801dc5 	stb	r2,119(sp)
   2924c:	003b8006 	br	28050 <__alt_data_end+0xfffe8c50>
   29250:	d8002e15 	stw	zero,184(sp)
   29254:	dc001e04 	addi	r16,sp,120
   29258:	003a4d06 	br	27b90 <__alt_data_end+0xfffe8790>
   2925c:	8c7fff84 	addi	r17,r17,-2
   29260:	b5bfffc4 	addi	r22,r22,-1
   29264:	dd802615 	stw	r22,152(sp)
   29268:	dc4022c5 	stb	r17,139(sp)
   2926c:	b000bf16 	blt	r22,zero,2956c <___vfprintf_internal_r+0x20f8>
   29270:	00800ac4 	movi	r2,43
   29274:	d8802305 	stb	r2,140(sp)
   29278:	00800244 	movi	r2,9
   2927c:	15807016 	blt	r2,r22,29440 <___vfprintf_internal_r+0x1fcc>
   29280:	00800c04 	movi	r2,48
   29284:	b5800c04 	addi	r22,r22,48
   29288:	d8802345 	stb	r2,141(sp)
   2928c:	dd802385 	stb	r22,142(sp)
   29290:	d88023c4 	addi	r2,sp,143
   29294:	df0022c4 	addi	fp,sp,139
   29298:	d8c03317 	ldw	r3,204(sp)
   2929c:	1739c83a 	sub	fp,r2,fp
   292a0:	d9003317 	ldw	r4,204(sp)
   292a4:	e0c7883a 	add	r3,fp,r3
   292a8:	df003a15 	stw	fp,232(sp)
   292ac:	d8c02e15 	stw	r3,184(sp)
   292b0:	00800044 	movi	r2,1
   292b4:	1100b30e 	bge	r2,r4,29584 <___vfprintf_internal_r+0x2110>
   292b8:	d8c02e17 	ldw	r3,184(sp)
   292bc:	18c00044 	addi	r3,r3,1
   292c0:	d8c02e15 	stw	r3,184(sp)
   292c4:	1805883a 	mov	r2,r3
   292c8:	1800ac16 	blt	r3,zero,2957c <___vfprintf_internal_r+0x2108>
   292cc:	d8003215 	stw	zero,200(sp)
   292d0:	003e5d06 	br	28c48 <__alt_data_end+0xfffe9848>
   292d4:	d9002c17 	ldw	r4,176(sp)
   292d8:	d9801e04 	addi	r6,sp,120
   292dc:	b80b883a 	mov	r5,r23
   292e0:	002ea700 	call	2ea70 <__sprint_r>
   292e4:	1039651e 	bne	r2,zero,2787c <__alt_data_end+0xfffe847c>
   292e8:	dc402617 	ldw	r17,152(sp)
   292ec:	d8c02017 	ldw	r3,128(sp)
   292f0:	d8801f17 	ldw	r2,124(sp)
   292f4:	da000404 	addi	r8,sp,16
   292f8:	003ed606 	br	28e54 <__alt_data_end+0xfffe9a54>
   292fc:	582b883a 	mov	r21,r11
   29300:	d8002915 	stw	zero,164(sp)
   29304:	0038bd06 	br	275fc <__alt_data_end+0xfffe81fc>
   29308:	d8802917 	ldw	r2,164(sp)
   2930c:	103e071e 	bne	r2,zero,28b2c <__alt_data_end+0xfffe972c>
   29310:	dc002915 	stw	r16,164(sp)
   29314:	003e0506 	br	28b2c <__alt_data_end+0xfffe972c>
   29318:	d9002917 	ldw	r4,164(sp)
   2931c:	20c00044 	addi	r3,r4,1
   29320:	003e0f06 	br	28b60 <__alt_data_end+0xfffe9760>
   29324:	01400184 	movi	r5,6
   29328:	d9402915 	stw	r5,164(sp)
   2932c:	003dff06 	br	28b2c <__alt_data_end+0xfffe972c>
   29330:	d8802104 	addi	r2,sp,132
   29334:	d8800315 	stw	r2,12(sp)
   29338:	d8802504 	addi	r2,sp,148
   2933c:	d8800215 	stw	r2,8(sp)
   29340:	d8802604 	addi	r2,sp,152
   29344:	d8800115 	stw	r2,4(sp)
   29348:	d8802917 	ldw	r2,164(sp)
   2934c:	d9403617 	ldw	r5,216(sp)
   29350:	d9002c17 	ldw	r4,176(sp)
   29354:	d8800015 	stw	r2,0(sp)
   29358:	01c000c4 	movi	r7,3
   2935c:	980d883a 	mov	r6,r19
   29360:	da003d15 	stw	r8,244(sp)
   29364:	0029a980 	call	29a98 <_dtoa_r>
   29368:	d8c02917 	ldw	r3,164(sp)
   2936c:	da003d17 	ldw	r8,244(sp)
   29370:	1021883a 	mov	r16,r2
   29374:	10f9883a 	add	fp,r2,r3
   29378:	81000007 	ldb	r4,0(r16)
   2937c:	00800c04 	movi	r2,48
   29380:	20805e26 	beq	r4,r2,294fc <___vfprintf_internal_r+0x2088>
   29384:	d8c02617 	ldw	r3,152(sp)
   29388:	e0f9883a 	add	fp,fp,r3
   2938c:	003e0a06 	br	28bb8 <__alt_data_end+0xfffe97b8>
   29390:	00c00b44 	movi	r3,45
   29394:	24e0003c 	xorhi	r19,r4,32768
   29398:	d8c02a05 	stb	r3,168(sp)
   2939c:	003de906 	br	28b44 <__alt_data_end+0xfffe9744>
   293a0:	d8c03217 	ldw	r3,200(sp)
   293a4:	00c07a0e 	bge	zero,r3,29590 <___vfprintf_internal_r+0x211c>
   293a8:	00800044 	movi	r2,1
   293ac:	d9003317 	ldw	r4,204(sp)
   293b0:	1105883a 	add	r2,r2,r4
   293b4:	d8802e15 	stw	r2,184(sp)
   293b8:	10004e16 	blt	r2,zero,294f4 <___vfprintf_internal_r+0x2080>
   293bc:	044019c4 	movi	r17,103
   293c0:	003e2106 	br	28c48 <__alt_data_end+0xfffe9848>
   293c4:	d9002917 	ldw	r4,164(sp)
   293c8:	d8802104 	addi	r2,sp,132
   293cc:	d8800315 	stw	r2,12(sp)
   293d0:	d9000015 	stw	r4,0(sp)
   293d4:	d8802504 	addi	r2,sp,148
   293d8:	d9403617 	ldw	r5,216(sp)
   293dc:	d9002c17 	ldw	r4,176(sp)
   293e0:	d8800215 	stw	r2,8(sp)
   293e4:	d8802604 	addi	r2,sp,152
   293e8:	d8800115 	stw	r2,4(sp)
   293ec:	01c000c4 	movi	r7,3
   293f0:	980d883a 	mov	r6,r19
   293f4:	da003d15 	stw	r8,244(sp)
   293f8:	0029a980 	call	29a98 <_dtoa_r>
   293fc:	d8c02917 	ldw	r3,164(sp)
   29400:	da003d17 	ldw	r8,244(sp)
   29404:	1021883a 	mov	r16,r2
   29408:	00801184 	movi	r2,70
   2940c:	80f9883a 	add	fp,r16,r3
   29410:	88bfd926 	beq	r17,r2,29378 <__alt_data_end+0xfffe9f78>
   29414:	003de806 	br	28bb8 <__alt_data_end+0xfffe97b8>
   29418:	d9002917 	ldw	r4,164(sp)
   2941c:	00c04d0e 	bge	zero,r3,29554 <___vfprintf_internal_r+0x20e0>
   29420:	2000441e 	bne	r4,zero,29534 <___vfprintf_internal_r+0x20c0>
   29424:	9480004c 	andi	r18,r18,1
   29428:	9000421e 	bne	r18,zero,29534 <___vfprintf_internal_r+0x20c0>
   2942c:	1805883a 	mov	r2,r3
   29430:	18007016 	blt	r3,zero,295f4 <___vfprintf_internal_r+0x2180>
   29434:	d8c03217 	ldw	r3,200(sp)
   29438:	d8c02e15 	stw	r3,184(sp)
   2943c:	003e0206 	br	28c48 <__alt_data_end+0xfffe9848>
   29440:	df0022c4 	addi	fp,sp,139
   29444:	dc002915 	stw	r16,164(sp)
   29448:	4027883a 	mov	r19,r8
   2944c:	e021883a 	mov	r16,fp
   29450:	b009883a 	mov	r4,r22
   29454:	01400284 	movi	r5,10
   29458:	00238ac0 	call	238ac <__modsi3>
   2945c:	10800c04 	addi	r2,r2,48
   29460:	843fffc4 	addi	r16,r16,-1
   29464:	b009883a 	mov	r4,r22
   29468:	01400284 	movi	r5,10
   2946c:	80800005 	stb	r2,0(r16)
   29470:	00238280 	call	23828 <__divsi3>
   29474:	102d883a 	mov	r22,r2
   29478:	00800244 	movi	r2,9
   2947c:	15bff416 	blt	r2,r22,29450 <__alt_data_end+0xfffea050>
   29480:	9811883a 	mov	r8,r19
   29484:	b0800c04 	addi	r2,r22,48
   29488:	8027883a 	mov	r19,r16
   2948c:	997fffc4 	addi	r5,r19,-1
   29490:	98bfffc5 	stb	r2,-1(r19)
   29494:	dc002917 	ldw	r16,164(sp)
   29498:	2f006a2e 	bgeu	r5,fp,29644 <___vfprintf_internal_r+0x21d0>
   2949c:	d9c02384 	addi	r7,sp,142
   294a0:	3ccfc83a 	sub	r7,r7,r19
   294a4:	d9002344 	addi	r4,sp,141
   294a8:	e1cf883a 	add	r7,fp,r7
   294ac:	00000106 	br	294b4 <___vfprintf_internal_r+0x2040>
   294b0:	28800003 	ldbu	r2,0(r5)
   294b4:	20800005 	stb	r2,0(r4)
   294b8:	21000044 	addi	r4,r4,1
   294bc:	29400044 	addi	r5,r5,1
   294c0:	393ffb1e 	bne	r7,r4,294b0 <__alt_data_end+0xfffea0b0>
   294c4:	d8802304 	addi	r2,sp,140
   294c8:	14c5c83a 	sub	r2,r2,r19
   294cc:	d8c02344 	addi	r3,sp,141
   294d0:	1885883a 	add	r2,r3,r2
   294d4:	003f7006 	br	29298 <__alt_data_end+0xfffe9e98>
   294d8:	0005883a 	mov	r2,zero
   294dc:	003f0f06 	br	2911c <__alt_data_end+0xfffe9d1c>
   294e0:	d8c03217 	ldw	r3,200(sp)
   294e4:	18c00044 	addi	r3,r3,1
   294e8:	d8c02e15 	stw	r3,184(sp)
   294ec:	1805883a 	mov	r2,r3
   294f0:	183fb20e 	bge	r3,zero,293bc <__alt_data_end+0xfffe9fbc>
   294f4:	0005883a 	mov	r2,zero
   294f8:	003fb006 	br	293bc <__alt_data_end+0xfffe9fbc>
   294fc:	d9003617 	ldw	r4,216(sp)
   29500:	000d883a 	mov	r6,zero
   29504:	000f883a 	mov	r7,zero
   29508:	980b883a 	mov	r5,r19
   2950c:	d8c03c15 	stw	r3,240(sp)
   29510:	da003d15 	stw	r8,244(sp)
   29514:	00313a00 	call	313a0 <__eqdf2>
   29518:	d8c03c17 	ldw	r3,240(sp)
   2951c:	da003d17 	ldw	r8,244(sp)
   29520:	103f9826 	beq	r2,zero,29384 <__alt_data_end+0xfffe9f84>
   29524:	00800044 	movi	r2,1
   29528:	10c7c83a 	sub	r3,r2,r3
   2952c:	d8c02615 	stw	r3,152(sp)
   29530:	003f9506 	br	29388 <__alt_data_end+0xfffe9f88>
   29534:	d9002917 	ldw	r4,164(sp)
   29538:	d8c03217 	ldw	r3,200(sp)
   2953c:	20800044 	addi	r2,r4,1
   29540:	1885883a 	add	r2,r3,r2
   29544:	d8802e15 	stw	r2,184(sp)
   29548:	103dbf0e 	bge	r2,zero,28c48 <__alt_data_end+0xfffe9848>
   2954c:	0005883a 	mov	r2,zero
   29550:	003dbd06 	br	28c48 <__alt_data_end+0xfffe9848>
   29554:	2000211e 	bne	r4,zero,295dc <___vfprintf_internal_r+0x2168>
   29558:	9480004c 	andi	r18,r18,1
   2955c:	90001f1e 	bne	r18,zero,295dc <___vfprintf_internal_r+0x2168>
   29560:	00800044 	movi	r2,1
   29564:	d8802e15 	stw	r2,184(sp)
   29568:	003db706 	br	28c48 <__alt_data_end+0xfffe9848>
   2956c:	00800b44 	movi	r2,45
   29570:	05adc83a 	sub	r22,zero,r22
   29574:	d8802305 	stb	r2,140(sp)
   29578:	003f3f06 	br	29278 <__alt_data_end+0xfffe9e78>
   2957c:	0005883a 	mov	r2,zero
   29580:	003f5206 	br	292cc <__alt_data_end+0xfffe9ecc>
   29584:	90a4703a 	and	r18,r18,r2
   29588:	903f4e26 	beq	r18,zero,292c4 <__alt_data_end+0xfffe9ec4>
   2958c:	003f4a06 	br	292b8 <__alt_data_end+0xfffe9eb8>
   29590:	00800084 	movi	r2,2
   29594:	10c5c83a 	sub	r2,r2,r3
   29598:	003f8406 	br	293ac <__alt_data_end+0xfffe9fac>
   2959c:	d8802d17 	ldw	r2,180(sp)
   295a0:	d9002d17 	ldw	r4,180(sp)
   295a4:	ac400043 	ldbu	r17,1(r21)
   295a8:	10800017 	ldw	r2,0(r2)
   295ac:	582b883a 	mov	r21,r11
   295b0:	d8802915 	stw	r2,164(sp)
   295b4:	20800104 	addi	r2,r4,4
   295b8:	d9002917 	ldw	r4,164(sp)
   295bc:	d8802d15 	stw	r2,180(sp)
   295c0:	203e7a0e 	bge	r4,zero,28fac <__alt_data_end+0xfffe9bac>
   295c4:	8c403fcc 	andi	r17,r17,255
   295c8:	00bfffc4 	movi	r2,-1
   295cc:	8c40201c 	xori	r17,r17,128
   295d0:	d8802915 	stw	r2,164(sp)
   295d4:	8c7fe004 	addi	r17,r17,-128
   295d8:	00380706 	br	275f8 <__alt_data_end+0xfffe81f8>
   295dc:	d8c02917 	ldw	r3,164(sp)
   295e0:	18c00084 	addi	r3,r3,2
   295e4:	d8c02e15 	stw	r3,184(sp)
   295e8:	1805883a 	mov	r2,r3
   295ec:	183d960e 	bge	r3,zero,28c48 <__alt_data_end+0xfffe9848>
   295f0:	003fd606 	br	2954c <__alt_data_end+0xfffea14c>
   295f4:	0005883a 	mov	r2,zero
   295f8:	003f8e06 	br	29434 <__alt_data_end+0xfffea034>
   295fc:	9080004c 	andi	r2,r18,1
   29600:	103f811e 	bne	r2,zero,29408 <__alt_data_end+0xfffea008>
   29604:	d8802117 	ldw	r2,132(sp)
   29608:	1405c83a 	sub	r2,r2,r16
   2960c:	d8803315 	stw	r2,204(sp)
   29610:	b47ef326 	beq	r22,r17,291e0 <__alt_data_end+0xfffe9de0>
   29614:	dd802617 	ldw	r22,152(sp)
   29618:	003f1106 	br	29260 <__alt_data_end+0xfffe9e60>
   2961c:	d9c02785 	stb	r7,158(sp)
   29620:	00390406 	br	27a34 <__alt_data_end+0xfffe8634>
   29624:	d9c02785 	stb	r7,158(sp)
   29628:	0038d306 	br	27978 <__alt_data_end+0xfffe8578>
   2962c:	d9c02785 	stb	r7,158(sp)
   29630:	003a6106 	br	27fb8 <__alt_data_end+0xfffe8bb8>
   29634:	d9c02785 	stb	r7,158(sp)
   29638:	003af806 	br	2821c <__alt_data_end+0xfffe8e1c>
   2963c:	0005883a 	mov	r2,zero
   29640:	003d7e06 	br	28c3c <__alt_data_end+0xfffe983c>
   29644:	d8802344 	addi	r2,sp,141
   29648:	003f1306 	br	29298 <__alt_data_end+0xfffe9e98>
   2964c:	d9c02785 	stb	r7,158(sp)
   29650:	00392306 	br	27ae0 <__alt_data_end+0xfffe86e0>
   29654:	d9c02785 	stb	r7,158(sp)
   29658:	003aa906 	br	28100 <__alt_data_end+0xfffe8d00>
   2965c:	d9c02785 	stb	r7,158(sp)
   29660:	003a3d06 	br	27f58 <__alt_data_end+0xfffe8b58>
   29664:	d9c02785 	stb	r7,158(sp)
   29668:	003aca06 	br	28194 <__alt_data_end+0xfffe8d94>

0002966c <__vfprintf_internal>:
   2966c:	008000f4 	movhi	r2,3
   29670:	10999c04 	addi	r2,r2,26224
   29674:	300f883a 	mov	r7,r6
   29678:	280d883a 	mov	r6,r5
   2967c:	200b883a 	mov	r5,r4
   29680:	11000017 	ldw	r4,0(r2)
   29684:	00274741 	jmpi	27474 <___vfprintf_internal_r>

00029688 <__sbprintf>:
   29688:	2880030b 	ldhu	r2,12(r5)
   2968c:	2ac01917 	ldw	r11,100(r5)
   29690:	2a80038b 	ldhu	r10,14(r5)
   29694:	2a400717 	ldw	r9,28(r5)
   29698:	2a000917 	ldw	r8,36(r5)
   2969c:	defee204 	addi	sp,sp,-1144
   296a0:	00c10004 	movi	r3,1024
   296a4:	dc011a15 	stw	r16,1128(sp)
   296a8:	10bfff4c 	andi	r2,r2,65533
   296ac:	2821883a 	mov	r16,r5
   296b0:	d8cb883a 	add	r5,sp,r3
   296b4:	dc811c15 	stw	r18,1136(sp)
   296b8:	dc411b15 	stw	r17,1132(sp)
   296bc:	dfc11d15 	stw	ra,1140(sp)
   296c0:	2025883a 	mov	r18,r4
   296c4:	d881030d 	sth	r2,1036(sp)
   296c8:	dac11915 	stw	r11,1124(sp)
   296cc:	da81038d 	sth	r10,1038(sp)
   296d0:	da410715 	stw	r9,1052(sp)
   296d4:	da010915 	stw	r8,1060(sp)
   296d8:	dec10015 	stw	sp,1024(sp)
   296dc:	dec10415 	stw	sp,1040(sp)
   296e0:	d8c10215 	stw	r3,1032(sp)
   296e4:	d8c10515 	stw	r3,1044(sp)
   296e8:	d8010615 	stw	zero,1048(sp)
   296ec:	00274740 	call	27474 <___vfprintf_internal_r>
   296f0:	1023883a 	mov	r17,r2
   296f4:	10000416 	blt	r2,zero,29708 <__sbprintf+0x80>
   296f8:	d9410004 	addi	r5,sp,1024
   296fc:	9009883a 	mov	r4,r18
   29700:	002b33c0 	call	2b33c <_fflush_r>
   29704:	10000d1e 	bne	r2,zero,2973c <__sbprintf+0xb4>
   29708:	d881030b 	ldhu	r2,1036(sp)
   2970c:	1080100c 	andi	r2,r2,64
   29710:	10000326 	beq	r2,zero,29720 <__sbprintf+0x98>
   29714:	8080030b 	ldhu	r2,12(r16)
   29718:	10801014 	ori	r2,r2,64
   2971c:	8080030d 	sth	r2,12(r16)
   29720:	8805883a 	mov	r2,r17
   29724:	dfc11d17 	ldw	ra,1140(sp)
   29728:	dc811c17 	ldw	r18,1136(sp)
   2972c:	dc411b17 	ldw	r17,1132(sp)
   29730:	dc011a17 	ldw	r16,1128(sp)
   29734:	dec11e04 	addi	sp,sp,1144
   29738:	f800283a 	ret
   2973c:	047fffc4 	movi	r17,-1
   29740:	003ff106 	br	29708 <__alt_data_end+0xfffea308>

00029744 <__swsetup_r>:
   29744:	008000f4 	movhi	r2,3
   29748:	defffd04 	addi	sp,sp,-12
   2974c:	10999c04 	addi	r2,r2,26224
   29750:	dc400115 	stw	r17,4(sp)
   29754:	2023883a 	mov	r17,r4
   29758:	11000017 	ldw	r4,0(r2)
   2975c:	dc000015 	stw	r16,0(sp)
   29760:	dfc00215 	stw	ra,8(sp)
   29764:	2821883a 	mov	r16,r5
   29768:	20000226 	beq	r4,zero,29774 <__swsetup_r+0x30>
   2976c:	20800e17 	ldw	r2,56(r4)
   29770:	10003126 	beq	r2,zero,29838 <__swsetup_r+0xf4>
   29774:	8080030b 	ldhu	r2,12(r16)
   29778:	10c0020c 	andi	r3,r2,8
   2977c:	1009883a 	mov	r4,r2
   29780:	18000f26 	beq	r3,zero,297c0 <__swsetup_r+0x7c>
   29784:	80c00417 	ldw	r3,16(r16)
   29788:	18001526 	beq	r3,zero,297e0 <__swsetup_r+0x9c>
   2978c:	1100004c 	andi	r4,r2,1
   29790:	20001c1e 	bne	r4,zero,29804 <__swsetup_r+0xc0>
   29794:	1080008c 	andi	r2,r2,2
   29798:	1000291e 	bne	r2,zero,29840 <__swsetup_r+0xfc>
   2979c:	80800517 	ldw	r2,20(r16)
   297a0:	80800215 	stw	r2,8(r16)
   297a4:	18001c26 	beq	r3,zero,29818 <__swsetup_r+0xd4>
   297a8:	0005883a 	mov	r2,zero
   297ac:	dfc00217 	ldw	ra,8(sp)
   297b0:	dc400117 	ldw	r17,4(sp)
   297b4:	dc000017 	ldw	r16,0(sp)
   297b8:	dec00304 	addi	sp,sp,12
   297bc:	f800283a 	ret
   297c0:	2080040c 	andi	r2,r4,16
   297c4:	10002e26 	beq	r2,zero,29880 <__swsetup_r+0x13c>
   297c8:	2080010c 	andi	r2,r4,4
   297cc:	10001e1e 	bne	r2,zero,29848 <__swsetup_r+0x104>
   297d0:	80c00417 	ldw	r3,16(r16)
   297d4:	20800214 	ori	r2,r4,8
   297d8:	8080030d 	sth	r2,12(r16)
   297dc:	183feb1e 	bne	r3,zero,2978c <__alt_data_end+0xfffea38c>
   297e0:	1100a00c 	andi	r4,r2,640
   297e4:	01408004 	movi	r5,512
   297e8:	217fe826 	beq	r4,r5,2978c <__alt_data_end+0xfffea38c>
   297ec:	800b883a 	mov	r5,r16
   297f0:	8809883a 	mov	r4,r17
   297f4:	002c2bc0 	call	2c2bc <__smakebuf_r>
   297f8:	8080030b 	ldhu	r2,12(r16)
   297fc:	80c00417 	ldw	r3,16(r16)
   29800:	003fe206 	br	2978c <__alt_data_end+0xfffea38c>
   29804:	80800517 	ldw	r2,20(r16)
   29808:	80000215 	stw	zero,8(r16)
   2980c:	0085c83a 	sub	r2,zero,r2
   29810:	80800615 	stw	r2,24(r16)
   29814:	183fe41e 	bne	r3,zero,297a8 <__alt_data_end+0xfffea3a8>
   29818:	80c0030b 	ldhu	r3,12(r16)
   2981c:	0005883a 	mov	r2,zero
   29820:	1900200c 	andi	r4,r3,128
   29824:	203fe126 	beq	r4,zero,297ac <__alt_data_end+0xfffea3ac>
   29828:	18c01014 	ori	r3,r3,64
   2982c:	80c0030d 	sth	r3,12(r16)
   29830:	00bfffc4 	movi	r2,-1
   29834:	003fdd06 	br	297ac <__alt_data_end+0xfffea3ac>
   29838:	002b7180 	call	2b718 <__sinit>
   2983c:	003fcd06 	br	29774 <__alt_data_end+0xfffea374>
   29840:	0005883a 	mov	r2,zero
   29844:	003fd606 	br	297a0 <__alt_data_end+0xfffea3a0>
   29848:	81400c17 	ldw	r5,48(r16)
   2984c:	28000626 	beq	r5,zero,29868 <__swsetup_r+0x124>
   29850:	80801004 	addi	r2,r16,64
   29854:	28800326 	beq	r5,r2,29864 <__swsetup_r+0x120>
   29858:	8809883a 	mov	r4,r17
   2985c:	002b88c0 	call	2b88c <_free_r>
   29860:	8100030b 	ldhu	r4,12(r16)
   29864:	80000c15 	stw	zero,48(r16)
   29868:	80c00417 	ldw	r3,16(r16)
   2986c:	00bff6c4 	movi	r2,-37
   29870:	1108703a 	and	r4,r2,r4
   29874:	80000115 	stw	zero,4(r16)
   29878:	80c00015 	stw	r3,0(r16)
   2987c:	003fd506 	br	297d4 <__alt_data_end+0xfffea3d4>
   29880:	00800244 	movi	r2,9
   29884:	88800015 	stw	r2,0(r17)
   29888:	20801014 	ori	r2,r4,64
   2988c:	8080030d 	sth	r2,12(r16)
   29890:	00bfffc4 	movi	r2,-1
   29894:	003fc506 	br	297ac <__alt_data_end+0xfffea3ac>

00029898 <quorem>:
   29898:	defff704 	addi	sp,sp,-36
   2989c:	dc800215 	stw	r18,8(sp)
   298a0:	20800417 	ldw	r2,16(r4)
   298a4:	2c800417 	ldw	r18,16(r5)
   298a8:	dfc00815 	stw	ra,32(sp)
   298ac:	ddc00715 	stw	r23,28(sp)
   298b0:	dd800615 	stw	r22,24(sp)
   298b4:	dd400515 	stw	r21,20(sp)
   298b8:	dd000415 	stw	r20,16(sp)
   298bc:	dcc00315 	stw	r19,12(sp)
   298c0:	dc400115 	stw	r17,4(sp)
   298c4:	dc000015 	stw	r16,0(sp)
   298c8:	14807116 	blt	r2,r18,29a90 <quorem+0x1f8>
   298cc:	94bfffc4 	addi	r18,r18,-1
   298d0:	94ad883a 	add	r22,r18,r18
   298d4:	b5ad883a 	add	r22,r22,r22
   298d8:	2c400504 	addi	r17,r5,20
   298dc:	8da9883a 	add	r20,r17,r22
   298e0:	25400504 	addi	r21,r4,20
   298e4:	282f883a 	mov	r23,r5
   298e8:	adad883a 	add	r22,r21,r22
   298ec:	a1400017 	ldw	r5,0(r20)
   298f0:	2021883a 	mov	r16,r4
   298f4:	b1000017 	ldw	r4,0(r22)
   298f8:	29400044 	addi	r5,r5,1
   298fc:	00239200 	call	23920 <__udivsi3>
   29900:	1027883a 	mov	r19,r2
   29904:	10002c26 	beq	r2,zero,299b8 <quorem+0x120>
   29908:	a813883a 	mov	r9,r21
   2990c:	880b883a 	mov	r5,r17
   29910:	0009883a 	mov	r4,zero
   29914:	000d883a 	mov	r6,zero
   29918:	2a000017 	ldw	r8,0(r5)
   2991c:	49c00017 	ldw	r7,0(r9)
   29920:	29400104 	addi	r5,r5,4
   29924:	40bfffcc 	andi	r2,r8,65535
   29928:	14c5383a 	mul	r2,r2,r19
   2992c:	4010d43a 	srli	r8,r8,16
   29930:	38ffffcc 	andi	r3,r7,65535
   29934:	1105883a 	add	r2,r2,r4
   29938:	1008d43a 	srli	r4,r2,16
   2993c:	44d1383a 	mul	r8,r8,r19
   29940:	198d883a 	add	r6,r3,r6
   29944:	10ffffcc 	andi	r3,r2,65535
   29948:	30c7c83a 	sub	r3,r6,r3
   2994c:	380ed43a 	srli	r7,r7,16
   29950:	4105883a 	add	r2,r8,r4
   29954:	180dd43a 	srai	r6,r3,16
   29958:	113fffcc 	andi	r4,r2,65535
   2995c:	390fc83a 	sub	r7,r7,r4
   29960:	398d883a 	add	r6,r7,r6
   29964:	300e943a 	slli	r7,r6,16
   29968:	18ffffcc 	andi	r3,r3,65535
   2996c:	1008d43a 	srli	r4,r2,16
   29970:	38ceb03a 	or	r7,r7,r3
   29974:	49c00015 	stw	r7,0(r9)
   29978:	300dd43a 	srai	r6,r6,16
   2997c:	4a400104 	addi	r9,r9,4
   29980:	a17fe52e 	bgeu	r20,r5,29918 <__alt_data_end+0xfffea518>
   29984:	b0800017 	ldw	r2,0(r22)
   29988:	10000b1e 	bne	r2,zero,299b8 <quorem+0x120>
   2998c:	b0bfff04 	addi	r2,r22,-4
   29990:	a880082e 	bgeu	r21,r2,299b4 <quorem+0x11c>
   29994:	b0ffff17 	ldw	r3,-4(r22)
   29998:	18000326 	beq	r3,zero,299a8 <quorem+0x110>
   2999c:	00000506 	br	299b4 <quorem+0x11c>
   299a0:	10c00017 	ldw	r3,0(r2)
   299a4:	1800031e 	bne	r3,zero,299b4 <quorem+0x11c>
   299a8:	10bfff04 	addi	r2,r2,-4
   299ac:	94bfffc4 	addi	r18,r18,-1
   299b0:	a8bffb36 	bltu	r21,r2,299a0 <__alt_data_end+0xfffea5a0>
   299b4:	84800415 	stw	r18,16(r16)
   299b8:	b80b883a 	mov	r5,r23
   299bc:	8009883a 	mov	r4,r16
   299c0:	002d9fc0 	call	2d9fc <__mcmp>
   299c4:	10002616 	blt	r2,zero,29a60 <quorem+0x1c8>
   299c8:	9cc00044 	addi	r19,r19,1
   299cc:	a805883a 	mov	r2,r21
   299d0:	000b883a 	mov	r5,zero
   299d4:	11000017 	ldw	r4,0(r2)
   299d8:	89800017 	ldw	r6,0(r17)
   299dc:	10800104 	addi	r2,r2,4
   299e0:	20ffffcc 	andi	r3,r4,65535
   299e4:	194b883a 	add	r5,r3,r5
   299e8:	30ffffcc 	andi	r3,r6,65535
   299ec:	28c7c83a 	sub	r3,r5,r3
   299f0:	300cd43a 	srli	r6,r6,16
   299f4:	2008d43a 	srli	r4,r4,16
   299f8:	180bd43a 	srai	r5,r3,16
   299fc:	18ffffcc 	andi	r3,r3,65535
   29a00:	2189c83a 	sub	r4,r4,r6
   29a04:	2149883a 	add	r4,r4,r5
   29a08:	200c943a 	slli	r6,r4,16
   29a0c:	8c400104 	addi	r17,r17,4
   29a10:	200bd43a 	srai	r5,r4,16
   29a14:	30c6b03a 	or	r3,r6,r3
   29a18:	10ffff15 	stw	r3,-4(r2)
   29a1c:	a47fed2e 	bgeu	r20,r17,299d4 <__alt_data_end+0xfffea5d4>
   29a20:	9485883a 	add	r2,r18,r18
   29a24:	1085883a 	add	r2,r2,r2
   29a28:	a887883a 	add	r3,r21,r2
   29a2c:	18800017 	ldw	r2,0(r3)
   29a30:	10000b1e 	bne	r2,zero,29a60 <quorem+0x1c8>
   29a34:	18bfff04 	addi	r2,r3,-4
   29a38:	a880082e 	bgeu	r21,r2,29a5c <quorem+0x1c4>
   29a3c:	18ffff17 	ldw	r3,-4(r3)
   29a40:	18000326 	beq	r3,zero,29a50 <quorem+0x1b8>
   29a44:	00000506 	br	29a5c <quorem+0x1c4>
   29a48:	10c00017 	ldw	r3,0(r2)
   29a4c:	1800031e 	bne	r3,zero,29a5c <quorem+0x1c4>
   29a50:	10bfff04 	addi	r2,r2,-4
   29a54:	94bfffc4 	addi	r18,r18,-1
   29a58:	a8bffb36 	bltu	r21,r2,29a48 <__alt_data_end+0xfffea648>
   29a5c:	84800415 	stw	r18,16(r16)
   29a60:	9805883a 	mov	r2,r19
   29a64:	dfc00817 	ldw	ra,32(sp)
   29a68:	ddc00717 	ldw	r23,28(sp)
   29a6c:	dd800617 	ldw	r22,24(sp)
   29a70:	dd400517 	ldw	r21,20(sp)
   29a74:	dd000417 	ldw	r20,16(sp)
   29a78:	dcc00317 	ldw	r19,12(sp)
   29a7c:	dc800217 	ldw	r18,8(sp)
   29a80:	dc400117 	ldw	r17,4(sp)
   29a84:	dc000017 	ldw	r16,0(sp)
   29a88:	dec00904 	addi	sp,sp,36
   29a8c:	f800283a 	ret
   29a90:	0005883a 	mov	r2,zero
   29a94:	003ff306 	br	29a64 <__alt_data_end+0xfffea664>

00029a98 <_dtoa_r>:
   29a98:	20801017 	ldw	r2,64(r4)
   29a9c:	deffde04 	addi	sp,sp,-136
   29aa0:	df002015 	stw	fp,128(sp)
   29aa4:	dcc01b15 	stw	r19,108(sp)
   29aa8:	dc801a15 	stw	r18,104(sp)
   29aac:	dc401915 	stw	r17,100(sp)
   29ab0:	dc001815 	stw	r16,96(sp)
   29ab4:	dfc02115 	stw	ra,132(sp)
   29ab8:	ddc01f15 	stw	r23,124(sp)
   29abc:	dd801e15 	stw	r22,120(sp)
   29ac0:	dd401d15 	stw	r21,116(sp)
   29ac4:	dd001c15 	stw	r20,112(sp)
   29ac8:	d9c00315 	stw	r7,12(sp)
   29acc:	2039883a 	mov	fp,r4
   29ad0:	3023883a 	mov	r17,r6
   29ad4:	2825883a 	mov	r18,r5
   29ad8:	dc002417 	ldw	r16,144(sp)
   29adc:	3027883a 	mov	r19,r6
   29ae0:	10000826 	beq	r2,zero,29b04 <_dtoa_r+0x6c>
   29ae4:	21801117 	ldw	r6,68(r4)
   29ae8:	00c00044 	movi	r3,1
   29aec:	100b883a 	mov	r5,r2
   29af0:	1986983a 	sll	r3,r3,r6
   29af4:	11800115 	stw	r6,4(r2)
   29af8:	10c00215 	stw	r3,8(r2)
   29afc:	002d1dc0 	call	2d1dc <_Bfree>
   29b00:	e0001015 	stw	zero,64(fp)
   29b04:	88002e16 	blt	r17,zero,29bc0 <_dtoa_r+0x128>
   29b08:	80000015 	stw	zero,0(r16)
   29b0c:	889ffc2c 	andhi	r2,r17,32752
   29b10:	00dffc34 	movhi	r3,32752
   29b14:	10c01c26 	beq	r2,r3,29b88 <_dtoa_r+0xf0>
   29b18:	000d883a 	mov	r6,zero
   29b1c:	000f883a 	mov	r7,zero
   29b20:	9009883a 	mov	r4,r18
   29b24:	980b883a 	mov	r5,r19
   29b28:	00313a00 	call	313a0 <__eqdf2>
   29b2c:	10002b1e 	bne	r2,zero,29bdc <_dtoa_r+0x144>
   29b30:	d9c02317 	ldw	r7,140(sp)
   29b34:	00800044 	movi	r2,1
   29b38:	38800015 	stw	r2,0(r7)
   29b3c:	d8802517 	ldw	r2,148(sp)
   29b40:	10019e26 	beq	r2,zero,2a1bc <_dtoa_r+0x724>
   29b44:	d8c02517 	ldw	r3,148(sp)
   29b48:	008000f4 	movhi	r2,3
   29b4c:	10928244 	addi	r2,r2,18953
   29b50:	18800015 	stw	r2,0(r3)
   29b54:	10bfffc4 	addi	r2,r2,-1
   29b58:	dfc02117 	ldw	ra,132(sp)
   29b5c:	df002017 	ldw	fp,128(sp)
   29b60:	ddc01f17 	ldw	r23,124(sp)
   29b64:	dd801e17 	ldw	r22,120(sp)
   29b68:	dd401d17 	ldw	r21,116(sp)
   29b6c:	dd001c17 	ldw	r20,112(sp)
   29b70:	dcc01b17 	ldw	r19,108(sp)
   29b74:	dc801a17 	ldw	r18,104(sp)
   29b78:	dc401917 	ldw	r17,100(sp)
   29b7c:	dc001817 	ldw	r16,96(sp)
   29b80:	dec02204 	addi	sp,sp,136
   29b84:	f800283a 	ret
   29b88:	d8c02317 	ldw	r3,140(sp)
   29b8c:	0089c3c4 	movi	r2,9999
   29b90:	18800015 	stw	r2,0(r3)
   29b94:	90017726 	beq	r18,zero,2a174 <_dtoa_r+0x6dc>
   29b98:	008000f4 	movhi	r2,3
   29b9c:	10928e04 	addi	r2,r2,19000
   29ba0:	d9002517 	ldw	r4,148(sp)
   29ba4:	203fec26 	beq	r4,zero,29b58 <__alt_data_end+0xfffea758>
   29ba8:	10c000c7 	ldb	r3,3(r2)
   29bac:	1801781e 	bne	r3,zero,2a190 <_dtoa_r+0x6f8>
   29bb0:	10c000c4 	addi	r3,r2,3
   29bb4:	d9802517 	ldw	r6,148(sp)
   29bb8:	30c00015 	stw	r3,0(r6)
   29bbc:	003fe606 	br	29b58 <__alt_data_end+0xfffea758>
   29bc0:	04e00034 	movhi	r19,32768
   29bc4:	9cffffc4 	addi	r19,r19,-1
   29bc8:	00800044 	movi	r2,1
   29bcc:	8ce6703a 	and	r19,r17,r19
   29bd0:	80800015 	stw	r2,0(r16)
   29bd4:	9823883a 	mov	r17,r19
   29bd8:	003fcc06 	br	29b0c <__alt_data_end+0xfffea70c>
   29bdc:	d8800204 	addi	r2,sp,8
   29be0:	d8800015 	stw	r2,0(sp)
   29be4:	d9c00104 	addi	r7,sp,4
   29be8:	900b883a 	mov	r5,r18
   29bec:	980d883a 	mov	r6,r19
   29bf0:	e009883a 	mov	r4,fp
   29bf4:	8820d53a 	srli	r16,r17,20
   29bf8:	002ddc80 	call	2ddc8 <__d2b>
   29bfc:	d8800915 	stw	r2,36(sp)
   29c00:	8001651e 	bne	r16,zero,2a198 <_dtoa_r+0x700>
   29c04:	dd800217 	ldw	r22,8(sp)
   29c08:	dc000117 	ldw	r16,4(sp)
   29c0c:	00800804 	movi	r2,32
   29c10:	b421883a 	add	r16,r22,r16
   29c14:	80c10c84 	addi	r3,r16,1074
   29c18:	10c2d10e 	bge	r2,r3,2a760 <_dtoa_r+0xcc8>
   29c1c:	00801004 	movi	r2,64
   29c20:	81010484 	addi	r4,r16,1042
   29c24:	10c7c83a 	sub	r3,r2,r3
   29c28:	9108d83a 	srl	r4,r18,r4
   29c2c:	88e2983a 	sll	r17,r17,r3
   29c30:	2448b03a 	or	r4,r4,r17
   29c34:	00317540 	call	31754 <__floatunsidf>
   29c38:	017f8434 	movhi	r5,65040
   29c3c:	01800044 	movi	r6,1
   29c40:	1009883a 	mov	r4,r2
   29c44:	194b883a 	add	r5,r3,r5
   29c48:	843fffc4 	addi	r16,r16,-1
   29c4c:	d9801115 	stw	r6,68(sp)
   29c50:	000d883a 	mov	r6,zero
   29c54:	01cffe34 	movhi	r7,16376
   29c58:	00266840 	call	26684 <__subdf3>
   29c5c:	0198dbf4 	movhi	r6,25455
   29c60:	01cff4f4 	movhi	r7,16339
   29c64:	3190d844 	addi	r6,r6,17249
   29c68:	39e1e9c4 	addi	r7,r7,-30809
   29c6c:	1009883a 	mov	r4,r2
   29c70:	180b883a 	mov	r5,r3
   29c74:	0025f6c0 	call	25f6c <__muldf3>
   29c78:	01a2d874 	movhi	r6,35681
   29c7c:	01cff1f4 	movhi	r7,16327
   29c80:	31b22cc4 	addi	r6,r6,-14157
   29c84:	39e28a04 	addi	r7,r7,-30168
   29c88:	180b883a 	mov	r5,r3
   29c8c:	1009883a 	mov	r4,r2
   29c90:	0024dd80 	call	24dd8 <__adddf3>
   29c94:	8009883a 	mov	r4,r16
   29c98:	1029883a 	mov	r20,r2
   29c9c:	1823883a 	mov	r17,r3
   29ca0:	00316780 	call	31678 <__floatsidf>
   29ca4:	019427f4 	movhi	r6,20639
   29ca8:	01cff4f4 	movhi	r7,16339
   29cac:	319e7ec4 	addi	r6,r6,31227
   29cb0:	39d104c4 	addi	r7,r7,17427
   29cb4:	1009883a 	mov	r4,r2
   29cb8:	180b883a 	mov	r5,r3
   29cbc:	0025f6c0 	call	25f6c <__muldf3>
   29cc0:	100d883a 	mov	r6,r2
   29cc4:	180f883a 	mov	r7,r3
   29cc8:	a009883a 	mov	r4,r20
   29ccc:	880b883a 	mov	r5,r17
   29cd0:	0024dd80 	call	24dd8 <__adddf3>
   29cd4:	1009883a 	mov	r4,r2
   29cd8:	180b883a 	mov	r5,r3
   29cdc:	1029883a 	mov	r20,r2
   29ce0:	1823883a 	mov	r17,r3
   29ce4:	00315f80 	call	315f8 <__fixdfsi>
   29ce8:	000d883a 	mov	r6,zero
   29cec:	000f883a 	mov	r7,zero
   29cf0:	a009883a 	mov	r4,r20
   29cf4:	880b883a 	mov	r5,r17
   29cf8:	d8800515 	stw	r2,20(sp)
   29cfc:	00315040 	call	31504 <__ledf2>
   29d00:	10028716 	blt	r2,zero,2a720 <_dtoa_r+0xc88>
   29d04:	d8c00517 	ldw	r3,20(sp)
   29d08:	00800584 	movi	r2,22
   29d0c:	10c27536 	bltu	r2,r3,2a6e4 <_dtoa_r+0xc4c>
   29d10:	180490fa 	slli	r2,r3,3
   29d14:	00c000f4 	movhi	r3,3
   29d18:	18d2aa04 	addi	r3,r3,19112
   29d1c:	1885883a 	add	r2,r3,r2
   29d20:	11000017 	ldw	r4,0(r2)
   29d24:	11400117 	ldw	r5,4(r2)
   29d28:	900d883a 	mov	r6,r18
   29d2c:	980f883a 	mov	r7,r19
   29d30:	00314280 	call	31428 <__gedf2>
   29d34:	00828d0e 	bge	zero,r2,2a76c <_dtoa_r+0xcd4>
   29d38:	d9000517 	ldw	r4,20(sp)
   29d3c:	d8000e15 	stw	zero,56(sp)
   29d40:	213fffc4 	addi	r4,r4,-1
   29d44:	d9000515 	stw	r4,20(sp)
   29d48:	b42dc83a 	sub	r22,r22,r16
   29d4c:	b5bfffc4 	addi	r22,r22,-1
   29d50:	b0026f16 	blt	r22,zero,2a710 <_dtoa_r+0xc78>
   29d54:	d8000815 	stw	zero,32(sp)
   29d58:	d9c00517 	ldw	r7,20(sp)
   29d5c:	38026416 	blt	r7,zero,2a6f0 <_dtoa_r+0xc58>
   29d60:	b1ed883a 	add	r22,r22,r7
   29d64:	d9c00d15 	stw	r7,52(sp)
   29d68:	d8000a15 	stw	zero,40(sp)
   29d6c:	d9800317 	ldw	r6,12(sp)
   29d70:	00800244 	movi	r2,9
   29d74:	11811436 	bltu	r2,r6,2a1c8 <_dtoa_r+0x730>
   29d78:	00800144 	movi	r2,5
   29d7c:	1184e10e 	bge	r2,r6,2b104 <_dtoa_r+0x166c>
   29d80:	31bfff04 	addi	r6,r6,-4
   29d84:	d9800315 	stw	r6,12(sp)
   29d88:	0023883a 	mov	r17,zero
   29d8c:	d9800317 	ldw	r6,12(sp)
   29d90:	008000c4 	movi	r2,3
   29d94:	30836726 	beq	r6,r2,2ab34 <_dtoa_r+0x109c>
   29d98:	1183410e 	bge	r2,r6,2aaa0 <_dtoa_r+0x1008>
   29d9c:	d9c00317 	ldw	r7,12(sp)
   29da0:	00800104 	movi	r2,4
   29da4:	38827c26 	beq	r7,r2,2a798 <_dtoa_r+0xd00>
   29da8:	00800144 	movi	r2,5
   29dac:	3884c41e 	bne	r7,r2,2b0c0 <_dtoa_r+0x1628>
   29db0:	00800044 	movi	r2,1
   29db4:	d8800b15 	stw	r2,44(sp)
   29db8:	d8c00517 	ldw	r3,20(sp)
   29dbc:	d9002217 	ldw	r4,136(sp)
   29dc0:	1907883a 	add	r3,r3,r4
   29dc4:	19800044 	addi	r6,r3,1
   29dc8:	d8c00c15 	stw	r3,48(sp)
   29dcc:	d9800615 	stw	r6,24(sp)
   29dd0:	0183a40e 	bge	zero,r6,2ac64 <_dtoa_r+0x11cc>
   29dd4:	d9800617 	ldw	r6,24(sp)
   29dd8:	3021883a 	mov	r16,r6
   29ddc:	e0001115 	stw	zero,68(fp)
   29de0:	008005c4 	movi	r2,23
   29de4:	1184c92e 	bgeu	r2,r6,2b10c <_dtoa_r+0x1674>
   29de8:	00c00044 	movi	r3,1
   29dec:	00800104 	movi	r2,4
   29df0:	1085883a 	add	r2,r2,r2
   29df4:	11000504 	addi	r4,r2,20
   29df8:	180b883a 	mov	r5,r3
   29dfc:	18c00044 	addi	r3,r3,1
   29e00:	313ffb2e 	bgeu	r6,r4,29df0 <__alt_data_end+0xfffea9f0>
   29e04:	e1401115 	stw	r5,68(fp)
   29e08:	e009883a 	mov	r4,fp
   29e0c:	002d1340 	call	2d134 <_Balloc>
   29e10:	d8800715 	stw	r2,28(sp)
   29e14:	e0801015 	stw	r2,64(fp)
   29e18:	00800384 	movi	r2,14
   29e1c:	1400f736 	bltu	r2,r16,2a1fc <_dtoa_r+0x764>
   29e20:	8800f626 	beq	r17,zero,2a1fc <_dtoa_r+0x764>
   29e24:	d9c00517 	ldw	r7,20(sp)
   29e28:	01c39a0e 	bge	zero,r7,2ac94 <_dtoa_r+0x11fc>
   29e2c:	388003cc 	andi	r2,r7,15
   29e30:	100490fa 	slli	r2,r2,3
   29e34:	382bd13a 	srai	r21,r7,4
   29e38:	00c000f4 	movhi	r3,3
   29e3c:	18d2aa04 	addi	r3,r3,19112
   29e40:	1885883a 	add	r2,r3,r2
   29e44:	a8c0040c 	andi	r3,r21,16
   29e48:	12400017 	ldw	r9,0(r2)
   29e4c:	12000117 	ldw	r8,4(r2)
   29e50:	18037926 	beq	r3,zero,2ac38 <_dtoa_r+0x11a0>
   29e54:	008000f4 	movhi	r2,3
   29e58:	1092a004 	addi	r2,r2,19072
   29e5c:	11800817 	ldw	r6,32(r2)
   29e60:	11c00917 	ldw	r7,36(r2)
   29e64:	9009883a 	mov	r4,r18
   29e68:	980b883a 	mov	r5,r19
   29e6c:	da001715 	stw	r8,92(sp)
   29e70:	da401615 	stw	r9,88(sp)
   29e74:	00256840 	call	25684 <__divdf3>
   29e78:	da001717 	ldw	r8,92(sp)
   29e7c:	da401617 	ldw	r9,88(sp)
   29e80:	ad4003cc 	andi	r21,r21,15
   29e84:	040000c4 	movi	r16,3
   29e88:	1023883a 	mov	r17,r2
   29e8c:	1829883a 	mov	r20,r3
   29e90:	a8001126 	beq	r21,zero,29ed8 <_dtoa_r+0x440>
   29e94:	05c000f4 	movhi	r23,3
   29e98:	bdd2a004 	addi	r23,r23,19072
   29e9c:	4805883a 	mov	r2,r9
   29ea0:	4007883a 	mov	r3,r8
   29ea4:	a980004c 	andi	r6,r21,1
   29ea8:	1009883a 	mov	r4,r2
   29eac:	a82bd07a 	srai	r21,r21,1
   29eb0:	180b883a 	mov	r5,r3
   29eb4:	30000426 	beq	r6,zero,29ec8 <_dtoa_r+0x430>
   29eb8:	b9800017 	ldw	r6,0(r23)
   29ebc:	b9c00117 	ldw	r7,4(r23)
   29ec0:	84000044 	addi	r16,r16,1
   29ec4:	0025f6c0 	call	25f6c <__muldf3>
   29ec8:	bdc00204 	addi	r23,r23,8
   29ecc:	a83ff51e 	bne	r21,zero,29ea4 <__alt_data_end+0xfffeaaa4>
   29ed0:	1013883a 	mov	r9,r2
   29ed4:	1811883a 	mov	r8,r3
   29ed8:	480d883a 	mov	r6,r9
   29edc:	400f883a 	mov	r7,r8
   29ee0:	8809883a 	mov	r4,r17
   29ee4:	a00b883a 	mov	r5,r20
   29ee8:	00256840 	call	25684 <__divdf3>
   29eec:	d8800f15 	stw	r2,60(sp)
   29ef0:	d8c01015 	stw	r3,64(sp)
   29ef4:	d8c00e17 	ldw	r3,56(sp)
   29ef8:	18000626 	beq	r3,zero,29f14 <_dtoa_r+0x47c>
   29efc:	d9000f17 	ldw	r4,60(sp)
   29f00:	d9401017 	ldw	r5,64(sp)
   29f04:	000d883a 	mov	r6,zero
   29f08:	01cffc34 	movhi	r7,16368
   29f0c:	00315040 	call	31504 <__ledf2>
   29f10:	10040b16 	blt	r2,zero,2af40 <_dtoa_r+0x14a8>
   29f14:	8009883a 	mov	r4,r16
   29f18:	00316780 	call	31678 <__floatsidf>
   29f1c:	d9800f17 	ldw	r6,60(sp)
   29f20:	d9c01017 	ldw	r7,64(sp)
   29f24:	1009883a 	mov	r4,r2
   29f28:	180b883a 	mov	r5,r3
   29f2c:	0025f6c0 	call	25f6c <__muldf3>
   29f30:	000d883a 	mov	r6,zero
   29f34:	01d00734 	movhi	r7,16412
   29f38:	1009883a 	mov	r4,r2
   29f3c:	180b883a 	mov	r5,r3
   29f40:	0024dd80 	call	24dd8 <__adddf3>
   29f44:	1021883a 	mov	r16,r2
   29f48:	d8800617 	ldw	r2,24(sp)
   29f4c:	047f3034 	movhi	r17,64704
   29f50:	1c63883a 	add	r17,r3,r17
   29f54:	10031826 	beq	r2,zero,2abb8 <_dtoa_r+0x1120>
   29f58:	d8c00517 	ldw	r3,20(sp)
   29f5c:	db000617 	ldw	r12,24(sp)
   29f60:	d8c01315 	stw	r3,76(sp)
   29f64:	d9000b17 	ldw	r4,44(sp)
   29f68:	20038f26 	beq	r4,zero,2ada8 <_dtoa_r+0x1310>
   29f6c:	60bfffc4 	addi	r2,r12,-1
   29f70:	100490fa 	slli	r2,r2,3
   29f74:	00c000f4 	movhi	r3,3
   29f78:	18d2aa04 	addi	r3,r3,19112
   29f7c:	1885883a 	add	r2,r3,r2
   29f80:	11800017 	ldw	r6,0(r2)
   29f84:	11c00117 	ldw	r7,4(r2)
   29f88:	d8800717 	ldw	r2,28(sp)
   29f8c:	0009883a 	mov	r4,zero
   29f90:	014ff834 	movhi	r5,16352
   29f94:	db001615 	stw	r12,88(sp)
   29f98:	15c00044 	addi	r23,r2,1
   29f9c:	00256840 	call	25684 <__divdf3>
   29fa0:	800d883a 	mov	r6,r16
   29fa4:	880f883a 	mov	r7,r17
   29fa8:	1009883a 	mov	r4,r2
   29fac:	180b883a 	mov	r5,r3
   29fb0:	00266840 	call	26684 <__subdf3>
   29fb4:	d9401017 	ldw	r5,64(sp)
   29fb8:	d9000f17 	ldw	r4,60(sp)
   29fbc:	102b883a 	mov	r21,r2
   29fc0:	d8c01215 	stw	r3,72(sp)
   29fc4:	00315f80 	call	315f8 <__fixdfsi>
   29fc8:	1009883a 	mov	r4,r2
   29fcc:	1029883a 	mov	r20,r2
   29fd0:	00316780 	call	31678 <__floatsidf>
   29fd4:	d9000f17 	ldw	r4,60(sp)
   29fd8:	d9401017 	ldw	r5,64(sp)
   29fdc:	100d883a 	mov	r6,r2
   29fe0:	180f883a 	mov	r7,r3
   29fe4:	00266840 	call	26684 <__subdf3>
   29fe8:	1823883a 	mov	r17,r3
   29fec:	d8c00717 	ldw	r3,28(sp)
   29ff0:	d9401217 	ldw	r5,72(sp)
   29ff4:	a2000c04 	addi	r8,r20,48
   29ff8:	1021883a 	mov	r16,r2
   29ffc:	1a000005 	stb	r8,0(r3)
   2a000:	800d883a 	mov	r6,r16
   2a004:	880f883a 	mov	r7,r17
   2a008:	a809883a 	mov	r4,r21
   2a00c:	4029883a 	mov	r20,r8
   2a010:	00314280 	call	31428 <__gedf2>
   2a014:	00841d16 	blt	zero,r2,2b08c <_dtoa_r+0x15f4>
   2a018:	800d883a 	mov	r6,r16
   2a01c:	880f883a 	mov	r7,r17
   2a020:	0009883a 	mov	r4,zero
   2a024:	014ffc34 	movhi	r5,16368
   2a028:	00266840 	call	26684 <__subdf3>
   2a02c:	d9401217 	ldw	r5,72(sp)
   2a030:	100d883a 	mov	r6,r2
   2a034:	180f883a 	mov	r7,r3
   2a038:	a809883a 	mov	r4,r21
   2a03c:	00314280 	call	31428 <__gedf2>
   2a040:	db001617 	ldw	r12,88(sp)
   2a044:	00840e16 	blt	zero,r2,2b080 <_dtoa_r+0x15e8>
   2a048:	00800044 	movi	r2,1
   2a04c:	13006b0e 	bge	r2,r12,2a1fc <_dtoa_r+0x764>
   2a050:	d9000717 	ldw	r4,28(sp)
   2a054:	dd800f15 	stw	r22,60(sp)
   2a058:	dcc01015 	stw	r19,64(sp)
   2a05c:	2319883a 	add	r12,r4,r12
   2a060:	dcc01217 	ldw	r19,72(sp)
   2a064:	602d883a 	mov	r22,r12
   2a068:	dc801215 	stw	r18,72(sp)
   2a06c:	b825883a 	mov	r18,r23
   2a070:	00000906 	br	2a098 <_dtoa_r+0x600>
   2a074:	00266840 	call	26684 <__subdf3>
   2a078:	a80d883a 	mov	r6,r21
   2a07c:	980f883a 	mov	r7,r19
   2a080:	1009883a 	mov	r4,r2
   2a084:	180b883a 	mov	r5,r3
   2a088:	00315040 	call	31504 <__ledf2>
   2a08c:	1003e816 	blt	r2,zero,2b030 <_dtoa_r+0x1598>
   2a090:	b825883a 	mov	r18,r23
   2a094:	bd83e926 	beq	r23,r22,2b03c <_dtoa_r+0x15a4>
   2a098:	a809883a 	mov	r4,r21
   2a09c:	980b883a 	mov	r5,r19
   2a0a0:	000d883a 	mov	r6,zero
   2a0a4:	01d00934 	movhi	r7,16420
   2a0a8:	0025f6c0 	call	25f6c <__muldf3>
   2a0ac:	000d883a 	mov	r6,zero
   2a0b0:	01d00934 	movhi	r7,16420
   2a0b4:	8009883a 	mov	r4,r16
   2a0b8:	880b883a 	mov	r5,r17
   2a0bc:	102b883a 	mov	r21,r2
   2a0c0:	1827883a 	mov	r19,r3
   2a0c4:	0025f6c0 	call	25f6c <__muldf3>
   2a0c8:	180b883a 	mov	r5,r3
   2a0cc:	1009883a 	mov	r4,r2
   2a0d0:	1821883a 	mov	r16,r3
   2a0d4:	1023883a 	mov	r17,r2
   2a0d8:	00315f80 	call	315f8 <__fixdfsi>
   2a0dc:	1009883a 	mov	r4,r2
   2a0e0:	1029883a 	mov	r20,r2
   2a0e4:	00316780 	call	31678 <__floatsidf>
   2a0e8:	8809883a 	mov	r4,r17
   2a0ec:	800b883a 	mov	r5,r16
   2a0f0:	100d883a 	mov	r6,r2
   2a0f4:	180f883a 	mov	r7,r3
   2a0f8:	00266840 	call	26684 <__subdf3>
   2a0fc:	a5000c04 	addi	r20,r20,48
   2a100:	a80d883a 	mov	r6,r21
   2a104:	980f883a 	mov	r7,r19
   2a108:	1009883a 	mov	r4,r2
   2a10c:	180b883a 	mov	r5,r3
   2a110:	95000005 	stb	r20,0(r18)
   2a114:	1021883a 	mov	r16,r2
   2a118:	1823883a 	mov	r17,r3
   2a11c:	00315040 	call	31504 <__ledf2>
   2a120:	bdc00044 	addi	r23,r23,1
   2a124:	800d883a 	mov	r6,r16
   2a128:	880f883a 	mov	r7,r17
   2a12c:	0009883a 	mov	r4,zero
   2a130:	014ffc34 	movhi	r5,16368
   2a134:	103fcf0e 	bge	r2,zero,2a074 <__alt_data_end+0xfffeac74>
   2a138:	d8c01317 	ldw	r3,76(sp)
   2a13c:	d8c00515 	stw	r3,20(sp)
   2a140:	d9400917 	ldw	r5,36(sp)
   2a144:	e009883a 	mov	r4,fp
   2a148:	002d1dc0 	call	2d1dc <_Bfree>
   2a14c:	d9000517 	ldw	r4,20(sp)
   2a150:	d9802317 	ldw	r6,140(sp)
   2a154:	d9c02517 	ldw	r7,148(sp)
   2a158:	b8000005 	stb	zero,0(r23)
   2a15c:	20800044 	addi	r2,r4,1
   2a160:	30800015 	stw	r2,0(r6)
   2a164:	3802aa26 	beq	r7,zero,2ac10 <_dtoa_r+0x1178>
   2a168:	3dc00015 	stw	r23,0(r7)
   2a16c:	d8800717 	ldw	r2,28(sp)
   2a170:	003e7906 	br	29b58 <__alt_data_end+0xfffea758>
   2a174:	00800434 	movhi	r2,16
   2a178:	10bfffc4 	addi	r2,r2,-1
   2a17c:	88a2703a 	and	r17,r17,r2
   2a180:	883e851e 	bne	r17,zero,29b98 <__alt_data_end+0xfffea798>
   2a184:	008000f4 	movhi	r2,3
   2a188:	10928b04 	addi	r2,r2,18988
   2a18c:	003e8406 	br	29ba0 <__alt_data_end+0xfffea7a0>
   2a190:	10c00204 	addi	r3,r2,8
   2a194:	003e8706 	br	29bb4 <__alt_data_end+0xfffea7b4>
   2a198:	01400434 	movhi	r5,16
   2a19c:	297fffc4 	addi	r5,r5,-1
   2a1a0:	994a703a 	and	r5,r19,r5
   2a1a4:	9009883a 	mov	r4,r18
   2a1a8:	843f0044 	addi	r16,r16,-1023
   2a1ac:	294ffc34 	orhi	r5,r5,16368
   2a1b0:	dd800217 	ldw	r22,8(sp)
   2a1b4:	d8001115 	stw	zero,68(sp)
   2a1b8:	003ea506 	br	29c50 <__alt_data_end+0xfffea850>
   2a1bc:	008000f4 	movhi	r2,3
   2a1c0:	10928204 	addi	r2,r2,18952
   2a1c4:	003e6406 	br	29b58 <__alt_data_end+0xfffea758>
   2a1c8:	e0001115 	stw	zero,68(fp)
   2a1cc:	000b883a 	mov	r5,zero
   2a1d0:	e009883a 	mov	r4,fp
   2a1d4:	002d1340 	call	2d134 <_Balloc>
   2a1d8:	01bfffc4 	movi	r6,-1
   2a1dc:	01c00044 	movi	r7,1
   2a1e0:	d8800715 	stw	r2,28(sp)
   2a1e4:	d9800c15 	stw	r6,48(sp)
   2a1e8:	e0801015 	stw	r2,64(fp)
   2a1ec:	d8000315 	stw	zero,12(sp)
   2a1f0:	d9c00b15 	stw	r7,44(sp)
   2a1f4:	d9800615 	stw	r6,24(sp)
   2a1f8:	d8002215 	stw	zero,136(sp)
   2a1fc:	d8800117 	ldw	r2,4(sp)
   2a200:	10008916 	blt	r2,zero,2a428 <_dtoa_r+0x990>
   2a204:	d9000517 	ldw	r4,20(sp)
   2a208:	00c00384 	movi	r3,14
   2a20c:	19008616 	blt	r3,r4,2a428 <_dtoa_r+0x990>
   2a210:	200490fa 	slli	r2,r4,3
   2a214:	00c000f4 	movhi	r3,3
   2a218:	d9802217 	ldw	r6,136(sp)
   2a21c:	18d2aa04 	addi	r3,r3,19112
   2a220:	1885883a 	add	r2,r3,r2
   2a224:	14000017 	ldw	r16,0(r2)
   2a228:	14400117 	ldw	r17,4(r2)
   2a22c:	30016316 	blt	r6,zero,2a7bc <_dtoa_r+0xd24>
   2a230:	800d883a 	mov	r6,r16
   2a234:	880f883a 	mov	r7,r17
   2a238:	9009883a 	mov	r4,r18
   2a23c:	980b883a 	mov	r5,r19
   2a240:	00256840 	call	25684 <__divdf3>
   2a244:	180b883a 	mov	r5,r3
   2a248:	1009883a 	mov	r4,r2
   2a24c:	00315f80 	call	315f8 <__fixdfsi>
   2a250:	1009883a 	mov	r4,r2
   2a254:	102b883a 	mov	r21,r2
   2a258:	00316780 	call	31678 <__floatsidf>
   2a25c:	800d883a 	mov	r6,r16
   2a260:	880f883a 	mov	r7,r17
   2a264:	1009883a 	mov	r4,r2
   2a268:	180b883a 	mov	r5,r3
   2a26c:	0025f6c0 	call	25f6c <__muldf3>
   2a270:	100d883a 	mov	r6,r2
   2a274:	180f883a 	mov	r7,r3
   2a278:	9009883a 	mov	r4,r18
   2a27c:	980b883a 	mov	r5,r19
   2a280:	00266840 	call	26684 <__subdf3>
   2a284:	d9c00717 	ldw	r7,28(sp)
   2a288:	1009883a 	mov	r4,r2
   2a28c:	a8800c04 	addi	r2,r21,48
   2a290:	38800005 	stb	r2,0(r7)
   2a294:	3dc00044 	addi	r23,r7,1
   2a298:	d9c00617 	ldw	r7,24(sp)
   2a29c:	01800044 	movi	r6,1
   2a2a0:	180b883a 	mov	r5,r3
   2a2a4:	2005883a 	mov	r2,r4
   2a2a8:	39803826 	beq	r7,r6,2a38c <_dtoa_r+0x8f4>
   2a2ac:	000d883a 	mov	r6,zero
   2a2b0:	01d00934 	movhi	r7,16420
   2a2b4:	0025f6c0 	call	25f6c <__muldf3>
   2a2b8:	000d883a 	mov	r6,zero
   2a2bc:	000f883a 	mov	r7,zero
   2a2c0:	1009883a 	mov	r4,r2
   2a2c4:	180b883a 	mov	r5,r3
   2a2c8:	1025883a 	mov	r18,r2
   2a2cc:	1827883a 	mov	r19,r3
   2a2d0:	00313a00 	call	313a0 <__eqdf2>
   2a2d4:	103f9a26 	beq	r2,zero,2a140 <__alt_data_end+0xfffead40>
   2a2d8:	d9c00617 	ldw	r7,24(sp)
   2a2dc:	d8c00717 	ldw	r3,28(sp)
   2a2e0:	b829883a 	mov	r20,r23
   2a2e4:	38bfffc4 	addi	r2,r7,-1
   2a2e8:	18ad883a 	add	r22,r3,r2
   2a2ec:	00000a06 	br	2a318 <_dtoa_r+0x880>
   2a2f0:	0025f6c0 	call	25f6c <__muldf3>
   2a2f4:	000d883a 	mov	r6,zero
   2a2f8:	000f883a 	mov	r7,zero
   2a2fc:	1009883a 	mov	r4,r2
   2a300:	180b883a 	mov	r5,r3
   2a304:	1025883a 	mov	r18,r2
   2a308:	1827883a 	mov	r19,r3
   2a30c:	b829883a 	mov	r20,r23
   2a310:	00313a00 	call	313a0 <__eqdf2>
   2a314:	103f8a26 	beq	r2,zero,2a140 <__alt_data_end+0xfffead40>
   2a318:	800d883a 	mov	r6,r16
   2a31c:	880f883a 	mov	r7,r17
   2a320:	9009883a 	mov	r4,r18
   2a324:	980b883a 	mov	r5,r19
   2a328:	00256840 	call	25684 <__divdf3>
   2a32c:	180b883a 	mov	r5,r3
   2a330:	1009883a 	mov	r4,r2
   2a334:	00315f80 	call	315f8 <__fixdfsi>
   2a338:	1009883a 	mov	r4,r2
   2a33c:	102b883a 	mov	r21,r2
   2a340:	00316780 	call	31678 <__floatsidf>
   2a344:	800d883a 	mov	r6,r16
   2a348:	880f883a 	mov	r7,r17
   2a34c:	1009883a 	mov	r4,r2
   2a350:	180b883a 	mov	r5,r3
   2a354:	0025f6c0 	call	25f6c <__muldf3>
   2a358:	100d883a 	mov	r6,r2
   2a35c:	180f883a 	mov	r7,r3
   2a360:	9009883a 	mov	r4,r18
   2a364:	980b883a 	mov	r5,r19
   2a368:	00266840 	call	26684 <__subdf3>
   2a36c:	aa000c04 	addi	r8,r21,48
   2a370:	a2000005 	stb	r8,0(r20)
   2a374:	000d883a 	mov	r6,zero
   2a378:	01d00934 	movhi	r7,16420
   2a37c:	1009883a 	mov	r4,r2
   2a380:	180b883a 	mov	r5,r3
   2a384:	a5c00044 	addi	r23,r20,1
   2a388:	b53fd91e 	bne	r22,r20,2a2f0 <__alt_data_end+0xfffeaef0>
   2a38c:	100d883a 	mov	r6,r2
   2a390:	180f883a 	mov	r7,r3
   2a394:	1009883a 	mov	r4,r2
   2a398:	180b883a 	mov	r5,r3
   2a39c:	0024dd80 	call	24dd8 <__adddf3>
   2a3a0:	100d883a 	mov	r6,r2
   2a3a4:	180f883a 	mov	r7,r3
   2a3a8:	8009883a 	mov	r4,r16
   2a3ac:	880b883a 	mov	r5,r17
   2a3b0:	1027883a 	mov	r19,r2
   2a3b4:	1825883a 	mov	r18,r3
   2a3b8:	00315040 	call	31504 <__ledf2>
   2a3bc:	10000816 	blt	r2,zero,2a3e0 <_dtoa_r+0x948>
   2a3c0:	980d883a 	mov	r6,r19
   2a3c4:	900f883a 	mov	r7,r18
   2a3c8:	8009883a 	mov	r4,r16
   2a3cc:	880b883a 	mov	r5,r17
   2a3d0:	00313a00 	call	313a0 <__eqdf2>
   2a3d4:	103f5a1e 	bne	r2,zero,2a140 <__alt_data_end+0xfffead40>
   2a3d8:	ad40004c 	andi	r21,r21,1
   2a3dc:	a83f5826 	beq	r21,zero,2a140 <__alt_data_end+0xfffead40>
   2a3e0:	bd3fffc3 	ldbu	r20,-1(r23)
   2a3e4:	b8bfffc4 	addi	r2,r23,-1
   2a3e8:	1007883a 	mov	r3,r2
   2a3ec:	01400e44 	movi	r5,57
   2a3f0:	d9800717 	ldw	r6,28(sp)
   2a3f4:	00000506 	br	2a40c <_dtoa_r+0x974>
   2a3f8:	18ffffc4 	addi	r3,r3,-1
   2a3fc:	11824726 	beq	r2,r6,2ad1c <_dtoa_r+0x1284>
   2a400:	1d000003 	ldbu	r20,0(r3)
   2a404:	102f883a 	mov	r23,r2
   2a408:	10bfffc4 	addi	r2,r2,-1
   2a40c:	a1003fcc 	andi	r4,r20,255
   2a410:	2100201c 	xori	r4,r4,128
   2a414:	213fe004 	addi	r4,r4,-128
   2a418:	217ff726 	beq	r4,r5,2a3f8 <__alt_data_end+0xfffeaff8>
   2a41c:	a2000044 	addi	r8,r20,1
   2a420:	12000005 	stb	r8,0(r2)
   2a424:	003f4606 	br	2a140 <__alt_data_end+0xfffead40>
   2a428:	d9000b17 	ldw	r4,44(sp)
   2a42c:	2000c826 	beq	r4,zero,2a750 <_dtoa_r+0xcb8>
   2a430:	d9800317 	ldw	r6,12(sp)
   2a434:	00c00044 	movi	r3,1
   2a438:	1980f90e 	bge	r3,r6,2a820 <_dtoa_r+0xd88>
   2a43c:	d8800617 	ldw	r2,24(sp)
   2a440:	d8c00a17 	ldw	r3,40(sp)
   2a444:	157fffc4 	addi	r21,r2,-1
   2a448:	1d41f316 	blt	r3,r21,2ac18 <_dtoa_r+0x1180>
   2a44c:	1d6bc83a 	sub	r21,r3,r21
   2a450:	d9c00617 	ldw	r7,24(sp)
   2a454:	3802aa16 	blt	r7,zero,2af00 <_dtoa_r+0x1468>
   2a458:	dd000817 	ldw	r20,32(sp)
   2a45c:	d8800617 	ldw	r2,24(sp)
   2a460:	d8c00817 	ldw	r3,32(sp)
   2a464:	01400044 	movi	r5,1
   2a468:	e009883a 	mov	r4,fp
   2a46c:	1887883a 	add	r3,r3,r2
   2a470:	d8c00815 	stw	r3,32(sp)
   2a474:	b0ad883a 	add	r22,r22,r2
   2a478:	002d5400 	call	2d540 <__i2b>
   2a47c:	1023883a 	mov	r17,r2
   2a480:	a0000826 	beq	r20,zero,2a4a4 <_dtoa_r+0xa0c>
   2a484:	0580070e 	bge	zero,r22,2a4a4 <_dtoa_r+0xa0c>
   2a488:	a005883a 	mov	r2,r20
   2a48c:	b500b916 	blt	r22,r20,2a774 <_dtoa_r+0xcdc>
   2a490:	d9000817 	ldw	r4,32(sp)
   2a494:	a0a9c83a 	sub	r20,r20,r2
   2a498:	b0adc83a 	sub	r22,r22,r2
   2a49c:	2089c83a 	sub	r4,r4,r2
   2a4a0:	d9000815 	stw	r4,32(sp)
   2a4a4:	d9800a17 	ldw	r6,40(sp)
   2a4a8:	0181810e 	bge	zero,r6,2aab0 <_dtoa_r+0x1018>
   2a4ac:	d9c00b17 	ldw	r7,44(sp)
   2a4b0:	3800b326 	beq	r7,zero,2a780 <_dtoa_r+0xce8>
   2a4b4:	a800b226 	beq	r21,zero,2a780 <_dtoa_r+0xce8>
   2a4b8:	880b883a 	mov	r5,r17
   2a4bc:	a80d883a 	mov	r6,r21
   2a4c0:	e009883a 	mov	r4,fp
   2a4c4:	002d7740 	call	2d774 <__pow5mult>
   2a4c8:	d9800917 	ldw	r6,36(sp)
   2a4cc:	100b883a 	mov	r5,r2
   2a4d0:	e009883a 	mov	r4,fp
   2a4d4:	1023883a 	mov	r17,r2
   2a4d8:	002d57c0 	call	2d57c <__multiply>
   2a4dc:	1021883a 	mov	r16,r2
   2a4e0:	d8800a17 	ldw	r2,40(sp)
   2a4e4:	d9400917 	ldw	r5,36(sp)
   2a4e8:	e009883a 	mov	r4,fp
   2a4ec:	1545c83a 	sub	r2,r2,r21
   2a4f0:	d8800a15 	stw	r2,40(sp)
   2a4f4:	002d1dc0 	call	2d1dc <_Bfree>
   2a4f8:	d8c00a17 	ldw	r3,40(sp)
   2a4fc:	18009f1e 	bne	r3,zero,2a77c <_dtoa_r+0xce4>
   2a500:	05c00044 	movi	r23,1
   2a504:	e009883a 	mov	r4,fp
   2a508:	b80b883a 	mov	r5,r23
   2a50c:	002d5400 	call	2d540 <__i2b>
   2a510:	d9000d17 	ldw	r4,52(sp)
   2a514:	102b883a 	mov	r21,r2
   2a518:	2000ce26 	beq	r4,zero,2a854 <_dtoa_r+0xdbc>
   2a51c:	200d883a 	mov	r6,r4
   2a520:	100b883a 	mov	r5,r2
   2a524:	e009883a 	mov	r4,fp
   2a528:	002d7740 	call	2d774 <__pow5mult>
   2a52c:	d9800317 	ldw	r6,12(sp)
   2a530:	102b883a 	mov	r21,r2
   2a534:	b981810e 	bge	r23,r6,2ab3c <_dtoa_r+0x10a4>
   2a538:	0027883a 	mov	r19,zero
   2a53c:	a8800417 	ldw	r2,16(r21)
   2a540:	05c00804 	movi	r23,32
   2a544:	10800104 	addi	r2,r2,4
   2a548:	1085883a 	add	r2,r2,r2
   2a54c:	1085883a 	add	r2,r2,r2
   2a550:	a885883a 	add	r2,r21,r2
   2a554:	11000017 	ldw	r4,0(r2)
   2a558:	002d4280 	call	2d428 <__hi0bits>
   2a55c:	b885c83a 	sub	r2,r23,r2
   2a560:	1585883a 	add	r2,r2,r22
   2a564:	108007cc 	andi	r2,r2,31
   2a568:	1000b326 	beq	r2,zero,2a838 <_dtoa_r+0xda0>
   2a56c:	00c00804 	movi	r3,32
   2a570:	1887c83a 	sub	r3,r3,r2
   2a574:	01000104 	movi	r4,4
   2a578:	20c2cd0e 	bge	r4,r3,2b0b0 <_dtoa_r+0x1618>
   2a57c:	00c00704 	movi	r3,28
   2a580:	1885c83a 	sub	r2,r3,r2
   2a584:	d8c00817 	ldw	r3,32(sp)
   2a588:	a0a9883a 	add	r20,r20,r2
   2a58c:	b0ad883a 	add	r22,r22,r2
   2a590:	1887883a 	add	r3,r3,r2
   2a594:	d8c00815 	stw	r3,32(sp)
   2a598:	d9800817 	ldw	r6,32(sp)
   2a59c:	0180040e 	bge	zero,r6,2a5b0 <_dtoa_r+0xb18>
   2a5a0:	800b883a 	mov	r5,r16
   2a5a4:	e009883a 	mov	r4,fp
   2a5a8:	002d8b40 	call	2d8b4 <__lshift>
   2a5ac:	1021883a 	mov	r16,r2
   2a5b0:	0580050e 	bge	zero,r22,2a5c8 <_dtoa_r+0xb30>
   2a5b4:	a80b883a 	mov	r5,r21
   2a5b8:	b00d883a 	mov	r6,r22
   2a5bc:	e009883a 	mov	r4,fp
   2a5c0:	002d8b40 	call	2d8b4 <__lshift>
   2a5c4:	102b883a 	mov	r21,r2
   2a5c8:	d9c00e17 	ldw	r7,56(sp)
   2a5cc:	3801211e 	bne	r7,zero,2aa54 <_dtoa_r+0xfbc>
   2a5d0:	d9800617 	ldw	r6,24(sp)
   2a5d4:	0181380e 	bge	zero,r6,2aab8 <_dtoa_r+0x1020>
   2a5d8:	d8c00b17 	ldw	r3,44(sp)
   2a5dc:	1800ab1e 	bne	r3,zero,2a88c <_dtoa_r+0xdf4>
   2a5e0:	dc800717 	ldw	r18,28(sp)
   2a5e4:	dcc00617 	ldw	r19,24(sp)
   2a5e8:	9029883a 	mov	r20,r18
   2a5ec:	00000206 	br	2a5f8 <_dtoa_r+0xb60>
   2a5f0:	002d2040 	call	2d204 <__multadd>
   2a5f4:	1021883a 	mov	r16,r2
   2a5f8:	a80b883a 	mov	r5,r21
   2a5fc:	8009883a 	mov	r4,r16
   2a600:	00298980 	call	29898 <quorem>
   2a604:	10800c04 	addi	r2,r2,48
   2a608:	90800005 	stb	r2,0(r18)
   2a60c:	94800044 	addi	r18,r18,1
   2a610:	9507c83a 	sub	r3,r18,r20
   2a614:	000f883a 	mov	r7,zero
   2a618:	01800284 	movi	r6,10
   2a61c:	800b883a 	mov	r5,r16
   2a620:	e009883a 	mov	r4,fp
   2a624:	1cfff216 	blt	r3,r19,2a5f0 <__alt_data_end+0xfffeb1f0>
   2a628:	1011883a 	mov	r8,r2
   2a62c:	d8800617 	ldw	r2,24(sp)
   2a630:	0082370e 	bge	zero,r2,2af10 <_dtoa_r+0x1478>
   2a634:	d9000717 	ldw	r4,28(sp)
   2a638:	0025883a 	mov	r18,zero
   2a63c:	20af883a 	add	r23,r4,r2
   2a640:	01800044 	movi	r6,1
   2a644:	800b883a 	mov	r5,r16
   2a648:	e009883a 	mov	r4,fp
   2a64c:	da001715 	stw	r8,92(sp)
   2a650:	002d8b40 	call	2d8b4 <__lshift>
   2a654:	a80b883a 	mov	r5,r21
   2a658:	1009883a 	mov	r4,r2
   2a65c:	d8800915 	stw	r2,36(sp)
   2a660:	002d9fc0 	call	2d9fc <__mcmp>
   2a664:	da001717 	ldw	r8,92(sp)
   2a668:	0081800e 	bge	zero,r2,2ac6c <_dtoa_r+0x11d4>
   2a66c:	b93fffc3 	ldbu	r4,-1(r23)
   2a670:	b8bfffc4 	addi	r2,r23,-1
   2a674:	1007883a 	mov	r3,r2
   2a678:	01800e44 	movi	r6,57
   2a67c:	d9c00717 	ldw	r7,28(sp)
   2a680:	00000506 	br	2a698 <_dtoa_r+0xc00>
   2a684:	18ffffc4 	addi	r3,r3,-1
   2a688:	11c12326 	beq	r2,r7,2ab18 <_dtoa_r+0x1080>
   2a68c:	19000003 	ldbu	r4,0(r3)
   2a690:	102f883a 	mov	r23,r2
   2a694:	10bfffc4 	addi	r2,r2,-1
   2a698:	21403fcc 	andi	r5,r4,255
   2a69c:	2940201c 	xori	r5,r5,128
   2a6a0:	297fe004 	addi	r5,r5,-128
   2a6a4:	29bff726 	beq	r5,r6,2a684 <__alt_data_end+0xfffeb284>
   2a6a8:	21000044 	addi	r4,r4,1
   2a6ac:	11000005 	stb	r4,0(r2)
   2a6b0:	a80b883a 	mov	r5,r21
   2a6b4:	e009883a 	mov	r4,fp
   2a6b8:	002d1dc0 	call	2d1dc <_Bfree>
   2a6bc:	883ea026 	beq	r17,zero,2a140 <__alt_data_end+0xfffead40>
   2a6c0:	90000426 	beq	r18,zero,2a6d4 <_dtoa_r+0xc3c>
   2a6c4:	94400326 	beq	r18,r17,2a6d4 <_dtoa_r+0xc3c>
   2a6c8:	900b883a 	mov	r5,r18
   2a6cc:	e009883a 	mov	r4,fp
   2a6d0:	002d1dc0 	call	2d1dc <_Bfree>
   2a6d4:	880b883a 	mov	r5,r17
   2a6d8:	e009883a 	mov	r4,fp
   2a6dc:	002d1dc0 	call	2d1dc <_Bfree>
   2a6e0:	003e9706 	br	2a140 <__alt_data_end+0xfffead40>
   2a6e4:	01800044 	movi	r6,1
   2a6e8:	d9800e15 	stw	r6,56(sp)
   2a6ec:	003d9606 	br	29d48 <__alt_data_end+0xfffea948>
   2a6f0:	d8800817 	ldw	r2,32(sp)
   2a6f4:	d8c00517 	ldw	r3,20(sp)
   2a6f8:	d8000d15 	stw	zero,52(sp)
   2a6fc:	10c5c83a 	sub	r2,r2,r3
   2a700:	00c9c83a 	sub	r4,zero,r3
   2a704:	d8800815 	stw	r2,32(sp)
   2a708:	d9000a15 	stw	r4,40(sp)
   2a70c:	003d9706 	br	29d6c <__alt_data_end+0xfffea96c>
   2a710:	05adc83a 	sub	r22,zero,r22
   2a714:	dd800815 	stw	r22,32(sp)
   2a718:	002d883a 	mov	r22,zero
   2a71c:	003d8e06 	br	29d58 <__alt_data_end+0xfffea958>
   2a720:	d9000517 	ldw	r4,20(sp)
   2a724:	00316780 	call	31678 <__floatsidf>
   2a728:	100d883a 	mov	r6,r2
   2a72c:	180f883a 	mov	r7,r3
   2a730:	a009883a 	mov	r4,r20
   2a734:	880b883a 	mov	r5,r17
   2a738:	00313a00 	call	313a0 <__eqdf2>
   2a73c:	103d7126 	beq	r2,zero,29d04 <__alt_data_end+0xfffea904>
   2a740:	d9c00517 	ldw	r7,20(sp)
   2a744:	39ffffc4 	addi	r7,r7,-1
   2a748:	d9c00515 	stw	r7,20(sp)
   2a74c:	003d6d06 	br	29d04 <__alt_data_end+0xfffea904>
   2a750:	dd400a17 	ldw	r21,40(sp)
   2a754:	dd000817 	ldw	r20,32(sp)
   2a758:	0023883a 	mov	r17,zero
   2a75c:	003f4806 	br	2a480 <__alt_data_end+0xfffeb080>
   2a760:	10e3c83a 	sub	r17,r2,r3
   2a764:	9448983a 	sll	r4,r18,r17
   2a768:	003d3206 	br	29c34 <__alt_data_end+0xfffea834>
   2a76c:	d8000e15 	stw	zero,56(sp)
   2a770:	003d7506 	br	29d48 <__alt_data_end+0xfffea948>
   2a774:	b005883a 	mov	r2,r22
   2a778:	003f4506 	br	2a490 <__alt_data_end+0xfffeb090>
   2a77c:	dc000915 	stw	r16,36(sp)
   2a780:	d9800a17 	ldw	r6,40(sp)
   2a784:	d9400917 	ldw	r5,36(sp)
   2a788:	e009883a 	mov	r4,fp
   2a78c:	002d7740 	call	2d774 <__pow5mult>
   2a790:	1021883a 	mov	r16,r2
   2a794:	003f5a06 	br	2a500 <__alt_data_end+0xfffeb100>
   2a798:	01c00044 	movi	r7,1
   2a79c:	d9c00b15 	stw	r7,44(sp)
   2a7a0:	d8802217 	ldw	r2,136(sp)
   2a7a4:	0081280e 	bge	zero,r2,2ac48 <_dtoa_r+0x11b0>
   2a7a8:	100d883a 	mov	r6,r2
   2a7ac:	1021883a 	mov	r16,r2
   2a7b0:	d8800c15 	stw	r2,48(sp)
   2a7b4:	d8800615 	stw	r2,24(sp)
   2a7b8:	003d8806 	br	29ddc <__alt_data_end+0xfffea9dc>
   2a7bc:	d8800617 	ldw	r2,24(sp)
   2a7c0:	00be9b16 	blt	zero,r2,2a230 <__alt_data_end+0xfffeae30>
   2a7c4:	10010f1e 	bne	r2,zero,2ac04 <_dtoa_r+0x116c>
   2a7c8:	880b883a 	mov	r5,r17
   2a7cc:	000d883a 	mov	r6,zero
   2a7d0:	01d00534 	movhi	r7,16404
   2a7d4:	8009883a 	mov	r4,r16
   2a7d8:	0025f6c0 	call	25f6c <__muldf3>
   2a7dc:	900d883a 	mov	r6,r18
   2a7e0:	980f883a 	mov	r7,r19
   2a7e4:	1009883a 	mov	r4,r2
   2a7e8:	180b883a 	mov	r5,r3
   2a7ec:	00314280 	call	31428 <__gedf2>
   2a7f0:	002b883a 	mov	r21,zero
   2a7f4:	0023883a 	mov	r17,zero
   2a7f8:	1000bf16 	blt	r2,zero,2aaf8 <_dtoa_r+0x1060>
   2a7fc:	d9802217 	ldw	r6,136(sp)
   2a800:	ddc00717 	ldw	r23,28(sp)
   2a804:	018c303a 	nor	r6,zero,r6
   2a808:	d9800515 	stw	r6,20(sp)
   2a80c:	a80b883a 	mov	r5,r21
   2a810:	e009883a 	mov	r4,fp
   2a814:	002d1dc0 	call	2d1dc <_Bfree>
   2a818:	883e4926 	beq	r17,zero,2a140 <__alt_data_end+0xfffead40>
   2a81c:	003fad06 	br	2a6d4 <__alt_data_end+0xfffeb2d4>
   2a820:	d9c01117 	ldw	r7,68(sp)
   2a824:	3801bc26 	beq	r7,zero,2af18 <_dtoa_r+0x1480>
   2a828:	10810cc4 	addi	r2,r2,1075
   2a82c:	dd400a17 	ldw	r21,40(sp)
   2a830:	dd000817 	ldw	r20,32(sp)
   2a834:	003f0a06 	br	2a460 <__alt_data_end+0xfffeb060>
   2a838:	00800704 	movi	r2,28
   2a83c:	d9000817 	ldw	r4,32(sp)
   2a840:	a0a9883a 	add	r20,r20,r2
   2a844:	b0ad883a 	add	r22,r22,r2
   2a848:	2089883a 	add	r4,r4,r2
   2a84c:	d9000815 	stw	r4,32(sp)
   2a850:	003f5106 	br	2a598 <__alt_data_end+0xfffeb198>
   2a854:	d8c00317 	ldw	r3,12(sp)
   2a858:	b8c1fc0e 	bge	r23,r3,2b04c <_dtoa_r+0x15b4>
   2a85c:	0027883a 	mov	r19,zero
   2a860:	b805883a 	mov	r2,r23
   2a864:	003f3e06 	br	2a560 <__alt_data_end+0xfffeb160>
   2a868:	880b883a 	mov	r5,r17
   2a86c:	e009883a 	mov	r4,fp
   2a870:	000f883a 	mov	r7,zero
   2a874:	01800284 	movi	r6,10
   2a878:	002d2040 	call	2d204 <__multadd>
   2a87c:	d9000c17 	ldw	r4,48(sp)
   2a880:	1023883a 	mov	r17,r2
   2a884:	0102040e 	bge	zero,r4,2b098 <_dtoa_r+0x1600>
   2a888:	d9000615 	stw	r4,24(sp)
   2a88c:	0500050e 	bge	zero,r20,2a8a4 <_dtoa_r+0xe0c>
   2a890:	880b883a 	mov	r5,r17
   2a894:	a00d883a 	mov	r6,r20
   2a898:	e009883a 	mov	r4,fp
   2a89c:	002d8b40 	call	2d8b4 <__lshift>
   2a8a0:	1023883a 	mov	r17,r2
   2a8a4:	9801241e 	bne	r19,zero,2ad38 <_dtoa_r+0x12a0>
   2a8a8:	8829883a 	mov	r20,r17
   2a8ac:	d9000617 	ldw	r4,24(sp)
   2a8b0:	dcc00717 	ldw	r19,28(sp)
   2a8b4:	9480004c 	andi	r18,r18,1
   2a8b8:	20bfffc4 	addi	r2,r4,-1
   2a8bc:	9885883a 	add	r2,r19,r2
   2a8c0:	d8800415 	stw	r2,16(sp)
   2a8c4:	dc800615 	stw	r18,24(sp)
   2a8c8:	a80b883a 	mov	r5,r21
   2a8cc:	8009883a 	mov	r4,r16
   2a8d0:	00298980 	call	29898 <quorem>
   2a8d4:	880b883a 	mov	r5,r17
   2a8d8:	8009883a 	mov	r4,r16
   2a8dc:	102f883a 	mov	r23,r2
   2a8e0:	002d9fc0 	call	2d9fc <__mcmp>
   2a8e4:	a80b883a 	mov	r5,r21
   2a8e8:	a00d883a 	mov	r6,r20
   2a8ec:	e009883a 	mov	r4,fp
   2a8f0:	102d883a 	mov	r22,r2
   2a8f4:	002da5c0 	call	2da5c <__mdiff>
   2a8f8:	1007883a 	mov	r3,r2
   2a8fc:	10800317 	ldw	r2,12(r2)
   2a900:	bc800c04 	addi	r18,r23,48
   2a904:	180b883a 	mov	r5,r3
   2a908:	10004e1e 	bne	r2,zero,2aa44 <_dtoa_r+0xfac>
   2a90c:	8009883a 	mov	r4,r16
   2a910:	d8c01615 	stw	r3,88(sp)
   2a914:	002d9fc0 	call	2d9fc <__mcmp>
   2a918:	d8c01617 	ldw	r3,88(sp)
   2a91c:	e009883a 	mov	r4,fp
   2a920:	d8801615 	stw	r2,88(sp)
   2a924:	180b883a 	mov	r5,r3
   2a928:	002d1dc0 	call	2d1dc <_Bfree>
   2a92c:	d8801617 	ldw	r2,88(sp)
   2a930:	1000041e 	bne	r2,zero,2a944 <_dtoa_r+0xeac>
   2a934:	d9800317 	ldw	r6,12(sp)
   2a938:	3000021e 	bne	r6,zero,2a944 <_dtoa_r+0xeac>
   2a93c:	d8c00617 	ldw	r3,24(sp)
   2a940:	18003726 	beq	r3,zero,2aa20 <_dtoa_r+0xf88>
   2a944:	b0002016 	blt	r22,zero,2a9c8 <_dtoa_r+0xf30>
   2a948:	b000041e 	bne	r22,zero,2a95c <_dtoa_r+0xec4>
   2a94c:	d9000317 	ldw	r4,12(sp)
   2a950:	2000021e 	bne	r4,zero,2a95c <_dtoa_r+0xec4>
   2a954:	d8c00617 	ldw	r3,24(sp)
   2a958:	18001b26 	beq	r3,zero,2a9c8 <_dtoa_r+0xf30>
   2a95c:	00810716 	blt	zero,r2,2ad7c <_dtoa_r+0x12e4>
   2a960:	d8c00417 	ldw	r3,16(sp)
   2a964:	9d800044 	addi	r22,r19,1
   2a968:	9c800005 	stb	r18,0(r19)
   2a96c:	b02f883a 	mov	r23,r22
   2a970:	98c10626 	beq	r19,r3,2ad8c <_dtoa_r+0x12f4>
   2a974:	800b883a 	mov	r5,r16
   2a978:	000f883a 	mov	r7,zero
   2a97c:	01800284 	movi	r6,10
   2a980:	e009883a 	mov	r4,fp
   2a984:	002d2040 	call	2d204 <__multadd>
   2a988:	1021883a 	mov	r16,r2
   2a98c:	000f883a 	mov	r7,zero
   2a990:	01800284 	movi	r6,10
   2a994:	880b883a 	mov	r5,r17
   2a998:	e009883a 	mov	r4,fp
   2a99c:	8d002526 	beq	r17,r20,2aa34 <_dtoa_r+0xf9c>
   2a9a0:	002d2040 	call	2d204 <__multadd>
   2a9a4:	a00b883a 	mov	r5,r20
   2a9a8:	000f883a 	mov	r7,zero
   2a9ac:	01800284 	movi	r6,10
   2a9b0:	e009883a 	mov	r4,fp
   2a9b4:	1023883a 	mov	r17,r2
   2a9b8:	002d2040 	call	2d204 <__multadd>
   2a9bc:	1029883a 	mov	r20,r2
   2a9c0:	b027883a 	mov	r19,r22
   2a9c4:	003fc006 	br	2a8c8 <__alt_data_end+0xfffeb4c8>
   2a9c8:	9011883a 	mov	r8,r18
   2a9cc:	00800e0e 	bge	zero,r2,2aa08 <_dtoa_r+0xf70>
   2a9d0:	800b883a 	mov	r5,r16
   2a9d4:	01800044 	movi	r6,1
   2a9d8:	e009883a 	mov	r4,fp
   2a9dc:	da001715 	stw	r8,92(sp)
   2a9e0:	002d8b40 	call	2d8b4 <__lshift>
   2a9e4:	a80b883a 	mov	r5,r21
   2a9e8:	1009883a 	mov	r4,r2
   2a9ec:	1021883a 	mov	r16,r2
   2a9f0:	002d9fc0 	call	2d9fc <__mcmp>
   2a9f4:	da001717 	ldw	r8,92(sp)
   2a9f8:	0081960e 	bge	zero,r2,2b054 <_dtoa_r+0x15bc>
   2a9fc:	00800e44 	movi	r2,57
   2aa00:	40817026 	beq	r8,r2,2afc4 <_dtoa_r+0x152c>
   2aa04:	ba000c44 	addi	r8,r23,49
   2aa08:	8825883a 	mov	r18,r17
   2aa0c:	9dc00044 	addi	r23,r19,1
   2aa10:	9a000005 	stb	r8,0(r19)
   2aa14:	a023883a 	mov	r17,r20
   2aa18:	dc000915 	stw	r16,36(sp)
   2aa1c:	003f2406 	br	2a6b0 <__alt_data_end+0xfffeb2b0>
   2aa20:	00800e44 	movi	r2,57
   2aa24:	9011883a 	mov	r8,r18
   2aa28:	90816626 	beq	r18,r2,2afc4 <_dtoa_r+0x152c>
   2aa2c:	05bff516 	blt	zero,r22,2aa04 <__alt_data_end+0xfffeb604>
   2aa30:	003ff506 	br	2aa08 <__alt_data_end+0xfffeb608>
   2aa34:	002d2040 	call	2d204 <__multadd>
   2aa38:	1023883a 	mov	r17,r2
   2aa3c:	1029883a 	mov	r20,r2
   2aa40:	003fdf06 	br	2a9c0 <__alt_data_end+0xfffeb5c0>
   2aa44:	e009883a 	mov	r4,fp
   2aa48:	002d1dc0 	call	2d1dc <_Bfree>
   2aa4c:	00800044 	movi	r2,1
   2aa50:	003fbc06 	br	2a944 <__alt_data_end+0xfffeb544>
   2aa54:	a80b883a 	mov	r5,r21
   2aa58:	8009883a 	mov	r4,r16
   2aa5c:	002d9fc0 	call	2d9fc <__mcmp>
   2aa60:	103edb0e 	bge	r2,zero,2a5d0 <__alt_data_end+0xfffeb1d0>
   2aa64:	800b883a 	mov	r5,r16
   2aa68:	000f883a 	mov	r7,zero
   2aa6c:	01800284 	movi	r6,10
   2aa70:	e009883a 	mov	r4,fp
   2aa74:	002d2040 	call	2d204 <__multadd>
   2aa78:	1021883a 	mov	r16,r2
   2aa7c:	d8800517 	ldw	r2,20(sp)
   2aa80:	d8c00b17 	ldw	r3,44(sp)
   2aa84:	10bfffc4 	addi	r2,r2,-1
   2aa88:	d8800515 	stw	r2,20(sp)
   2aa8c:	183f761e 	bne	r3,zero,2a868 <__alt_data_end+0xfffeb468>
   2aa90:	d9000c17 	ldw	r4,48(sp)
   2aa94:	0101730e 	bge	zero,r4,2b064 <_dtoa_r+0x15cc>
   2aa98:	d9000615 	stw	r4,24(sp)
   2aa9c:	003ed006 	br	2a5e0 <__alt_data_end+0xfffeb1e0>
   2aaa0:	00800084 	movi	r2,2
   2aaa4:	3081861e 	bne	r6,r2,2b0c0 <_dtoa_r+0x1628>
   2aaa8:	d8000b15 	stw	zero,44(sp)
   2aaac:	003f3c06 	br	2a7a0 <__alt_data_end+0xfffeb3a0>
   2aab0:	dc000917 	ldw	r16,36(sp)
   2aab4:	003e9206 	br	2a500 <__alt_data_end+0xfffeb100>
   2aab8:	d9c00317 	ldw	r7,12(sp)
   2aabc:	00800084 	movi	r2,2
   2aac0:	11fec50e 	bge	r2,r7,2a5d8 <__alt_data_end+0xfffeb1d8>
   2aac4:	d9000617 	ldw	r4,24(sp)
   2aac8:	20013c1e 	bne	r4,zero,2afbc <_dtoa_r+0x1524>
   2aacc:	a80b883a 	mov	r5,r21
   2aad0:	000f883a 	mov	r7,zero
   2aad4:	01800144 	movi	r6,5
   2aad8:	e009883a 	mov	r4,fp
   2aadc:	002d2040 	call	2d204 <__multadd>
   2aae0:	100b883a 	mov	r5,r2
   2aae4:	8009883a 	mov	r4,r16
   2aae8:	102b883a 	mov	r21,r2
   2aaec:	002d9fc0 	call	2d9fc <__mcmp>
   2aaf0:	dc000915 	stw	r16,36(sp)
   2aaf4:	00bf410e 	bge	zero,r2,2a7fc <__alt_data_end+0xfffeb3fc>
   2aaf8:	d9c00717 	ldw	r7,28(sp)
   2aafc:	00800c44 	movi	r2,49
   2ab00:	38800005 	stb	r2,0(r7)
   2ab04:	d8800517 	ldw	r2,20(sp)
   2ab08:	3dc00044 	addi	r23,r7,1
   2ab0c:	10800044 	addi	r2,r2,1
   2ab10:	d8800515 	stw	r2,20(sp)
   2ab14:	003f3d06 	br	2a80c <__alt_data_end+0xfffeb40c>
   2ab18:	d9800517 	ldw	r6,20(sp)
   2ab1c:	d9c00717 	ldw	r7,28(sp)
   2ab20:	00800c44 	movi	r2,49
   2ab24:	31800044 	addi	r6,r6,1
   2ab28:	d9800515 	stw	r6,20(sp)
   2ab2c:	38800005 	stb	r2,0(r7)
   2ab30:	003edf06 	br	2a6b0 <__alt_data_end+0xfffeb2b0>
   2ab34:	d8000b15 	stw	zero,44(sp)
   2ab38:	003c9f06 	br	29db8 <__alt_data_end+0xfffea9b8>
   2ab3c:	903e7e1e 	bne	r18,zero,2a538 <__alt_data_end+0xfffeb138>
   2ab40:	00800434 	movhi	r2,16
   2ab44:	10bfffc4 	addi	r2,r2,-1
   2ab48:	9884703a 	and	r2,r19,r2
   2ab4c:	1000ea1e 	bne	r2,zero,2aef8 <_dtoa_r+0x1460>
   2ab50:	9cdffc2c 	andhi	r19,r19,32752
   2ab54:	9800e826 	beq	r19,zero,2aef8 <_dtoa_r+0x1460>
   2ab58:	d9c00817 	ldw	r7,32(sp)
   2ab5c:	b5800044 	addi	r22,r22,1
   2ab60:	04c00044 	movi	r19,1
   2ab64:	39c00044 	addi	r7,r7,1
   2ab68:	d9c00815 	stw	r7,32(sp)
   2ab6c:	d8800d17 	ldw	r2,52(sp)
   2ab70:	103e721e 	bne	r2,zero,2a53c <__alt_data_end+0xfffeb13c>
   2ab74:	00800044 	movi	r2,1
   2ab78:	003e7906 	br	2a560 <__alt_data_end+0xfffeb160>
   2ab7c:	8009883a 	mov	r4,r16
   2ab80:	00316780 	call	31678 <__floatsidf>
   2ab84:	d9800f17 	ldw	r6,60(sp)
   2ab88:	d9c01017 	ldw	r7,64(sp)
   2ab8c:	1009883a 	mov	r4,r2
   2ab90:	180b883a 	mov	r5,r3
   2ab94:	0025f6c0 	call	25f6c <__muldf3>
   2ab98:	000d883a 	mov	r6,zero
   2ab9c:	01d00734 	movhi	r7,16412
   2aba0:	1009883a 	mov	r4,r2
   2aba4:	180b883a 	mov	r5,r3
   2aba8:	0024dd80 	call	24dd8 <__adddf3>
   2abac:	047f3034 	movhi	r17,64704
   2abb0:	1021883a 	mov	r16,r2
   2abb4:	1c63883a 	add	r17,r3,r17
   2abb8:	d9000f17 	ldw	r4,60(sp)
   2abbc:	d9401017 	ldw	r5,64(sp)
   2abc0:	000d883a 	mov	r6,zero
   2abc4:	01d00534 	movhi	r7,16404
   2abc8:	00266840 	call	26684 <__subdf3>
   2abcc:	800d883a 	mov	r6,r16
   2abd0:	880f883a 	mov	r7,r17
   2abd4:	1009883a 	mov	r4,r2
   2abd8:	180b883a 	mov	r5,r3
   2abdc:	102b883a 	mov	r21,r2
   2abe0:	1829883a 	mov	r20,r3
   2abe4:	00314280 	call	31428 <__gedf2>
   2abe8:	00806c16 	blt	zero,r2,2ad9c <_dtoa_r+0x1304>
   2abec:	89e0003c 	xorhi	r7,r17,32768
   2abf0:	800d883a 	mov	r6,r16
   2abf4:	a809883a 	mov	r4,r21
   2abf8:	a00b883a 	mov	r5,r20
   2abfc:	00315040 	call	31504 <__ledf2>
   2ac00:	103d7e0e 	bge	r2,zero,2a1fc <__alt_data_end+0xfffeadfc>
   2ac04:	002b883a 	mov	r21,zero
   2ac08:	0023883a 	mov	r17,zero
   2ac0c:	003efb06 	br	2a7fc <__alt_data_end+0xfffeb3fc>
   2ac10:	d8800717 	ldw	r2,28(sp)
   2ac14:	003bd006 	br	29b58 <__alt_data_end+0xfffea758>
   2ac18:	d9000a17 	ldw	r4,40(sp)
   2ac1c:	d9800d17 	ldw	r6,52(sp)
   2ac20:	dd400a15 	stw	r21,40(sp)
   2ac24:	a905c83a 	sub	r2,r21,r4
   2ac28:	308d883a 	add	r6,r6,r2
   2ac2c:	d9800d15 	stw	r6,52(sp)
   2ac30:	002b883a 	mov	r21,zero
   2ac34:	003e0606 	br	2a450 <__alt_data_end+0xfffeb050>
   2ac38:	9023883a 	mov	r17,r18
   2ac3c:	9829883a 	mov	r20,r19
   2ac40:	04000084 	movi	r16,2
   2ac44:	003c9206 	br	29e90 <__alt_data_end+0xfffeaa90>
   2ac48:	04000044 	movi	r16,1
   2ac4c:	dc000c15 	stw	r16,48(sp)
   2ac50:	dc000615 	stw	r16,24(sp)
   2ac54:	dc002215 	stw	r16,136(sp)
   2ac58:	e0001115 	stw	zero,68(fp)
   2ac5c:	000b883a 	mov	r5,zero
   2ac60:	003c6906 	br	29e08 <__alt_data_end+0xfffeaa08>
   2ac64:	3021883a 	mov	r16,r6
   2ac68:	003ffb06 	br	2ac58 <__alt_data_end+0xfffeb858>
   2ac6c:	1000021e 	bne	r2,zero,2ac78 <_dtoa_r+0x11e0>
   2ac70:	4200004c 	andi	r8,r8,1
   2ac74:	403e7d1e 	bne	r8,zero,2a66c <__alt_data_end+0xfffeb26c>
   2ac78:	01000c04 	movi	r4,48
   2ac7c:	00000106 	br	2ac84 <_dtoa_r+0x11ec>
   2ac80:	102f883a 	mov	r23,r2
   2ac84:	b8bfffc4 	addi	r2,r23,-1
   2ac88:	10c00007 	ldb	r3,0(r2)
   2ac8c:	193ffc26 	beq	r3,r4,2ac80 <__alt_data_end+0xfffeb880>
   2ac90:	003e8706 	br	2a6b0 <__alt_data_end+0xfffeb2b0>
   2ac94:	d8800517 	ldw	r2,20(sp)
   2ac98:	00a3c83a 	sub	r17,zero,r2
   2ac9c:	8800a426 	beq	r17,zero,2af30 <_dtoa_r+0x1498>
   2aca0:	888003cc 	andi	r2,r17,15
   2aca4:	100490fa 	slli	r2,r2,3
   2aca8:	00c000f4 	movhi	r3,3
   2acac:	18d2aa04 	addi	r3,r3,19112
   2acb0:	1885883a 	add	r2,r3,r2
   2acb4:	11800017 	ldw	r6,0(r2)
   2acb8:	11c00117 	ldw	r7,4(r2)
   2acbc:	9009883a 	mov	r4,r18
   2acc0:	980b883a 	mov	r5,r19
   2acc4:	8823d13a 	srai	r17,r17,4
   2acc8:	0025f6c0 	call	25f6c <__muldf3>
   2accc:	d8800f15 	stw	r2,60(sp)
   2acd0:	d8c01015 	stw	r3,64(sp)
   2acd4:	8800e826 	beq	r17,zero,2b078 <_dtoa_r+0x15e0>
   2acd8:	050000f4 	movhi	r20,3
   2acdc:	a512a004 	addi	r20,r20,19072
   2ace0:	04000084 	movi	r16,2
   2ace4:	8980004c 	andi	r6,r17,1
   2ace8:	1009883a 	mov	r4,r2
   2acec:	8823d07a 	srai	r17,r17,1
   2acf0:	180b883a 	mov	r5,r3
   2acf4:	30000426 	beq	r6,zero,2ad08 <_dtoa_r+0x1270>
   2acf8:	a1800017 	ldw	r6,0(r20)
   2acfc:	a1c00117 	ldw	r7,4(r20)
   2ad00:	84000044 	addi	r16,r16,1
   2ad04:	0025f6c0 	call	25f6c <__muldf3>
   2ad08:	a5000204 	addi	r20,r20,8
   2ad0c:	883ff51e 	bne	r17,zero,2ace4 <__alt_data_end+0xfffeb8e4>
   2ad10:	d8800f15 	stw	r2,60(sp)
   2ad14:	d8c01015 	stw	r3,64(sp)
   2ad18:	003c7606 	br	29ef4 <__alt_data_end+0xfffeaaf4>
   2ad1c:	00c00c04 	movi	r3,48
   2ad20:	10c00005 	stb	r3,0(r2)
   2ad24:	d8c00517 	ldw	r3,20(sp)
   2ad28:	bd3fffc3 	ldbu	r20,-1(r23)
   2ad2c:	18c00044 	addi	r3,r3,1
   2ad30:	d8c00515 	stw	r3,20(sp)
   2ad34:	003db906 	br	2a41c <__alt_data_end+0xfffeb01c>
   2ad38:	89400117 	ldw	r5,4(r17)
   2ad3c:	e009883a 	mov	r4,fp
   2ad40:	002d1340 	call	2d134 <_Balloc>
   2ad44:	89800417 	ldw	r6,16(r17)
   2ad48:	89400304 	addi	r5,r17,12
   2ad4c:	11000304 	addi	r4,r2,12
   2ad50:	31800084 	addi	r6,r6,2
   2ad54:	318d883a 	add	r6,r6,r6
   2ad58:	318d883a 	add	r6,r6,r6
   2ad5c:	1027883a 	mov	r19,r2
   2ad60:	002cd680 	call	2cd68 <memcpy>
   2ad64:	01800044 	movi	r6,1
   2ad68:	980b883a 	mov	r5,r19
   2ad6c:	e009883a 	mov	r4,fp
   2ad70:	002d8b40 	call	2d8b4 <__lshift>
   2ad74:	1029883a 	mov	r20,r2
   2ad78:	003ecc06 	br	2a8ac <__alt_data_end+0xfffeb4ac>
   2ad7c:	00800e44 	movi	r2,57
   2ad80:	90809026 	beq	r18,r2,2afc4 <_dtoa_r+0x152c>
   2ad84:	92000044 	addi	r8,r18,1
   2ad88:	003f1f06 	br	2aa08 <__alt_data_end+0xfffeb608>
   2ad8c:	9011883a 	mov	r8,r18
   2ad90:	8825883a 	mov	r18,r17
   2ad94:	a023883a 	mov	r17,r20
   2ad98:	003e2906 	br	2a640 <__alt_data_end+0xfffeb240>
   2ad9c:	002b883a 	mov	r21,zero
   2ada0:	0023883a 	mov	r17,zero
   2ada4:	003f5406 	br	2aaf8 <__alt_data_end+0xfffeb6f8>
   2ada8:	61bfffc4 	addi	r6,r12,-1
   2adac:	300490fa 	slli	r2,r6,3
   2adb0:	00c000f4 	movhi	r3,3
   2adb4:	18d2aa04 	addi	r3,r3,19112
   2adb8:	1885883a 	add	r2,r3,r2
   2adbc:	11000017 	ldw	r4,0(r2)
   2adc0:	11400117 	ldw	r5,4(r2)
   2adc4:	d8800717 	ldw	r2,28(sp)
   2adc8:	880f883a 	mov	r7,r17
   2adcc:	d9801215 	stw	r6,72(sp)
   2add0:	800d883a 	mov	r6,r16
   2add4:	db001615 	stw	r12,88(sp)
   2add8:	15c00044 	addi	r23,r2,1
   2addc:	0025f6c0 	call	25f6c <__muldf3>
   2ade0:	d9401017 	ldw	r5,64(sp)
   2ade4:	d9000f17 	ldw	r4,60(sp)
   2ade8:	d8c01515 	stw	r3,84(sp)
   2adec:	d8801415 	stw	r2,80(sp)
   2adf0:	00315f80 	call	315f8 <__fixdfsi>
   2adf4:	1009883a 	mov	r4,r2
   2adf8:	1021883a 	mov	r16,r2
   2adfc:	00316780 	call	31678 <__floatsidf>
   2ae00:	d9000f17 	ldw	r4,60(sp)
   2ae04:	d9401017 	ldw	r5,64(sp)
   2ae08:	100d883a 	mov	r6,r2
   2ae0c:	180f883a 	mov	r7,r3
   2ae10:	00266840 	call	26684 <__subdf3>
   2ae14:	1829883a 	mov	r20,r3
   2ae18:	d8c00717 	ldw	r3,28(sp)
   2ae1c:	84000c04 	addi	r16,r16,48
   2ae20:	1023883a 	mov	r17,r2
   2ae24:	1c000005 	stb	r16,0(r3)
   2ae28:	db001617 	ldw	r12,88(sp)
   2ae2c:	00800044 	movi	r2,1
   2ae30:	60802226 	beq	r12,r2,2aebc <_dtoa_r+0x1424>
   2ae34:	d9c00717 	ldw	r7,28(sp)
   2ae38:	8805883a 	mov	r2,r17
   2ae3c:	b82b883a 	mov	r21,r23
   2ae40:	3b19883a 	add	r12,r7,r12
   2ae44:	6023883a 	mov	r17,r12
   2ae48:	a007883a 	mov	r3,r20
   2ae4c:	dc800f15 	stw	r18,60(sp)
   2ae50:	000d883a 	mov	r6,zero
   2ae54:	01d00934 	movhi	r7,16420
   2ae58:	1009883a 	mov	r4,r2
   2ae5c:	180b883a 	mov	r5,r3
   2ae60:	0025f6c0 	call	25f6c <__muldf3>
   2ae64:	180b883a 	mov	r5,r3
   2ae68:	1009883a 	mov	r4,r2
   2ae6c:	1829883a 	mov	r20,r3
   2ae70:	1025883a 	mov	r18,r2
   2ae74:	00315f80 	call	315f8 <__fixdfsi>
   2ae78:	1009883a 	mov	r4,r2
   2ae7c:	1021883a 	mov	r16,r2
   2ae80:	00316780 	call	31678 <__floatsidf>
   2ae84:	100d883a 	mov	r6,r2
   2ae88:	180f883a 	mov	r7,r3
   2ae8c:	9009883a 	mov	r4,r18
   2ae90:	a00b883a 	mov	r5,r20
   2ae94:	84000c04 	addi	r16,r16,48
   2ae98:	00266840 	call	26684 <__subdf3>
   2ae9c:	ad400044 	addi	r21,r21,1
   2aea0:	ac3fffc5 	stb	r16,-1(r21)
   2aea4:	ac7fea1e 	bne	r21,r17,2ae50 <__alt_data_end+0xfffeba50>
   2aea8:	1023883a 	mov	r17,r2
   2aeac:	d8801217 	ldw	r2,72(sp)
   2aeb0:	dc800f17 	ldw	r18,60(sp)
   2aeb4:	1829883a 	mov	r20,r3
   2aeb8:	b8af883a 	add	r23,r23,r2
   2aebc:	d9001417 	ldw	r4,80(sp)
   2aec0:	d9401517 	ldw	r5,84(sp)
   2aec4:	000d883a 	mov	r6,zero
   2aec8:	01cff834 	movhi	r7,16352
   2aecc:	0024dd80 	call	24dd8 <__adddf3>
   2aed0:	880d883a 	mov	r6,r17
   2aed4:	a00f883a 	mov	r7,r20
   2aed8:	1009883a 	mov	r4,r2
   2aedc:	180b883a 	mov	r5,r3
   2aee0:	00315040 	call	31504 <__ledf2>
   2aee4:	10003e0e 	bge	r2,zero,2afe0 <_dtoa_r+0x1548>
   2aee8:	d9001317 	ldw	r4,76(sp)
   2aeec:	bd3fffc3 	ldbu	r20,-1(r23)
   2aef0:	d9000515 	stw	r4,20(sp)
   2aef4:	003d3b06 	br	2a3e4 <__alt_data_end+0xfffeafe4>
   2aef8:	0027883a 	mov	r19,zero
   2aefc:	003f1b06 	br	2ab6c <__alt_data_end+0xfffeb76c>
   2af00:	d8800817 	ldw	r2,32(sp)
   2af04:	11e9c83a 	sub	r20,r2,r7
   2af08:	0005883a 	mov	r2,zero
   2af0c:	003d5406 	br	2a460 <__alt_data_end+0xfffeb060>
   2af10:	00800044 	movi	r2,1
   2af14:	003dc706 	br	2a634 <__alt_data_end+0xfffeb234>
   2af18:	d8c00217 	ldw	r3,8(sp)
   2af1c:	00800d84 	movi	r2,54
   2af20:	dd400a17 	ldw	r21,40(sp)
   2af24:	10c5c83a 	sub	r2,r2,r3
   2af28:	dd000817 	ldw	r20,32(sp)
   2af2c:	003d4c06 	br	2a460 <__alt_data_end+0xfffeb060>
   2af30:	dc800f15 	stw	r18,60(sp)
   2af34:	dcc01015 	stw	r19,64(sp)
   2af38:	04000084 	movi	r16,2
   2af3c:	003bed06 	br	29ef4 <__alt_data_end+0xfffeaaf4>
   2af40:	d9000617 	ldw	r4,24(sp)
   2af44:	203f0d26 	beq	r4,zero,2ab7c <__alt_data_end+0xfffeb77c>
   2af48:	d9800c17 	ldw	r6,48(sp)
   2af4c:	01bcab0e 	bge	zero,r6,2a1fc <__alt_data_end+0xfffeadfc>
   2af50:	d9401017 	ldw	r5,64(sp)
   2af54:	d9000f17 	ldw	r4,60(sp)
   2af58:	000d883a 	mov	r6,zero
   2af5c:	01d00934 	movhi	r7,16420
   2af60:	0025f6c0 	call	25f6c <__muldf3>
   2af64:	81000044 	addi	r4,r16,1
   2af68:	d8800f15 	stw	r2,60(sp)
   2af6c:	d8c01015 	stw	r3,64(sp)
   2af70:	00316780 	call	31678 <__floatsidf>
   2af74:	d9800f17 	ldw	r6,60(sp)
   2af78:	d9c01017 	ldw	r7,64(sp)
   2af7c:	1009883a 	mov	r4,r2
   2af80:	180b883a 	mov	r5,r3
   2af84:	0025f6c0 	call	25f6c <__muldf3>
   2af88:	01d00734 	movhi	r7,16412
   2af8c:	000d883a 	mov	r6,zero
   2af90:	1009883a 	mov	r4,r2
   2af94:	180b883a 	mov	r5,r3
   2af98:	0024dd80 	call	24dd8 <__adddf3>
   2af9c:	d9c00517 	ldw	r7,20(sp)
   2afa0:	047f3034 	movhi	r17,64704
   2afa4:	1021883a 	mov	r16,r2
   2afa8:	39ffffc4 	addi	r7,r7,-1
   2afac:	d9c01315 	stw	r7,76(sp)
   2afb0:	1c63883a 	add	r17,r3,r17
   2afb4:	db000c17 	ldw	r12,48(sp)
   2afb8:	003bea06 	br	29f64 <__alt_data_end+0xfffeab64>
   2afbc:	dc000915 	stw	r16,36(sp)
   2afc0:	003e0e06 	br	2a7fc <__alt_data_end+0xfffeb3fc>
   2afc4:	01000e44 	movi	r4,57
   2afc8:	8825883a 	mov	r18,r17
   2afcc:	9dc00044 	addi	r23,r19,1
   2afd0:	99000005 	stb	r4,0(r19)
   2afd4:	a023883a 	mov	r17,r20
   2afd8:	dc000915 	stw	r16,36(sp)
   2afdc:	003da406 	br	2a670 <__alt_data_end+0xfffeb270>
   2afe0:	d9801417 	ldw	r6,80(sp)
   2afe4:	d9c01517 	ldw	r7,84(sp)
   2afe8:	0009883a 	mov	r4,zero
   2afec:	014ff834 	movhi	r5,16352
   2aff0:	00266840 	call	26684 <__subdf3>
   2aff4:	880d883a 	mov	r6,r17
   2aff8:	a00f883a 	mov	r7,r20
   2affc:	1009883a 	mov	r4,r2
   2b000:	180b883a 	mov	r5,r3
   2b004:	00314280 	call	31428 <__gedf2>
   2b008:	00bc7c0e 	bge	zero,r2,2a1fc <__alt_data_end+0xfffeadfc>
   2b00c:	01000c04 	movi	r4,48
   2b010:	00000106 	br	2b018 <_dtoa_r+0x1580>
   2b014:	102f883a 	mov	r23,r2
   2b018:	b8bfffc4 	addi	r2,r23,-1
   2b01c:	10c00007 	ldb	r3,0(r2)
   2b020:	193ffc26 	beq	r3,r4,2b014 <__alt_data_end+0xfffebc14>
   2b024:	d9801317 	ldw	r6,76(sp)
   2b028:	d9800515 	stw	r6,20(sp)
   2b02c:	003c4406 	br	2a140 <__alt_data_end+0xfffead40>
   2b030:	d9801317 	ldw	r6,76(sp)
   2b034:	d9800515 	stw	r6,20(sp)
   2b038:	003cea06 	br	2a3e4 <__alt_data_end+0xfffeafe4>
   2b03c:	dd800f17 	ldw	r22,60(sp)
   2b040:	dcc01017 	ldw	r19,64(sp)
   2b044:	dc801217 	ldw	r18,72(sp)
   2b048:	003c6c06 	br	2a1fc <__alt_data_end+0xfffeadfc>
   2b04c:	903e031e 	bne	r18,zero,2a85c <__alt_data_end+0xfffeb45c>
   2b050:	003ebb06 	br	2ab40 <__alt_data_end+0xfffeb740>
   2b054:	103e6c1e 	bne	r2,zero,2aa08 <__alt_data_end+0xfffeb608>
   2b058:	4080004c 	andi	r2,r8,1
   2b05c:	103e6a26 	beq	r2,zero,2aa08 <__alt_data_end+0xfffeb608>
   2b060:	003e6606 	br	2a9fc <__alt_data_end+0xfffeb5fc>
   2b064:	d8c00317 	ldw	r3,12(sp)
   2b068:	00800084 	movi	r2,2
   2b06c:	10c02916 	blt	r2,r3,2b114 <_dtoa_r+0x167c>
   2b070:	d9000c17 	ldw	r4,48(sp)
   2b074:	003e8806 	br	2aa98 <__alt_data_end+0xfffeb698>
   2b078:	04000084 	movi	r16,2
   2b07c:	003b9d06 	br	29ef4 <__alt_data_end+0xfffeaaf4>
   2b080:	d9001317 	ldw	r4,76(sp)
   2b084:	d9000515 	stw	r4,20(sp)
   2b088:	003cd606 	br	2a3e4 <__alt_data_end+0xfffeafe4>
   2b08c:	d8801317 	ldw	r2,76(sp)
   2b090:	d8800515 	stw	r2,20(sp)
   2b094:	003c2a06 	br	2a140 <__alt_data_end+0xfffead40>
   2b098:	d9800317 	ldw	r6,12(sp)
   2b09c:	00800084 	movi	r2,2
   2b0a0:	11801516 	blt	r2,r6,2b0f8 <_dtoa_r+0x1660>
   2b0a4:	d9c00c17 	ldw	r7,48(sp)
   2b0a8:	d9c00615 	stw	r7,24(sp)
   2b0ac:	003df706 	br	2a88c <__alt_data_end+0xfffeb48c>
   2b0b0:	193d3926 	beq	r3,r4,2a598 <__alt_data_end+0xfffeb198>
   2b0b4:	00c00f04 	movi	r3,60
   2b0b8:	1885c83a 	sub	r2,r3,r2
   2b0bc:	003ddf06 	br	2a83c <__alt_data_end+0xfffeb43c>
   2b0c0:	e009883a 	mov	r4,fp
   2b0c4:	e0001115 	stw	zero,68(fp)
   2b0c8:	000b883a 	mov	r5,zero
   2b0cc:	002d1340 	call	2d134 <_Balloc>
   2b0d0:	d8800715 	stw	r2,28(sp)
   2b0d4:	d8c00717 	ldw	r3,28(sp)
   2b0d8:	00bfffc4 	movi	r2,-1
   2b0dc:	01000044 	movi	r4,1
   2b0e0:	d8800c15 	stw	r2,48(sp)
   2b0e4:	e0c01015 	stw	r3,64(fp)
   2b0e8:	d9000b15 	stw	r4,44(sp)
   2b0ec:	d8800615 	stw	r2,24(sp)
   2b0f0:	d8002215 	stw	zero,136(sp)
   2b0f4:	003c4106 	br	2a1fc <__alt_data_end+0xfffeadfc>
   2b0f8:	d8c00c17 	ldw	r3,48(sp)
   2b0fc:	d8c00615 	stw	r3,24(sp)
   2b100:	003e7006 	br	2aac4 <__alt_data_end+0xfffeb6c4>
   2b104:	04400044 	movi	r17,1
   2b108:	003b2006 	br	29d8c <__alt_data_end+0xfffea98c>
   2b10c:	000b883a 	mov	r5,zero
   2b110:	003b3d06 	br	29e08 <__alt_data_end+0xfffeaa08>
   2b114:	d8800c17 	ldw	r2,48(sp)
   2b118:	d8800615 	stw	r2,24(sp)
   2b11c:	003e6906 	br	2aac4 <__alt_data_end+0xfffeb6c4>

0002b120 <__sflush_r>:
   2b120:	2880030b 	ldhu	r2,12(r5)
   2b124:	defffb04 	addi	sp,sp,-20
   2b128:	dcc00315 	stw	r19,12(sp)
   2b12c:	dc400115 	stw	r17,4(sp)
   2b130:	dfc00415 	stw	ra,16(sp)
   2b134:	dc800215 	stw	r18,8(sp)
   2b138:	dc000015 	stw	r16,0(sp)
   2b13c:	10c0020c 	andi	r3,r2,8
   2b140:	2823883a 	mov	r17,r5
   2b144:	2027883a 	mov	r19,r4
   2b148:	1800311e 	bne	r3,zero,2b210 <__sflush_r+0xf0>
   2b14c:	28c00117 	ldw	r3,4(r5)
   2b150:	10820014 	ori	r2,r2,2048
   2b154:	2880030d 	sth	r2,12(r5)
   2b158:	00c04b0e 	bge	zero,r3,2b288 <__sflush_r+0x168>
   2b15c:	8a000a17 	ldw	r8,40(r17)
   2b160:	40002326 	beq	r8,zero,2b1f0 <__sflush_r+0xd0>
   2b164:	9c000017 	ldw	r16,0(r19)
   2b168:	10c4000c 	andi	r3,r2,4096
   2b16c:	98000015 	stw	zero,0(r19)
   2b170:	18004826 	beq	r3,zero,2b294 <__sflush_r+0x174>
   2b174:	89801417 	ldw	r6,80(r17)
   2b178:	10c0010c 	andi	r3,r2,4
   2b17c:	18000626 	beq	r3,zero,2b198 <__sflush_r+0x78>
   2b180:	88c00117 	ldw	r3,4(r17)
   2b184:	88800c17 	ldw	r2,48(r17)
   2b188:	30cdc83a 	sub	r6,r6,r3
   2b18c:	10000226 	beq	r2,zero,2b198 <__sflush_r+0x78>
   2b190:	88800f17 	ldw	r2,60(r17)
   2b194:	308dc83a 	sub	r6,r6,r2
   2b198:	89400717 	ldw	r5,28(r17)
   2b19c:	000f883a 	mov	r7,zero
   2b1a0:	9809883a 	mov	r4,r19
   2b1a4:	403ee83a 	callr	r8
   2b1a8:	00ffffc4 	movi	r3,-1
   2b1ac:	10c04426 	beq	r2,r3,2b2c0 <__sflush_r+0x1a0>
   2b1b0:	88c0030b 	ldhu	r3,12(r17)
   2b1b4:	89000417 	ldw	r4,16(r17)
   2b1b8:	88000115 	stw	zero,4(r17)
   2b1bc:	197dffcc 	andi	r5,r3,63487
   2b1c0:	8940030d 	sth	r5,12(r17)
   2b1c4:	89000015 	stw	r4,0(r17)
   2b1c8:	18c4000c 	andi	r3,r3,4096
   2b1cc:	18002c1e 	bne	r3,zero,2b280 <__sflush_r+0x160>
   2b1d0:	89400c17 	ldw	r5,48(r17)
   2b1d4:	9c000015 	stw	r16,0(r19)
   2b1d8:	28000526 	beq	r5,zero,2b1f0 <__sflush_r+0xd0>
   2b1dc:	88801004 	addi	r2,r17,64
   2b1e0:	28800226 	beq	r5,r2,2b1ec <__sflush_r+0xcc>
   2b1e4:	9809883a 	mov	r4,r19
   2b1e8:	002b88c0 	call	2b88c <_free_r>
   2b1ec:	88000c15 	stw	zero,48(r17)
   2b1f0:	0005883a 	mov	r2,zero
   2b1f4:	dfc00417 	ldw	ra,16(sp)
   2b1f8:	dcc00317 	ldw	r19,12(sp)
   2b1fc:	dc800217 	ldw	r18,8(sp)
   2b200:	dc400117 	ldw	r17,4(sp)
   2b204:	dc000017 	ldw	r16,0(sp)
   2b208:	dec00504 	addi	sp,sp,20
   2b20c:	f800283a 	ret
   2b210:	2c800417 	ldw	r18,16(r5)
   2b214:	903ff626 	beq	r18,zero,2b1f0 <__alt_data_end+0xfffebdf0>
   2b218:	2c000017 	ldw	r16,0(r5)
   2b21c:	108000cc 	andi	r2,r2,3
   2b220:	2c800015 	stw	r18,0(r5)
   2b224:	84a1c83a 	sub	r16,r16,r18
   2b228:	1000131e 	bne	r2,zero,2b278 <__sflush_r+0x158>
   2b22c:	28800517 	ldw	r2,20(r5)
   2b230:	88800215 	stw	r2,8(r17)
   2b234:	04000316 	blt	zero,r16,2b244 <__sflush_r+0x124>
   2b238:	003fed06 	br	2b1f0 <__alt_data_end+0xfffebdf0>
   2b23c:	90a5883a 	add	r18,r18,r2
   2b240:	043feb0e 	bge	zero,r16,2b1f0 <__alt_data_end+0xfffebdf0>
   2b244:	88800917 	ldw	r2,36(r17)
   2b248:	89400717 	ldw	r5,28(r17)
   2b24c:	800f883a 	mov	r7,r16
   2b250:	900d883a 	mov	r6,r18
   2b254:	9809883a 	mov	r4,r19
   2b258:	103ee83a 	callr	r2
   2b25c:	80a1c83a 	sub	r16,r16,r2
   2b260:	00bff616 	blt	zero,r2,2b23c <__alt_data_end+0xfffebe3c>
   2b264:	88c0030b 	ldhu	r3,12(r17)
   2b268:	00bfffc4 	movi	r2,-1
   2b26c:	18c01014 	ori	r3,r3,64
   2b270:	88c0030d 	sth	r3,12(r17)
   2b274:	003fdf06 	br	2b1f4 <__alt_data_end+0xfffebdf4>
   2b278:	0005883a 	mov	r2,zero
   2b27c:	003fec06 	br	2b230 <__alt_data_end+0xfffebe30>
   2b280:	88801415 	stw	r2,80(r17)
   2b284:	003fd206 	br	2b1d0 <__alt_data_end+0xfffebdd0>
   2b288:	28c00f17 	ldw	r3,60(r5)
   2b28c:	00ffb316 	blt	zero,r3,2b15c <__alt_data_end+0xfffebd5c>
   2b290:	003fd706 	br	2b1f0 <__alt_data_end+0xfffebdf0>
   2b294:	89400717 	ldw	r5,28(r17)
   2b298:	000d883a 	mov	r6,zero
   2b29c:	01c00044 	movi	r7,1
   2b2a0:	9809883a 	mov	r4,r19
   2b2a4:	403ee83a 	callr	r8
   2b2a8:	100d883a 	mov	r6,r2
   2b2ac:	00bfffc4 	movi	r2,-1
   2b2b0:	30801426 	beq	r6,r2,2b304 <__sflush_r+0x1e4>
   2b2b4:	8880030b 	ldhu	r2,12(r17)
   2b2b8:	8a000a17 	ldw	r8,40(r17)
   2b2bc:	003fae06 	br	2b178 <__alt_data_end+0xfffebd78>
   2b2c0:	98c00017 	ldw	r3,0(r19)
   2b2c4:	183fba26 	beq	r3,zero,2b1b0 <__alt_data_end+0xfffebdb0>
   2b2c8:	01000744 	movi	r4,29
   2b2cc:	19000626 	beq	r3,r4,2b2e8 <__sflush_r+0x1c8>
   2b2d0:	01000584 	movi	r4,22
   2b2d4:	19000426 	beq	r3,r4,2b2e8 <__sflush_r+0x1c8>
   2b2d8:	88c0030b 	ldhu	r3,12(r17)
   2b2dc:	18c01014 	ori	r3,r3,64
   2b2e0:	88c0030d 	sth	r3,12(r17)
   2b2e4:	003fc306 	br	2b1f4 <__alt_data_end+0xfffebdf4>
   2b2e8:	8880030b 	ldhu	r2,12(r17)
   2b2ec:	88c00417 	ldw	r3,16(r17)
   2b2f0:	88000115 	stw	zero,4(r17)
   2b2f4:	10bdffcc 	andi	r2,r2,63487
   2b2f8:	8880030d 	sth	r2,12(r17)
   2b2fc:	88c00015 	stw	r3,0(r17)
   2b300:	003fb306 	br	2b1d0 <__alt_data_end+0xfffebdd0>
   2b304:	98800017 	ldw	r2,0(r19)
   2b308:	103fea26 	beq	r2,zero,2b2b4 <__alt_data_end+0xfffebeb4>
   2b30c:	00c00744 	movi	r3,29
   2b310:	10c00226 	beq	r2,r3,2b31c <__sflush_r+0x1fc>
   2b314:	00c00584 	movi	r3,22
   2b318:	10c0031e 	bne	r2,r3,2b328 <__sflush_r+0x208>
   2b31c:	9c000015 	stw	r16,0(r19)
   2b320:	0005883a 	mov	r2,zero
   2b324:	003fb306 	br	2b1f4 <__alt_data_end+0xfffebdf4>
   2b328:	88c0030b 	ldhu	r3,12(r17)
   2b32c:	3005883a 	mov	r2,r6
   2b330:	18c01014 	ori	r3,r3,64
   2b334:	88c0030d 	sth	r3,12(r17)
   2b338:	003fae06 	br	2b1f4 <__alt_data_end+0xfffebdf4>

0002b33c <_fflush_r>:
   2b33c:	defffd04 	addi	sp,sp,-12
   2b340:	dc000115 	stw	r16,4(sp)
   2b344:	dfc00215 	stw	ra,8(sp)
   2b348:	2021883a 	mov	r16,r4
   2b34c:	20000226 	beq	r4,zero,2b358 <_fflush_r+0x1c>
   2b350:	20800e17 	ldw	r2,56(r4)
   2b354:	10000c26 	beq	r2,zero,2b388 <_fflush_r+0x4c>
   2b358:	2880030f 	ldh	r2,12(r5)
   2b35c:	1000051e 	bne	r2,zero,2b374 <_fflush_r+0x38>
   2b360:	0005883a 	mov	r2,zero
   2b364:	dfc00217 	ldw	ra,8(sp)
   2b368:	dc000117 	ldw	r16,4(sp)
   2b36c:	dec00304 	addi	sp,sp,12
   2b370:	f800283a 	ret
   2b374:	8009883a 	mov	r4,r16
   2b378:	dfc00217 	ldw	ra,8(sp)
   2b37c:	dc000117 	ldw	r16,4(sp)
   2b380:	dec00304 	addi	sp,sp,12
   2b384:	002b1201 	jmpi	2b120 <__sflush_r>
   2b388:	d9400015 	stw	r5,0(sp)
   2b38c:	002b7180 	call	2b718 <__sinit>
   2b390:	d9400017 	ldw	r5,0(sp)
   2b394:	003ff006 	br	2b358 <__alt_data_end+0xfffebf58>

0002b398 <fflush>:
   2b398:	20000526 	beq	r4,zero,2b3b0 <fflush+0x18>
   2b39c:	008000f4 	movhi	r2,3
   2b3a0:	10999c04 	addi	r2,r2,26224
   2b3a4:	200b883a 	mov	r5,r4
   2b3a8:	11000017 	ldw	r4,0(r2)
   2b3ac:	002b33c1 	jmpi	2b33c <_fflush_r>
   2b3b0:	008000f4 	movhi	r2,3
   2b3b4:	10999b04 	addi	r2,r2,26220
   2b3b8:	11000017 	ldw	r4,0(r2)
   2b3bc:	014000f4 	movhi	r5,3
   2b3c0:	296ccf04 	addi	r5,r5,-19652
   2b3c4:	002c11c1 	jmpi	2c11c <_fwalk_reent>

0002b3c8 <__fp_unlock>:
   2b3c8:	0005883a 	mov	r2,zero
   2b3cc:	f800283a 	ret

0002b3d0 <_cleanup_r>:
   2b3d0:	014000f4 	movhi	r5,3
   2b3d4:	29404d04 	addi	r5,r5,308
   2b3d8:	002c11c1 	jmpi	2c11c <_fwalk_reent>

0002b3dc <__sinit.part.1>:
   2b3dc:	defff704 	addi	sp,sp,-36
   2b3e0:	00c000f4 	movhi	r3,3
   2b3e4:	dfc00815 	stw	ra,32(sp)
   2b3e8:	ddc00715 	stw	r23,28(sp)
   2b3ec:	dd800615 	stw	r22,24(sp)
   2b3f0:	dd400515 	stw	r21,20(sp)
   2b3f4:	dd000415 	stw	r20,16(sp)
   2b3f8:	dcc00315 	stw	r19,12(sp)
   2b3fc:	dc800215 	stw	r18,8(sp)
   2b400:	dc400115 	stw	r17,4(sp)
   2b404:	dc000015 	stw	r16,0(sp)
   2b408:	18ecf404 	addi	r3,r3,-19504
   2b40c:	24000117 	ldw	r16,4(r4)
   2b410:	20c00f15 	stw	r3,60(r4)
   2b414:	2080bb04 	addi	r2,r4,748
   2b418:	00c000c4 	movi	r3,3
   2b41c:	20c0b915 	stw	r3,740(r4)
   2b420:	2080ba15 	stw	r2,744(r4)
   2b424:	2000b815 	stw	zero,736(r4)
   2b428:	05c00204 	movi	r23,8
   2b42c:	00800104 	movi	r2,4
   2b430:	2025883a 	mov	r18,r4
   2b434:	b80d883a 	mov	r6,r23
   2b438:	81001704 	addi	r4,r16,92
   2b43c:	000b883a 	mov	r5,zero
   2b440:	80000015 	stw	zero,0(r16)
   2b444:	80000115 	stw	zero,4(r16)
   2b448:	80000215 	stw	zero,8(r16)
   2b44c:	8080030d 	sth	r2,12(r16)
   2b450:	80001915 	stw	zero,100(r16)
   2b454:	8000038d 	sth	zero,14(r16)
   2b458:	80000415 	stw	zero,16(r16)
   2b45c:	80000515 	stw	zero,20(r16)
   2b460:	80000615 	stw	zero,24(r16)
   2b464:	002d00c0 	call	2d00c <memset>
   2b468:	058000f4 	movhi	r22,3
   2b46c:	94400217 	ldw	r17,8(r18)
   2b470:	054000f4 	movhi	r21,3
   2b474:	050000f4 	movhi	r20,3
   2b478:	04c000f4 	movhi	r19,3
   2b47c:	b5b9d704 	addi	r22,r22,-6308
   2b480:	ad79ee04 	addi	r21,r21,-6216
   2b484:	a53a0d04 	addi	r20,r20,-6092
   2b488:	9cfa2404 	addi	r19,r19,-6000
   2b48c:	85800815 	stw	r22,32(r16)
   2b490:	85400915 	stw	r21,36(r16)
   2b494:	85000a15 	stw	r20,40(r16)
   2b498:	84c00b15 	stw	r19,44(r16)
   2b49c:	84000715 	stw	r16,28(r16)
   2b4a0:	00800284 	movi	r2,10
   2b4a4:	8880030d 	sth	r2,12(r17)
   2b4a8:	00800044 	movi	r2,1
   2b4ac:	b80d883a 	mov	r6,r23
   2b4b0:	89001704 	addi	r4,r17,92
   2b4b4:	000b883a 	mov	r5,zero
   2b4b8:	88000015 	stw	zero,0(r17)
   2b4bc:	88000115 	stw	zero,4(r17)
   2b4c0:	88000215 	stw	zero,8(r17)
   2b4c4:	88001915 	stw	zero,100(r17)
   2b4c8:	8880038d 	sth	r2,14(r17)
   2b4cc:	88000415 	stw	zero,16(r17)
   2b4d0:	88000515 	stw	zero,20(r17)
   2b4d4:	88000615 	stw	zero,24(r17)
   2b4d8:	002d00c0 	call	2d00c <memset>
   2b4dc:	94000317 	ldw	r16,12(r18)
   2b4e0:	00800484 	movi	r2,18
   2b4e4:	8c400715 	stw	r17,28(r17)
   2b4e8:	8d800815 	stw	r22,32(r17)
   2b4ec:	8d400915 	stw	r21,36(r17)
   2b4f0:	8d000a15 	stw	r20,40(r17)
   2b4f4:	8cc00b15 	stw	r19,44(r17)
   2b4f8:	8080030d 	sth	r2,12(r16)
   2b4fc:	00800084 	movi	r2,2
   2b500:	80000015 	stw	zero,0(r16)
   2b504:	80000115 	stw	zero,4(r16)
   2b508:	80000215 	stw	zero,8(r16)
   2b50c:	80001915 	stw	zero,100(r16)
   2b510:	8080038d 	sth	r2,14(r16)
   2b514:	80000415 	stw	zero,16(r16)
   2b518:	80000515 	stw	zero,20(r16)
   2b51c:	80000615 	stw	zero,24(r16)
   2b520:	b80d883a 	mov	r6,r23
   2b524:	000b883a 	mov	r5,zero
   2b528:	81001704 	addi	r4,r16,92
   2b52c:	002d00c0 	call	2d00c <memset>
   2b530:	00800044 	movi	r2,1
   2b534:	84000715 	stw	r16,28(r16)
   2b538:	85800815 	stw	r22,32(r16)
   2b53c:	85400915 	stw	r21,36(r16)
   2b540:	85000a15 	stw	r20,40(r16)
   2b544:	84c00b15 	stw	r19,44(r16)
   2b548:	90800e15 	stw	r2,56(r18)
   2b54c:	dfc00817 	ldw	ra,32(sp)
   2b550:	ddc00717 	ldw	r23,28(sp)
   2b554:	dd800617 	ldw	r22,24(sp)
   2b558:	dd400517 	ldw	r21,20(sp)
   2b55c:	dd000417 	ldw	r20,16(sp)
   2b560:	dcc00317 	ldw	r19,12(sp)
   2b564:	dc800217 	ldw	r18,8(sp)
   2b568:	dc400117 	ldw	r17,4(sp)
   2b56c:	dc000017 	ldw	r16,0(sp)
   2b570:	dec00904 	addi	sp,sp,36
   2b574:	f800283a 	ret

0002b578 <__fp_lock>:
   2b578:	0005883a 	mov	r2,zero
   2b57c:	f800283a 	ret

0002b580 <__sfmoreglue>:
   2b580:	defffc04 	addi	sp,sp,-16
   2b584:	dc400115 	stw	r17,4(sp)
   2b588:	2c7fffc4 	addi	r17,r5,-1
   2b58c:	8c401a24 	muli	r17,r17,104
   2b590:	dc800215 	stw	r18,8(sp)
   2b594:	2825883a 	mov	r18,r5
   2b598:	89401d04 	addi	r5,r17,116
   2b59c:	dc000015 	stw	r16,0(sp)
   2b5a0:	dfc00315 	stw	ra,12(sp)
   2b5a4:	002c4780 	call	2c478 <_malloc_r>
   2b5a8:	1021883a 	mov	r16,r2
   2b5ac:	10000726 	beq	r2,zero,2b5cc <__sfmoreglue+0x4c>
   2b5b0:	11000304 	addi	r4,r2,12
   2b5b4:	10000015 	stw	zero,0(r2)
   2b5b8:	14800115 	stw	r18,4(r2)
   2b5bc:	11000215 	stw	r4,8(r2)
   2b5c0:	89801a04 	addi	r6,r17,104
   2b5c4:	000b883a 	mov	r5,zero
   2b5c8:	002d00c0 	call	2d00c <memset>
   2b5cc:	8005883a 	mov	r2,r16
   2b5d0:	dfc00317 	ldw	ra,12(sp)
   2b5d4:	dc800217 	ldw	r18,8(sp)
   2b5d8:	dc400117 	ldw	r17,4(sp)
   2b5dc:	dc000017 	ldw	r16,0(sp)
   2b5e0:	dec00404 	addi	sp,sp,16
   2b5e4:	f800283a 	ret

0002b5e8 <__sfp>:
   2b5e8:	defffb04 	addi	sp,sp,-20
   2b5ec:	dc000015 	stw	r16,0(sp)
   2b5f0:	040000f4 	movhi	r16,3
   2b5f4:	84199b04 	addi	r16,r16,26220
   2b5f8:	dcc00315 	stw	r19,12(sp)
   2b5fc:	2027883a 	mov	r19,r4
   2b600:	81000017 	ldw	r4,0(r16)
   2b604:	dfc00415 	stw	ra,16(sp)
   2b608:	dc800215 	stw	r18,8(sp)
   2b60c:	20800e17 	ldw	r2,56(r4)
   2b610:	dc400115 	stw	r17,4(sp)
   2b614:	1000021e 	bne	r2,zero,2b620 <__sfp+0x38>
   2b618:	002b3dc0 	call	2b3dc <__sinit.part.1>
   2b61c:	81000017 	ldw	r4,0(r16)
   2b620:	2480b804 	addi	r18,r4,736
   2b624:	047fffc4 	movi	r17,-1
   2b628:	91000117 	ldw	r4,4(r18)
   2b62c:	94000217 	ldw	r16,8(r18)
   2b630:	213fffc4 	addi	r4,r4,-1
   2b634:	20000a16 	blt	r4,zero,2b660 <__sfp+0x78>
   2b638:	8080030f 	ldh	r2,12(r16)
   2b63c:	10000c26 	beq	r2,zero,2b670 <__sfp+0x88>
   2b640:	80c01d04 	addi	r3,r16,116
   2b644:	00000206 	br	2b650 <__sfp+0x68>
   2b648:	18bfe60f 	ldh	r2,-104(r3)
   2b64c:	10000826 	beq	r2,zero,2b670 <__sfp+0x88>
   2b650:	213fffc4 	addi	r4,r4,-1
   2b654:	1c3ffd04 	addi	r16,r3,-12
   2b658:	18c01a04 	addi	r3,r3,104
   2b65c:	247ffa1e 	bne	r4,r17,2b648 <__alt_data_end+0xfffec248>
   2b660:	90800017 	ldw	r2,0(r18)
   2b664:	10001d26 	beq	r2,zero,2b6dc <__sfp+0xf4>
   2b668:	1025883a 	mov	r18,r2
   2b66c:	003fee06 	br	2b628 <__alt_data_end+0xfffec228>
   2b670:	00bfffc4 	movi	r2,-1
   2b674:	8080038d 	sth	r2,14(r16)
   2b678:	00800044 	movi	r2,1
   2b67c:	8080030d 	sth	r2,12(r16)
   2b680:	80001915 	stw	zero,100(r16)
   2b684:	80000015 	stw	zero,0(r16)
   2b688:	80000215 	stw	zero,8(r16)
   2b68c:	80000115 	stw	zero,4(r16)
   2b690:	80000415 	stw	zero,16(r16)
   2b694:	80000515 	stw	zero,20(r16)
   2b698:	80000615 	stw	zero,24(r16)
   2b69c:	01800204 	movi	r6,8
   2b6a0:	000b883a 	mov	r5,zero
   2b6a4:	81001704 	addi	r4,r16,92
   2b6a8:	002d00c0 	call	2d00c <memset>
   2b6ac:	8005883a 	mov	r2,r16
   2b6b0:	80000c15 	stw	zero,48(r16)
   2b6b4:	80000d15 	stw	zero,52(r16)
   2b6b8:	80001115 	stw	zero,68(r16)
   2b6bc:	80001215 	stw	zero,72(r16)
   2b6c0:	dfc00417 	ldw	ra,16(sp)
   2b6c4:	dcc00317 	ldw	r19,12(sp)
   2b6c8:	dc800217 	ldw	r18,8(sp)
   2b6cc:	dc400117 	ldw	r17,4(sp)
   2b6d0:	dc000017 	ldw	r16,0(sp)
   2b6d4:	dec00504 	addi	sp,sp,20
   2b6d8:	f800283a 	ret
   2b6dc:	01400104 	movi	r5,4
   2b6e0:	9809883a 	mov	r4,r19
   2b6e4:	002b5800 	call	2b580 <__sfmoreglue>
   2b6e8:	90800015 	stw	r2,0(r18)
   2b6ec:	103fde1e 	bne	r2,zero,2b668 <__alt_data_end+0xfffec268>
   2b6f0:	00800304 	movi	r2,12
   2b6f4:	98800015 	stw	r2,0(r19)
   2b6f8:	0005883a 	mov	r2,zero
   2b6fc:	003ff006 	br	2b6c0 <__alt_data_end+0xfffec2c0>

0002b700 <_cleanup>:
   2b700:	008000f4 	movhi	r2,3
   2b704:	10999b04 	addi	r2,r2,26220
   2b708:	11000017 	ldw	r4,0(r2)
   2b70c:	014000f4 	movhi	r5,3
   2b710:	29404d04 	addi	r5,r5,308
   2b714:	002c11c1 	jmpi	2c11c <_fwalk_reent>

0002b718 <__sinit>:
   2b718:	20800e17 	ldw	r2,56(r4)
   2b71c:	10000126 	beq	r2,zero,2b724 <__sinit+0xc>
   2b720:	f800283a 	ret
   2b724:	002b3dc1 	jmpi	2b3dc <__sinit.part.1>

0002b728 <__sfp_lock_acquire>:
   2b728:	f800283a 	ret

0002b72c <__sfp_lock_release>:
   2b72c:	f800283a 	ret

0002b730 <__sinit_lock_acquire>:
   2b730:	f800283a 	ret

0002b734 <__sinit_lock_release>:
   2b734:	f800283a 	ret

0002b738 <__fp_lock_all>:
   2b738:	008000f4 	movhi	r2,3
   2b73c:	10999c04 	addi	r2,r2,26224
   2b740:	11000017 	ldw	r4,0(r2)
   2b744:	014000f4 	movhi	r5,3
   2b748:	296d5e04 	addi	r5,r5,-19080
   2b74c:	002c0581 	jmpi	2c058 <_fwalk>

0002b750 <__fp_unlock_all>:
   2b750:	008000f4 	movhi	r2,3
   2b754:	10999c04 	addi	r2,r2,26224
   2b758:	11000017 	ldw	r4,0(r2)
   2b75c:	014000f4 	movhi	r5,3
   2b760:	296cf204 	addi	r5,r5,-19512
   2b764:	002c0581 	jmpi	2c058 <_fwalk>

0002b768 <_malloc_trim_r>:
   2b768:	defffb04 	addi	sp,sp,-20
   2b76c:	dcc00315 	stw	r19,12(sp)
   2b770:	04c000f4 	movhi	r19,3
   2b774:	dc800215 	stw	r18,8(sp)
   2b778:	dc400115 	stw	r17,4(sp)
   2b77c:	dc000015 	stw	r16,0(sp)
   2b780:	dfc00415 	stw	ra,16(sp)
   2b784:	2821883a 	mov	r16,r5
   2b788:	9cd41604 	addi	r19,r19,20568
   2b78c:	2025883a 	mov	r18,r4
   2b790:	0031d780 	call	31d78 <__malloc_lock>
   2b794:	98800217 	ldw	r2,8(r19)
   2b798:	14400117 	ldw	r17,4(r2)
   2b79c:	00bfff04 	movi	r2,-4
   2b7a0:	88a2703a 	and	r17,r17,r2
   2b7a4:	8c21c83a 	sub	r16,r17,r16
   2b7a8:	8403fbc4 	addi	r16,r16,4079
   2b7ac:	8020d33a 	srli	r16,r16,12
   2b7b0:	0083ffc4 	movi	r2,4095
   2b7b4:	843fffc4 	addi	r16,r16,-1
   2b7b8:	8020933a 	slli	r16,r16,12
   2b7bc:	1400060e 	bge	r2,r16,2b7d8 <_malloc_trim_r+0x70>
   2b7c0:	000b883a 	mov	r5,zero
   2b7c4:	9009883a 	mov	r4,r18
   2b7c8:	002e7080 	call	2e708 <_sbrk_r>
   2b7cc:	98c00217 	ldw	r3,8(r19)
   2b7d0:	1c47883a 	add	r3,r3,r17
   2b7d4:	10c00a26 	beq	r2,r3,2b800 <_malloc_trim_r+0x98>
   2b7d8:	9009883a 	mov	r4,r18
   2b7dc:	0031d9c0 	call	31d9c <__malloc_unlock>
   2b7e0:	0005883a 	mov	r2,zero
   2b7e4:	dfc00417 	ldw	ra,16(sp)
   2b7e8:	dcc00317 	ldw	r19,12(sp)
   2b7ec:	dc800217 	ldw	r18,8(sp)
   2b7f0:	dc400117 	ldw	r17,4(sp)
   2b7f4:	dc000017 	ldw	r16,0(sp)
   2b7f8:	dec00504 	addi	sp,sp,20
   2b7fc:	f800283a 	ret
   2b800:	040bc83a 	sub	r5,zero,r16
   2b804:	9009883a 	mov	r4,r18
   2b808:	002e7080 	call	2e708 <_sbrk_r>
   2b80c:	00ffffc4 	movi	r3,-1
   2b810:	10c00d26 	beq	r2,r3,2b848 <_malloc_trim_r+0xe0>
   2b814:	00c00134 	movhi	r3,4
   2b818:	18e07804 	addi	r3,r3,-32288
   2b81c:	18800017 	ldw	r2,0(r3)
   2b820:	99000217 	ldw	r4,8(r19)
   2b824:	8c23c83a 	sub	r17,r17,r16
   2b828:	8c400054 	ori	r17,r17,1
   2b82c:	1421c83a 	sub	r16,r2,r16
   2b830:	24400115 	stw	r17,4(r4)
   2b834:	9009883a 	mov	r4,r18
   2b838:	1c000015 	stw	r16,0(r3)
   2b83c:	0031d9c0 	call	31d9c <__malloc_unlock>
   2b840:	00800044 	movi	r2,1
   2b844:	003fe706 	br	2b7e4 <__alt_data_end+0xfffec3e4>
   2b848:	000b883a 	mov	r5,zero
   2b84c:	9009883a 	mov	r4,r18
   2b850:	002e7080 	call	2e708 <_sbrk_r>
   2b854:	99000217 	ldw	r4,8(r19)
   2b858:	014003c4 	movi	r5,15
   2b85c:	1107c83a 	sub	r3,r2,r4
   2b860:	28ffdd0e 	bge	r5,r3,2b7d8 <__alt_data_end+0xfffec3d8>
   2b864:	014000f4 	movhi	r5,3
   2b868:	29599e04 	addi	r5,r5,26232
   2b86c:	29400017 	ldw	r5,0(r5)
   2b870:	18c00054 	ori	r3,r3,1
   2b874:	20c00115 	stw	r3,4(r4)
   2b878:	00c00134 	movhi	r3,4
   2b87c:	1145c83a 	sub	r2,r2,r5
   2b880:	18e07804 	addi	r3,r3,-32288
   2b884:	18800015 	stw	r2,0(r3)
   2b888:	003fd306 	br	2b7d8 <__alt_data_end+0xfffec3d8>

0002b88c <_free_r>:
   2b88c:	28004126 	beq	r5,zero,2b994 <_free_r+0x108>
   2b890:	defffd04 	addi	sp,sp,-12
   2b894:	dc400115 	stw	r17,4(sp)
   2b898:	dc000015 	stw	r16,0(sp)
   2b89c:	2023883a 	mov	r17,r4
   2b8a0:	2821883a 	mov	r16,r5
   2b8a4:	dfc00215 	stw	ra,8(sp)
   2b8a8:	0031d780 	call	31d78 <__malloc_lock>
   2b8ac:	81ffff17 	ldw	r7,-4(r16)
   2b8b0:	00bfff84 	movi	r2,-2
   2b8b4:	010000f4 	movhi	r4,3
   2b8b8:	81bffe04 	addi	r6,r16,-8
   2b8bc:	3884703a 	and	r2,r7,r2
   2b8c0:	21141604 	addi	r4,r4,20568
   2b8c4:	308b883a 	add	r5,r6,r2
   2b8c8:	2a400117 	ldw	r9,4(r5)
   2b8cc:	22000217 	ldw	r8,8(r4)
   2b8d0:	00ffff04 	movi	r3,-4
   2b8d4:	48c6703a 	and	r3,r9,r3
   2b8d8:	2a005726 	beq	r5,r8,2ba38 <_free_r+0x1ac>
   2b8dc:	28c00115 	stw	r3,4(r5)
   2b8e0:	39c0004c 	andi	r7,r7,1
   2b8e4:	3800091e 	bne	r7,zero,2b90c <_free_r+0x80>
   2b8e8:	823ffe17 	ldw	r8,-8(r16)
   2b8ec:	22400204 	addi	r9,r4,8
   2b8f0:	320dc83a 	sub	r6,r6,r8
   2b8f4:	31c00217 	ldw	r7,8(r6)
   2b8f8:	1205883a 	add	r2,r2,r8
   2b8fc:	3a406526 	beq	r7,r9,2ba94 <_free_r+0x208>
   2b900:	32000317 	ldw	r8,12(r6)
   2b904:	3a000315 	stw	r8,12(r7)
   2b908:	41c00215 	stw	r7,8(r8)
   2b90c:	28cf883a 	add	r7,r5,r3
   2b910:	39c00117 	ldw	r7,4(r7)
   2b914:	39c0004c 	andi	r7,r7,1
   2b918:	38003a26 	beq	r7,zero,2ba04 <_free_r+0x178>
   2b91c:	10c00054 	ori	r3,r2,1
   2b920:	30c00115 	stw	r3,4(r6)
   2b924:	3087883a 	add	r3,r6,r2
   2b928:	18800015 	stw	r2,0(r3)
   2b92c:	00c07fc4 	movi	r3,511
   2b930:	18801936 	bltu	r3,r2,2b998 <_free_r+0x10c>
   2b934:	1004d0fa 	srli	r2,r2,3
   2b938:	01c00044 	movi	r7,1
   2b93c:	21400117 	ldw	r5,4(r4)
   2b940:	10c00044 	addi	r3,r2,1
   2b944:	18c7883a 	add	r3,r3,r3
   2b948:	1005d0ba 	srai	r2,r2,2
   2b94c:	18c7883a 	add	r3,r3,r3
   2b950:	18c7883a 	add	r3,r3,r3
   2b954:	1907883a 	add	r3,r3,r4
   2b958:	3884983a 	sll	r2,r7,r2
   2b95c:	19c00017 	ldw	r7,0(r3)
   2b960:	1a3ffe04 	addi	r8,r3,-8
   2b964:	1144b03a 	or	r2,r2,r5
   2b968:	32000315 	stw	r8,12(r6)
   2b96c:	31c00215 	stw	r7,8(r6)
   2b970:	20800115 	stw	r2,4(r4)
   2b974:	19800015 	stw	r6,0(r3)
   2b978:	39800315 	stw	r6,12(r7)
   2b97c:	8809883a 	mov	r4,r17
   2b980:	dfc00217 	ldw	ra,8(sp)
   2b984:	dc400117 	ldw	r17,4(sp)
   2b988:	dc000017 	ldw	r16,0(sp)
   2b98c:	dec00304 	addi	sp,sp,12
   2b990:	0031d9c1 	jmpi	31d9c <__malloc_unlock>
   2b994:	f800283a 	ret
   2b998:	100ad27a 	srli	r5,r2,9
   2b99c:	00c00104 	movi	r3,4
   2b9a0:	19404a36 	bltu	r3,r5,2bacc <_free_r+0x240>
   2b9a4:	100ad1ba 	srli	r5,r2,6
   2b9a8:	28c00e44 	addi	r3,r5,57
   2b9ac:	18c7883a 	add	r3,r3,r3
   2b9b0:	29400e04 	addi	r5,r5,56
   2b9b4:	18c7883a 	add	r3,r3,r3
   2b9b8:	18c7883a 	add	r3,r3,r3
   2b9bc:	1909883a 	add	r4,r3,r4
   2b9c0:	20c00017 	ldw	r3,0(r4)
   2b9c4:	01c000f4 	movhi	r7,3
   2b9c8:	213ffe04 	addi	r4,r4,-8
   2b9cc:	39d41604 	addi	r7,r7,20568
   2b9d0:	20c04426 	beq	r4,r3,2bae4 <_free_r+0x258>
   2b9d4:	01ffff04 	movi	r7,-4
   2b9d8:	19400117 	ldw	r5,4(r3)
   2b9dc:	29ca703a 	and	r5,r5,r7
   2b9e0:	1140022e 	bgeu	r2,r5,2b9ec <_free_r+0x160>
   2b9e4:	18c00217 	ldw	r3,8(r3)
   2b9e8:	20fffb1e 	bne	r4,r3,2b9d8 <__alt_data_end+0xfffec5d8>
   2b9ec:	19000317 	ldw	r4,12(r3)
   2b9f0:	31000315 	stw	r4,12(r6)
   2b9f4:	30c00215 	stw	r3,8(r6)
   2b9f8:	21800215 	stw	r6,8(r4)
   2b9fc:	19800315 	stw	r6,12(r3)
   2ba00:	003fde06 	br	2b97c <__alt_data_end+0xfffec57c>
   2ba04:	29c00217 	ldw	r7,8(r5)
   2ba08:	10c5883a 	add	r2,r2,r3
   2ba0c:	00c000f4 	movhi	r3,3
   2ba10:	18d41804 	addi	r3,r3,20576
   2ba14:	38c03b26 	beq	r7,r3,2bb04 <_free_r+0x278>
   2ba18:	2a000317 	ldw	r8,12(r5)
   2ba1c:	11400054 	ori	r5,r2,1
   2ba20:	3087883a 	add	r3,r6,r2
   2ba24:	3a000315 	stw	r8,12(r7)
   2ba28:	41c00215 	stw	r7,8(r8)
   2ba2c:	31400115 	stw	r5,4(r6)
   2ba30:	18800015 	stw	r2,0(r3)
   2ba34:	003fbd06 	br	2b92c <__alt_data_end+0xfffec52c>
   2ba38:	39c0004c 	andi	r7,r7,1
   2ba3c:	10c5883a 	add	r2,r2,r3
   2ba40:	3800071e 	bne	r7,zero,2ba60 <_free_r+0x1d4>
   2ba44:	81fffe17 	ldw	r7,-8(r16)
   2ba48:	31cdc83a 	sub	r6,r6,r7
   2ba4c:	30c00317 	ldw	r3,12(r6)
   2ba50:	31400217 	ldw	r5,8(r6)
   2ba54:	11c5883a 	add	r2,r2,r7
   2ba58:	28c00315 	stw	r3,12(r5)
   2ba5c:	19400215 	stw	r5,8(r3)
   2ba60:	10c00054 	ori	r3,r2,1
   2ba64:	30c00115 	stw	r3,4(r6)
   2ba68:	00c000f4 	movhi	r3,3
   2ba6c:	18d99f04 	addi	r3,r3,26236
   2ba70:	18c00017 	ldw	r3,0(r3)
   2ba74:	21800215 	stw	r6,8(r4)
   2ba78:	10ffc036 	bltu	r2,r3,2b97c <__alt_data_end+0xfffec57c>
   2ba7c:	00800134 	movhi	r2,4
   2ba80:	10a06f04 	addi	r2,r2,-32324
   2ba84:	11400017 	ldw	r5,0(r2)
   2ba88:	8809883a 	mov	r4,r17
   2ba8c:	002b7680 	call	2b768 <_malloc_trim_r>
   2ba90:	003fba06 	br	2b97c <__alt_data_end+0xfffec57c>
   2ba94:	28c9883a 	add	r4,r5,r3
   2ba98:	21000117 	ldw	r4,4(r4)
   2ba9c:	2100004c 	andi	r4,r4,1
   2baa0:	2000391e 	bne	r4,zero,2bb88 <_free_r+0x2fc>
   2baa4:	29c00217 	ldw	r7,8(r5)
   2baa8:	29000317 	ldw	r4,12(r5)
   2baac:	1885883a 	add	r2,r3,r2
   2bab0:	10c00054 	ori	r3,r2,1
   2bab4:	39000315 	stw	r4,12(r7)
   2bab8:	21c00215 	stw	r7,8(r4)
   2babc:	30c00115 	stw	r3,4(r6)
   2bac0:	308d883a 	add	r6,r6,r2
   2bac4:	30800015 	stw	r2,0(r6)
   2bac8:	003fac06 	br	2b97c <__alt_data_end+0xfffec57c>
   2bacc:	00c00504 	movi	r3,20
   2bad0:	19401536 	bltu	r3,r5,2bb28 <_free_r+0x29c>
   2bad4:	28c01704 	addi	r3,r5,92
   2bad8:	18c7883a 	add	r3,r3,r3
   2badc:	294016c4 	addi	r5,r5,91
   2bae0:	003fb406 	br	2b9b4 <__alt_data_end+0xfffec5b4>
   2bae4:	280bd0ba 	srai	r5,r5,2
   2bae8:	00c00044 	movi	r3,1
   2baec:	38800117 	ldw	r2,4(r7)
   2baf0:	194a983a 	sll	r5,r3,r5
   2baf4:	2007883a 	mov	r3,r4
   2baf8:	2884b03a 	or	r2,r5,r2
   2bafc:	38800115 	stw	r2,4(r7)
   2bb00:	003fbb06 	br	2b9f0 <__alt_data_end+0xfffec5f0>
   2bb04:	21800515 	stw	r6,20(r4)
   2bb08:	21800415 	stw	r6,16(r4)
   2bb0c:	10c00054 	ori	r3,r2,1
   2bb10:	31c00315 	stw	r7,12(r6)
   2bb14:	31c00215 	stw	r7,8(r6)
   2bb18:	30c00115 	stw	r3,4(r6)
   2bb1c:	308d883a 	add	r6,r6,r2
   2bb20:	30800015 	stw	r2,0(r6)
   2bb24:	003f9506 	br	2b97c <__alt_data_end+0xfffec57c>
   2bb28:	00c01504 	movi	r3,84
   2bb2c:	19400536 	bltu	r3,r5,2bb44 <_free_r+0x2b8>
   2bb30:	100ad33a 	srli	r5,r2,12
   2bb34:	28c01bc4 	addi	r3,r5,111
   2bb38:	18c7883a 	add	r3,r3,r3
   2bb3c:	29401b84 	addi	r5,r5,110
   2bb40:	003f9c06 	br	2b9b4 <__alt_data_end+0xfffec5b4>
   2bb44:	00c05504 	movi	r3,340
   2bb48:	19400536 	bltu	r3,r5,2bb60 <_free_r+0x2d4>
   2bb4c:	100ad3fa 	srli	r5,r2,15
   2bb50:	28c01e04 	addi	r3,r5,120
   2bb54:	18c7883a 	add	r3,r3,r3
   2bb58:	29401dc4 	addi	r5,r5,119
   2bb5c:	003f9506 	br	2b9b4 <__alt_data_end+0xfffec5b4>
   2bb60:	00c15504 	movi	r3,1364
   2bb64:	19400536 	bltu	r3,r5,2bb7c <_free_r+0x2f0>
   2bb68:	100ad4ba 	srli	r5,r2,18
   2bb6c:	28c01f44 	addi	r3,r5,125
   2bb70:	18c7883a 	add	r3,r3,r3
   2bb74:	29401f04 	addi	r5,r5,124
   2bb78:	003f8e06 	br	2b9b4 <__alt_data_end+0xfffec5b4>
   2bb7c:	00c03f84 	movi	r3,254
   2bb80:	01401f84 	movi	r5,126
   2bb84:	003f8b06 	br	2b9b4 <__alt_data_end+0xfffec5b4>
   2bb88:	10c00054 	ori	r3,r2,1
   2bb8c:	30c00115 	stw	r3,4(r6)
   2bb90:	308d883a 	add	r6,r6,r2
   2bb94:	30800015 	stw	r2,0(r6)
   2bb98:	003f7806 	br	2b97c <__alt_data_end+0xfffec57c>

0002bb9c <__sfvwrite_r>:
   2bb9c:	30800217 	ldw	r2,8(r6)
   2bba0:	10006726 	beq	r2,zero,2bd40 <__sfvwrite_r+0x1a4>
   2bba4:	28c0030b 	ldhu	r3,12(r5)
   2bba8:	defff404 	addi	sp,sp,-48
   2bbac:	dd400715 	stw	r21,28(sp)
   2bbb0:	dd000615 	stw	r20,24(sp)
   2bbb4:	dc000215 	stw	r16,8(sp)
   2bbb8:	dfc00b15 	stw	ra,44(sp)
   2bbbc:	df000a15 	stw	fp,40(sp)
   2bbc0:	ddc00915 	stw	r23,36(sp)
   2bbc4:	dd800815 	stw	r22,32(sp)
   2bbc8:	dcc00515 	stw	r19,20(sp)
   2bbcc:	dc800415 	stw	r18,16(sp)
   2bbd0:	dc400315 	stw	r17,12(sp)
   2bbd4:	1880020c 	andi	r2,r3,8
   2bbd8:	2821883a 	mov	r16,r5
   2bbdc:	202b883a 	mov	r21,r4
   2bbe0:	3029883a 	mov	r20,r6
   2bbe4:	10002726 	beq	r2,zero,2bc84 <__sfvwrite_r+0xe8>
   2bbe8:	28800417 	ldw	r2,16(r5)
   2bbec:	10002526 	beq	r2,zero,2bc84 <__sfvwrite_r+0xe8>
   2bbf0:	1880008c 	andi	r2,r3,2
   2bbf4:	a4400017 	ldw	r17,0(r20)
   2bbf8:	10002a26 	beq	r2,zero,2bca4 <__sfvwrite_r+0x108>
   2bbfc:	05a00034 	movhi	r22,32768
   2bc00:	0027883a 	mov	r19,zero
   2bc04:	0025883a 	mov	r18,zero
   2bc08:	b5bf0004 	addi	r22,r22,-1024
   2bc0c:	980d883a 	mov	r6,r19
   2bc10:	a809883a 	mov	r4,r21
   2bc14:	90004626 	beq	r18,zero,2bd30 <__sfvwrite_r+0x194>
   2bc18:	900f883a 	mov	r7,r18
   2bc1c:	b480022e 	bgeu	r22,r18,2bc28 <__sfvwrite_r+0x8c>
   2bc20:	01e00034 	movhi	r7,32768
   2bc24:	39ff0004 	addi	r7,r7,-1024
   2bc28:	80800917 	ldw	r2,36(r16)
   2bc2c:	81400717 	ldw	r5,28(r16)
   2bc30:	103ee83a 	callr	r2
   2bc34:	0080570e 	bge	zero,r2,2bd94 <__sfvwrite_r+0x1f8>
   2bc38:	a0c00217 	ldw	r3,8(r20)
   2bc3c:	98a7883a 	add	r19,r19,r2
   2bc40:	90a5c83a 	sub	r18,r18,r2
   2bc44:	1885c83a 	sub	r2,r3,r2
   2bc48:	a0800215 	stw	r2,8(r20)
   2bc4c:	103fef1e 	bne	r2,zero,2bc0c <__alt_data_end+0xfffec80c>
   2bc50:	0005883a 	mov	r2,zero
   2bc54:	dfc00b17 	ldw	ra,44(sp)
   2bc58:	df000a17 	ldw	fp,40(sp)
   2bc5c:	ddc00917 	ldw	r23,36(sp)
   2bc60:	dd800817 	ldw	r22,32(sp)
   2bc64:	dd400717 	ldw	r21,28(sp)
   2bc68:	dd000617 	ldw	r20,24(sp)
   2bc6c:	dcc00517 	ldw	r19,20(sp)
   2bc70:	dc800417 	ldw	r18,16(sp)
   2bc74:	dc400317 	ldw	r17,12(sp)
   2bc78:	dc000217 	ldw	r16,8(sp)
   2bc7c:	dec00c04 	addi	sp,sp,48
   2bc80:	f800283a 	ret
   2bc84:	800b883a 	mov	r5,r16
   2bc88:	a809883a 	mov	r4,r21
   2bc8c:	00297440 	call	29744 <__swsetup_r>
   2bc90:	1000eb1e 	bne	r2,zero,2c040 <__sfvwrite_r+0x4a4>
   2bc94:	80c0030b 	ldhu	r3,12(r16)
   2bc98:	a4400017 	ldw	r17,0(r20)
   2bc9c:	1880008c 	andi	r2,r3,2
   2bca0:	103fd61e 	bne	r2,zero,2bbfc <__alt_data_end+0xfffec7fc>
   2bca4:	1880004c 	andi	r2,r3,1
   2bca8:	10003f1e 	bne	r2,zero,2bda8 <__sfvwrite_r+0x20c>
   2bcac:	0039883a 	mov	fp,zero
   2bcb0:	0025883a 	mov	r18,zero
   2bcb4:	90001a26 	beq	r18,zero,2bd20 <__sfvwrite_r+0x184>
   2bcb8:	1880800c 	andi	r2,r3,512
   2bcbc:	84c00217 	ldw	r19,8(r16)
   2bcc0:	10002126 	beq	r2,zero,2bd48 <__sfvwrite_r+0x1ac>
   2bcc4:	982f883a 	mov	r23,r19
   2bcc8:	94c09336 	bltu	r18,r19,2bf18 <__sfvwrite_r+0x37c>
   2bccc:	1881200c 	andi	r2,r3,1152
   2bcd0:	10009e1e 	bne	r2,zero,2bf4c <__sfvwrite_r+0x3b0>
   2bcd4:	81000017 	ldw	r4,0(r16)
   2bcd8:	b80d883a 	mov	r6,r23
   2bcdc:	e00b883a 	mov	r5,fp
   2bce0:	002ceb00 	call	2ceb0 <memmove>
   2bce4:	80c00217 	ldw	r3,8(r16)
   2bce8:	81000017 	ldw	r4,0(r16)
   2bcec:	9005883a 	mov	r2,r18
   2bcf0:	1ce7c83a 	sub	r19,r3,r19
   2bcf4:	25cf883a 	add	r7,r4,r23
   2bcf8:	84c00215 	stw	r19,8(r16)
   2bcfc:	81c00015 	stw	r7,0(r16)
   2bd00:	a0c00217 	ldw	r3,8(r20)
   2bd04:	e0b9883a 	add	fp,fp,r2
   2bd08:	90a5c83a 	sub	r18,r18,r2
   2bd0c:	18a7c83a 	sub	r19,r3,r2
   2bd10:	a4c00215 	stw	r19,8(r20)
   2bd14:	983fce26 	beq	r19,zero,2bc50 <__alt_data_end+0xfffec850>
   2bd18:	80c0030b 	ldhu	r3,12(r16)
   2bd1c:	903fe61e 	bne	r18,zero,2bcb8 <__alt_data_end+0xfffec8b8>
   2bd20:	8f000017 	ldw	fp,0(r17)
   2bd24:	8c800117 	ldw	r18,4(r17)
   2bd28:	8c400204 	addi	r17,r17,8
   2bd2c:	003fe106 	br	2bcb4 <__alt_data_end+0xfffec8b4>
   2bd30:	8cc00017 	ldw	r19,0(r17)
   2bd34:	8c800117 	ldw	r18,4(r17)
   2bd38:	8c400204 	addi	r17,r17,8
   2bd3c:	003fb306 	br	2bc0c <__alt_data_end+0xfffec80c>
   2bd40:	0005883a 	mov	r2,zero
   2bd44:	f800283a 	ret
   2bd48:	81000017 	ldw	r4,0(r16)
   2bd4c:	80800417 	ldw	r2,16(r16)
   2bd50:	11005736 	bltu	r2,r4,2beb0 <__sfvwrite_r+0x314>
   2bd54:	85c00517 	ldw	r23,20(r16)
   2bd58:	95c05536 	bltu	r18,r23,2beb0 <__sfvwrite_r+0x314>
   2bd5c:	00a00034 	movhi	r2,32768
   2bd60:	10bfffc4 	addi	r2,r2,-1
   2bd64:	9009883a 	mov	r4,r18
   2bd68:	1480012e 	bgeu	r2,r18,2bd70 <__sfvwrite_r+0x1d4>
   2bd6c:	1009883a 	mov	r4,r2
   2bd70:	b80b883a 	mov	r5,r23
   2bd74:	00238280 	call	23828 <__divsi3>
   2bd78:	15cf383a 	mul	r7,r2,r23
   2bd7c:	81400717 	ldw	r5,28(r16)
   2bd80:	80800917 	ldw	r2,36(r16)
   2bd84:	e00d883a 	mov	r6,fp
   2bd88:	a809883a 	mov	r4,r21
   2bd8c:	103ee83a 	callr	r2
   2bd90:	00bfdb16 	blt	zero,r2,2bd00 <__alt_data_end+0xfffec900>
   2bd94:	8080030b 	ldhu	r2,12(r16)
   2bd98:	10801014 	ori	r2,r2,64
   2bd9c:	8080030d 	sth	r2,12(r16)
   2bda0:	00bfffc4 	movi	r2,-1
   2bda4:	003fab06 	br	2bc54 <__alt_data_end+0xfffec854>
   2bda8:	0027883a 	mov	r19,zero
   2bdac:	0011883a 	mov	r8,zero
   2bdb0:	0039883a 	mov	fp,zero
   2bdb4:	0025883a 	mov	r18,zero
   2bdb8:	90001f26 	beq	r18,zero,2be38 <__sfvwrite_r+0x29c>
   2bdbc:	40005a26 	beq	r8,zero,2bf28 <__sfvwrite_r+0x38c>
   2bdc0:	982d883a 	mov	r22,r19
   2bdc4:	94c0012e 	bgeu	r18,r19,2bdcc <__sfvwrite_r+0x230>
   2bdc8:	902d883a 	mov	r22,r18
   2bdcc:	81000017 	ldw	r4,0(r16)
   2bdd0:	80800417 	ldw	r2,16(r16)
   2bdd4:	b02f883a 	mov	r23,r22
   2bdd8:	81c00517 	ldw	r7,20(r16)
   2bddc:	1100032e 	bgeu	r2,r4,2bdec <__sfvwrite_r+0x250>
   2bde0:	80c00217 	ldw	r3,8(r16)
   2bde4:	38c7883a 	add	r3,r7,r3
   2bde8:	1d801816 	blt	r3,r22,2be4c <__sfvwrite_r+0x2b0>
   2bdec:	b1c03e16 	blt	r22,r7,2bee8 <__sfvwrite_r+0x34c>
   2bdf0:	80800917 	ldw	r2,36(r16)
   2bdf4:	81400717 	ldw	r5,28(r16)
   2bdf8:	e00d883a 	mov	r6,fp
   2bdfc:	da000115 	stw	r8,4(sp)
   2be00:	a809883a 	mov	r4,r21
   2be04:	103ee83a 	callr	r2
   2be08:	102f883a 	mov	r23,r2
   2be0c:	da000117 	ldw	r8,4(sp)
   2be10:	00bfe00e 	bge	zero,r2,2bd94 <__alt_data_end+0xfffec994>
   2be14:	9de7c83a 	sub	r19,r19,r23
   2be18:	98001f26 	beq	r19,zero,2be98 <__sfvwrite_r+0x2fc>
   2be1c:	a0800217 	ldw	r2,8(r20)
   2be20:	e5f9883a 	add	fp,fp,r23
   2be24:	95e5c83a 	sub	r18,r18,r23
   2be28:	15efc83a 	sub	r23,r2,r23
   2be2c:	a5c00215 	stw	r23,8(r20)
   2be30:	b83f8726 	beq	r23,zero,2bc50 <__alt_data_end+0xfffec850>
   2be34:	903fe11e 	bne	r18,zero,2bdbc <__alt_data_end+0xfffec9bc>
   2be38:	8f000017 	ldw	fp,0(r17)
   2be3c:	8c800117 	ldw	r18,4(r17)
   2be40:	0011883a 	mov	r8,zero
   2be44:	8c400204 	addi	r17,r17,8
   2be48:	003fdb06 	br	2bdb8 <__alt_data_end+0xfffec9b8>
   2be4c:	180d883a 	mov	r6,r3
   2be50:	e00b883a 	mov	r5,fp
   2be54:	da000115 	stw	r8,4(sp)
   2be58:	d8c00015 	stw	r3,0(sp)
   2be5c:	002ceb00 	call	2ceb0 <memmove>
   2be60:	d8c00017 	ldw	r3,0(sp)
   2be64:	80800017 	ldw	r2,0(r16)
   2be68:	800b883a 	mov	r5,r16
   2be6c:	a809883a 	mov	r4,r21
   2be70:	10c5883a 	add	r2,r2,r3
   2be74:	80800015 	stw	r2,0(r16)
   2be78:	d8c00015 	stw	r3,0(sp)
   2be7c:	002b33c0 	call	2b33c <_fflush_r>
   2be80:	d8c00017 	ldw	r3,0(sp)
   2be84:	da000117 	ldw	r8,4(sp)
   2be88:	103fc21e 	bne	r2,zero,2bd94 <__alt_data_end+0xfffec994>
   2be8c:	182f883a 	mov	r23,r3
   2be90:	9de7c83a 	sub	r19,r19,r23
   2be94:	983fe11e 	bne	r19,zero,2be1c <__alt_data_end+0xfffeca1c>
   2be98:	800b883a 	mov	r5,r16
   2be9c:	a809883a 	mov	r4,r21
   2bea0:	002b33c0 	call	2b33c <_fflush_r>
   2bea4:	103fbb1e 	bne	r2,zero,2bd94 <__alt_data_end+0xfffec994>
   2bea8:	0011883a 	mov	r8,zero
   2beac:	003fdb06 	br	2be1c <__alt_data_end+0xfffeca1c>
   2beb0:	94c0012e 	bgeu	r18,r19,2beb8 <__sfvwrite_r+0x31c>
   2beb4:	9027883a 	mov	r19,r18
   2beb8:	980d883a 	mov	r6,r19
   2bebc:	e00b883a 	mov	r5,fp
   2bec0:	002ceb00 	call	2ceb0 <memmove>
   2bec4:	80800217 	ldw	r2,8(r16)
   2bec8:	80c00017 	ldw	r3,0(r16)
   2becc:	14c5c83a 	sub	r2,r2,r19
   2bed0:	1cc7883a 	add	r3,r3,r19
   2bed4:	80800215 	stw	r2,8(r16)
   2bed8:	80c00015 	stw	r3,0(r16)
   2bedc:	10004326 	beq	r2,zero,2bfec <__sfvwrite_r+0x450>
   2bee0:	9805883a 	mov	r2,r19
   2bee4:	003f8606 	br	2bd00 <__alt_data_end+0xfffec900>
   2bee8:	b00d883a 	mov	r6,r22
   2beec:	e00b883a 	mov	r5,fp
   2bef0:	da000115 	stw	r8,4(sp)
   2bef4:	002ceb00 	call	2ceb0 <memmove>
   2bef8:	80800217 	ldw	r2,8(r16)
   2befc:	80c00017 	ldw	r3,0(r16)
   2bf00:	da000117 	ldw	r8,4(sp)
   2bf04:	1585c83a 	sub	r2,r2,r22
   2bf08:	1dad883a 	add	r22,r3,r22
   2bf0c:	80800215 	stw	r2,8(r16)
   2bf10:	85800015 	stw	r22,0(r16)
   2bf14:	003fbf06 	br	2be14 <__alt_data_end+0xfffeca14>
   2bf18:	81000017 	ldw	r4,0(r16)
   2bf1c:	9027883a 	mov	r19,r18
   2bf20:	902f883a 	mov	r23,r18
   2bf24:	003f6c06 	br	2bcd8 <__alt_data_end+0xfffec8d8>
   2bf28:	900d883a 	mov	r6,r18
   2bf2c:	01400284 	movi	r5,10
   2bf30:	e009883a 	mov	r4,fp
   2bf34:	002cc840 	call	2cc84 <memchr>
   2bf38:	10003e26 	beq	r2,zero,2c034 <__sfvwrite_r+0x498>
   2bf3c:	10800044 	addi	r2,r2,1
   2bf40:	1727c83a 	sub	r19,r2,fp
   2bf44:	02000044 	movi	r8,1
   2bf48:	003f9d06 	br	2bdc0 <__alt_data_end+0xfffec9c0>
   2bf4c:	80800517 	ldw	r2,20(r16)
   2bf50:	81400417 	ldw	r5,16(r16)
   2bf54:	81c00017 	ldw	r7,0(r16)
   2bf58:	10a7883a 	add	r19,r2,r2
   2bf5c:	9885883a 	add	r2,r19,r2
   2bf60:	1026d7fa 	srli	r19,r2,31
   2bf64:	396dc83a 	sub	r22,r7,r5
   2bf68:	b1000044 	addi	r4,r22,1
   2bf6c:	9885883a 	add	r2,r19,r2
   2bf70:	1027d07a 	srai	r19,r2,1
   2bf74:	2485883a 	add	r2,r4,r18
   2bf78:	980d883a 	mov	r6,r19
   2bf7c:	9880022e 	bgeu	r19,r2,2bf88 <__sfvwrite_r+0x3ec>
   2bf80:	1027883a 	mov	r19,r2
   2bf84:	100d883a 	mov	r6,r2
   2bf88:	18c1000c 	andi	r3,r3,1024
   2bf8c:	18001c26 	beq	r3,zero,2c000 <__sfvwrite_r+0x464>
   2bf90:	300b883a 	mov	r5,r6
   2bf94:	a809883a 	mov	r4,r21
   2bf98:	002c4780 	call	2c478 <_malloc_r>
   2bf9c:	102f883a 	mov	r23,r2
   2bfa0:	10002926 	beq	r2,zero,2c048 <__sfvwrite_r+0x4ac>
   2bfa4:	81400417 	ldw	r5,16(r16)
   2bfa8:	b00d883a 	mov	r6,r22
   2bfac:	1009883a 	mov	r4,r2
   2bfb0:	002cd680 	call	2cd68 <memcpy>
   2bfb4:	8080030b 	ldhu	r2,12(r16)
   2bfb8:	00fedfc4 	movi	r3,-1153
   2bfbc:	10c4703a 	and	r2,r2,r3
   2bfc0:	10802014 	ori	r2,r2,128
   2bfc4:	8080030d 	sth	r2,12(r16)
   2bfc8:	bd89883a 	add	r4,r23,r22
   2bfcc:	9d8fc83a 	sub	r7,r19,r22
   2bfd0:	85c00415 	stw	r23,16(r16)
   2bfd4:	84c00515 	stw	r19,20(r16)
   2bfd8:	81000015 	stw	r4,0(r16)
   2bfdc:	9027883a 	mov	r19,r18
   2bfe0:	81c00215 	stw	r7,8(r16)
   2bfe4:	902f883a 	mov	r23,r18
   2bfe8:	003f3b06 	br	2bcd8 <__alt_data_end+0xfffec8d8>
   2bfec:	800b883a 	mov	r5,r16
   2bff0:	a809883a 	mov	r4,r21
   2bff4:	002b33c0 	call	2b33c <_fflush_r>
   2bff8:	103fb926 	beq	r2,zero,2bee0 <__alt_data_end+0xfffecae0>
   2bffc:	003f6506 	br	2bd94 <__alt_data_end+0xfffec994>
   2c000:	a809883a 	mov	r4,r21
   2c004:	002e1300 	call	2e130 <_realloc_r>
   2c008:	102f883a 	mov	r23,r2
   2c00c:	103fee1e 	bne	r2,zero,2bfc8 <__alt_data_end+0xfffecbc8>
   2c010:	81400417 	ldw	r5,16(r16)
   2c014:	a809883a 	mov	r4,r21
   2c018:	002b88c0 	call	2b88c <_free_r>
   2c01c:	8080030b 	ldhu	r2,12(r16)
   2c020:	00ffdfc4 	movi	r3,-129
   2c024:	1884703a 	and	r2,r3,r2
   2c028:	00c00304 	movi	r3,12
   2c02c:	a8c00015 	stw	r3,0(r21)
   2c030:	003f5906 	br	2bd98 <__alt_data_end+0xfffec998>
   2c034:	94c00044 	addi	r19,r18,1
   2c038:	02000044 	movi	r8,1
   2c03c:	003f6006 	br	2bdc0 <__alt_data_end+0xfffec9c0>
   2c040:	00bfffc4 	movi	r2,-1
   2c044:	003f0306 	br	2bc54 <__alt_data_end+0xfffec854>
   2c048:	00800304 	movi	r2,12
   2c04c:	a8800015 	stw	r2,0(r21)
   2c050:	8080030b 	ldhu	r2,12(r16)
   2c054:	003f5006 	br	2bd98 <__alt_data_end+0xfffec998>

0002c058 <_fwalk>:
   2c058:	defff704 	addi	sp,sp,-36
   2c05c:	dd000415 	stw	r20,16(sp)
   2c060:	dfc00815 	stw	ra,32(sp)
   2c064:	ddc00715 	stw	r23,28(sp)
   2c068:	dd800615 	stw	r22,24(sp)
   2c06c:	dd400515 	stw	r21,20(sp)
   2c070:	dcc00315 	stw	r19,12(sp)
   2c074:	dc800215 	stw	r18,8(sp)
   2c078:	dc400115 	stw	r17,4(sp)
   2c07c:	dc000015 	stw	r16,0(sp)
   2c080:	2500b804 	addi	r20,r4,736
   2c084:	a0002326 	beq	r20,zero,2c114 <_fwalk+0xbc>
   2c088:	282b883a 	mov	r21,r5
   2c08c:	002f883a 	mov	r23,zero
   2c090:	05800044 	movi	r22,1
   2c094:	04ffffc4 	movi	r19,-1
   2c098:	a4400117 	ldw	r17,4(r20)
   2c09c:	a4800217 	ldw	r18,8(r20)
   2c0a0:	8c7fffc4 	addi	r17,r17,-1
   2c0a4:	88000d16 	blt	r17,zero,2c0dc <_fwalk+0x84>
   2c0a8:	94000304 	addi	r16,r18,12
   2c0ac:	94800384 	addi	r18,r18,14
   2c0b0:	8080000b 	ldhu	r2,0(r16)
   2c0b4:	8c7fffc4 	addi	r17,r17,-1
   2c0b8:	813ffd04 	addi	r4,r16,-12
   2c0bc:	b080042e 	bgeu	r22,r2,2c0d0 <_fwalk+0x78>
   2c0c0:	9080000f 	ldh	r2,0(r18)
   2c0c4:	14c00226 	beq	r2,r19,2c0d0 <_fwalk+0x78>
   2c0c8:	a83ee83a 	callr	r21
   2c0cc:	b8aeb03a 	or	r23,r23,r2
   2c0d0:	84001a04 	addi	r16,r16,104
   2c0d4:	94801a04 	addi	r18,r18,104
   2c0d8:	8cfff51e 	bne	r17,r19,2c0b0 <__alt_data_end+0xfffeccb0>
   2c0dc:	a5000017 	ldw	r20,0(r20)
   2c0e0:	a03fed1e 	bne	r20,zero,2c098 <__alt_data_end+0xfffecc98>
   2c0e4:	b805883a 	mov	r2,r23
   2c0e8:	dfc00817 	ldw	ra,32(sp)
   2c0ec:	ddc00717 	ldw	r23,28(sp)
   2c0f0:	dd800617 	ldw	r22,24(sp)
   2c0f4:	dd400517 	ldw	r21,20(sp)
   2c0f8:	dd000417 	ldw	r20,16(sp)
   2c0fc:	dcc00317 	ldw	r19,12(sp)
   2c100:	dc800217 	ldw	r18,8(sp)
   2c104:	dc400117 	ldw	r17,4(sp)
   2c108:	dc000017 	ldw	r16,0(sp)
   2c10c:	dec00904 	addi	sp,sp,36
   2c110:	f800283a 	ret
   2c114:	002f883a 	mov	r23,zero
   2c118:	003ff206 	br	2c0e4 <__alt_data_end+0xfffecce4>

0002c11c <_fwalk_reent>:
   2c11c:	defff704 	addi	sp,sp,-36
   2c120:	dd000415 	stw	r20,16(sp)
   2c124:	dfc00815 	stw	ra,32(sp)
   2c128:	ddc00715 	stw	r23,28(sp)
   2c12c:	dd800615 	stw	r22,24(sp)
   2c130:	dd400515 	stw	r21,20(sp)
   2c134:	dcc00315 	stw	r19,12(sp)
   2c138:	dc800215 	stw	r18,8(sp)
   2c13c:	dc400115 	stw	r17,4(sp)
   2c140:	dc000015 	stw	r16,0(sp)
   2c144:	2500b804 	addi	r20,r4,736
   2c148:	a0002326 	beq	r20,zero,2c1d8 <_fwalk_reent+0xbc>
   2c14c:	282b883a 	mov	r21,r5
   2c150:	2027883a 	mov	r19,r4
   2c154:	002f883a 	mov	r23,zero
   2c158:	05800044 	movi	r22,1
   2c15c:	04bfffc4 	movi	r18,-1
   2c160:	a4400117 	ldw	r17,4(r20)
   2c164:	a4000217 	ldw	r16,8(r20)
   2c168:	8c7fffc4 	addi	r17,r17,-1
   2c16c:	88000c16 	blt	r17,zero,2c1a0 <_fwalk_reent+0x84>
   2c170:	84000304 	addi	r16,r16,12
   2c174:	8080000b 	ldhu	r2,0(r16)
   2c178:	8c7fffc4 	addi	r17,r17,-1
   2c17c:	817ffd04 	addi	r5,r16,-12
   2c180:	b080052e 	bgeu	r22,r2,2c198 <_fwalk_reent+0x7c>
   2c184:	8080008f 	ldh	r2,2(r16)
   2c188:	9809883a 	mov	r4,r19
   2c18c:	14800226 	beq	r2,r18,2c198 <_fwalk_reent+0x7c>
   2c190:	a83ee83a 	callr	r21
   2c194:	b8aeb03a 	or	r23,r23,r2
   2c198:	84001a04 	addi	r16,r16,104
   2c19c:	8cbff51e 	bne	r17,r18,2c174 <__alt_data_end+0xfffecd74>
   2c1a0:	a5000017 	ldw	r20,0(r20)
   2c1a4:	a03fee1e 	bne	r20,zero,2c160 <__alt_data_end+0xfffecd60>
   2c1a8:	b805883a 	mov	r2,r23
   2c1ac:	dfc00817 	ldw	ra,32(sp)
   2c1b0:	ddc00717 	ldw	r23,28(sp)
   2c1b4:	dd800617 	ldw	r22,24(sp)
   2c1b8:	dd400517 	ldw	r21,20(sp)
   2c1bc:	dd000417 	ldw	r20,16(sp)
   2c1c0:	dcc00317 	ldw	r19,12(sp)
   2c1c4:	dc800217 	ldw	r18,8(sp)
   2c1c8:	dc400117 	ldw	r17,4(sp)
   2c1cc:	dc000017 	ldw	r16,0(sp)
   2c1d0:	dec00904 	addi	sp,sp,36
   2c1d4:	f800283a 	ret
   2c1d8:	002f883a 	mov	r23,zero
   2c1dc:	003ff206 	br	2c1a8 <__alt_data_end+0xfffecda8>

0002c1e0 <_setlocale_r>:
   2c1e0:	30001b26 	beq	r6,zero,2c250 <_setlocale_r+0x70>
   2c1e4:	014000f4 	movhi	r5,3
   2c1e8:	defffe04 	addi	sp,sp,-8
   2c1ec:	29529004 	addi	r5,r5,19008
   2c1f0:	3009883a 	mov	r4,r6
   2c1f4:	dc000015 	stw	r16,0(sp)
   2c1f8:	dfc00115 	stw	ra,4(sp)
   2c1fc:	3021883a 	mov	r16,r6
   2c200:	002e8980 	call	2e898 <strcmp>
   2c204:	1000061e 	bne	r2,zero,2c220 <_setlocale_r+0x40>
   2c208:	008000f4 	movhi	r2,3
   2c20c:	10928f04 	addi	r2,r2,19004
   2c210:	dfc00117 	ldw	ra,4(sp)
   2c214:	dc000017 	ldw	r16,0(sp)
   2c218:	dec00204 	addi	sp,sp,8
   2c21c:	f800283a 	ret
   2c220:	014000f4 	movhi	r5,3
   2c224:	29528f04 	addi	r5,r5,19004
   2c228:	8009883a 	mov	r4,r16
   2c22c:	002e8980 	call	2e898 <strcmp>
   2c230:	103ff526 	beq	r2,zero,2c208 <__alt_data_end+0xfffece08>
   2c234:	014000f4 	movhi	r5,3
   2c238:	29527a04 	addi	r5,r5,18920
   2c23c:	8009883a 	mov	r4,r16
   2c240:	002e8980 	call	2e898 <strcmp>
   2c244:	103ff026 	beq	r2,zero,2c208 <__alt_data_end+0xfffece08>
   2c248:	0005883a 	mov	r2,zero
   2c24c:	003ff006 	br	2c210 <__alt_data_end+0xfffece10>
   2c250:	008000f4 	movhi	r2,3
   2c254:	10928f04 	addi	r2,r2,19004
   2c258:	f800283a 	ret

0002c25c <__locale_charset>:
   2c25c:	008000f4 	movhi	r2,3
   2c260:	10940004 	addi	r2,r2,20480
   2c264:	f800283a 	ret

0002c268 <__locale_mb_cur_max>:
   2c268:	008000f4 	movhi	r2,3
   2c26c:	10999d04 	addi	r2,r2,26228
   2c270:	10800017 	ldw	r2,0(r2)
   2c274:	f800283a 	ret

0002c278 <__locale_msgcharset>:
   2c278:	008000f4 	movhi	r2,3
   2c27c:	1093f804 	addi	r2,r2,20448
   2c280:	f800283a 	ret

0002c284 <__locale_cjk_lang>:
   2c284:	0005883a 	mov	r2,zero
   2c288:	f800283a 	ret

0002c28c <_localeconv_r>:
   2c28c:	008000f4 	movhi	r2,3
   2c290:	10940804 	addi	r2,r2,20512
   2c294:	f800283a 	ret

0002c298 <setlocale>:
   2c298:	008000f4 	movhi	r2,3
   2c29c:	10999c04 	addi	r2,r2,26224
   2c2a0:	280d883a 	mov	r6,r5
   2c2a4:	200b883a 	mov	r5,r4
   2c2a8:	11000017 	ldw	r4,0(r2)
   2c2ac:	002c1e01 	jmpi	2c1e0 <_setlocale_r>

0002c2b0 <localeconv>:
   2c2b0:	008000f4 	movhi	r2,3
   2c2b4:	10940804 	addi	r2,r2,20512
   2c2b8:	f800283a 	ret

0002c2bc <__smakebuf_r>:
   2c2bc:	2880030b 	ldhu	r2,12(r5)
   2c2c0:	10c0008c 	andi	r3,r2,2
   2c2c4:	1800411e 	bne	r3,zero,2c3cc <__smakebuf_r+0x110>
   2c2c8:	deffec04 	addi	sp,sp,-80
   2c2cc:	dc000f15 	stw	r16,60(sp)
   2c2d0:	2821883a 	mov	r16,r5
   2c2d4:	2940038f 	ldh	r5,14(r5)
   2c2d8:	dc401015 	stw	r17,64(sp)
   2c2dc:	dfc01315 	stw	ra,76(sp)
   2c2e0:	dcc01215 	stw	r19,72(sp)
   2c2e4:	dc801115 	stw	r18,68(sp)
   2c2e8:	2023883a 	mov	r17,r4
   2c2ec:	28001c16 	blt	r5,zero,2c360 <__smakebuf_r+0xa4>
   2c2f0:	d80d883a 	mov	r6,sp
   2c2f4:	00304400 	call	30440 <_fstat_r>
   2c2f8:	10001816 	blt	r2,zero,2c35c <__smakebuf_r+0xa0>
   2c2fc:	d8800117 	ldw	r2,4(sp)
   2c300:	00e00014 	movui	r3,32768
   2c304:	10bc000c 	andi	r2,r2,61440
   2c308:	14c80020 	cmpeqi	r19,r2,8192
   2c30c:	10c03726 	beq	r2,r3,2c3ec <__smakebuf_r+0x130>
   2c310:	80c0030b 	ldhu	r3,12(r16)
   2c314:	18c20014 	ori	r3,r3,2048
   2c318:	80c0030d 	sth	r3,12(r16)
   2c31c:	00c80004 	movi	r3,8192
   2c320:	10c0521e 	bne	r2,r3,2c46c <__smakebuf_r+0x1b0>
   2c324:	8140038f 	ldh	r5,14(r16)
   2c328:	8809883a 	mov	r4,r17
   2c32c:	003049c0 	call	3049c <_isatty_r>
   2c330:	10004c26 	beq	r2,zero,2c464 <__smakebuf_r+0x1a8>
   2c334:	8080030b 	ldhu	r2,12(r16)
   2c338:	80c010c4 	addi	r3,r16,67
   2c33c:	80c00015 	stw	r3,0(r16)
   2c340:	10800054 	ori	r2,r2,1
   2c344:	8080030d 	sth	r2,12(r16)
   2c348:	00800044 	movi	r2,1
   2c34c:	80c00415 	stw	r3,16(r16)
   2c350:	80800515 	stw	r2,20(r16)
   2c354:	04810004 	movi	r18,1024
   2c358:	00000706 	br	2c378 <__smakebuf_r+0xbc>
   2c35c:	8080030b 	ldhu	r2,12(r16)
   2c360:	10c0200c 	andi	r3,r2,128
   2c364:	18001f1e 	bne	r3,zero,2c3e4 <__smakebuf_r+0x128>
   2c368:	04810004 	movi	r18,1024
   2c36c:	10820014 	ori	r2,r2,2048
   2c370:	8080030d 	sth	r2,12(r16)
   2c374:	0027883a 	mov	r19,zero
   2c378:	900b883a 	mov	r5,r18
   2c37c:	8809883a 	mov	r4,r17
   2c380:	002c4780 	call	2c478 <_malloc_r>
   2c384:	10002c26 	beq	r2,zero,2c438 <__smakebuf_r+0x17c>
   2c388:	80c0030b 	ldhu	r3,12(r16)
   2c38c:	010000f4 	movhi	r4,3
   2c390:	212cf404 	addi	r4,r4,-19504
   2c394:	89000f15 	stw	r4,60(r17)
   2c398:	18c02014 	ori	r3,r3,128
   2c39c:	80c0030d 	sth	r3,12(r16)
   2c3a0:	80800015 	stw	r2,0(r16)
   2c3a4:	80800415 	stw	r2,16(r16)
   2c3a8:	84800515 	stw	r18,20(r16)
   2c3ac:	98001a1e 	bne	r19,zero,2c418 <__smakebuf_r+0x15c>
   2c3b0:	dfc01317 	ldw	ra,76(sp)
   2c3b4:	dcc01217 	ldw	r19,72(sp)
   2c3b8:	dc801117 	ldw	r18,68(sp)
   2c3bc:	dc401017 	ldw	r17,64(sp)
   2c3c0:	dc000f17 	ldw	r16,60(sp)
   2c3c4:	dec01404 	addi	sp,sp,80
   2c3c8:	f800283a 	ret
   2c3cc:	288010c4 	addi	r2,r5,67
   2c3d0:	28800015 	stw	r2,0(r5)
   2c3d4:	28800415 	stw	r2,16(r5)
   2c3d8:	00800044 	movi	r2,1
   2c3dc:	28800515 	stw	r2,20(r5)
   2c3e0:	f800283a 	ret
   2c3e4:	04801004 	movi	r18,64
   2c3e8:	003fe006 	br	2c36c <__alt_data_end+0xfffecf6c>
   2c3ec:	81000a17 	ldw	r4,40(r16)
   2c3f0:	00c000f4 	movhi	r3,3
   2c3f4:	18fa0d04 	addi	r3,r3,-6092
   2c3f8:	20ffc51e 	bne	r4,r3,2c310 <__alt_data_end+0xfffecf10>
   2c3fc:	8080030b 	ldhu	r2,12(r16)
   2c400:	04810004 	movi	r18,1024
   2c404:	84801315 	stw	r18,76(r16)
   2c408:	1484b03a 	or	r2,r2,r18
   2c40c:	8080030d 	sth	r2,12(r16)
   2c410:	0027883a 	mov	r19,zero
   2c414:	003fd806 	br	2c378 <__alt_data_end+0xfffecf78>
   2c418:	8140038f 	ldh	r5,14(r16)
   2c41c:	8809883a 	mov	r4,r17
   2c420:	003049c0 	call	3049c <_isatty_r>
   2c424:	103fe226 	beq	r2,zero,2c3b0 <__alt_data_end+0xfffecfb0>
   2c428:	8080030b 	ldhu	r2,12(r16)
   2c42c:	10800054 	ori	r2,r2,1
   2c430:	8080030d 	sth	r2,12(r16)
   2c434:	003fde06 	br	2c3b0 <__alt_data_end+0xfffecfb0>
   2c438:	8080030b 	ldhu	r2,12(r16)
   2c43c:	10c0800c 	andi	r3,r2,512
   2c440:	183fdb1e 	bne	r3,zero,2c3b0 <__alt_data_end+0xfffecfb0>
   2c444:	10800094 	ori	r2,r2,2
   2c448:	80c010c4 	addi	r3,r16,67
   2c44c:	8080030d 	sth	r2,12(r16)
   2c450:	00800044 	movi	r2,1
   2c454:	80c00015 	stw	r3,0(r16)
   2c458:	80c00415 	stw	r3,16(r16)
   2c45c:	80800515 	stw	r2,20(r16)
   2c460:	003fd306 	br	2c3b0 <__alt_data_end+0xfffecfb0>
   2c464:	04810004 	movi	r18,1024
   2c468:	003fc306 	br	2c378 <__alt_data_end+0xfffecf78>
   2c46c:	0027883a 	mov	r19,zero
   2c470:	04810004 	movi	r18,1024
   2c474:	003fc006 	br	2c378 <__alt_data_end+0xfffecf78>

0002c478 <_malloc_r>:
   2c478:	defff504 	addi	sp,sp,-44
   2c47c:	dc800315 	stw	r18,12(sp)
   2c480:	dfc00a15 	stw	ra,40(sp)
   2c484:	df000915 	stw	fp,36(sp)
   2c488:	ddc00815 	stw	r23,32(sp)
   2c48c:	dd800715 	stw	r22,28(sp)
   2c490:	dd400615 	stw	r21,24(sp)
   2c494:	dd000515 	stw	r20,20(sp)
   2c498:	dcc00415 	stw	r19,16(sp)
   2c49c:	dc400215 	stw	r17,8(sp)
   2c4a0:	dc000115 	stw	r16,4(sp)
   2c4a4:	288002c4 	addi	r2,r5,11
   2c4a8:	00c00584 	movi	r3,22
   2c4ac:	2025883a 	mov	r18,r4
   2c4b0:	18807f2e 	bgeu	r3,r2,2c6b0 <_malloc_r+0x238>
   2c4b4:	047ffe04 	movi	r17,-8
   2c4b8:	1462703a 	and	r17,r2,r17
   2c4bc:	8800a316 	blt	r17,zero,2c74c <_malloc_r+0x2d4>
   2c4c0:	8940a236 	bltu	r17,r5,2c74c <_malloc_r+0x2d4>
   2c4c4:	0031d780 	call	31d78 <__malloc_lock>
   2c4c8:	00807dc4 	movi	r2,503
   2c4cc:	1441e92e 	bgeu	r2,r17,2cc74 <_malloc_r+0x7fc>
   2c4d0:	8804d27a 	srli	r2,r17,9
   2c4d4:	1000a126 	beq	r2,zero,2c75c <_malloc_r+0x2e4>
   2c4d8:	00c00104 	movi	r3,4
   2c4dc:	18811e36 	bltu	r3,r2,2c958 <_malloc_r+0x4e0>
   2c4e0:	8804d1ba 	srli	r2,r17,6
   2c4e4:	12000e44 	addi	r8,r2,57
   2c4e8:	11c00e04 	addi	r7,r2,56
   2c4ec:	4209883a 	add	r4,r8,r8
   2c4f0:	04c000f4 	movhi	r19,3
   2c4f4:	2109883a 	add	r4,r4,r4
   2c4f8:	9cd41604 	addi	r19,r19,20568
   2c4fc:	2109883a 	add	r4,r4,r4
   2c500:	9909883a 	add	r4,r19,r4
   2c504:	24000117 	ldw	r16,4(r4)
   2c508:	213ffe04 	addi	r4,r4,-8
   2c50c:	24009726 	beq	r4,r16,2c76c <_malloc_r+0x2f4>
   2c510:	80800117 	ldw	r2,4(r16)
   2c514:	01bfff04 	movi	r6,-4
   2c518:	014003c4 	movi	r5,15
   2c51c:	1184703a 	and	r2,r2,r6
   2c520:	1447c83a 	sub	r3,r2,r17
   2c524:	28c00716 	blt	r5,r3,2c544 <_malloc_r+0xcc>
   2c528:	1800920e 	bge	r3,zero,2c774 <_malloc_r+0x2fc>
   2c52c:	84000317 	ldw	r16,12(r16)
   2c530:	24008e26 	beq	r4,r16,2c76c <_malloc_r+0x2f4>
   2c534:	80800117 	ldw	r2,4(r16)
   2c538:	1184703a 	and	r2,r2,r6
   2c53c:	1447c83a 	sub	r3,r2,r17
   2c540:	28fff90e 	bge	r5,r3,2c528 <__alt_data_end+0xfffed128>
   2c544:	3809883a 	mov	r4,r7
   2c548:	018000f4 	movhi	r6,3
   2c54c:	9c000417 	ldw	r16,16(r19)
   2c550:	31941604 	addi	r6,r6,20568
   2c554:	32000204 	addi	r8,r6,8
   2c558:	82013426 	beq	r16,r8,2ca2c <_malloc_r+0x5b4>
   2c55c:	80c00117 	ldw	r3,4(r16)
   2c560:	00bfff04 	movi	r2,-4
   2c564:	188e703a 	and	r7,r3,r2
   2c568:	3c45c83a 	sub	r2,r7,r17
   2c56c:	00c003c4 	movi	r3,15
   2c570:	18811f16 	blt	r3,r2,2c9f0 <_malloc_r+0x578>
   2c574:	32000515 	stw	r8,20(r6)
   2c578:	32000415 	stw	r8,16(r6)
   2c57c:	10007f0e 	bge	r2,zero,2c77c <_malloc_r+0x304>
   2c580:	00807fc4 	movi	r2,511
   2c584:	11c0fd36 	bltu	r2,r7,2c97c <_malloc_r+0x504>
   2c588:	3806d0fa 	srli	r3,r7,3
   2c58c:	01c00044 	movi	r7,1
   2c590:	30800117 	ldw	r2,4(r6)
   2c594:	19400044 	addi	r5,r3,1
   2c598:	294b883a 	add	r5,r5,r5
   2c59c:	1807d0ba 	srai	r3,r3,2
   2c5a0:	294b883a 	add	r5,r5,r5
   2c5a4:	294b883a 	add	r5,r5,r5
   2c5a8:	298b883a 	add	r5,r5,r6
   2c5ac:	38c6983a 	sll	r3,r7,r3
   2c5b0:	29c00017 	ldw	r7,0(r5)
   2c5b4:	2a7ffe04 	addi	r9,r5,-8
   2c5b8:	1886b03a 	or	r3,r3,r2
   2c5bc:	82400315 	stw	r9,12(r16)
   2c5c0:	81c00215 	stw	r7,8(r16)
   2c5c4:	30c00115 	stw	r3,4(r6)
   2c5c8:	2c000015 	stw	r16,0(r5)
   2c5cc:	3c000315 	stw	r16,12(r7)
   2c5d0:	2005d0ba 	srai	r2,r4,2
   2c5d4:	01400044 	movi	r5,1
   2c5d8:	288a983a 	sll	r5,r5,r2
   2c5dc:	19406f36 	bltu	r3,r5,2c79c <_malloc_r+0x324>
   2c5e0:	28c4703a 	and	r2,r5,r3
   2c5e4:	10000a1e 	bne	r2,zero,2c610 <_malloc_r+0x198>
   2c5e8:	00bfff04 	movi	r2,-4
   2c5ec:	294b883a 	add	r5,r5,r5
   2c5f0:	2088703a 	and	r4,r4,r2
   2c5f4:	28c4703a 	and	r2,r5,r3
   2c5f8:	21000104 	addi	r4,r4,4
   2c5fc:	1000041e 	bne	r2,zero,2c610 <_malloc_r+0x198>
   2c600:	294b883a 	add	r5,r5,r5
   2c604:	28c4703a 	and	r2,r5,r3
   2c608:	21000104 	addi	r4,r4,4
   2c60c:	103ffc26 	beq	r2,zero,2c600 <__alt_data_end+0xfffed200>
   2c610:	02bfff04 	movi	r10,-4
   2c614:	024003c4 	movi	r9,15
   2c618:	21800044 	addi	r6,r4,1
   2c61c:	318d883a 	add	r6,r6,r6
   2c620:	318d883a 	add	r6,r6,r6
   2c624:	318d883a 	add	r6,r6,r6
   2c628:	998d883a 	add	r6,r19,r6
   2c62c:	333ffe04 	addi	r12,r6,-8
   2c630:	2017883a 	mov	r11,r4
   2c634:	31800104 	addi	r6,r6,4
   2c638:	34000017 	ldw	r16,0(r6)
   2c63c:	31fffd04 	addi	r7,r6,-12
   2c640:	81c0041e 	bne	r16,r7,2c654 <_malloc_r+0x1dc>
   2c644:	0000fb06 	br	2ca34 <_malloc_r+0x5bc>
   2c648:	1801030e 	bge	r3,zero,2ca58 <_malloc_r+0x5e0>
   2c64c:	84000317 	ldw	r16,12(r16)
   2c650:	81c0f826 	beq	r16,r7,2ca34 <_malloc_r+0x5bc>
   2c654:	80800117 	ldw	r2,4(r16)
   2c658:	1284703a 	and	r2,r2,r10
   2c65c:	1447c83a 	sub	r3,r2,r17
   2c660:	48fff90e 	bge	r9,r3,2c648 <__alt_data_end+0xfffed248>
   2c664:	80800317 	ldw	r2,12(r16)
   2c668:	81000217 	ldw	r4,8(r16)
   2c66c:	89400054 	ori	r5,r17,1
   2c670:	81400115 	stw	r5,4(r16)
   2c674:	20800315 	stw	r2,12(r4)
   2c678:	11000215 	stw	r4,8(r2)
   2c67c:	8463883a 	add	r17,r16,r17
   2c680:	9c400515 	stw	r17,20(r19)
   2c684:	9c400415 	stw	r17,16(r19)
   2c688:	18800054 	ori	r2,r3,1
   2c68c:	88800115 	stw	r2,4(r17)
   2c690:	8a000315 	stw	r8,12(r17)
   2c694:	8a000215 	stw	r8,8(r17)
   2c698:	88e3883a 	add	r17,r17,r3
   2c69c:	88c00015 	stw	r3,0(r17)
   2c6a0:	9009883a 	mov	r4,r18
   2c6a4:	0031d9c0 	call	31d9c <__malloc_unlock>
   2c6a8:	80800204 	addi	r2,r16,8
   2c6ac:	00001b06 	br	2c71c <_malloc_r+0x2a4>
   2c6b0:	04400404 	movi	r17,16
   2c6b4:	89402536 	bltu	r17,r5,2c74c <_malloc_r+0x2d4>
   2c6b8:	0031d780 	call	31d78 <__malloc_lock>
   2c6bc:	00800184 	movi	r2,6
   2c6c0:	01000084 	movi	r4,2
   2c6c4:	04c000f4 	movhi	r19,3
   2c6c8:	1085883a 	add	r2,r2,r2
   2c6cc:	9cd41604 	addi	r19,r19,20568
   2c6d0:	1085883a 	add	r2,r2,r2
   2c6d4:	9885883a 	add	r2,r19,r2
   2c6d8:	14000117 	ldw	r16,4(r2)
   2c6dc:	10fffe04 	addi	r3,r2,-8
   2c6e0:	80c0d926 	beq	r16,r3,2ca48 <_malloc_r+0x5d0>
   2c6e4:	80c00117 	ldw	r3,4(r16)
   2c6e8:	81000317 	ldw	r4,12(r16)
   2c6ec:	00bfff04 	movi	r2,-4
   2c6f0:	1884703a 	and	r2,r3,r2
   2c6f4:	81400217 	ldw	r5,8(r16)
   2c6f8:	8085883a 	add	r2,r16,r2
   2c6fc:	10c00117 	ldw	r3,4(r2)
   2c700:	29000315 	stw	r4,12(r5)
   2c704:	21400215 	stw	r5,8(r4)
   2c708:	18c00054 	ori	r3,r3,1
   2c70c:	10c00115 	stw	r3,4(r2)
   2c710:	9009883a 	mov	r4,r18
   2c714:	0031d9c0 	call	31d9c <__malloc_unlock>
   2c718:	80800204 	addi	r2,r16,8
   2c71c:	dfc00a17 	ldw	ra,40(sp)
   2c720:	df000917 	ldw	fp,36(sp)
   2c724:	ddc00817 	ldw	r23,32(sp)
   2c728:	dd800717 	ldw	r22,28(sp)
   2c72c:	dd400617 	ldw	r21,24(sp)
   2c730:	dd000517 	ldw	r20,20(sp)
   2c734:	dcc00417 	ldw	r19,16(sp)
   2c738:	dc800317 	ldw	r18,12(sp)
   2c73c:	dc400217 	ldw	r17,8(sp)
   2c740:	dc000117 	ldw	r16,4(sp)
   2c744:	dec00b04 	addi	sp,sp,44
   2c748:	f800283a 	ret
   2c74c:	00800304 	movi	r2,12
   2c750:	90800015 	stw	r2,0(r18)
   2c754:	0005883a 	mov	r2,zero
   2c758:	003ff006 	br	2c71c <__alt_data_end+0xfffed31c>
   2c75c:	01002004 	movi	r4,128
   2c760:	02001004 	movi	r8,64
   2c764:	01c00fc4 	movi	r7,63
   2c768:	003f6106 	br	2c4f0 <__alt_data_end+0xfffed0f0>
   2c76c:	4009883a 	mov	r4,r8
   2c770:	003f7506 	br	2c548 <__alt_data_end+0xfffed148>
   2c774:	81000317 	ldw	r4,12(r16)
   2c778:	003fde06 	br	2c6f4 <__alt_data_end+0xfffed2f4>
   2c77c:	81c5883a 	add	r2,r16,r7
   2c780:	11400117 	ldw	r5,4(r2)
   2c784:	9009883a 	mov	r4,r18
   2c788:	29400054 	ori	r5,r5,1
   2c78c:	11400115 	stw	r5,4(r2)
   2c790:	0031d9c0 	call	31d9c <__malloc_unlock>
   2c794:	80800204 	addi	r2,r16,8
   2c798:	003fe006 	br	2c71c <__alt_data_end+0xfffed31c>
   2c79c:	9c000217 	ldw	r16,8(r19)
   2c7a0:	00bfff04 	movi	r2,-4
   2c7a4:	85800117 	ldw	r22,4(r16)
   2c7a8:	b0ac703a 	and	r22,r22,r2
   2c7ac:	b4400336 	bltu	r22,r17,2c7bc <_malloc_r+0x344>
   2c7b0:	b445c83a 	sub	r2,r22,r17
   2c7b4:	00c003c4 	movi	r3,15
   2c7b8:	18805d16 	blt	r3,r2,2c930 <_malloc_r+0x4b8>
   2c7bc:	05c000f4 	movhi	r23,3
   2c7c0:	00800134 	movhi	r2,4
   2c7c4:	10a06f04 	addi	r2,r2,-32324
   2c7c8:	bdd99e04 	addi	r23,r23,26232
   2c7cc:	15400017 	ldw	r21,0(r2)
   2c7d0:	b8c00017 	ldw	r3,0(r23)
   2c7d4:	00bfffc4 	movi	r2,-1
   2c7d8:	858d883a 	add	r6,r16,r22
   2c7dc:	8d6b883a 	add	r21,r17,r21
   2c7e0:	1880ea26 	beq	r3,r2,2cb8c <_malloc_r+0x714>
   2c7e4:	ad4403c4 	addi	r21,r21,4111
   2c7e8:	00bc0004 	movi	r2,-4096
   2c7ec:	a8aa703a 	and	r21,r21,r2
   2c7f0:	a80b883a 	mov	r5,r21
   2c7f4:	9009883a 	mov	r4,r18
   2c7f8:	d9800015 	stw	r6,0(sp)
   2c7fc:	002e7080 	call	2e708 <_sbrk_r>
   2c800:	1029883a 	mov	r20,r2
   2c804:	00bfffc4 	movi	r2,-1
   2c808:	d9800017 	ldw	r6,0(sp)
   2c80c:	a080e826 	beq	r20,r2,2cbb0 <_malloc_r+0x738>
   2c810:	a180a636 	bltu	r20,r6,2caac <_malloc_r+0x634>
   2c814:	07000134 	movhi	fp,4
   2c818:	e7207804 	addi	fp,fp,-32288
   2c81c:	e0800017 	ldw	r2,0(fp)
   2c820:	a887883a 	add	r3,r21,r2
   2c824:	e0c00015 	stw	r3,0(fp)
   2c828:	3500e626 	beq	r6,r20,2cbc4 <_malloc_r+0x74c>
   2c82c:	b9000017 	ldw	r4,0(r23)
   2c830:	00bfffc4 	movi	r2,-1
   2c834:	2080ee26 	beq	r4,r2,2cbf0 <_malloc_r+0x778>
   2c838:	a185c83a 	sub	r2,r20,r6
   2c83c:	10c5883a 	add	r2,r2,r3
   2c840:	e0800015 	stw	r2,0(fp)
   2c844:	a0c001cc 	andi	r3,r20,7
   2c848:	1800bc26 	beq	r3,zero,2cb3c <_malloc_r+0x6c4>
   2c84c:	a0e9c83a 	sub	r20,r20,r3
   2c850:	00840204 	movi	r2,4104
   2c854:	a5000204 	addi	r20,r20,8
   2c858:	10c7c83a 	sub	r3,r2,r3
   2c85c:	a545883a 	add	r2,r20,r21
   2c860:	1083ffcc 	andi	r2,r2,4095
   2c864:	18abc83a 	sub	r21,r3,r2
   2c868:	a80b883a 	mov	r5,r21
   2c86c:	9009883a 	mov	r4,r18
   2c870:	002e7080 	call	2e708 <_sbrk_r>
   2c874:	00ffffc4 	movi	r3,-1
   2c878:	10c0e126 	beq	r2,r3,2cc00 <_malloc_r+0x788>
   2c87c:	1505c83a 	sub	r2,r2,r20
   2c880:	1545883a 	add	r2,r2,r21
   2c884:	10800054 	ori	r2,r2,1
   2c888:	e0c00017 	ldw	r3,0(fp)
   2c88c:	9d000215 	stw	r20,8(r19)
   2c890:	a0800115 	stw	r2,4(r20)
   2c894:	a8c7883a 	add	r3,r21,r3
   2c898:	e0c00015 	stw	r3,0(fp)
   2c89c:	84c00e26 	beq	r16,r19,2c8d8 <_malloc_r+0x460>
   2c8a0:	018003c4 	movi	r6,15
   2c8a4:	3580a72e 	bgeu	r6,r22,2cb44 <_malloc_r+0x6cc>
   2c8a8:	81400117 	ldw	r5,4(r16)
   2c8ac:	013ffe04 	movi	r4,-8
   2c8b0:	b0bffd04 	addi	r2,r22,-12
   2c8b4:	1104703a 	and	r2,r2,r4
   2c8b8:	2900004c 	andi	r4,r5,1
   2c8bc:	2088b03a 	or	r4,r4,r2
   2c8c0:	81000115 	stw	r4,4(r16)
   2c8c4:	01400144 	movi	r5,5
   2c8c8:	8089883a 	add	r4,r16,r2
   2c8cc:	21400115 	stw	r5,4(r4)
   2c8d0:	21400215 	stw	r5,8(r4)
   2c8d4:	3080cd36 	bltu	r6,r2,2cc0c <_malloc_r+0x794>
   2c8d8:	00800134 	movhi	r2,4
   2c8dc:	10a06e04 	addi	r2,r2,-32328
   2c8e0:	11000017 	ldw	r4,0(r2)
   2c8e4:	20c0012e 	bgeu	r4,r3,2c8ec <_malloc_r+0x474>
   2c8e8:	10c00015 	stw	r3,0(r2)
   2c8ec:	00800134 	movhi	r2,4
   2c8f0:	10a06d04 	addi	r2,r2,-32332
   2c8f4:	11000017 	ldw	r4,0(r2)
   2c8f8:	9c000217 	ldw	r16,8(r19)
   2c8fc:	20c0012e 	bgeu	r4,r3,2c904 <_malloc_r+0x48c>
   2c900:	10c00015 	stw	r3,0(r2)
   2c904:	80c00117 	ldw	r3,4(r16)
   2c908:	00bfff04 	movi	r2,-4
   2c90c:	1886703a 	and	r3,r3,r2
   2c910:	1c45c83a 	sub	r2,r3,r17
   2c914:	1c400236 	bltu	r3,r17,2c920 <_malloc_r+0x4a8>
   2c918:	00c003c4 	movi	r3,15
   2c91c:	18800416 	blt	r3,r2,2c930 <_malloc_r+0x4b8>
   2c920:	9009883a 	mov	r4,r18
   2c924:	0031d9c0 	call	31d9c <__malloc_unlock>
   2c928:	0005883a 	mov	r2,zero
   2c92c:	003f7b06 	br	2c71c <__alt_data_end+0xfffed31c>
   2c930:	88c00054 	ori	r3,r17,1
   2c934:	80c00115 	stw	r3,4(r16)
   2c938:	8463883a 	add	r17,r16,r17
   2c93c:	10800054 	ori	r2,r2,1
   2c940:	9c400215 	stw	r17,8(r19)
   2c944:	88800115 	stw	r2,4(r17)
   2c948:	9009883a 	mov	r4,r18
   2c94c:	0031d9c0 	call	31d9c <__malloc_unlock>
   2c950:	80800204 	addi	r2,r16,8
   2c954:	003f7106 	br	2c71c <__alt_data_end+0xfffed31c>
   2c958:	00c00504 	movi	r3,20
   2c95c:	18804a2e 	bgeu	r3,r2,2ca88 <_malloc_r+0x610>
   2c960:	00c01504 	movi	r3,84
   2c964:	18806e36 	bltu	r3,r2,2cb20 <_malloc_r+0x6a8>
   2c968:	8804d33a 	srli	r2,r17,12
   2c96c:	12001bc4 	addi	r8,r2,111
   2c970:	11c01b84 	addi	r7,r2,110
   2c974:	4209883a 	add	r4,r8,r8
   2c978:	003edd06 	br	2c4f0 <__alt_data_end+0xfffed0f0>
   2c97c:	3804d27a 	srli	r2,r7,9
   2c980:	00c00104 	movi	r3,4
   2c984:	1880442e 	bgeu	r3,r2,2ca98 <_malloc_r+0x620>
   2c988:	00c00504 	movi	r3,20
   2c98c:	18808136 	bltu	r3,r2,2cb94 <_malloc_r+0x71c>
   2c990:	11401704 	addi	r5,r2,92
   2c994:	10c016c4 	addi	r3,r2,91
   2c998:	294b883a 	add	r5,r5,r5
   2c99c:	294b883a 	add	r5,r5,r5
   2c9a0:	294b883a 	add	r5,r5,r5
   2c9a4:	994b883a 	add	r5,r19,r5
   2c9a8:	28800017 	ldw	r2,0(r5)
   2c9ac:	018000f4 	movhi	r6,3
   2c9b0:	297ffe04 	addi	r5,r5,-8
   2c9b4:	31941604 	addi	r6,r6,20568
   2c9b8:	28806526 	beq	r5,r2,2cb50 <_malloc_r+0x6d8>
   2c9bc:	01bfff04 	movi	r6,-4
   2c9c0:	10c00117 	ldw	r3,4(r2)
   2c9c4:	1986703a 	and	r3,r3,r6
   2c9c8:	38c0022e 	bgeu	r7,r3,2c9d4 <_malloc_r+0x55c>
   2c9cc:	10800217 	ldw	r2,8(r2)
   2c9d0:	28bffb1e 	bne	r5,r2,2c9c0 <__alt_data_end+0xfffed5c0>
   2c9d4:	11400317 	ldw	r5,12(r2)
   2c9d8:	98c00117 	ldw	r3,4(r19)
   2c9dc:	81400315 	stw	r5,12(r16)
   2c9e0:	80800215 	stw	r2,8(r16)
   2c9e4:	2c000215 	stw	r16,8(r5)
   2c9e8:	14000315 	stw	r16,12(r2)
   2c9ec:	003ef806 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2c9f0:	88c00054 	ori	r3,r17,1
   2c9f4:	80c00115 	stw	r3,4(r16)
   2c9f8:	8463883a 	add	r17,r16,r17
   2c9fc:	34400515 	stw	r17,20(r6)
   2ca00:	34400415 	stw	r17,16(r6)
   2ca04:	10c00054 	ori	r3,r2,1
   2ca08:	8a000315 	stw	r8,12(r17)
   2ca0c:	8a000215 	stw	r8,8(r17)
   2ca10:	88c00115 	stw	r3,4(r17)
   2ca14:	88a3883a 	add	r17,r17,r2
   2ca18:	88800015 	stw	r2,0(r17)
   2ca1c:	9009883a 	mov	r4,r18
   2ca20:	0031d9c0 	call	31d9c <__malloc_unlock>
   2ca24:	80800204 	addi	r2,r16,8
   2ca28:	003f3c06 	br	2c71c <__alt_data_end+0xfffed31c>
   2ca2c:	30c00117 	ldw	r3,4(r6)
   2ca30:	003ee706 	br	2c5d0 <__alt_data_end+0xfffed1d0>
   2ca34:	5ac00044 	addi	r11,r11,1
   2ca38:	588000cc 	andi	r2,r11,3
   2ca3c:	31800204 	addi	r6,r6,8
   2ca40:	103efd1e 	bne	r2,zero,2c638 <__alt_data_end+0xfffed238>
   2ca44:	00002406 	br	2cad8 <_malloc_r+0x660>
   2ca48:	14000317 	ldw	r16,12(r2)
   2ca4c:	143f251e 	bne	r2,r16,2c6e4 <__alt_data_end+0xfffed2e4>
   2ca50:	21000084 	addi	r4,r4,2
   2ca54:	003ebc06 	br	2c548 <__alt_data_end+0xfffed148>
   2ca58:	8085883a 	add	r2,r16,r2
   2ca5c:	10c00117 	ldw	r3,4(r2)
   2ca60:	81000317 	ldw	r4,12(r16)
   2ca64:	81400217 	ldw	r5,8(r16)
   2ca68:	18c00054 	ori	r3,r3,1
   2ca6c:	10c00115 	stw	r3,4(r2)
   2ca70:	29000315 	stw	r4,12(r5)
   2ca74:	21400215 	stw	r5,8(r4)
   2ca78:	9009883a 	mov	r4,r18
   2ca7c:	0031d9c0 	call	31d9c <__malloc_unlock>
   2ca80:	80800204 	addi	r2,r16,8
   2ca84:	003f2506 	br	2c71c <__alt_data_end+0xfffed31c>
   2ca88:	12001704 	addi	r8,r2,92
   2ca8c:	11c016c4 	addi	r7,r2,91
   2ca90:	4209883a 	add	r4,r8,r8
   2ca94:	003e9606 	br	2c4f0 <__alt_data_end+0xfffed0f0>
   2ca98:	3804d1ba 	srli	r2,r7,6
   2ca9c:	11400e44 	addi	r5,r2,57
   2caa0:	10c00e04 	addi	r3,r2,56
   2caa4:	294b883a 	add	r5,r5,r5
   2caa8:	003fbc06 	br	2c99c <__alt_data_end+0xfffed59c>
   2caac:	84ff5926 	beq	r16,r19,2c814 <__alt_data_end+0xfffed414>
   2cab0:	008000f4 	movhi	r2,3
   2cab4:	10941604 	addi	r2,r2,20568
   2cab8:	14000217 	ldw	r16,8(r2)
   2cabc:	00bfff04 	movi	r2,-4
   2cac0:	80c00117 	ldw	r3,4(r16)
   2cac4:	1886703a 	and	r3,r3,r2
   2cac8:	003f9106 	br	2c910 <__alt_data_end+0xfffed510>
   2cacc:	60800217 	ldw	r2,8(r12)
   2cad0:	213fffc4 	addi	r4,r4,-1
   2cad4:	1300651e 	bne	r2,r12,2cc6c <_malloc_r+0x7f4>
   2cad8:	208000cc 	andi	r2,r4,3
   2cadc:	633ffe04 	addi	r12,r12,-8
   2cae0:	103ffa1e 	bne	r2,zero,2cacc <__alt_data_end+0xfffed6cc>
   2cae4:	98800117 	ldw	r2,4(r19)
   2cae8:	0146303a 	nor	r3,zero,r5
   2caec:	1884703a 	and	r2,r3,r2
   2caf0:	98800115 	stw	r2,4(r19)
   2caf4:	294b883a 	add	r5,r5,r5
   2caf8:	117f2836 	bltu	r2,r5,2c79c <__alt_data_end+0xfffed39c>
   2cafc:	283f2726 	beq	r5,zero,2c79c <__alt_data_end+0xfffed39c>
   2cb00:	2886703a 	and	r3,r5,r2
   2cb04:	5809883a 	mov	r4,r11
   2cb08:	183ec31e 	bne	r3,zero,2c618 <__alt_data_end+0xfffed218>
   2cb0c:	294b883a 	add	r5,r5,r5
   2cb10:	2886703a 	and	r3,r5,r2
   2cb14:	21000104 	addi	r4,r4,4
   2cb18:	183ffc26 	beq	r3,zero,2cb0c <__alt_data_end+0xfffed70c>
   2cb1c:	003ebe06 	br	2c618 <__alt_data_end+0xfffed218>
   2cb20:	00c05504 	movi	r3,340
   2cb24:	18801236 	bltu	r3,r2,2cb70 <_malloc_r+0x6f8>
   2cb28:	8804d3fa 	srli	r2,r17,15
   2cb2c:	12001e04 	addi	r8,r2,120
   2cb30:	11c01dc4 	addi	r7,r2,119
   2cb34:	4209883a 	add	r4,r8,r8
   2cb38:	003e6d06 	br	2c4f0 <__alt_data_end+0xfffed0f0>
   2cb3c:	00c40004 	movi	r3,4096
   2cb40:	003f4606 	br	2c85c <__alt_data_end+0xfffed45c>
   2cb44:	00800044 	movi	r2,1
   2cb48:	a0800115 	stw	r2,4(r20)
   2cb4c:	003f7406 	br	2c920 <__alt_data_end+0xfffed520>
   2cb50:	1805d0ba 	srai	r2,r3,2
   2cb54:	01c00044 	movi	r7,1
   2cb58:	30c00117 	ldw	r3,4(r6)
   2cb5c:	388e983a 	sll	r7,r7,r2
   2cb60:	2805883a 	mov	r2,r5
   2cb64:	38c6b03a 	or	r3,r7,r3
   2cb68:	30c00115 	stw	r3,4(r6)
   2cb6c:	003f9b06 	br	2c9dc <__alt_data_end+0xfffed5dc>
   2cb70:	00c15504 	movi	r3,1364
   2cb74:	18801a36 	bltu	r3,r2,2cbe0 <_malloc_r+0x768>
   2cb78:	8804d4ba 	srli	r2,r17,18
   2cb7c:	12001f44 	addi	r8,r2,125
   2cb80:	11c01f04 	addi	r7,r2,124
   2cb84:	4209883a 	add	r4,r8,r8
   2cb88:	003e5906 	br	2c4f0 <__alt_data_end+0xfffed0f0>
   2cb8c:	ad400404 	addi	r21,r21,16
   2cb90:	003f1706 	br	2c7f0 <__alt_data_end+0xfffed3f0>
   2cb94:	00c01504 	movi	r3,84
   2cb98:	18802336 	bltu	r3,r2,2cc28 <_malloc_r+0x7b0>
   2cb9c:	3804d33a 	srli	r2,r7,12
   2cba0:	11401bc4 	addi	r5,r2,111
   2cba4:	10c01b84 	addi	r3,r2,110
   2cba8:	294b883a 	add	r5,r5,r5
   2cbac:	003f7b06 	br	2c99c <__alt_data_end+0xfffed59c>
   2cbb0:	9c000217 	ldw	r16,8(r19)
   2cbb4:	00bfff04 	movi	r2,-4
   2cbb8:	80c00117 	ldw	r3,4(r16)
   2cbbc:	1886703a 	and	r3,r3,r2
   2cbc0:	003f5306 	br	2c910 <__alt_data_end+0xfffed510>
   2cbc4:	3083ffcc 	andi	r2,r6,4095
   2cbc8:	103f181e 	bne	r2,zero,2c82c <__alt_data_end+0xfffed42c>
   2cbcc:	99000217 	ldw	r4,8(r19)
   2cbd0:	b545883a 	add	r2,r22,r21
   2cbd4:	10800054 	ori	r2,r2,1
   2cbd8:	20800115 	stw	r2,4(r4)
   2cbdc:	003f3e06 	br	2c8d8 <__alt_data_end+0xfffed4d8>
   2cbe0:	01003f84 	movi	r4,254
   2cbe4:	02001fc4 	movi	r8,127
   2cbe8:	01c01f84 	movi	r7,126
   2cbec:	003e4006 	br	2c4f0 <__alt_data_end+0xfffed0f0>
   2cbf0:	008000f4 	movhi	r2,3
   2cbf4:	10999e04 	addi	r2,r2,26232
   2cbf8:	15000015 	stw	r20,0(r2)
   2cbfc:	003f1106 	br	2c844 <__alt_data_end+0xfffed444>
   2cc00:	00800044 	movi	r2,1
   2cc04:	002b883a 	mov	r21,zero
   2cc08:	003f1f06 	br	2c888 <__alt_data_end+0xfffed488>
   2cc0c:	81400204 	addi	r5,r16,8
   2cc10:	9009883a 	mov	r4,r18
   2cc14:	002b88c0 	call	2b88c <_free_r>
   2cc18:	00800134 	movhi	r2,4
   2cc1c:	10a07804 	addi	r2,r2,-32288
   2cc20:	10c00017 	ldw	r3,0(r2)
   2cc24:	003f2c06 	br	2c8d8 <__alt_data_end+0xfffed4d8>
   2cc28:	00c05504 	movi	r3,340
   2cc2c:	18800536 	bltu	r3,r2,2cc44 <_malloc_r+0x7cc>
   2cc30:	3804d3fa 	srli	r2,r7,15
   2cc34:	11401e04 	addi	r5,r2,120
   2cc38:	10c01dc4 	addi	r3,r2,119
   2cc3c:	294b883a 	add	r5,r5,r5
   2cc40:	003f5606 	br	2c99c <__alt_data_end+0xfffed59c>
   2cc44:	00c15504 	movi	r3,1364
   2cc48:	18800536 	bltu	r3,r2,2cc60 <_malloc_r+0x7e8>
   2cc4c:	3804d4ba 	srli	r2,r7,18
   2cc50:	11401f44 	addi	r5,r2,125
   2cc54:	10c01f04 	addi	r3,r2,124
   2cc58:	294b883a 	add	r5,r5,r5
   2cc5c:	003f4f06 	br	2c99c <__alt_data_end+0xfffed59c>
   2cc60:	01403f84 	movi	r5,254
   2cc64:	00c01f84 	movi	r3,126
   2cc68:	003f4c06 	br	2c99c <__alt_data_end+0xfffed59c>
   2cc6c:	98800117 	ldw	r2,4(r19)
   2cc70:	003fa006 	br	2caf4 <__alt_data_end+0xfffed6f4>
   2cc74:	8808d0fa 	srli	r4,r17,3
   2cc78:	20800044 	addi	r2,r4,1
   2cc7c:	1085883a 	add	r2,r2,r2
   2cc80:	003e9006 	br	2c6c4 <__alt_data_end+0xfffed2c4>

0002cc84 <memchr>:
   2cc84:	208000cc 	andi	r2,r4,3
   2cc88:	280f883a 	mov	r7,r5
   2cc8c:	10003426 	beq	r2,zero,2cd60 <memchr+0xdc>
   2cc90:	30bfffc4 	addi	r2,r6,-1
   2cc94:	30001a26 	beq	r6,zero,2cd00 <memchr+0x7c>
   2cc98:	20c00003 	ldbu	r3,0(r4)
   2cc9c:	29803fcc 	andi	r6,r5,255
   2cca0:	30c0051e 	bne	r6,r3,2ccb8 <memchr+0x34>
   2cca4:	00001806 	br	2cd08 <memchr+0x84>
   2cca8:	10001526 	beq	r2,zero,2cd00 <memchr+0x7c>
   2ccac:	20c00003 	ldbu	r3,0(r4)
   2ccb0:	10bfffc4 	addi	r2,r2,-1
   2ccb4:	30c01426 	beq	r6,r3,2cd08 <memchr+0x84>
   2ccb8:	21000044 	addi	r4,r4,1
   2ccbc:	20c000cc 	andi	r3,r4,3
   2ccc0:	183ff91e 	bne	r3,zero,2cca8 <__alt_data_end+0xfffed8a8>
   2ccc4:	020000c4 	movi	r8,3
   2ccc8:	40801136 	bltu	r8,r2,2cd10 <memchr+0x8c>
   2cccc:	10000c26 	beq	r2,zero,2cd00 <memchr+0x7c>
   2ccd0:	20c00003 	ldbu	r3,0(r4)
   2ccd4:	29403fcc 	andi	r5,r5,255
   2ccd8:	28c00b26 	beq	r5,r3,2cd08 <memchr+0x84>
   2ccdc:	20c00044 	addi	r3,r4,1
   2cce0:	39803fcc 	andi	r6,r7,255
   2cce4:	2089883a 	add	r4,r4,r2
   2cce8:	00000306 	br	2ccf8 <memchr+0x74>
   2ccec:	18c00044 	addi	r3,r3,1
   2ccf0:	197fffc3 	ldbu	r5,-1(r3)
   2ccf4:	31400526 	beq	r6,r5,2cd0c <memchr+0x88>
   2ccf8:	1805883a 	mov	r2,r3
   2ccfc:	20fffb1e 	bne	r4,r3,2ccec <__alt_data_end+0xfffed8ec>
   2cd00:	0005883a 	mov	r2,zero
   2cd04:	f800283a 	ret
   2cd08:	2005883a 	mov	r2,r4
   2cd0c:	f800283a 	ret
   2cd10:	28c03fcc 	andi	r3,r5,255
   2cd14:	1812923a 	slli	r9,r3,8
   2cd18:	02ffbff4 	movhi	r11,65279
   2cd1c:	02a02074 	movhi	r10,32897
   2cd20:	48d2b03a 	or	r9,r9,r3
   2cd24:	4806943a 	slli	r3,r9,16
   2cd28:	5affbfc4 	addi	r11,r11,-257
   2cd2c:	52a02004 	addi	r10,r10,-32640
   2cd30:	48d2b03a 	or	r9,r9,r3
   2cd34:	20c00017 	ldw	r3,0(r4)
   2cd38:	48c6f03a 	xor	r3,r9,r3
   2cd3c:	1acd883a 	add	r6,r3,r11
   2cd40:	00c6303a 	nor	r3,zero,r3
   2cd44:	30c6703a 	and	r3,r6,r3
   2cd48:	1a86703a 	and	r3,r3,r10
   2cd4c:	183fe01e 	bne	r3,zero,2ccd0 <__alt_data_end+0xfffed8d0>
   2cd50:	10bfff04 	addi	r2,r2,-4
   2cd54:	21000104 	addi	r4,r4,4
   2cd58:	40bff636 	bltu	r8,r2,2cd34 <__alt_data_end+0xfffed934>
   2cd5c:	003fdb06 	br	2cccc <__alt_data_end+0xfffed8cc>
   2cd60:	3005883a 	mov	r2,r6
   2cd64:	003fd706 	br	2ccc4 <__alt_data_end+0xfffed8c4>

0002cd68 <memcpy>:
   2cd68:	defffd04 	addi	sp,sp,-12
   2cd6c:	dfc00215 	stw	ra,8(sp)
   2cd70:	dc400115 	stw	r17,4(sp)
   2cd74:	dc000015 	stw	r16,0(sp)
   2cd78:	00c003c4 	movi	r3,15
   2cd7c:	2005883a 	mov	r2,r4
   2cd80:	1980452e 	bgeu	r3,r6,2ce98 <memcpy+0x130>
   2cd84:	2906b03a 	or	r3,r5,r4
   2cd88:	18c000cc 	andi	r3,r3,3
   2cd8c:	1800441e 	bne	r3,zero,2cea0 <memcpy+0x138>
   2cd90:	347ffc04 	addi	r17,r6,-16
   2cd94:	8822d13a 	srli	r17,r17,4
   2cd98:	28c00104 	addi	r3,r5,4
   2cd9c:	23400104 	addi	r13,r4,4
   2cda0:	8820913a 	slli	r16,r17,4
   2cda4:	2b000204 	addi	r12,r5,8
   2cda8:	22c00204 	addi	r11,r4,8
   2cdac:	84000504 	addi	r16,r16,20
   2cdb0:	2a800304 	addi	r10,r5,12
   2cdb4:	22400304 	addi	r9,r4,12
   2cdb8:	2c21883a 	add	r16,r5,r16
   2cdbc:	2811883a 	mov	r8,r5
   2cdc0:	200f883a 	mov	r7,r4
   2cdc4:	41000017 	ldw	r4,0(r8)
   2cdc8:	1fc00017 	ldw	ra,0(r3)
   2cdcc:	63c00017 	ldw	r15,0(r12)
   2cdd0:	39000015 	stw	r4,0(r7)
   2cdd4:	53800017 	ldw	r14,0(r10)
   2cdd8:	6fc00015 	stw	ra,0(r13)
   2cddc:	5bc00015 	stw	r15,0(r11)
   2cde0:	4b800015 	stw	r14,0(r9)
   2cde4:	18c00404 	addi	r3,r3,16
   2cde8:	39c00404 	addi	r7,r7,16
   2cdec:	42000404 	addi	r8,r8,16
   2cdf0:	6b400404 	addi	r13,r13,16
   2cdf4:	63000404 	addi	r12,r12,16
   2cdf8:	5ac00404 	addi	r11,r11,16
   2cdfc:	52800404 	addi	r10,r10,16
   2ce00:	4a400404 	addi	r9,r9,16
   2ce04:	1c3fef1e 	bne	r3,r16,2cdc4 <__alt_data_end+0xfffed9c4>
   2ce08:	89c00044 	addi	r7,r17,1
   2ce0c:	380e913a 	slli	r7,r7,4
   2ce10:	310003cc 	andi	r4,r6,15
   2ce14:	02c000c4 	movi	r11,3
   2ce18:	11c7883a 	add	r3,r2,r7
   2ce1c:	29cb883a 	add	r5,r5,r7
   2ce20:	5900212e 	bgeu	r11,r4,2cea8 <memcpy+0x140>
   2ce24:	1813883a 	mov	r9,r3
   2ce28:	2811883a 	mov	r8,r5
   2ce2c:	200f883a 	mov	r7,r4
   2ce30:	42800017 	ldw	r10,0(r8)
   2ce34:	4a400104 	addi	r9,r9,4
   2ce38:	39ffff04 	addi	r7,r7,-4
   2ce3c:	4abfff15 	stw	r10,-4(r9)
   2ce40:	42000104 	addi	r8,r8,4
   2ce44:	59fffa36 	bltu	r11,r7,2ce30 <__alt_data_end+0xfffeda30>
   2ce48:	213fff04 	addi	r4,r4,-4
   2ce4c:	2008d0ba 	srli	r4,r4,2
   2ce50:	318000cc 	andi	r6,r6,3
   2ce54:	21000044 	addi	r4,r4,1
   2ce58:	2109883a 	add	r4,r4,r4
   2ce5c:	2109883a 	add	r4,r4,r4
   2ce60:	1907883a 	add	r3,r3,r4
   2ce64:	290b883a 	add	r5,r5,r4
   2ce68:	30000626 	beq	r6,zero,2ce84 <memcpy+0x11c>
   2ce6c:	198d883a 	add	r6,r3,r6
   2ce70:	29c00003 	ldbu	r7,0(r5)
   2ce74:	18c00044 	addi	r3,r3,1
   2ce78:	29400044 	addi	r5,r5,1
   2ce7c:	19ffffc5 	stb	r7,-1(r3)
   2ce80:	19bffb1e 	bne	r3,r6,2ce70 <__alt_data_end+0xfffeda70>
   2ce84:	dfc00217 	ldw	ra,8(sp)
   2ce88:	dc400117 	ldw	r17,4(sp)
   2ce8c:	dc000017 	ldw	r16,0(sp)
   2ce90:	dec00304 	addi	sp,sp,12
   2ce94:	f800283a 	ret
   2ce98:	2007883a 	mov	r3,r4
   2ce9c:	003ff206 	br	2ce68 <__alt_data_end+0xfffeda68>
   2cea0:	2007883a 	mov	r3,r4
   2cea4:	003ff106 	br	2ce6c <__alt_data_end+0xfffeda6c>
   2cea8:	200d883a 	mov	r6,r4
   2ceac:	003fee06 	br	2ce68 <__alt_data_end+0xfffeda68>

0002ceb0 <memmove>:
   2ceb0:	2005883a 	mov	r2,r4
   2ceb4:	29000b2e 	bgeu	r5,r4,2cee4 <memmove+0x34>
   2ceb8:	298f883a 	add	r7,r5,r6
   2cebc:	21c0092e 	bgeu	r4,r7,2cee4 <memmove+0x34>
   2cec0:	2187883a 	add	r3,r4,r6
   2cec4:	198bc83a 	sub	r5,r3,r6
   2cec8:	30004826 	beq	r6,zero,2cfec <memmove+0x13c>
   2cecc:	39ffffc4 	addi	r7,r7,-1
   2ced0:	39000003 	ldbu	r4,0(r7)
   2ced4:	18ffffc4 	addi	r3,r3,-1
   2ced8:	19000005 	stb	r4,0(r3)
   2cedc:	28fffb1e 	bne	r5,r3,2cecc <__alt_data_end+0xfffedacc>
   2cee0:	f800283a 	ret
   2cee4:	00c003c4 	movi	r3,15
   2cee8:	1980412e 	bgeu	r3,r6,2cff0 <memmove+0x140>
   2ceec:	2886b03a 	or	r3,r5,r2
   2cef0:	18c000cc 	andi	r3,r3,3
   2cef4:	1800401e 	bne	r3,zero,2cff8 <memmove+0x148>
   2cef8:	33fffc04 	addi	r15,r6,-16
   2cefc:	781ed13a 	srli	r15,r15,4
   2cf00:	28c00104 	addi	r3,r5,4
   2cf04:	13400104 	addi	r13,r2,4
   2cf08:	781c913a 	slli	r14,r15,4
   2cf0c:	2b000204 	addi	r12,r5,8
   2cf10:	12c00204 	addi	r11,r2,8
   2cf14:	73800504 	addi	r14,r14,20
   2cf18:	2a800304 	addi	r10,r5,12
   2cf1c:	12400304 	addi	r9,r2,12
   2cf20:	2b9d883a 	add	r14,r5,r14
   2cf24:	2811883a 	mov	r8,r5
   2cf28:	100f883a 	mov	r7,r2
   2cf2c:	41000017 	ldw	r4,0(r8)
   2cf30:	39c00404 	addi	r7,r7,16
   2cf34:	18c00404 	addi	r3,r3,16
   2cf38:	393ffc15 	stw	r4,-16(r7)
   2cf3c:	193ffc17 	ldw	r4,-16(r3)
   2cf40:	6b400404 	addi	r13,r13,16
   2cf44:	5ac00404 	addi	r11,r11,16
   2cf48:	693ffc15 	stw	r4,-16(r13)
   2cf4c:	61000017 	ldw	r4,0(r12)
   2cf50:	4a400404 	addi	r9,r9,16
   2cf54:	42000404 	addi	r8,r8,16
   2cf58:	593ffc15 	stw	r4,-16(r11)
   2cf5c:	51000017 	ldw	r4,0(r10)
   2cf60:	63000404 	addi	r12,r12,16
   2cf64:	52800404 	addi	r10,r10,16
   2cf68:	493ffc15 	stw	r4,-16(r9)
   2cf6c:	1bbfef1e 	bne	r3,r14,2cf2c <__alt_data_end+0xfffedb2c>
   2cf70:	79000044 	addi	r4,r15,1
   2cf74:	2008913a 	slli	r4,r4,4
   2cf78:	328003cc 	andi	r10,r6,15
   2cf7c:	02c000c4 	movi	r11,3
   2cf80:	1107883a 	add	r3,r2,r4
   2cf84:	290b883a 	add	r5,r5,r4
   2cf88:	5a801e2e 	bgeu	r11,r10,2d004 <memmove+0x154>
   2cf8c:	1813883a 	mov	r9,r3
   2cf90:	2811883a 	mov	r8,r5
   2cf94:	500f883a 	mov	r7,r10
   2cf98:	41000017 	ldw	r4,0(r8)
   2cf9c:	4a400104 	addi	r9,r9,4
   2cfa0:	39ffff04 	addi	r7,r7,-4
   2cfa4:	493fff15 	stw	r4,-4(r9)
   2cfa8:	42000104 	addi	r8,r8,4
   2cfac:	59fffa36 	bltu	r11,r7,2cf98 <__alt_data_end+0xfffedb98>
   2cfb0:	513fff04 	addi	r4,r10,-4
   2cfb4:	2008d0ba 	srli	r4,r4,2
   2cfb8:	318000cc 	andi	r6,r6,3
   2cfbc:	21000044 	addi	r4,r4,1
   2cfc0:	2109883a 	add	r4,r4,r4
   2cfc4:	2109883a 	add	r4,r4,r4
   2cfc8:	1907883a 	add	r3,r3,r4
   2cfcc:	290b883a 	add	r5,r5,r4
   2cfd0:	30000b26 	beq	r6,zero,2d000 <memmove+0x150>
   2cfd4:	198d883a 	add	r6,r3,r6
   2cfd8:	29c00003 	ldbu	r7,0(r5)
   2cfdc:	18c00044 	addi	r3,r3,1
   2cfe0:	29400044 	addi	r5,r5,1
   2cfe4:	19ffffc5 	stb	r7,-1(r3)
   2cfe8:	19bffb1e 	bne	r3,r6,2cfd8 <__alt_data_end+0xfffedbd8>
   2cfec:	f800283a 	ret
   2cff0:	1007883a 	mov	r3,r2
   2cff4:	003ff606 	br	2cfd0 <__alt_data_end+0xfffedbd0>
   2cff8:	1007883a 	mov	r3,r2
   2cffc:	003ff506 	br	2cfd4 <__alt_data_end+0xfffedbd4>
   2d000:	f800283a 	ret
   2d004:	500d883a 	mov	r6,r10
   2d008:	003ff106 	br	2cfd0 <__alt_data_end+0xfffedbd0>

0002d00c <memset>:
   2d00c:	20c000cc 	andi	r3,r4,3
   2d010:	2005883a 	mov	r2,r4
   2d014:	18004426 	beq	r3,zero,2d128 <memset+0x11c>
   2d018:	31ffffc4 	addi	r7,r6,-1
   2d01c:	30004026 	beq	r6,zero,2d120 <memset+0x114>
   2d020:	2813883a 	mov	r9,r5
   2d024:	200d883a 	mov	r6,r4
   2d028:	2007883a 	mov	r3,r4
   2d02c:	00000406 	br	2d040 <memset+0x34>
   2d030:	3a3fffc4 	addi	r8,r7,-1
   2d034:	31800044 	addi	r6,r6,1
   2d038:	38003926 	beq	r7,zero,2d120 <memset+0x114>
   2d03c:	400f883a 	mov	r7,r8
   2d040:	18c00044 	addi	r3,r3,1
   2d044:	32400005 	stb	r9,0(r6)
   2d048:	1a0000cc 	andi	r8,r3,3
   2d04c:	403ff81e 	bne	r8,zero,2d030 <__alt_data_end+0xfffedc30>
   2d050:	010000c4 	movi	r4,3
   2d054:	21c02d2e 	bgeu	r4,r7,2d10c <memset+0x100>
   2d058:	29003fcc 	andi	r4,r5,255
   2d05c:	200c923a 	slli	r6,r4,8
   2d060:	3108b03a 	or	r4,r6,r4
   2d064:	200c943a 	slli	r6,r4,16
   2d068:	218cb03a 	or	r6,r4,r6
   2d06c:	010003c4 	movi	r4,15
   2d070:	21c0182e 	bgeu	r4,r7,2d0d4 <memset+0xc8>
   2d074:	3b3ffc04 	addi	r12,r7,-16
   2d078:	6018d13a 	srli	r12,r12,4
   2d07c:	1a000104 	addi	r8,r3,4
   2d080:	1ac00204 	addi	r11,r3,8
   2d084:	6008913a 	slli	r4,r12,4
   2d088:	1a800304 	addi	r10,r3,12
   2d08c:	1813883a 	mov	r9,r3
   2d090:	21000504 	addi	r4,r4,20
   2d094:	1909883a 	add	r4,r3,r4
   2d098:	49800015 	stw	r6,0(r9)
   2d09c:	41800015 	stw	r6,0(r8)
   2d0a0:	59800015 	stw	r6,0(r11)
   2d0a4:	51800015 	stw	r6,0(r10)
   2d0a8:	42000404 	addi	r8,r8,16
   2d0ac:	4a400404 	addi	r9,r9,16
   2d0b0:	5ac00404 	addi	r11,r11,16
   2d0b4:	52800404 	addi	r10,r10,16
   2d0b8:	413ff71e 	bne	r8,r4,2d098 <__alt_data_end+0xfffedc98>
   2d0bc:	63000044 	addi	r12,r12,1
   2d0c0:	6018913a 	slli	r12,r12,4
   2d0c4:	39c003cc 	andi	r7,r7,15
   2d0c8:	010000c4 	movi	r4,3
   2d0cc:	1b07883a 	add	r3,r3,r12
   2d0d0:	21c00e2e 	bgeu	r4,r7,2d10c <memset+0x100>
   2d0d4:	1813883a 	mov	r9,r3
   2d0d8:	3811883a 	mov	r8,r7
   2d0dc:	010000c4 	movi	r4,3
   2d0e0:	49800015 	stw	r6,0(r9)
   2d0e4:	423fff04 	addi	r8,r8,-4
   2d0e8:	4a400104 	addi	r9,r9,4
   2d0ec:	223ffc36 	bltu	r4,r8,2d0e0 <__alt_data_end+0xfffedce0>
   2d0f0:	393fff04 	addi	r4,r7,-4
   2d0f4:	2008d0ba 	srli	r4,r4,2
   2d0f8:	39c000cc 	andi	r7,r7,3
   2d0fc:	21000044 	addi	r4,r4,1
   2d100:	2109883a 	add	r4,r4,r4
   2d104:	2109883a 	add	r4,r4,r4
   2d108:	1907883a 	add	r3,r3,r4
   2d10c:	38000526 	beq	r7,zero,2d124 <memset+0x118>
   2d110:	19cf883a 	add	r7,r3,r7
   2d114:	19400005 	stb	r5,0(r3)
   2d118:	18c00044 	addi	r3,r3,1
   2d11c:	38fffd1e 	bne	r7,r3,2d114 <__alt_data_end+0xfffedd14>
   2d120:	f800283a 	ret
   2d124:	f800283a 	ret
   2d128:	2007883a 	mov	r3,r4
   2d12c:	300f883a 	mov	r7,r6
   2d130:	003fc706 	br	2d050 <__alt_data_end+0xfffedc50>

0002d134 <_Balloc>:
   2d134:	20801317 	ldw	r2,76(r4)
   2d138:	defffc04 	addi	sp,sp,-16
   2d13c:	dc400115 	stw	r17,4(sp)
   2d140:	dc000015 	stw	r16,0(sp)
   2d144:	dfc00315 	stw	ra,12(sp)
   2d148:	dc800215 	stw	r18,8(sp)
   2d14c:	2023883a 	mov	r17,r4
   2d150:	2821883a 	mov	r16,r5
   2d154:	10000f26 	beq	r2,zero,2d194 <_Balloc+0x60>
   2d158:	8407883a 	add	r3,r16,r16
   2d15c:	18c7883a 	add	r3,r3,r3
   2d160:	10c7883a 	add	r3,r2,r3
   2d164:	18800017 	ldw	r2,0(r3)
   2d168:	10001126 	beq	r2,zero,2d1b0 <_Balloc+0x7c>
   2d16c:	11000017 	ldw	r4,0(r2)
   2d170:	19000015 	stw	r4,0(r3)
   2d174:	10000415 	stw	zero,16(r2)
   2d178:	10000315 	stw	zero,12(r2)
   2d17c:	dfc00317 	ldw	ra,12(sp)
   2d180:	dc800217 	ldw	r18,8(sp)
   2d184:	dc400117 	ldw	r17,4(sp)
   2d188:	dc000017 	ldw	r16,0(sp)
   2d18c:	dec00404 	addi	sp,sp,16
   2d190:	f800283a 	ret
   2d194:	01800844 	movi	r6,33
   2d198:	01400104 	movi	r5,4
   2d19c:	00300700 	call	30070 <_calloc_r>
   2d1a0:	88801315 	stw	r2,76(r17)
   2d1a4:	103fec1e 	bne	r2,zero,2d158 <__alt_data_end+0xfffedd58>
   2d1a8:	0005883a 	mov	r2,zero
   2d1ac:	003ff306 	br	2d17c <__alt_data_end+0xfffedd7c>
   2d1b0:	01400044 	movi	r5,1
   2d1b4:	2c24983a 	sll	r18,r5,r16
   2d1b8:	8809883a 	mov	r4,r17
   2d1bc:	91800144 	addi	r6,r18,5
   2d1c0:	318d883a 	add	r6,r6,r6
   2d1c4:	318d883a 	add	r6,r6,r6
   2d1c8:	00300700 	call	30070 <_calloc_r>
   2d1cc:	103ff626 	beq	r2,zero,2d1a8 <__alt_data_end+0xfffedda8>
   2d1d0:	14000115 	stw	r16,4(r2)
   2d1d4:	14800215 	stw	r18,8(r2)
   2d1d8:	003fe606 	br	2d174 <__alt_data_end+0xfffedd74>

0002d1dc <_Bfree>:
   2d1dc:	28000826 	beq	r5,zero,2d200 <_Bfree+0x24>
   2d1e0:	28c00117 	ldw	r3,4(r5)
   2d1e4:	20801317 	ldw	r2,76(r4)
   2d1e8:	18c7883a 	add	r3,r3,r3
   2d1ec:	18c7883a 	add	r3,r3,r3
   2d1f0:	10c5883a 	add	r2,r2,r3
   2d1f4:	10c00017 	ldw	r3,0(r2)
   2d1f8:	28c00015 	stw	r3,0(r5)
   2d1fc:	11400015 	stw	r5,0(r2)
   2d200:	f800283a 	ret

0002d204 <__multadd>:
   2d204:	defffa04 	addi	sp,sp,-24
   2d208:	dc800315 	stw	r18,12(sp)
   2d20c:	dc400215 	stw	r17,8(sp)
   2d210:	dc000115 	stw	r16,4(sp)
   2d214:	2823883a 	mov	r17,r5
   2d218:	2c000417 	ldw	r16,16(r5)
   2d21c:	dfc00515 	stw	ra,20(sp)
   2d220:	dcc00415 	stw	r19,16(sp)
   2d224:	2025883a 	mov	r18,r4
   2d228:	29400504 	addi	r5,r5,20
   2d22c:	0011883a 	mov	r8,zero
   2d230:	28c00017 	ldw	r3,0(r5)
   2d234:	29400104 	addi	r5,r5,4
   2d238:	42000044 	addi	r8,r8,1
   2d23c:	18bfffcc 	andi	r2,r3,65535
   2d240:	1185383a 	mul	r2,r2,r6
   2d244:	1806d43a 	srli	r3,r3,16
   2d248:	11cf883a 	add	r7,r2,r7
   2d24c:	3808d43a 	srli	r4,r7,16
   2d250:	1987383a 	mul	r3,r3,r6
   2d254:	38bfffcc 	andi	r2,r7,65535
   2d258:	1907883a 	add	r3,r3,r4
   2d25c:	1808943a 	slli	r4,r3,16
   2d260:	180ed43a 	srli	r7,r3,16
   2d264:	2085883a 	add	r2,r4,r2
   2d268:	28bfff15 	stw	r2,-4(r5)
   2d26c:	443ff016 	blt	r8,r16,2d230 <__alt_data_end+0xfffede30>
   2d270:	38000926 	beq	r7,zero,2d298 <__multadd+0x94>
   2d274:	88800217 	ldw	r2,8(r17)
   2d278:	80800f0e 	bge	r16,r2,2d2b8 <__multadd+0xb4>
   2d27c:	80800144 	addi	r2,r16,5
   2d280:	1085883a 	add	r2,r2,r2
   2d284:	1085883a 	add	r2,r2,r2
   2d288:	8885883a 	add	r2,r17,r2
   2d28c:	11c00015 	stw	r7,0(r2)
   2d290:	84000044 	addi	r16,r16,1
   2d294:	8c000415 	stw	r16,16(r17)
   2d298:	8805883a 	mov	r2,r17
   2d29c:	dfc00517 	ldw	ra,20(sp)
   2d2a0:	dcc00417 	ldw	r19,16(sp)
   2d2a4:	dc800317 	ldw	r18,12(sp)
   2d2a8:	dc400217 	ldw	r17,8(sp)
   2d2ac:	dc000117 	ldw	r16,4(sp)
   2d2b0:	dec00604 	addi	sp,sp,24
   2d2b4:	f800283a 	ret
   2d2b8:	89400117 	ldw	r5,4(r17)
   2d2bc:	9009883a 	mov	r4,r18
   2d2c0:	d9c00015 	stw	r7,0(sp)
   2d2c4:	29400044 	addi	r5,r5,1
   2d2c8:	002d1340 	call	2d134 <_Balloc>
   2d2cc:	89800417 	ldw	r6,16(r17)
   2d2d0:	89400304 	addi	r5,r17,12
   2d2d4:	11000304 	addi	r4,r2,12
   2d2d8:	31800084 	addi	r6,r6,2
   2d2dc:	318d883a 	add	r6,r6,r6
   2d2e0:	318d883a 	add	r6,r6,r6
   2d2e4:	1027883a 	mov	r19,r2
   2d2e8:	002cd680 	call	2cd68 <memcpy>
   2d2ec:	d9c00017 	ldw	r7,0(sp)
   2d2f0:	88000a26 	beq	r17,zero,2d31c <__multadd+0x118>
   2d2f4:	88c00117 	ldw	r3,4(r17)
   2d2f8:	90801317 	ldw	r2,76(r18)
   2d2fc:	18c7883a 	add	r3,r3,r3
   2d300:	18c7883a 	add	r3,r3,r3
   2d304:	10c5883a 	add	r2,r2,r3
   2d308:	10c00017 	ldw	r3,0(r2)
   2d30c:	88c00015 	stw	r3,0(r17)
   2d310:	14400015 	stw	r17,0(r2)
   2d314:	9823883a 	mov	r17,r19
   2d318:	003fd806 	br	2d27c <__alt_data_end+0xfffede7c>
   2d31c:	9823883a 	mov	r17,r19
   2d320:	003fd606 	br	2d27c <__alt_data_end+0xfffede7c>

0002d324 <__s2b>:
   2d324:	defff904 	addi	sp,sp,-28
   2d328:	dc400115 	stw	r17,4(sp)
   2d32c:	dc000015 	stw	r16,0(sp)
   2d330:	2023883a 	mov	r17,r4
   2d334:	2821883a 	mov	r16,r5
   2d338:	39000204 	addi	r4,r7,8
   2d33c:	01400244 	movi	r5,9
   2d340:	dcc00315 	stw	r19,12(sp)
   2d344:	dc800215 	stw	r18,8(sp)
   2d348:	dfc00615 	stw	ra,24(sp)
   2d34c:	dd400515 	stw	r21,20(sp)
   2d350:	dd000415 	stw	r20,16(sp)
   2d354:	3825883a 	mov	r18,r7
   2d358:	3027883a 	mov	r19,r6
   2d35c:	00238280 	call	23828 <__divsi3>
   2d360:	00c00044 	movi	r3,1
   2d364:	000b883a 	mov	r5,zero
   2d368:	1880030e 	bge	r3,r2,2d378 <__s2b+0x54>
   2d36c:	18c7883a 	add	r3,r3,r3
   2d370:	29400044 	addi	r5,r5,1
   2d374:	18bffd16 	blt	r3,r2,2d36c <__alt_data_end+0xfffedf6c>
   2d378:	8809883a 	mov	r4,r17
   2d37c:	002d1340 	call	2d134 <_Balloc>
   2d380:	d8c00717 	ldw	r3,28(sp)
   2d384:	10c00515 	stw	r3,20(r2)
   2d388:	00c00044 	movi	r3,1
   2d38c:	10c00415 	stw	r3,16(r2)
   2d390:	00c00244 	movi	r3,9
   2d394:	1cc0210e 	bge	r3,r19,2d41c <__s2b+0xf8>
   2d398:	80eb883a 	add	r21,r16,r3
   2d39c:	a829883a 	mov	r20,r21
   2d3a0:	84e1883a 	add	r16,r16,r19
   2d3a4:	a1c00007 	ldb	r7,0(r20)
   2d3a8:	01800284 	movi	r6,10
   2d3ac:	a5000044 	addi	r20,r20,1
   2d3b0:	100b883a 	mov	r5,r2
   2d3b4:	39fff404 	addi	r7,r7,-48
   2d3b8:	8809883a 	mov	r4,r17
   2d3bc:	002d2040 	call	2d204 <__multadd>
   2d3c0:	a43ff81e 	bne	r20,r16,2d3a4 <__alt_data_end+0xfffedfa4>
   2d3c4:	ace1883a 	add	r16,r21,r19
   2d3c8:	843ffe04 	addi	r16,r16,-8
   2d3cc:	9c800a0e 	bge	r19,r18,2d3f8 <__s2b+0xd4>
   2d3d0:	94e5c83a 	sub	r18,r18,r19
   2d3d4:	84a5883a 	add	r18,r16,r18
   2d3d8:	81c00007 	ldb	r7,0(r16)
   2d3dc:	01800284 	movi	r6,10
   2d3e0:	84000044 	addi	r16,r16,1
   2d3e4:	100b883a 	mov	r5,r2
   2d3e8:	39fff404 	addi	r7,r7,-48
   2d3ec:	8809883a 	mov	r4,r17
   2d3f0:	002d2040 	call	2d204 <__multadd>
   2d3f4:	84bff81e 	bne	r16,r18,2d3d8 <__alt_data_end+0xfffedfd8>
   2d3f8:	dfc00617 	ldw	ra,24(sp)
   2d3fc:	dd400517 	ldw	r21,20(sp)
   2d400:	dd000417 	ldw	r20,16(sp)
   2d404:	dcc00317 	ldw	r19,12(sp)
   2d408:	dc800217 	ldw	r18,8(sp)
   2d40c:	dc400117 	ldw	r17,4(sp)
   2d410:	dc000017 	ldw	r16,0(sp)
   2d414:	dec00704 	addi	sp,sp,28
   2d418:	f800283a 	ret
   2d41c:	84000284 	addi	r16,r16,10
   2d420:	1827883a 	mov	r19,r3
   2d424:	003fe906 	br	2d3cc <__alt_data_end+0xfffedfcc>

0002d428 <__hi0bits>:
   2d428:	20bfffec 	andhi	r2,r4,65535
   2d42c:	1000141e 	bne	r2,zero,2d480 <__hi0bits+0x58>
   2d430:	2008943a 	slli	r4,r4,16
   2d434:	00800404 	movi	r2,16
   2d438:	20ffc02c 	andhi	r3,r4,65280
   2d43c:	1800021e 	bne	r3,zero,2d448 <__hi0bits+0x20>
   2d440:	2008923a 	slli	r4,r4,8
   2d444:	10800204 	addi	r2,r2,8
   2d448:	20fc002c 	andhi	r3,r4,61440
   2d44c:	1800021e 	bne	r3,zero,2d458 <__hi0bits+0x30>
   2d450:	2008913a 	slli	r4,r4,4
   2d454:	10800104 	addi	r2,r2,4
   2d458:	20f0002c 	andhi	r3,r4,49152
   2d45c:	1800031e 	bne	r3,zero,2d46c <__hi0bits+0x44>
   2d460:	2109883a 	add	r4,r4,r4
   2d464:	10800084 	addi	r2,r2,2
   2d468:	2109883a 	add	r4,r4,r4
   2d46c:	20000316 	blt	r4,zero,2d47c <__hi0bits+0x54>
   2d470:	2110002c 	andhi	r4,r4,16384
   2d474:	2000041e 	bne	r4,zero,2d488 <__hi0bits+0x60>
   2d478:	00800804 	movi	r2,32
   2d47c:	f800283a 	ret
   2d480:	0005883a 	mov	r2,zero
   2d484:	003fec06 	br	2d438 <__alt_data_end+0xfffee038>
   2d488:	10800044 	addi	r2,r2,1
   2d48c:	f800283a 	ret

0002d490 <__lo0bits>:
   2d490:	20c00017 	ldw	r3,0(r4)
   2d494:	188001cc 	andi	r2,r3,7
   2d498:	10000826 	beq	r2,zero,2d4bc <__lo0bits+0x2c>
   2d49c:	1880004c 	andi	r2,r3,1
   2d4a0:	1000211e 	bne	r2,zero,2d528 <__lo0bits+0x98>
   2d4a4:	1880008c 	andi	r2,r3,2
   2d4a8:	1000211e 	bne	r2,zero,2d530 <__lo0bits+0xa0>
   2d4ac:	1806d0ba 	srli	r3,r3,2
   2d4b0:	00800084 	movi	r2,2
   2d4b4:	20c00015 	stw	r3,0(r4)
   2d4b8:	f800283a 	ret
   2d4bc:	18bfffcc 	andi	r2,r3,65535
   2d4c0:	10001326 	beq	r2,zero,2d510 <__lo0bits+0x80>
   2d4c4:	0005883a 	mov	r2,zero
   2d4c8:	19403fcc 	andi	r5,r3,255
   2d4cc:	2800021e 	bne	r5,zero,2d4d8 <__lo0bits+0x48>
   2d4d0:	1806d23a 	srli	r3,r3,8
   2d4d4:	10800204 	addi	r2,r2,8
   2d4d8:	194003cc 	andi	r5,r3,15
   2d4dc:	2800021e 	bne	r5,zero,2d4e8 <__lo0bits+0x58>
   2d4e0:	1806d13a 	srli	r3,r3,4
   2d4e4:	10800104 	addi	r2,r2,4
   2d4e8:	194000cc 	andi	r5,r3,3
   2d4ec:	2800021e 	bne	r5,zero,2d4f8 <__lo0bits+0x68>
   2d4f0:	1806d0ba 	srli	r3,r3,2
   2d4f4:	10800084 	addi	r2,r2,2
   2d4f8:	1940004c 	andi	r5,r3,1
   2d4fc:	2800081e 	bne	r5,zero,2d520 <__lo0bits+0x90>
   2d500:	1806d07a 	srli	r3,r3,1
   2d504:	1800051e 	bne	r3,zero,2d51c <__lo0bits+0x8c>
   2d508:	00800804 	movi	r2,32
   2d50c:	f800283a 	ret
   2d510:	1806d43a 	srli	r3,r3,16
   2d514:	00800404 	movi	r2,16
   2d518:	003feb06 	br	2d4c8 <__alt_data_end+0xfffee0c8>
   2d51c:	10800044 	addi	r2,r2,1
   2d520:	20c00015 	stw	r3,0(r4)
   2d524:	f800283a 	ret
   2d528:	0005883a 	mov	r2,zero
   2d52c:	f800283a 	ret
   2d530:	1806d07a 	srli	r3,r3,1
   2d534:	00800044 	movi	r2,1
   2d538:	20c00015 	stw	r3,0(r4)
   2d53c:	f800283a 	ret

0002d540 <__i2b>:
   2d540:	defffd04 	addi	sp,sp,-12
   2d544:	dc000015 	stw	r16,0(sp)
   2d548:	04000044 	movi	r16,1
   2d54c:	dc400115 	stw	r17,4(sp)
   2d550:	2823883a 	mov	r17,r5
   2d554:	800b883a 	mov	r5,r16
   2d558:	dfc00215 	stw	ra,8(sp)
   2d55c:	002d1340 	call	2d134 <_Balloc>
   2d560:	14400515 	stw	r17,20(r2)
   2d564:	14000415 	stw	r16,16(r2)
   2d568:	dfc00217 	ldw	ra,8(sp)
   2d56c:	dc400117 	ldw	r17,4(sp)
   2d570:	dc000017 	ldw	r16,0(sp)
   2d574:	dec00304 	addi	sp,sp,12
   2d578:	f800283a 	ret

0002d57c <__multiply>:
   2d57c:	defffa04 	addi	sp,sp,-24
   2d580:	dcc00315 	stw	r19,12(sp)
   2d584:	dc800215 	stw	r18,8(sp)
   2d588:	34c00417 	ldw	r19,16(r6)
   2d58c:	2c800417 	ldw	r18,16(r5)
   2d590:	dd000415 	stw	r20,16(sp)
   2d594:	dc400115 	stw	r17,4(sp)
   2d598:	dfc00515 	stw	ra,20(sp)
   2d59c:	dc000015 	stw	r16,0(sp)
   2d5a0:	2829883a 	mov	r20,r5
   2d5a4:	3023883a 	mov	r17,r6
   2d5a8:	94c0050e 	bge	r18,r19,2d5c0 <__multiply+0x44>
   2d5ac:	9007883a 	mov	r3,r18
   2d5b0:	3029883a 	mov	r20,r6
   2d5b4:	9825883a 	mov	r18,r19
   2d5b8:	2823883a 	mov	r17,r5
   2d5bc:	1827883a 	mov	r19,r3
   2d5c0:	a0800217 	ldw	r2,8(r20)
   2d5c4:	94e1883a 	add	r16,r18,r19
   2d5c8:	a1400117 	ldw	r5,4(r20)
   2d5cc:	1400010e 	bge	r2,r16,2d5d4 <__multiply+0x58>
   2d5d0:	29400044 	addi	r5,r5,1
   2d5d4:	002d1340 	call	2d134 <_Balloc>
   2d5d8:	8415883a 	add	r10,r16,r16
   2d5dc:	12c00504 	addi	r11,r2,20
   2d5e0:	5295883a 	add	r10,r10,r10
   2d5e4:	5a95883a 	add	r10,r11,r10
   2d5e8:	5807883a 	mov	r3,r11
   2d5ec:	5a80032e 	bgeu	r11,r10,2d5fc <__multiply+0x80>
   2d5f0:	18000015 	stw	zero,0(r3)
   2d5f4:	18c00104 	addi	r3,r3,4
   2d5f8:	1abffd36 	bltu	r3,r10,2d5f0 <__alt_data_end+0xfffee1f0>
   2d5fc:	9ce7883a 	add	r19,r19,r19
   2d600:	94a5883a 	add	r18,r18,r18
   2d604:	89800504 	addi	r6,r17,20
   2d608:	9ce7883a 	add	r19,r19,r19
   2d60c:	a3400504 	addi	r13,r20,20
   2d610:	94a5883a 	add	r18,r18,r18
   2d614:	34d9883a 	add	r12,r6,r19
   2d618:	6c93883a 	add	r9,r13,r18
   2d61c:	3300422e 	bgeu	r6,r12,2d728 <__multiply+0x1ac>
   2d620:	37c00017 	ldw	ra,0(r6)
   2d624:	fbffffcc 	andi	r15,ra,65535
   2d628:	78001b26 	beq	r15,zero,2d698 <__multiply+0x11c>
   2d62c:	5811883a 	mov	r8,r11
   2d630:	681d883a 	mov	r14,r13
   2d634:	000f883a 	mov	r7,zero
   2d638:	71000017 	ldw	r4,0(r14)
   2d63c:	40c00017 	ldw	r3,0(r8)
   2d640:	73800104 	addi	r14,r14,4
   2d644:	217fffcc 	andi	r5,r4,65535
   2d648:	2bcb383a 	mul	r5,r5,r15
   2d64c:	2008d43a 	srli	r4,r4,16
   2d650:	1c7fffcc 	andi	r17,r3,65535
   2d654:	2c4b883a 	add	r5,r5,r17
   2d658:	29cb883a 	add	r5,r5,r7
   2d65c:	23c9383a 	mul	r4,r4,r15
   2d660:	1806d43a 	srli	r3,r3,16
   2d664:	280ed43a 	srli	r7,r5,16
   2d668:	297fffcc 	andi	r5,r5,65535
   2d66c:	20c7883a 	add	r3,r4,r3
   2d670:	19c7883a 	add	r3,r3,r7
   2d674:	1808943a 	slli	r4,r3,16
   2d678:	4023883a 	mov	r17,r8
   2d67c:	180ed43a 	srli	r7,r3,16
   2d680:	214ab03a 	or	r5,r4,r5
   2d684:	41400015 	stw	r5,0(r8)
   2d688:	42000104 	addi	r8,r8,4
   2d68c:	727fea36 	bltu	r14,r9,2d638 <__alt_data_end+0xfffee238>
   2d690:	89c00115 	stw	r7,4(r17)
   2d694:	37c00017 	ldw	ra,0(r6)
   2d698:	f83ed43a 	srli	ra,ra,16
   2d69c:	f8001f26 	beq	ra,zero,2d71c <__multiply+0x1a0>
   2d6a0:	58c00017 	ldw	r3,0(r11)
   2d6a4:	681d883a 	mov	r14,r13
   2d6a8:	581f883a 	mov	r15,r11
   2d6ac:	1811883a 	mov	r8,r3
   2d6b0:	5825883a 	mov	r18,r11
   2d6b4:	000f883a 	mov	r7,zero
   2d6b8:	00000106 	br	2d6c0 <__multiply+0x144>
   2d6bc:	8825883a 	mov	r18,r17
   2d6c0:	7140000b 	ldhu	r5,0(r14)
   2d6c4:	4010d43a 	srli	r8,r8,16
   2d6c8:	193fffcc 	andi	r4,r3,65535
   2d6cc:	2fcb383a 	mul	r5,r5,ra
   2d6d0:	7bc00104 	addi	r15,r15,4
   2d6d4:	73800104 	addi	r14,r14,4
   2d6d8:	2a0b883a 	add	r5,r5,r8
   2d6dc:	29cb883a 	add	r5,r5,r7
   2d6e0:	2806943a 	slli	r3,r5,16
   2d6e4:	94400104 	addi	r17,r18,4
   2d6e8:	280ad43a 	srli	r5,r5,16
   2d6ec:	1908b03a 	or	r4,r3,r4
   2d6f0:	793fff15 	stw	r4,-4(r15)
   2d6f4:	70ffff17 	ldw	r3,-4(r14)
   2d6f8:	8a000017 	ldw	r8,0(r17)
   2d6fc:	1806d43a 	srli	r3,r3,16
   2d700:	413fffcc 	andi	r4,r8,65535
   2d704:	1fc7383a 	mul	r3,r3,ra
   2d708:	1907883a 	add	r3,r3,r4
   2d70c:	1947883a 	add	r3,r3,r5
   2d710:	180ed43a 	srli	r7,r3,16
   2d714:	727fe936 	bltu	r14,r9,2d6bc <__alt_data_end+0xfffee2bc>
   2d718:	90c00115 	stw	r3,4(r18)
   2d71c:	31800104 	addi	r6,r6,4
   2d720:	5ac00104 	addi	r11,r11,4
   2d724:	333fbe36 	bltu	r6,r12,2d620 <__alt_data_end+0xfffee220>
   2d728:	0400090e 	bge	zero,r16,2d750 <__multiply+0x1d4>
   2d72c:	50ffff17 	ldw	r3,-4(r10)
   2d730:	52bfff04 	addi	r10,r10,-4
   2d734:	18000326 	beq	r3,zero,2d744 <__multiply+0x1c8>
   2d738:	00000506 	br	2d750 <__multiply+0x1d4>
   2d73c:	50c00017 	ldw	r3,0(r10)
   2d740:	1800031e 	bne	r3,zero,2d750 <__multiply+0x1d4>
   2d744:	843fffc4 	addi	r16,r16,-1
   2d748:	52bfff04 	addi	r10,r10,-4
   2d74c:	803ffb1e 	bne	r16,zero,2d73c <__alt_data_end+0xfffee33c>
   2d750:	14000415 	stw	r16,16(r2)
   2d754:	dfc00517 	ldw	ra,20(sp)
   2d758:	dd000417 	ldw	r20,16(sp)
   2d75c:	dcc00317 	ldw	r19,12(sp)
   2d760:	dc800217 	ldw	r18,8(sp)
   2d764:	dc400117 	ldw	r17,4(sp)
   2d768:	dc000017 	ldw	r16,0(sp)
   2d76c:	dec00604 	addi	sp,sp,24
   2d770:	f800283a 	ret

0002d774 <__pow5mult>:
   2d774:	defffa04 	addi	sp,sp,-24
   2d778:	dcc00315 	stw	r19,12(sp)
   2d77c:	dc000015 	stw	r16,0(sp)
   2d780:	dfc00515 	stw	ra,20(sp)
   2d784:	dd000415 	stw	r20,16(sp)
   2d788:	dc800215 	stw	r18,8(sp)
   2d78c:	dc400115 	stw	r17,4(sp)
   2d790:	308000cc 	andi	r2,r6,3
   2d794:	3021883a 	mov	r16,r6
   2d798:	2027883a 	mov	r19,r4
   2d79c:	10002f1e 	bne	r2,zero,2d85c <__pow5mult+0xe8>
   2d7a0:	2825883a 	mov	r18,r5
   2d7a4:	8021d0ba 	srai	r16,r16,2
   2d7a8:	80001a26 	beq	r16,zero,2d814 <__pow5mult+0xa0>
   2d7ac:	9c401217 	ldw	r17,72(r19)
   2d7b0:	8800061e 	bne	r17,zero,2d7cc <__pow5mult+0x58>
   2d7b4:	00003406 	br	2d888 <__pow5mult+0x114>
   2d7b8:	8021d07a 	srai	r16,r16,1
   2d7bc:	80001526 	beq	r16,zero,2d814 <__pow5mult+0xa0>
   2d7c0:	88800017 	ldw	r2,0(r17)
   2d7c4:	10001c26 	beq	r2,zero,2d838 <__pow5mult+0xc4>
   2d7c8:	1023883a 	mov	r17,r2
   2d7cc:	8080004c 	andi	r2,r16,1
   2d7d0:	103ff926 	beq	r2,zero,2d7b8 <__alt_data_end+0xfffee3b8>
   2d7d4:	880d883a 	mov	r6,r17
   2d7d8:	900b883a 	mov	r5,r18
   2d7dc:	9809883a 	mov	r4,r19
   2d7e0:	002d57c0 	call	2d57c <__multiply>
   2d7e4:	90001b26 	beq	r18,zero,2d854 <__pow5mult+0xe0>
   2d7e8:	91000117 	ldw	r4,4(r18)
   2d7ec:	98c01317 	ldw	r3,76(r19)
   2d7f0:	8021d07a 	srai	r16,r16,1
   2d7f4:	2109883a 	add	r4,r4,r4
   2d7f8:	2109883a 	add	r4,r4,r4
   2d7fc:	1907883a 	add	r3,r3,r4
   2d800:	19000017 	ldw	r4,0(r3)
   2d804:	91000015 	stw	r4,0(r18)
   2d808:	1c800015 	stw	r18,0(r3)
   2d80c:	1025883a 	mov	r18,r2
   2d810:	803feb1e 	bne	r16,zero,2d7c0 <__alt_data_end+0xfffee3c0>
   2d814:	9005883a 	mov	r2,r18
   2d818:	dfc00517 	ldw	ra,20(sp)
   2d81c:	dd000417 	ldw	r20,16(sp)
   2d820:	dcc00317 	ldw	r19,12(sp)
   2d824:	dc800217 	ldw	r18,8(sp)
   2d828:	dc400117 	ldw	r17,4(sp)
   2d82c:	dc000017 	ldw	r16,0(sp)
   2d830:	dec00604 	addi	sp,sp,24
   2d834:	f800283a 	ret
   2d838:	880d883a 	mov	r6,r17
   2d83c:	880b883a 	mov	r5,r17
   2d840:	9809883a 	mov	r4,r19
   2d844:	002d57c0 	call	2d57c <__multiply>
   2d848:	88800015 	stw	r2,0(r17)
   2d84c:	10000015 	stw	zero,0(r2)
   2d850:	003fdd06 	br	2d7c8 <__alt_data_end+0xfffee3c8>
   2d854:	1025883a 	mov	r18,r2
   2d858:	003fd706 	br	2d7b8 <__alt_data_end+0xfffee3b8>
   2d85c:	10bfffc4 	addi	r2,r2,-1
   2d860:	1085883a 	add	r2,r2,r2
   2d864:	00c000f4 	movhi	r3,3
   2d868:	18d29304 	addi	r3,r3,19020
   2d86c:	1085883a 	add	r2,r2,r2
   2d870:	1885883a 	add	r2,r3,r2
   2d874:	11800017 	ldw	r6,0(r2)
   2d878:	000f883a 	mov	r7,zero
   2d87c:	002d2040 	call	2d204 <__multadd>
   2d880:	1025883a 	mov	r18,r2
   2d884:	003fc706 	br	2d7a4 <__alt_data_end+0xfffee3a4>
   2d888:	05000044 	movi	r20,1
   2d88c:	a00b883a 	mov	r5,r20
   2d890:	9809883a 	mov	r4,r19
   2d894:	002d1340 	call	2d134 <_Balloc>
   2d898:	1023883a 	mov	r17,r2
   2d89c:	00809c44 	movi	r2,625
   2d8a0:	88800515 	stw	r2,20(r17)
   2d8a4:	8d000415 	stw	r20,16(r17)
   2d8a8:	9c401215 	stw	r17,72(r19)
   2d8ac:	88000015 	stw	zero,0(r17)
   2d8b0:	003fc606 	br	2d7cc <__alt_data_end+0xfffee3cc>

0002d8b4 <__lshift>:
   2d8b4:	defff904 	addi	sp,sp,-28
   2d8b8:	dd400515 	stw	r21,20(sp)
   2d8bc:	dcc00315 	stw	r19,12(sp)
   2d8c0:	302bd17a 	srai	r21,r6,5
   2d8c4:	2cc00417 	ldw	r19,16(r5)
   2d8c8:	28800217 	ldw	r2,8(r5)
   2d8cc:	dd000415 	stw	r20,16(sp)
   2d8d0:	ace7883a 	add	r19,r21,r19
   2d8d4:	dc800215 	stw	r18,8(sp)
   2d8d8:	dc400115 	stw	r17,4(sp)
   2d8dc:	dc000015 	stw	r16,0(sp)
   2d8e0:	dfc00615 	stw	ra,24(sp)
   2d8e4:	9c000044 	addi	r16,r19,1
   2d8e8:	2823883a 	mov	r17,r5
   2d8ec:	3029883a 	mov	r20,r6
   2d8f0:	2025883a 	mov	r18,r4
   2d8f4:	29400117 	ldw	r5,4(r5)
   2d8f8:	1400030e 	bge	r2,r16,2d908 <__lshift+0x54>
   2d8fc:	1085883a 	add	r2,r2,r2
   2d900:	29400044 	addi	r5,r5,1
   2d904:	143ffd16 	blt	r2,r16,2d8fc <__alt_data_end+0xfffee4fc>
   2d908:	9009883a 	mov	r4,r18
   2d90c:	002d1340 	call	2d134 <_Balloc>
   2d910:	10c00504 	addi	r3,r2,20
   2d914:	0540070e 	bge	zero,r21,2d934 <__lshift+0x80>
   2d918:	ad6b883a 	add	r21,r21,r21
   2d91c:	ad6b883a 	add	r21,r21,r21
   2d920:	1809883a 	mov	r4,r3
   2d924:	1d47883a 	add	r3,r3,r21
   2d928:	20000015 	stw	zero,0(r4)
   2d92c:	21000104 	addi	r4,r4,4
   2d930:	193ffd1e 	bne	r3,r4,2d928 <__alt_data_end+0xfffee528>
   2d934:	8a000417 	ldw	r8,16(r17)
   2d938:	89000504 	addi	r4,r17,20
   2d93c:	a18007cc 	andi	r6,r20,31
   2d940:	4211883a 	add	r8,r8,r8
   2d944:	4211883a 	add	r8,r8,r8
   2d948:	2211883a 	add	r8,r4,r8
   2d94c:	30002326 	beq	r6,zero,2d9dc <__lshift+0x128>
   2d950:	02400804 	movi	r9,32
   2d954:	4993c83a 	sub	r9,r9,r6
   2d958:	000b883a 	mov	r5,zero
   2d95c:	21c00017 	ldw	r7,0(r4)
   2d960:	1815883a 	mov	r10,r3
   2d964:	18c00104 	addi	r3,r3,4
   2d968:	398e983a 	sll	r7,r7,r6
   2d96c:	21000104 	addi	r4,r4,4
   2d970:	394ab03a 	or	r5,r7,r5
   2d974:	197fff15 	stw	r5,-4(r3)
   2d978:	217fff17 	ldw	r5,-4(r4)
   2d97c:	2a4ad83a 	srl	r5,r5,r9
   2d980:	223ff636 	bltu	r4,r8,2d95c <__alt_data_end+0xfffee55c>
   2d984:	51400115 	stw	r5,4(r10)
   2d988:	28001a1e 	bne	r5,zero,2d9f4 <__lshift+0x140>
   2d98c:	843fffc4 	addi	r16,r16,-1
   2d990:	14000415 	stw	r16,16(r2)
   2d994:	88000826 	beq	r17,zero,2d9b8 <__lshift+0x104>
   2d998:	89000117 	ldw	r4,4(r17)
   2d99c:	90c01317 	ldw	r3,76(r18)
   2d9a0:	2109883a 	add	r4,r4,r4
   2d9a4:	2109883a 	add	r4,r4,r4
   2d9a8:	1907883a 	add	r3,r3,r4
   2d9ac:	19000017 	ldw	r4,0(r3)
   2d9b0:	89000015 	stw	r4,0(r17)
   2d9b4:	1c400015 	stw	r17,0(r3)
   2d9b8:	dfc00617 	ldw	ra,24(sp)
   2d9bc:	dd400517 	ldw	r21,20(sp)
   2d9c0:	dd000417 	ldw	r20,16(sp)
   2d9c4:	dcc00317 	ldw	r19,12(sp)
   2d9c8:	dc800217 	ldw	r18,8(sp)
   2d9cc:	dc400117 	ldw	r17,4(sp)
   2d9d0:	dc000017 	ldw	r16,0(sp)
   2d9d4:	dec00704 	addi	sp,sp,28
   2d9d8:	f800283a 	ret
   2d9dc:	21400017 	ldw	r5,0(r4)
   2d9e0:	18c00104 	addi	r3,r3,4
   2d9e4:	21000104 	addi	r4,r4,4
   2d9e8:	197fff15 	stw	r5,-4(r3)
   2d9ec:	223ffb36 	bltu	r4,r8,2d9dc <__alt_data_end+0xfffee5dc>
   2d9f0:	003fe606 	br	2d98c <__alt_data_end+0xfffee58c>
   2d9f4:	9c000084 	addi	r16,r19,2
   2d9f8:	003fe406 	br	2d98c <__alt_data_end+0xfffee58c>

0002d9fc <__mcmp>:
   2d9fc:	20800417 	ldw	r2,16(r4)
   2da00:	28c00417 	ldw	r3,16(r5)
   2da04:	10c5c83a 	sub	r2,r2,r3
   2da08:	1000111e 	bne	r2,zero,2da50 <__mcmp+0x54>
   2da0c:	18c7883a 	add	r3,r3,r3
   2da10:	18c7883a 	add	r3,r3,r3
   2da14:	21000504 	addi	r4,r4,20
   2da18:	29400504 	addi	r5,r5,20
   2da1c:	20c5883a 	add	r2,r4,r3
   2da20:	28cb883a 	add	r5,r5,r3
   2da24:	00000106 	br	2da2c <__mcmp+0x30>
   2da28:	20800a2e 	bgeu	r4,r2,2da54 <__mcmp+0x58>
   2da2c:	10bfff04 	addi	r2,r2,-4
   2da30:	297fff04 	addi	r5,r5,-4
   2da34:	11800017 	ldw	r6,0(r2)
   2da38:	28c00017 	ldw	r3,0(r5)
   2da3c:	30fffa26 	beq	r6,r3,2da28 <__alt_data_end+0xfffee628>
   2da40:	30c00236 	bltu	r6,r3,2da4c <__mcmp+0x50>
   2da44:	00800044 	movi	r2,1
   2da48:	f800283a 	ret
   2da4c:	00bfffc4 	movi	r2,-1
   2da50:	f800283a 	ret
   2da54:	0005883a 	mov	r2,zero
   2da58:	f800283a 	ret

0002da5c <__mdiff>:
   2da5c:	28c00417 	ldw	r3,16(r5)
   2da60:	30800417 	ldw	r2,16(r6)
   2da64:	defffa04 	addi	sp,sp,-24
   2da68:	dcc00315 	stw	r19,12(sp)
   2da6c:	dc800215 	stw	r18,8(sp)
   2da70:	dfc00515 	stw	ra,20(sp)
   2da74:	dd000415 	stw	r20,16(sp)
   2da78:	dc400115 	stw	r17,4(sp)
   2da7c:	dc000015 	stw	r16,0(sp)
   2da80:	1887c83a 	sub	r3,r3,r2
   2da84:	2825883a 	mov	r18,r5
   2da88:	3027883a 	mov	r19,r6
   2da8c:	1800141e 	bne	r3,zero,2dae0 <__mdiff+0x84>
   2da90:	1085883a 	add	r2,r2,r2
   2da94:	1085883a 	add	r2,r2,r2
   2da98:	2a000504 	addi	r8,r5,20
   2da9c:	34000504 	addi	r16,r6,20
   2daa0:	4087883a 	add	r3,r8,r2
   2daa4:	8085883a 	add	r2,r16,r2
   2daa8:	00000106 	br	2dab0 <__mdiff+0x54>
   2daac:	40c0592e 	bgeu	r8,r3,2dc14 <__mdiff+0x1b8>
   2dab0:	18ffff04 	addi	r3,r3,-4
   2dab4:	10bfff04 	addi	r2,r2,-4
   2dab8:	19c00017 	ldw	r7,0(r3)
   2dabc:	11400017 	ldw	r5,0(r2)
   2dac0:	397ffa26 	beq	r7,r5,2daac <__alt_data_end+0xfffee6ac>
   2dac4:	3940592e 	bgeu	r7,r5,2dc2c <__mdiff+0x1d0>
   2dac8:	9005883a 	mov	r2,r18
   2dacc:	4023883a 	mov	r17,r8
   2dad0:	9825883a 	mov	r18,r19
   2dad4:	05000044 	movi	r20,1
   2dad8:	1027883a 	mov	r19,r2
   2dadc:	00000406 	br	2daf0 <__mdiff+0x94>
   2dae0:	18005616 	blt	r3,zero,2dc3c <__mdiff+0x1e0>
   2dae4:	34400504 	addi	r17,r6,20
   2dae8:	2c000504 	addi	r16,r5,20
   2daec:	0029883a 	mov	r20,zero
   2daf0:	91400117 	ldw	r5,4(r18)
   2daf4:	002d1340 	call	2d134 <_Balloc>
   2daf8:	92400417 	ldw	r9,16(r18)
   2dafc:	9b000417 	ldw	r12,16(r19)
   2db00:	12c00504 	addi	r11,r2,20
   2db04:	4a51883a 	add	r8,r9,r9
   2db08:	6319883a 	add	r12,r12,r12
   2db0c:	4211883a 	add	r8,r8,r8
   2db10:	6319883a 	add	r12,r12,r12
   2db14:	15000315 	stw	r20,12(r2)
   2db18:	8211883a 	add	r8,r16,r8
   2db1c:	8b19883a 	add	r12,r17,r12
   2db20:	0007883a 	mov	r3,zero
   2db24:	81400017 	ldw	r5,0(r16)
   2db28:	89c00017 	ldw	r7,0(r17)
   2db2c:	59800104 	addi	r6,r11,4
   2db30:	293fffcc 	andi	r4,r5,65535
   2db34:	20c7883a 	add	r3,r4,r3
   2db38:	393fffcc 	andi	r4,r7,65535
   2db3c:	1909c83a 	sub	r4,r3,r4
   2db40:	280ad43a 	srli	r5,r5,16
   2db44:	380ed43a 	srli	r7,r7,16
   2db48:	2007d43a 	srai	r3,r4,16
   2db4c:	213fffcc 	andi	r4,r4,65535
   2db50:	29cbc83a 	sub	r5,r5,r7
   2db54:	28c7883a 	add	r3,r5,r3
   2db58:	180a943a 	slli	r5,r3,16
   2db5c:	8c400104 	addi	r17,r17,4
   2db60:	84000104 	addi	r16,r16,4
   2db64:	2908b03a 	or	r4,r5,r4
   2db68:	59000015 	stw	r4,0(r11)
   2db6c:	1807d43a 	srai	r3,r3,16
   2db70:	3015883a 	mov	r10,r6
   2db74:	3017883a 	mov	r11,r6
   2db78:	8b3fea36 	bltu	r17,r12,2db24 <__alt_data_end+0xfffee724>
   2db7c:	8200162e 	bgeu	r16,r8,2dbd8 <__mdiff+0x17c>
   2db80:	8017883a 	mov	r11,r16
   2db84:	59400017 	ldw	r5,0(r11)
   2db88:	31800104 	addi	r6,r6,4
   2db8c:	5ac00104 	addi	r11,r11,4
   2db90:	293fffcc 	andi	r4,r5,65535
   2db94:	20c7883a 	add	r3,r4,r3
   2db98:	280ed43a 	srli	r7,r5,16
   2db9c:	180bd43a 	srai	r5,r3,16
   2dba0:	193fffcc 	andi	r4,r3,65535
   2dba4:	3947883a 	add	r3,r7,r5
   2dba8:	180a943a 	slli	r5,r3,16
   2dbac:	1807d43a 	srai	r3,r3,16
   2dbb0:	2908b03a 	or	r4,r5,r4
   2dbb4:	313fff15 	stw	r4,-4(r6)
   2dbb8:	5a3ff236 	bltu	r11,r8,2db84 <__alt_data_end+0xfffee784>
   2dbbc:	0406303a 	nor	r3,zero,r16
   2dbc0:	1a07883a 	add	r3,r3,r8
   2dbc4:	1806d0ba 	srli	r3,r3,2
   2dbc8:	18c00044 	addi	r3,r3,1
   2dbcc:	18c7883a 	add	r3,r3,r3
   2dbd0:	18c7883a 	add	r3,r3,r3
   2dbd4:	50d5883a 	add	r10,r10,r3
   2dbd8:	50ffff04 	addi	r3,r10,-4
   2dbdc:	2000041e 	bne	r4,zero,2dbf0 <__mdiff+0x194>
   2dbe0:	18ffff04 	addi	r3,r3,-4
   2dbe4:	19000017 	ldw	r4,0(r3)
   2dbe8:	4a7fffc4 	addi	r9,r9,-1
   2dbec:	203ffc26 	beq	r4,zero,2dbe0 <__alt_data_end+0xfffee7e0>
   2dbf0:	12400415 	stw	r9,16(r2)
   2dbf4:	dfc00517 	ldw	ra,20(sp)
   2dbf8:	dd000417 	ldw	r20,16(sp)
   2dbfc:	dcc00317 	ldw	r19,12(sp)
   2dc00:	dc800217 	ldw	r18,8(sp)
   2dc04:	dc400117 	ldw	r17,4(sp)
   2dc08:	dc000017 	ldw	r16,0(sp)
   2dc0c:	dec00604 	addi	sp,sp,24
   2dc10:	f800283a 	ret
   2dc14:	000b883a 	mov	r5,zero
   2dc18:	002d1340 	call	2d134 <_Balloc>
   2dc1c:	00c00044 	movi	r3,1
   2dc20:	10c00415 	stw	r3,16(r2)
   2dc24:	10000515 	stw	zero,20(r2)
   2dc28:	003ff206 	br	2dbf4 <__alt_data_end+0xfffee7f4>
   2dc2c:	8023883a 	mov	r17,r16
   2dc30:	0029883a 	mov	r20,zero
   2dc34:	4021883a 	mov	r16,r8
   2dc38:	003fad06 	br	2daf0 <__alt_data_end+0xfffee6f0>
   2dc3c:	9005883a 	mov	r2,r18
   2dc40:	94400504 	addi	r17,r18,20
   2dc44:	9c000504 	addi	r16,r19,20
   2dc48:	9825883a 	mov	r18,r19
   2dc4c:	05000044 	movi	r20,1
   2dc50:	1027883a 	mov	r19,r2
   2dc54:	003fa606 	br	2daf0 <__alt_data_end+0xfffee6f0>

0002dc58 <__ulp>:
   2dc58:	295ffc2c 	andhi	r5,r5,32752
   2dc5c:	00bf3034 	movhi	r2,64704
   2dc60:	2887883a 	add	r3,r5,r2
   2dc64:	00c0020e 	bge	zero,r3,2dc70 <__ulp+0x18>
   2dc68:	0005883a 	mov	r2,zero
   2dc6c:	f800283a 	ret
   2dc70:	00c7c83a 	sub	r3,zero,r3
   2dc74:	1807d53a 	srai	r3,r3,20
   2dc78:	008004c4 	movi	r2,19
   2dc7c:	10c00b0e 	bge	r2,r3,2dcac <__ulp+0x54>
   2dc80:	18bffb04 	addi	r2,r3,-20
   2dc84:	01000784 	movi	r4,30
   2dc88:	0007883a 	mov	r3,zero
   2dc8c:	20800516 	blt	r4,r2,2dca4 <__ulp+0x4c>
   2dc90:	010007c4 	movi	r4,31
   2dc94:	2089c83a 	sub	r4,r4,r2
   2dc98:	00800044 	movi	r2,1
   2dc9c:	1104983a 	sll	r2,r2,r4
   2dca0:	f800283a 	ret
   2dca4:	00800044 	movi	r2,1
   2dca8:	f800283a 	ret
   2dcac:	01400234 	movhi	r5,8
   2dcb0:	28c7d83a 	sra	r3,r5,r3
   2dcb4:	0005883a 	mov	r2,zero
   2dcb8:	f800283a 	ret

0002dcbc <__b2d>:
   2dcbc:	defffa04 	addi	sp,sp,-24
   2dcc0:	dc000015 	stw	r16,0(sp)
   2dcc4:	24000417 	ldw	r16,16(r4)
   2dcc8:	dc400115 	stw	r17,4(sp)
   2dccc:	24400504 	addi	r17,r4,20
   2dcd0:	8421883a 	add	r16,r16,r16
   2dcd4:	8421883a 	add	r16,r16,r16
   2dcd8:	8c21883a 	add	r16,r17,r16
   2dcdc:	dc800215 	stw	r18,8(sp)
   2dce0:	84bfff17 	ldw	r18,-4(r16)
   2dce4:	dd000415 	stw	r20,16(sp)
   2dce8:	dcc00315 	stw	r19,12(sp)
   2dcec:	9009883a 	mov	r4,r18
   2dcf0:	2829883a 	mov	r20,r5
   2dcf4:	dfc00515 	stw	ra,20(sp)
   2dcf8:	002d4280 	call	2d428 <__hi0bits>
   2dcfc:	00c00804 	movi	r3,32
   2dd00:	1889c83a 	sub	r4,r3,r2
   2dd04:	a1000015 	stw	r4,0(r20)
   2dd08:	01000284 	movi	r4,10
   2dd0c:	84ffff04 	addi	r19,r16,-4
   2dd10:	20801216 	blt	r4,r2,2dd5c <__b2d+0xa0>
   2dd14:	018002c4 	movi	r6,11
   2dd18:	308dc83a 	sub	r6,r6,r2
   2dd1c:	9186d83a 	srl	r3,r18,r6
   2dd20:	18cffc34 	orhi	r3,r3,16368
   2dd24:	8cc0212e 	bgeu	r17,r19,2ddac <__b2d+0xf0>
   2dd28:	813ffe17 	ldw	r4,-8(r16)
   2dd2c:	218cd83a 	srl	r6,r4,r6
   2dd30:	10800544 	addi	r2,r2,21
   2dd34:	9084983a 	sll	r2,r18,r2
   2dd38:	1184b03a 	or	r2,r2,r6
   2dd3c:	dfc00517 	ldw	ra,20(sp)
   2dd40:	dd000417 	ldw	r20,16(sp)
   2dd44:	dcc00317 	ldw	r19,12(sp)
   2dd48:	dc800217 	ldw	r18,8(sp)
   2dd4c:	dc400117 	ldw	r17,4(sp)
   2dd50:	dc000017 	ldw	r16,0(sp)
   2dd54:	dec00604 	addi	sp,sp,24
   2dd58:	f800283a 	ret
   2dd5c:	8cc00f2e 	bgeu	r17,r19,2dd9c <__b2d+0xe0>
   2dd60:	117ffd44 	addi	r5,r2,-11
   2dd64:	80bffe17 	ldw	r2,-8(r16)
   2dd68:	28000e26 	beq	r5,zero,2dda4 <__b2d+0xe8>
   2dd6c:	1949c83a 	sub	r4,r3,r5
   2dd70:	9164983a 	sll	r18,r18,r5
   2dd74:	1106d83a 	srl	r3,r2,r4
   2dd78:	81bffe04 	addi	r6,r16,-8
   2dd7c:	948ffc34 	orhi	r18,r18,16368
   2dd80:	90c6b03a 	or	r3,r18,r3
   2dd84:	89800e2e 	bgeu	r17,r6,2ddc0 <__b2d+0x104>
   2dd88:	81bffd17 	ldw	r6,-12(r16)
   2dd8c:	1144983a 	sll	r2,r2,r5
   2dd90:	310ad83a 	srl	r5,r6,r4
   2dd94:	2884b03a 	or	r2,r5,r2
   2dd98:	003fe806 	br	2dd3c <__alt_data_end+0xfffee93c>
   2dd9c:	10bffd44 	addi	r2,r2,-11
   2dda0:	1000041e 	bne	r2,zero,2ddb4 <__b2d+0xf8>
   2dda4:	90cffc34 	orhi	r3,r18,16368
   2dda8:	003fe406 	br	2dd3c <__alt_data_end+0xfffee93c>
   2ddac:	000d883a 	mov	r6,zero
   2ddb0:	003fdf06 	br	2dd30 <__alt_data_end+0xfffee930>
   2ddb4:	90a4983a 	sll	r18,r18,r2
   2ddb8:	0005883a 	mov	r2,zero
   2ddbc:	003ff906 	br	2dda4 <__alt_data_end+0xfffee9a4>
   2ddc0:	1144983a 	sll	r2,r2,r5
   2ddc4:	003fdd06 	br	2dd3c <__alt_data_end+0xfffee93c>

0002ddc8 <__d2b>:
   2ddc8:	defff804 	addi	sp,sp,-32
   2ddcc:	dc000215 	stw	r16,8(sp)
   2ddd0:	3021883a 	mov	r16,r6
   2ddd4:	dc400315 	stw	r17,12(sp)
   2ddd8:	8022907a 	slli	r17,r16,1
   2dddc:	dd000615 	stw	r20,24(sp)
   2dde0:	2829883a 	mov	r20,r5
   2dde4:	01400044 	movi	r5,1
   2dde8:	dcc00515 	stw	r19,20(sp)
   2ddec:	dc800415 	stw	r18,16(sp)
   2ddf0:	dfc00715 	stw	ra,28(sp)
   2ddf4:	3825883a 	mov	r18,r7
   2ddf8:	8822d57a 	srli	r17,r17,21
   2ddfc:	002d1340 	call	2d134 <_Balloc>
   2de00:	1027883a 	mov	r19,r2
   2de04:	00800434 	movhi	r2,16
   2de08:	10bfffc4 	addi	r2,r2,-1
   2de0c:	808c703a 	and	r6,r16,r2
   2de10:	88000126 	beq	r17,zero,2de18 <__d2b+0x50>
   2de14:	31800434 	orhi	r6,r6,16
   2de18:	d9800015 	stw	r6,0(sp)
   2de1c:	a0002426 	beq	r20,zero,2deb0 <__d2b+0xe8>
   2de20:	d9000104 	addi	r4,sp,4
   2de24:	dd000115 	stw	r20,4(sp)
   2de28:	002d4900 	call	2d490 <__lo0bits>
   2de2c:	d8c00017 	ldw	r3,0(sp)
   2de30:	10002f1e 	bne	r2,zero,2def0 <__d2b+0x128>
   2de34:	d9000117 	ldw	r4,4(sp)
   2de38:	99000515 	stw	r4,20(r19)
   2de3c:	1821003a 	cmpeq	r16,r3,zero
   2de40:	01000084 	movi	r4,2
   2de44:	2421c83a 	sub	r16,r4,r16
   2de48:	98c00615 	stw	r3,24(r19)
   2de4c:	9c000415 	stw	r16,16(r19)
   2de50:	88001f1e 	bne	r17,zero,2ded0 <__d2b+0x108>
   2de54:	10bef384 	addi	r2,r2,-1074
   2de58:	90800015 	stw	r2,0(r18)
   2de5c:	00900034 	movhi	r2,16384
   2de60:	10bfffc4 	addi	r2,r2,-1
   2de64:	8085883a 	add	r2,r16,r2
   2de68:	1085883a 	add	r2,r2,r2
   2de6c:	1085883a 	add	r2,r2,r2
   2de70:	9885883a 	add	r2,r19,r2
   2de74:	11000517 	ldw	r4,20(r2)
   2de78:	8020917a 	slli	r16,r16,5
   2de7c:	002d4280 	call	2d428 <__hi0bits>
   2de80:	d8c00817 	ldw	r3,32(sp)
   2de84:	8085c83a 	sub	r2,r16,r2
   2de88:	18800015 	stw	r2,0(r3)
   2de8c:	9805883a 	mov	r2,r19
   2de90:	dfc00717 	ldw	ra,28(sp)
   2de94:	dd000617 	ldw	r20,24(sp)
   2de98:	dcc00517 	ldw	r19,20(sp)
   2de9c:	dc800417 	ldw	r18,16(sp)
   2dea0:	dc400317 	ldw	r17,12(sp)
   2dea4:	dc000217 	ldw	r16,8(sp)
   2dea8:	dec00804 	addi	sp,sp,32
   2deac:	f800283a 	ret
   2deb0:	d809883a 	mov	r4,sp
   2deb4:	002d4900 	call	2d490 <__lo0bits>
   2deb8:	d8c00017 	ldw	r3,0(sp)
   2debc:	04000044 	movi	r16,1
   2dec0:	9c000415 	stw	r16,16(r19)
   2dec4:	98c00515 	stw	r3,20(r19)
   2dec8:	10800804 	addi	r2,r2,32
   2decc:	883fe126 	beq	r17,zero,2de54 <__alt_data_end+0xfffeea54>
   2ded0:	00c00d44 	movi	r3,53
   2ded4:	8c7ef344 	addi	r17,r17,-1075
   2ded8:	88a3883a 	add	r17,r17,r2
   2dedc:	1885c83a 	sub	r2,r3,r2
   2dee0:	d8c00817 	ldw	r3,32(sp)
   2dee4:	94400015 	stw	r17,0(r18)
   2dee8:	18800015 	stw	r2,0(r3)
   2deec:	003fe706 	br	2de8c <__alt_data_end+0xfffeea8c>
   2def0:	01000804 	movi	r4,32
   2def4:	2089c83a 	sub	r4,r4,r2
   2def8:	1908983a 	sll	r4,r3,r4
   2defc:	d9400117 	ldw	r5,4(sp)
   2df00:	1886d83a 	srl	r3,r3,r2
   2df04:	2148b03a 	or	r4,r4,r5
   2df08:	99000515 	stw	r4,20(r19)
   2df0c:	d8c00015 	stw	r3,0(sp)
   2df10:	003fca06 	br	2de3c <__alt_data_end+0xfffeea3c>

0002df14 <__ratio>:
   2df14:	defff904 	addi	sp,sp,-28
   2df18:	dc400315 	stw	r17,12(sp)
   2df1c:	2823883a 	mov	r17,r5
   2df20:	d9400104 	addi	r5,sp,4
   2df24:	dfc00615 	stw	ra,24(sp)
   2df28:	dcc00515 	stw	r19,20(sp)
   2df2c:	dc800415 	stw	r18,16(sp)
   2df30:	2027883a 	mov	r19,r4
   2df34:	dc000215 	stw	r16,8(sp)
   2df38:	002dcbc0 	call	2dcbc <__b2d>
   2df3c:	d80b883a 	mov	r5,sp
   2df40:	8809883a 	mov	r4,r17
   2df44:	1025883a 	mov	r18,r2
   2df48:	1821883a 	mov	r16,r3
   2df4c:	002dcbc0 	call	2dcbc <__b2d>
   2df50:	8a000417 	ldw	r8,16(r17)
   2df54:	99000417 	ldw	r4,16(r19)
   2df58:	d9400117 	ldw	r5,4(sp)
   2df5c:	2209c83a 	sub	r4,r4,r8
   2df60:	2010917a 	slli	r8,r4,5
   2df64:	d9000017 	ldw	r4,0(sp)
   2df68:	2909c83a 	sub	r4,r5,r4
   2df6c:	4109883a 	add	r4,r8,r4
   2df70:	01000e0e 	bge	zero,r4,2dfac <__ratio+0x98>
   2df74:	2008953a 	slli	r4,r4,20
   2df78:	2421883a 	add	r16,r4,r16
   2df7c:	100d883a 	mov	r6,r2
   2df80:	180f883a 	mov	r7,r3
   2df84:	9009883a 	mov	r4,r18
   2df88:	800b883a 	mov	r5,r16
   2df8c:	00256840 	call	25684 <__divdf3>
   2df90:	dfc00617 	ldw	ra,24(sp)
   2df94:	dcc00517 	ldw	r19,20(sp)
   2df98:	dc800417 	ldw	r18,16(sp)
   2df9c:	dc400317 	ldw	r17,12(sp)
   2dfa0:	dc000217 	ldw	r16,8(sp)
   2dfa4:	dec00704 	addi	sp,sp,28
   2dfa8:	f800283a 	ret
   2dfac:	2008953a 	slli	r4,r4,20
   2dfb0:	1907c83a 	sub	r3,r3,r4
   2dfb4:	003ff106 	br	2df7c <__alt_data_end+0xfffeeb7c>

0002dfb8 <_mprec_log10>:
   2dfb8:	defffe04 	addi	sp,sp,-8
   2dfbc:	dc000015 	stw	r16,0(sp)
   2dfc0:	dfc00115 	stw	ra,4(sp)
   2dfc4:	008005c4 	movi	r2,23
   2dfc8:	2021883a 	mov	r16,r4
   2dfcc:	11000d0e 	bge	r2,r4,2e004 <_mprec_log10+0x4c>
   2dfd0:	0005883a 	mov	r2,zero
   2dfd4:	00cffc34 	movhi	r3,16368
   2dfd8:	843fffc4 	addi	r16,r16,-1
   2dfdc:	000d883a 	mov	r6,zero
   2dfe0:	01d00934 	movhi	r7,16420
   2dfe4:	1009883a 	mov	r4,r2
   2dfe8:	180b883a 	mov	r5,r3
   2dfec:	0025f6c0 	call	25f6c <__muldf3>
   2dff0:	803ff91e 	bne	r16,zero,2dfd8 <__alt_data_end+0xfffeebd8>
   2dff4:	dfc00117 	ldw	ra,4(sp)
   2dff8:	dc000017 	ldw	r16,0(sp)
   2dffc:	dec00204 	addi	sp,sp,8
   2e000:	f800283a 	ret
   2e004:	202090fa 	slli	r16,r4,3
   2e008:	008000f4 	movhi	r2,3
   2e00c:	1092aa04 	addi	r2,r2,19112
   2e010:	1421883a 	add	r16,r2,r16
   2e014:	80800017 	ldw	r2,0(r16)
   2e018:	80c00117 	ldw	r3,4(r16)
   2e01c:	dfc00117 	ldw	ra,4(sp)
   2e020:	dc000017 	ldw	r16,0(sp)
   2e024:	dec00204 	addi	sp,sp,8
   2e028:	f800283a 	ret

0002e02c <__copybits>:
   2e02c:	297fffc4 	addi	r5,r5,-1
   2e030:	280fd17a 	srai	r7,r5,5
   2e034:	30c00417 	ldw	r3,16(r6)
   2e038:	30800504 	addi	r2,r6,20
   2e03c:	39c00044 	addi	r7,r7,1
   2e040:	18c7883a 	add	r3,r3,r3
   2e044:	39cf883a 	add	r7,r7,r7
   2e048:	18c7883a 	add	r3,r3,r3
   2e04c:	39cf883a 	add	r7,r7,r7
   2e050:	10c7883a 	add	r3,r2,r3
   2e054:	21cf883a 	add	r7,r4,r7
   2e058:	10c00d2e 	bgeu	r2,r3,2e090 <__copybits+0x64>
   2e05c:	200b883a 	mov	r5,r4
   2e060:	12000017 	ldw	r8,0(r2)
   2e064:	29400104 	addi	r5,r5,4
   2e068:	10800104 	addi	r2,r2,4
   2e06c:	2a3fff15 	stw	r8,-4(r5)
   2e070:	10fffb36 	bltu	r2,r3,2e060 <__alt_data_end+0xfffeec60>
   2e074:	1985c83a 	sub	r2,r3,r6
   2e078:	10bffac4 	addi	r2,r2,-21
   2e07c:	1004d0ba 	srli	r2,r2,2
   2e080:	10800044 	addi	r2,r2,1
   2e084:	1085883a 	add	r2,r2,r2
   2e088:	1085883a 	add	r2,r2,r2
   2e08c:	2089883a 	add	r4,r4,r2
   2e090:	21c0032e 	bgeu	r4,r7,2e0a0 <__copybits+0x74>
   2e094:	20000015 	stw	zero,0(r4)
   2e098:	21000104 	addi	r4,r4,4
   2e09c:	21fffd36 	bltu	r4,r7,2e094 <__alt_data_end+0xfffeec94>
   2e0a0:	f800283a 	ret

0002e0a4 <__any_on>:
   2e0a4:	20c00417 	ldw	r3,16(r4)
   2e0a8:	2805d17a 	srai	r2,r5,5
   2e0ac:	21000504 	addi	r4,r4,20
   2e0b0:	18800d0e 	bge	r3,r2,2e0e8 <__any_on+0x44>
   2e0b4:	18c7883a 	add	r3,r3,r3
   2e0b8:	18c7883a 	add	r3,r3,r3
   2e0bc:	20c7883a 	add	r3,r4,r3
   2e0c0:	20c0192e 	bgeu	r4,r3,2e128 <__any_on+0x84>
   2e0c4:	18bfff17 	ldw	r2,-4(r3)
   2e0c8:	18ffff04 	addi	r3,r3,-4
   2e0cc:	1000041e 	bne	r2,zero,2e0e0 <__any_on+0x3c>
   2e0d0:	20c0142e 	bgeu	r4,r3,2e124 <__any_on+0x80>
   2e0d4:	18ffff04 	addi	r3,r3,-4
   2e0d8:	19400017 	ldw	r5,0(r3)
   2e0dc:	283ffc26 	beq	r5,zero,2e0d0 <__alt_data_end+0xfffeecd0>
   2e0e0:	00800044 	movi	r2,1
   2e0e4:	f800283a 	ret
   2e0e8:	10c00a0e 	bge	r2,r3,2e114 <__any_on+0x70>
   2e0ec:	1085883a 	add	r2,r2,r2
   2e0f0:	1085883a 	add	r2,r2,r2
   2e0f4:	294007cc 	andi	r5,r5,31
   2e0f8:	2087883a 	add	r3,r4,r2
   2e0fc:	283ff026 	beq	r5,zero,2e0c0 <__alt_data_end+0xfffeecc0>
   2e100:	19800017 	ldw	r6,0(r3)
   2e104:	3144d83a 	srl	r2,r6,r5
   2e108:	114a983a 	sll	r5,r2,r5
   2e10c:	317ff41e 	bne	r6,r5,2e0e0 <__alt_data_end+0xfffeece0>
   2e110:	003feb06 	br	2e0c0 <__alt_data_end+0xfffeecc0>
   2e114:	1085883a 	add	r2,r2,r2
   2e118:	1085883a 	add	r2,r2,r2
   2e11c:	2087883a 	add	r3,r4,r2
   2e120:	003fe706 	br	2e0c0 <__alt_data_end+0xfffeecc0>
   2e124:	f800283a 	ret
   2e128:	0005883a 	mov	r2,zero
   2e12c:	f800283a 	ret

0002e130 <_realloc_r>:
   2e130:	defff604 	addi	sp,sp,-40
   2e134:	dc800215 	stw	r18,8(sp)
   2e138:	dfc00915 	stw	ra,36(sp)
   2e13c:	df000815 	stw	fp,32(sp)
   2e140:	ddc00715 	stw	r23,28(sp)
   2e144:	dd800615 	stw	r22,24(sp)
   2e148:	dd400515 	stw	r21,20(sp)
   2e14c:	dd000415 	stw	r20,16(sp)
   2e150:	dcc00315 	stw	r19,12(sp)
   2e154:	dc400115 	stw	r17,4(sp)
   2e158:	dc000015 	stw	r16,0(sp)
   2e15c:	3025883a 	mov	r18,r6
   2e160:	2800b726 	beq	r5,zero,2e440 <_realloc_r+0x310>
   2e164:	282b883a 	mov	r21,r5
   2e168:	2029883a 	mov	r20,r4
   2e16c:	0031d780 	call	31d78 <__malloc_lock>
   2e170:	a8bfff17 	ldw	r2,-4(r21)
   2e174:	043fff04 	movi	r16,-4
   2e178:	90c002c4 	addi	r3,r18,11
   2e17c:	01000584 	movi	r4,22
   2e180:	acfffe04 	addi	r19,r21,-8
   2e184:	1420703a 	and	r16,r2,r16
   2e188:	20c0332e 	bgeu	r4,r3,2e258 <_realloc_r+0x128>
   2e18c:	047ffe04 	movi	r17,-8
   2e190:	1c62703a 	and	r17,r3,r17
   2e194:	8807883a 	mov	r3,r17
   2e198:	88005816 	blt	r17,zero,2e2fc <_realloc_r+0x1cc>
   2e19c:	8c805736 	bltu	r17,r18,2e2fc <_realloc_r+0x1cc>
   2e1a0:	80c0300e 	bge	r16,r3,2e264 <_realloc_r+0x134>
   2e1a4:	070000f4 	movhi	fp,3
   2e1a8:	e7141604 	addi	fp,fp,20568
   2e1ac:	e1c00217 	ldw	r7,8(fp)
   2e1b0:	9c09883a 	add	r4,r19,r16
   2e1b4:	22000117 	ldw	r8,4(r4)
   2e1b8:	21c06326 	beq	r4,r7,2e348 <_realloc_r+0x218>
   2e1bc:	017fff84 	movi	r5,-2
   2e1c0:	414a703a 	and	r5,r8,r5
   2e1c4:	214b883a 	add	r5,r4,r5
   2e1c8:	29800117 	ldw	r6,4(r5)
   2e1cc:	3180004c 	andi	r6,r6,1
   2e1d0:	30003f26 	beq	r6,zero,2e2d0 <_realloc_r+0x1a0>
   2e1d4:	1080004c 	andi	r2,r2,1
   2e1d8:	10008326 	beq	r2,zero,2e3e8 <_realloc_r+0x2b8>
   2e1dc:	900b883a 	mov	r5,r18
   2e1e0:	a009883a 	mov	r4,r20
   2e1e4:	002c4780 	call	2c478 <_malloc_r>
   2e1e8:	1025883a 	mov	r18,r2
   2e1ec:	10011e26 	beq	r2,zero,2e668 <_realloc_r+0x538>
   2e1f0:	a93fff17 	ldw	r4,-4(r21)
   2e1f4:	10fffe04 	addi	r3,r2,-8
   2e1f8:	00bfff84 	movi	r2,-2
   2e1fc:	2084703a 	and	r2,r4,r2
   2e200:	9885883a 	add	r2,r19,r2
   2e204:	1880ee26 	beq	r3,r2,2e5c0 <_realloc_r+0x490>
   2e208:	81bfff04 	addi	r6,r16,-4
   2e20c:	00800904 	movi	r2,36
   2e210:	1180b836 	bltu	r2,r6,2e4f4 <_realloc_r+0x3c4>
   2e214:	00c004c4 	movi	r3,19
   2e218:	19809636 	bltu	r3,r6,2e474 <_realloc_r+0x344>
   2e21c:	9005883a 	mov	r2,r18
   2e220:	a807883a 	mov	r3,r21
   2e224:	19000017 	ldw	r4,0(r3)
   2e228:	11000015 	stw	r4,0(r2)
   2e22c:	19000117 	ldw	r4,4(r3)
   2e230:	11000115 	stw	r4,4(r2)
   2e234:	18c00217 	ldw	r3,8(r3)
   2e238:	10c00215 	stw	r3,8(r2)
   2e23c:	a80b883a 	mov	r5,r21
   2e240:	a009883a 	mov	r4,r20
   2e244:	002b88c0 	call	2b88c <_free_r>
   2e248:	a009883a 	mov	r4,r20
   2e24c:	0031d9c0 	call	31d9c <__malloc_unlock>
   2e250:	9005883a 	mov	r2,r18
   2e254:	00001206 	br	2e2a0 <_realloc_r+0x170>
   2e258:	00c00404 	movi	r3,16
   2e25c:	1823883a 	mov	r17,r3
   2e260:	003fce06 	br	2e19c <__alt_data_end+0xfffeed9c>
   2e264:	a825883a 	mov	r18,r21
   2e268:	8445c83a 	sub	r2,r16,r17
   2e26c:	00c003c4 	movi	r3,15
   2e270:	18802636 	bltu	r3,r2,2e30c <_realloc_r+0x1dc>
   2e274:	99800117 	ldw	r6,4(r19)
   2e278:	9c07883a 	add	r3,r19,r16
   2e27c:	3180004c 	andi	r6,r6,1
   2e280:	3420b03a 	or	r16,r6,r16
   2e284:	9c000115 	stw	r16,4(r19)
   2e288:	18800117 	ldw	r2,4(r3)
   2e28c:	10800054 	ori	r2,r2,1
   2e290:	18800115 	stw	r2,4(r3)
   2e294:	a009883a 	mov	r4,r20
   2e298:	0031d9c0 	call	31d9c <__malloc_unlock>
   2e29c:	9005883a 	mov	r2,r18
   2e2a0:	dfc00917 	ldw	ra,36(sp)
   2e2a4:	df000817 	ldw	fp,32(sp)
   2e2a8:	ddc00717 	ldw	r23,28(sp)
   2e2ac:	dd800617 	ldw	r22,24(sp)
   2e2b0:	dd400517 	ldw	r21,20(sp)
   2e2b4:	dd000417 	ldw	r20,16(sp)
   2e2b8:	dcc00317 	ldw	r19,12(sp)
   2e2bc:	dc800217 	ldw	r18,8(sp)
   2e2c0:	dc400117 	ldw	r17,4(sp)
   2e2c4:	dc000017 	ldw	r16,0(sp)
   2e2c8:	dec00a04 	addi	sp,sp,40
   2e2cc:	f800283a 	ret
   2e2d0:	017fff04 	movi	r5,-4
   2e2d4:	414a703a 	and	r5,r8,r5
   2e2d8:	814d883a 	add	r6,r16,r5
   2e2dc:	30c01f16 	blt	r6,r3,2e35c <_realloc_r+0x22c>
   2e2e0:	20800317 	ldw	r2,12(r4)
   2e2e4:	20c00217 	ldw	r3,8(r4)
   2e2e8:	a825883a 	mov	r18,r21
   2e2ec:	3021883a 	mov	r16,r6
   2e2f0:	18800315 	stw	r2,12(r3)
   2e2f4:	10c00215 	stw	r3,8(r2)
   2e2f8:	003fdb06 	br	2e268 <__alt_data_end+0xfffeee68>
   2e2fc:	00800304 	movi	r2,12
   2e300:	a0800015 	stw	r2,0(r20)
   2e304:	0005883a 	mov	r2,zero
   2e308:	003fe506 	br	2e2a0 <__alt_data_end+0xfffeeea0>
   2e30c:	98c00117 	ldw	r3,4(r19)
   2e310:	9c4b883a 	add	r5,r19,r17
   2e314:	11000054 	ori	r4,r2,1
   2e318:	18c0004c 	andi	r3,r3,1
   2e31c:	1c62b03a 	or	r17,r3,r17
   2e320:	9c400115 	stw	r17,4(r19)
   2e324:	29000115 	stw	r4,4(r5)
   2e328:	2885883a 	add	r2,r5,r2
   2e32c:	10c00117 	ldw	r3,4(r2)
   2e330:	29400204 	addi	r5,r5,8
   2e334:	a009883a 	mov	r4,r20
   2e338:	18c00054 	ori	r3,r3,1
   2e33c:	10c00115 	stw	r3,4(r2)
   2e340:	002b88c0 	call	2b88c <_free_r>
   2e344:	003fd306 	br	2e294 <__alt_data_end+0xfffeee94>
   2e348:	017fff04 	movi	r5,-4
   2e34c:	414a703a 	and	r5,r8,r5
   2e350:	89800404 	addi	r6,r17,16
   2e354:	8151883a 	add	r8,r16,r5
   2e358:	4180590e 	bge	r8,r6,2e4c0 <_realloc_r+0x390>
   2e35c:	1080004c 	andi	r2,r2,1
   2e360:	103f9e1e 	bne	r2,zero,2e1dc <__alt_data_end+0xfffeeddc>
   2e364:	adbffe17 	ldw	r22,-8(r21)
   2e368:	00bfff04 	movi	r2,-4
   2e36c:	9dadc83a 	sub	r22,r19,r22
   2e370:	b1800117 	ldw	r6,4(r22)
   2e374:	3084703a 	and	r2,r6,r2
   2e378:	20002026 	beq	r4,zero,2e3fc <_realloc_r+0x2cc>
   2e37c:	80af883a 	add	r23,r16,r2
   2e380:	b96f883a 	add	r23,r23,r5
   2e384:	21c05f26 	beq	r4,r7,2e504 <_realloc_r+0x3d4>
   2e388:	b8c01c16 	blt	r23,r3,2e3fc <_realloc_r+0x2cc>
   2e38c:	20800317 	ldw	r2,12(r4)
   2e390:	20c00217 	ldw	r3,8(r4)
   2e394:	81bfff04 	addi	r6,r16,-4
   2e398:	01000904 	movi	r4,36
   2e39c:	18800315 	stw	r2,12(r3)
   2e3a0:	10c00215 	stw	r3,8(r2)
   2e3a4:	b0c00217 	ldw	r3,8(r22)
   2e3a8:	b0800317 	ldw	r2,12(r22)
   2e3ac:	b4800204 	addi	r18,r22,8
   2e3b0:	18800315 	stw	r2,12(r3)
   2e3b4:	10c00215 	stw	r3,8(r2)
   2e3b8:	21801b36 	bltu	r4,r6,2e428 <_realloc_r+0x2f8>
   2e3bc:	008004c4 	movi	r2,19
   2e3c0:	1180352e 	bgeu	r2,r6,2e498 <_realloc_r+0x368>
   2e3c4:	a8800017 	ldw	r2,0(r21)
   2e3c8:	b0800215 	stw	r2,8(r22)
   2e3cc:	a8800117 	ldw	r2,4(r21)
   2e3d0:	b0800315 	stw	r2,12(r22)
   2e3d4:	008006c4 	movi	r2,27
   2e3d8:	11807f36 	bltu	r2,r6,2e5d8 <_realloc_r+0x4a8>
   2e3dc:	b0800404 	addi	r2,r22,16
   2e3e0:	ad400204 	addi	r21,r21,8
   2e3e4:	00002d06 	br	2e49c <_realloc_r+0x36c>
   2e3e8:	adbffe17 	ldw	r22,-8(r21)
   2e3ec:	00bfff04 	movi	r2,-4
   2e3f0:	9dadc83a 	sub	r22,r19,r22
   2e3f4:	b1000117 	ldw	r4,4(r22)
   2e3f8:	2084703a 	and	r2,r4,r2
   2e3fc:	b03f7726 	beq	r22,zero,2e1dc <__alt_data_end+0xfffeeddc>
   2e400:	80af883a 	add	r23,r16,r2
   2e404:	b8ff7516 	blt	r23,r3,2e1dc <__alt_data_end+0xfffeeddc>
   2e408:	b0800317 	ldw	r2,12(r22)
   2e40c:	b0c00217 	ldw	r3,8(r22)
   2e410:	81bfff04 	addi	r6,r16,-4
   2e414:	01000904 	movi	r4,36
   2e418:	18800315 	stw	r2,12(r3)
   2e41c:	10c00215 	stw	r3,8(r2)
   2e420:	b4800204 	addi	r18,r22,8
   2e424:	21bfe52e 	bgeu	r4,r6,2e3bc <__alt_data_end+0xfffeefbc>
   2e428:	a80b883a 	mov	r5,r21
   2e42c:	9009883a 	mov	r4,r18
   2e430:	002ceb00 	call	2ceb0 <memmove>
   2e434:	b821883a 	mov	r16,r23
   2e438:	b027883a 	mov	r19,r22
   2e43c:	003f8a06 	br	2e268 <__alt_data_end+0xfffeee68>
   2e440:	300b883a 	mov	r5,r6
   2e444:	dfc00917 	ldw	ra,36(sp)
   2e448:	df000817 	ldw	fp,32(sp)
   2e44c:	ddc00717 	ldw	r23,28(sp)
   2e450:	dd800617 	ldw	r22,24(sp)
   2e454:	dd400517 	ldw	r21,20(sp)
   2e458:	dd000417 	ldw	r20,16(sp)
   2e45c:	dcc00317 	ldw	r19,12(sp)
   2e460:	dc800217 	ldw	r18,8(sp)
   2e464:	dc400117 	ldw	r17,4(sp)
   2e468:	dc000017 	ldw	r16,0(sp)
   2e46c:	dec00a04 	addi	sp,sp,40
   2e470:	002c4781 	jmpi	2c478 <_malloc_r>
   2e474:	a8c00017 	ldw	r3,0(r21)
   2e478:	90c00015 	stw	r3,0(r18)
   2e47c:	a8c00117 	ldw	r3,4(r21)
   2e480:	90c00115 	stw	r3,4(r18)
   2e484:	00c006c4 	movi	r3,27
   2e488:	19804536 	bltu	r3,r6,2e5a0 <_realloc_r+0x470>
   2e48c:	90800204 	addi	r2,r18,8
   2e490:	a8c00204 	addi	r3,r21,8
   2e494:	003f6306 	br	2e224 <__alt_data_end+0xfffeee24>
   2e498:	9005883a 	mov	r2,r18
   2e49c:	a8c00017 	ldw	r3,0(r21)
   2e4a0:	b821883a 	mov	r16,r23
   2e4a4:	b027883a 	mov	r19,r22
   2e4a8:	10c00015 	stw	r3,0(r2)
   2e4ac:	a8c00117 	ldw	r3,4(r21)
   2e4b0:	10c00115 	stw	r3,4(r2)
   2e4b4:	a8c00217 	ldw	r3,8(r21)
   2e4b8:	10c00215 	stw	r3,8(r2)
   2e4bc:	003f6a06 	br	2e268 <__alt_data_end+0xfffeee68>
   2e4c0:	9c67883a 	add	r19,r19,r17
   2e4c4:	4445c83a 	sub	r2,r8,r17
   2e4c8:	e4c00215 	stw	r19,8(fp)
   2e4cc:	10800054 	ori	r2,r2,1
   2e4d0:	98800115 	stw	r2,4(r19)
   2e4d4:	a8bfff17 	ldw	r2,-4(r21)
   2e4d8:	a009883a 	mov	r4,r20
   2e4dc:	1080004c 	andi	r2,r2,1
   2e4e0:	1462b03a 	or	r17,r2,r17
   2e4e4:	ac7fff15 	stw	r17,-4(r21)
   2e4e8:	0031d9c0 	call	31d9c <__malloc_unlock>
   2e4ec:	a805883a 	mov	r2,r21
   2e4f0:	003f6b06 	br	2e2a0 <__alt_data_end+0xfffeeea0>
   2e4f4:	a80b883a 	mov	r5,r21
   2e4f8:	9009883a 	mov	r4,r18
   2e4fc:	002ceb00 	call	2ceb0 <memmove>
   2e500:	003f4e06 	br	2e23c <__alt_data_end+0xfffeee3c>
   2e504:	89000404 	addi	r4,r17,16
   2e508:	b93fbc16 	blt	r23,r4,2e3fc <__alt_data_end+0xfffeeffc>
   2e50c:	b0800317 	ldw	r2,12(r22)
   2e510:	b0c00217 	ldw	r3,8(r22)
   2e514:	81bfff04 	addi	r6,r16,-4
   2e518:	01000904 	movi	r4,36
   2e51c:	18800315 	stw	r2,12(r3)
   2e520:	10c00215 	stw	r3,8(r2)
   2e524:	b4800204 	addi	r18,r22,8
   2e528:	21804336 	bltu	r4,r6,2e638 <_realloc_r+0x508>
   2e52c:	008004c4 	movi	r2,19
   2e530:	11803f2e 	bgeu	r2,r6,2e630 <_realloc_r+0x500>
   2e534:	a8800017 	ldw	r2,0(r21)
   2e538:	b0800215 	stw	r2,8(r22)
   2e53c:	a8800117 	ldw	r2,4(r21)
   2e540:	b0800315 	stw	r2,12(r22)
   2e544:	008006c4 	movi	r2,27
   2e548:	11803f36 	bltu	r2,r6,2e648 <_realloc_r+0x518>
   2e54c:	b0800404 	addi	r2,r22,16
   2e550:	ad400204 	addi	r21,r21,8
   2e554:	a8c00017 	ldw	r3,0(r21)
   2e558:	10c00015 	stw	r3,0(r2)
   2e55c:	a8c00117 	ldw	r3,4(r21)
   2e560:	10c00115 	stw	r3,4(r2)
   2e564:	a8c00217 	ldw	r3,8(r21)
   2e568:	10c00215 	stw	r3,8(r2)
   2e56c:	b447883a 	add	r3,r22,r17
   2e570:	bc45c83a 	sub	r2,r23,r17
   2e574:	e0c00215 	stw	r3,8(fp)
   2e578:	10800054 	ori	r2,r2,1
   2e57c:	18800115 	stw	r2,4(r3)
   2e580:	b0800117 	ldw	r2,4(r22)
   2e584:	a009883a 	mov	r4,r20
   2e588:	1080004c 	andi	r2,r2,1
   2e58c:	1462b03a 	or	r17,r2,r17
   2e590:	b4400115 	stw	r17,4(r22)
   2e594:	0031d9c0 	call	31d9c <__malloc_unlock>
   2e598:	9005883a 	mov	r2,r18
   2e59c:	003f4006 	br	2e2a0 <__alt_data_end+0xfffeeea0>
   2e5a0:	a8c00217 	ldw	r3,8(r21)
   2e5a4:	90c00215 	stw	r3,8(r18)
   2e5a8:	a8c00317 	ldw	r3,12(r21)
   2e5ac:	90c00315 	stw	r3,12(r18)
   2e5b0:	30801126 	beq	r6,r2,2e5f8 <_realloc_r+0x4c8>
   2e5b4:	90800404 	addi	r2,r18,16
   2e5b8:	a8c00404 	addi	r3,r21,16
   2e5bc:	003f1906 	br	2e224 <__alt_data_end+0xfffeee24>
   2e5c0:	90ffff17 	ldw	r3,-4(r18)
   2e5c4:	00bfff04 	movi	r2,-4
   2e5c8:	a825883a 	mov	r18,r21
   2e5cc:	1884703a 	and	r2,r3,r2
   2e5d0:	80a1883a 	add	r16,r16,r2
   2e5d4:	003f2406 	br	2e268 <__alt_data_end+0xfffeee68>
   2e5d8:	a8800217 	ldw	r2,8(r21)
   2e5dc:	b0800415 	stw	r2,16(r22)
   2e5e0:	a8800317 	ldw	r2,12(r21)
   2e5e4:	b0800515 	stw	r2,20(r22)
   2e5e8:	31000a26 	beq	r6,r4,2e614 <_realloc_r+0x4e4>
   2e5ec:	b0800604 	addi	r2,r22,24
   2e5f0:	ad400404 	addi	r21,r21,16
   2e5f4:	003fa906 	br	2e49c <__alt_data_end+0xfffef09c>
   2e5f8:	a9000417 	ldw	r4,16(r21)
   2e5fc:	90800604 	addi	r2,r18,24
   2e600:	a8c00604 	addi	r3,r21,24
   2e604:	91000415 	stw	r4,16(r18)
   2e608:	a9000517 	ldw	r4,20(r21)
   2e60c:	91000515 	stw	r4,20(r18)
   2e610:	003f0406 	br	2e224 <__alt_data_end+0xfffeee24>
   2e614:	a8c00417 	ldw	r3,16(r21)
   2e618:	ad400604 	addi	r21,r21,24
   2e61c:	b0800804 	addi	r2,r22,32
   2e620:	b0c00615 	stw	r3,24(r22)
   2e624:	a8ffff17 	ldw	r3,-4(r21)
   2e628:	b0c00715 	stw	r3,28(r22)
   2e62c:	003f9b06 	br	2e49c <__alt_data_end+0xfffef09c>
   2e630:	9005883a 	mov	r2,r18
   2e634:	003fc706 	br	2e554 <__alt_data_end+0xfffef154>
   2e638:	a80b883a 	mov	r5,r21
   2e63c:	9009883a 	mov	r4,r18
   2e640:	002ceb00 	call	2ceb0 <memmove>
   2e644:	003fc906 	br	2e56c <__alt_data_end+0xfffef16c>
   2e648:	a8800217 	ldw	r2,8(r21)
   2e64c:	b0800415 	stw	r2,16(r22)
   2e650:	a8800317 	ldw	r2,12(r21)
   2e654:	b0800515 	stw	r2,20(r22)
   2e658:	31000726 	beq	r6,r4,2e678 <_realloc_r+0x548>
   2e65c:	b0800604 	addi	r2,r22,24
   2e660:	ad400404 	addi	r21,r21,16
   2e664:	003fbb06 	br	2e554 <__alt_data_end+0xfffef154>
   2e668:	a009883a 	mov	r4,r20
   2e66c:	0031d9c0 	call	31d9c <__malloc_unlock>
   2e670:	0005883a 	mov	r2,zero
   2e674:	003f0a06 	br	2e2a0 <__alt_data_end+0xfffeeea0>
   2e678:	a8c00417 	ldw	r3,16(r21)
   2e67c:	ad400604 	addi	r21,r21,24
   2e680:	b0800804 	addi	r2,r22,32
   2e684:	b0c00615 	stw	r3,24(r22)
   2e688:	a8ffff17 	ldw	r3,-4(r21)
   2e68c:	b0c00715 	stw	r3,28(r22)
   2e690:	003fb006 	br	2e554 <__alt_data_end+0xfffef154>

0002e694 <__fpclassifyd>:
   2e694:	00a00034 	movhi	r2,32768
   2e698:	10bfffc4 	addi	r2,r2,-1
   2e69c:	2884703a 	and	r2,r5,r2
   2e6a0:	10000726 	beq	r2,zero,2e6c0 <__fpclassifyd+0x2c>
   2e6a4:	00fffc34 	movhi	r3,65520
   2e6a8:	019ff834 	movhi	r6,32736
   2e6ac:	28c7883a 	add	r3,r5,r3
   2e6b0:	31bfffc4 	addi	r6,r6,-1
   2e6b4:	30c00536 	bltu	r6,r3,2e6cc <__fpclassifyd+0x38>
   2e6b8:	00800104 	movi	r2,4
   2e6bc:	f800283a 	ret
   2e6c0:	2000021e 	bne	r4,zero,2e6cc <__fpclassifyd+0x38>
   2e6c4:	00800084 	movi	r2,2
   2e6c8:	f800283a 	ret
   2e6cc:	00dffc34 	movhi	r3,32752
   2e6d0:	019ff834 	movhi	r6,32736
   2e6d4:	28cb883a 	add	r5,r5,r3
   2e6d8:	31bfffc4 	addi	r6,r6,-1
   2e6dc:	317ff62e 	bgeu	r6,r5,2e6b8 <__alt_data_end+0xfffef2b8>
   2e6e0:	01400434 	movhi	r5,16
   2e6e4:	297fffc4 	addi	r5,r5,-1
   2e6e8:	28800236 	bltu	r5,r2,2e6f4 <__fpclassifyd+0x60>
   2e6ec:	008000c4 	movi	r2,3
   2e6f0:	f800283a 	ret
   2e6f4:	10c00226 	beq	r2,r3,2e700 <__fpclassifyd+0x6c>
   2e6f8:	0005883a 	mov	r2,zero
   2e6fc:	f800283a 	ret
   2e700:	2005003a 	cmpeq	r2,r4,zero
   2e704:	f800283a 	ret

0002e708 <_sbrk_r>:
   2e708:	defffd04 	addi	sp,sp,-12
   2e70c:	dc000015 	stw	r16,0(sp)
   2e710:	04000134 	movhi	r16,4
   2e714:	dc400115 	stw	r17,4(sp)
   2e718:	84207004 	addi	r16,r16,-32320
   2e71c:	2023883a 	mov	r17,r4
   2e720:	2809883a 	mov	r4,r5
   2e724:	dfc00215 	stw	ra,8(sp)
   2e728:	80000015 	stw	zero,0(r16)
   2e72c:	0031f5c0 	call	31f5c <sbrk>
   2e730:	00ffffc4 	movi	r3,-1
   2e734:	10c00526 	beq	r2,r3,2e74c <_sbrk_r+0x44>
   2e738:	dfc00217 	ldw	ra,8(sp)
   2e73c:	dc400117 	ldw	r17,4(sp)
   2e740:	dc000017 	ldw	r16,0(sp)
   2e744:	dec00304 	addi	sp,sp,12
   2e748:	f800283a 	ret
   2e74c:	80c00017 	ldw	r3,0(r16)
   2e750:	183ff926 	beq	r3,zero,2e738 <__alt_data_end+0xfffef338>
   2e754:	88c00015 	stw	r3,0(r17)
   2e758:	003ff706 	br	2e738 <__alt_data_end+0xfffef338>

0002e75c <__sread>:
   2e75c:	defffe04 	addi	sp,sp,-8
   2e760:	dc000015 	stw	r16,0(sp)
   2e764:	2821883a 	mov	r16,r5
   2e768:	2940038f 	ldh	r5,14(r5)
   2e76c:	dfc00115 	stw	ra,4(sp)
   2e770:	00305500 	call	30550 <_read_r>
   2e774:	10000716 	blt	r2,zero,2e794 <__sread+0x38>
   2e778:	80c01417 	ldw	r3,80(r16)
   2e77c:	1887883a 	add	r3,r3,r2
   2e780:	80c01415 	stw	r3,80(r16)
   2e784:	dfc00117 	ldw	ra,4(sp)
   2e788:	dc000017 	ldw	r16,0(sp)
   2e78c:	dec00204 	addi	sp,sp,8
   2e790:	f800283a 	ret
   2e794:	80c0030b 	ldhu	r3,12(r16)
   2e798:	18fbffcc 	andi	r3,r3,61439
   2e79c:	80c0030d 	sth	r3,12(r16)
   2e7a0:	dfc00117 	ldw	ra,4(sp)
   2e7a4:	dc000017 	ldw	r16,0(sp)
   2e7a8:	dec00204 	addi	sp,sp,8
   2e7ac:	f800283a 	ret

0002e7b0 <__seofread>:
   2e7b0:	0005883a 	mov	r2,zero
   2e7b4:	f800283a 	ret

0002e7b8 <__swrite>:
   2e7b8:	2880030b 	ldhu	r2,12(r5)
   2e7bc:	defffb04 	addi	sp,sp,-20
   2e7c0:	dcc00315 	stw	r19,12(sp)
   2e7c4:	dc800215 	stw	r18,8(sp)
   2e7c8:	dc400115 	stw	r17,4(sp)
   2e7cc:	dc000015 	stw	r16,0(sp)
   2e7d0:	dfc00415 	stw	ra,16(sp)
   2e7d4:	10c0400c 	andi	r3,r2,256
   2e7d8:	2821883a 	mov	r16,r5
   2e7dc:	2023883a 	mov	r17,r4
   2e7e0:	3025883a 	mov	r18,r6
   2e7e4:	3827883a 	mov	r19,r7
   2e7e8:	18000526 	beq	r3,zero,2e800 <__swrite+0x48>
   2e7ec:	2940038f 	ldh	r5,14(r5)
   2e7f0:	01c00084 	movi	r7,2
   2e7f4:	000d883a 	mov	r6,zero
   2e7f8:	00304f00 	call	304f0 <_lseek_r>
   2e7fc:	8080030b 	ldhu	r2,12(r16)
   2e800:	8140038f 	ldh	r5,14(r16)
   2e804:	10bbffcc 	andi	r2,r2,61439
   2e808:	980f883a 	mov	r7,r19
   2e80c:	900d883a 	mov	r6,r18
   2e810:	8809883a 	mov	r4,r17
   2e814:	8080030d 	sth	r2,12(r16)
   2e818:	dfc00417 	ldw	ra,16(sp)
   2e81c:	dcc00317 	ldw	r19,12(sp)
   2e820:	dc800217 	ldw	r18,8(sp)
   2e824:	dc400117 	ldw	r17,4(sp)
   2e828:	dc000017 	ldw	r16,0(sp)
   2e82c:	dec00504 	addi	sp,sp,20
   2e830:	002ffbc1 	jmpi	2ffbc <_write_r>

0002e834 <__sseek>:
   2e834:	defffe04 	addi	sp,sp,-8
   2e838:	dc000015 	stw	r16,0(sp)
   2e83c:	2821883a 	mov	r16,r5
   2e840:	2940038f 	ldh	r5,14(r5)
   2e844:	dfc00115 	stw	ra,4(sp)
   2e848:	00304f00 	call	304f0 <_lseek_r>
   2e84c:	00ffffc4 	movi	r3,-1
   2e850:	10c00826 	beq	r2,r3,2e874 <__sseek+0x40>
   2e854:	80c0030b 	ldhu	r3,12(r16)
   2e858:	80801415 	stw	r2,80(r16)
   2e85c:	18c40014 	ori	r3,r3,4096
   2e860:	80c0030d 	sth	r3,12(r16)
   2e864:	dfc00117 	ldw	ra,4(sp)
   2e868:	dc000017 	ldw	r16,0(sp)
   2e86c:	dec00204 	addi	sp,sp,8
   2e870:	f800283a 	ret
   2e874:	80c0030b 	ldhu	r3,12(r16)
   2e878:	18fbffcc 	andi	r3,r3,61439
   2e87c:	80c0030d 	sth	r3,12(r16)
   2e880:	dfc00117 	ldw	ra,4(sp)
   2e884:	dc000017 	ldw	r16,0(sp)
   2e888:	dec00204 	addi	sp,sp,8
   2e88c:	f800283a 	ret

0002e890 <__sclose>:
   2e890:	2940038f 	ldh	r5,14(r5)
   2e894:	003001c1 	jmpi	3001c <_close_r>

0002e898 <strcmp>:
   2e898:	2144b03a 	or	r2,r4,r5
   2e89c:	108000cc 	andi	r2,r2,3
   2e8a0:	1000171e 	bne	r2,zero,2e900 <strcmp+0x68>
   2e8a4:	20800017 	ldw	r2,0(r4)
   2e8a8:	28c00017 	ldw	r3,0(r5)
   2e8ac:	10c0141e 	bne	r2,r3,2e900 <strcmp+0x68>
   2e8b0:	027fbff4 	movhi	r9,65279
   2e8b4:	4a7fbfc4 	addi	r9,r9,-257
   2e8b8:	0086303a 	nor	r3,zero,r2
   2e8bc:	02202074 	movhi	r8,32897
   2e8c0:	1245883a 	add	r2,r2,r9
   2e8c4:	42202004 	addi	r8,r8,-32640
   2e8c8:	10c4703a 	and	r2,r2,r3
   2e8cc:	1204703a 	and	r2,r2,r8
   2e8d0:	10000226 	beq	r2,zero,2e8dc <strcmp+0x44>
   2e8d4:	00002306 	br	2e964 <strcmp+0xcc>
   2e8d8:	1000221e 	bne	r2,zero,2e964 <strcmp+0xcc>
   2e8dc:	21000104 	addi	r4,r4,4
   2e8e0:	20c00017 	ldw	r3,0(r4)
   2e8e4:	29400104 	addi	r5,r5,4
   2e8e8:	29800017 	ldw	r6,0(r5)
   2e8ec:	1a4f883a 	add	r7,r3,r9
   2e8f0:	00c4303a 	nor	r2,zero,r3
   2e8f4:	3884703a 	and	r2,r7,r2
   2e8f8:	1204703a 	and	r2,r2,r8
   2e8fc:	19bff626 	beq	r3,r6,2e8d8 <__alt_data_end+0xfffef4d8>
   2e900:	20800003 	ldbu	r2,0(r4)
   2e904:	10c03fcc 	andi	r3,r2,255
   2e908:	18c0201c 	xori	r3,r3,128
   2e90c:	18ffe004 	addi	r3,r3,-128
   2e910:	18000c26 	beq	r3,zero,2e944 <strcmp+0xac>
   2e914:	29800007 	ldb	r6,0(r5)
   2e918:	19800326 	beq	r3,r6,2e928 <strcmp+0x90>
   2e91c:	00001306 	br	2e96c <strcmp+0xd4>
   2e920:	29800007 	ldb	r6,0(r5)
   2e924:	11800b1e 	bne	r2,r6,2e954 <strcmp+0xbc>
   2e928:	21000044 	addi	r4,r4,1
   2e92c:	20c00003 	ldbu	r3,0(r4)
   2e930:	29400044 	addi	r5,r5,1
   2e934:	18803fcc 	andi	r2,r3,255
   2e938:	1080201c 	xori	r2,r2,128
   2e93c:	10bfe004 	addi	r2,r2,-128
   2e940:	103ff71e 	bne	r2,zero,2e920 <__alt_data_end+0xfffef520>
   2e944:	0007883a 	mov	r3,zero
   2e948:	28800003 	ldbu	r2,0(r5)
   2e94c:	1885c83a 	sub	r2,r3,r2
   2e950:	f800283a 	ret
   2e954:	28800003 	ldbu	r2,0(r5)
   2e958:	18c03fcc 	andi	r3,r3,255
   2e95c:	1885c83a 	sub	r2,r3,r2
   2e960:	f800283a 	ret
   2e964:	0005883a 	mov	r2,zero
   2e968:	f800283a 	ret
   2e96c:	10c03fcc 	andi	r3,r2,255
   2e970:	003ff506 	br	2e948 <__alt_data_end+0xfffef548>

0002e974 <__sprint_r.part.0>:
   2e974:	28801917 	ldw	r2,100(r5)
   2e978:	defff604 	addi	sp,sp,-40
   2e97c:	dd400515 	stw	r21,20(sp)
   2e980:	dfc00915 	stw	ra,36(sp)
   2e984:	df000815 	stw	fp,32(sp)
   2e988:	ddc00715 	stw	r23,28(sp)
   2e98c:	dd800615 	stw	r22,24(sp)
   2e990:	dd000415 	stw	r20,16(sp)
   2e994:	dcc00315 	stw	r19,12(sp)
   2e998:	dc800215 	stw	r18,8(sp)
   2e99c:	dc400115 	stw	r17,4(sp)
   2e9a0:	dc000015 	stw	r16,0(sp)
   2e9a4:	1088000c 	andi	r2,r2,8192
   2e9a8:	302b883a 	mov	r21,r6
   2e9ac:	10002e26 	beq	r2,zero,2ea68 <__sprint_r.part.0+0xf4>
   2e9b0:	30800217 	ldw	r2,8(r6)
   2e9b4:	35800017 	ldw	r22,0(r6)
   2e9b8:	10002926 	beq	r2,zero,2ea60 <__sprint_r.part.0+0xec>
   2e9bc:	2827883a 	mov	r19,r5
   2e9c0:	2029883a 	mov	r20,r4
   2e9c4:	b5c00104 	addi	r23,r22,4
   2e9c8:	04bfffc4 	movi	r18,-1
   2e9cc:	bc400017 	ldw	r17,0(r23)
   2e9d0:	b4000017 	ldw	r16,0(r22)
   2e9d4:	0039883a 	mov	fp,zero
   2e9d8:	8822d0ba 	srli	r17,r17,2
   2e9dc:	8800031e 	bne	r17,zero,2e9ec <__sprint_r.part.0+0x78>
   2e9e0:	00001806 	br	2ea44 <__sprint_r.part.0+0xd0>
   2e9e4:	84000104 	addi	r16,r16,4
   2e9e8:	8f001526 	beq	r17,fp,2ea40 <__sprint_r.part.0+0xcc>
   2e9ec:	81400017 	ldw	r5,0(r16)
   2e9f0:	980d883a 	mov	r6,r19
   2e9f4:	a009883a 	mov	r4,r20
   2e9f8:	003039c0 	call	3039c <_fputwc_r>
   2e9fc:	e7000044 	addi	fp,fp,1
   2ea00:	14bff81e 	bne	r2,r18,2e9e4 <__alt_data_end+0xfffef5e4>
   2ea04:	9005883a 	mov	r2,r18
   2ea08:	a8000215 	stw	zero,8(r21)
   2ea0c:	a8000115 	stw	zero,4(r21)
   2ea10:	dfc00917 	ldw	ra,36(sp)
   2ea14:	df000817 	ldw	fp,32(sp)
   2ea18:	ddc00717 	ldw	r23,28(sp)
   2ea1c:	dd800617 	ldw	r22,24(sp)
   2ea20:	dd400517 	ldw	r21,20(sp)
   2ea24:	dd000417 	ldw	r20,16(sp)
   2ea28:	dcc00317 	ldw	r19,12(sp)
   2ea2c:	dc800217 	ldw	r18,8(sp)
   2ea30:	dc400117 	ldw	r17,4(sp)
   2ea34:	dc000017 	ldw	r16,0(sp)
   2ea38:	dec00a04 	addi	sp,sp,40
   2ea3c:	f800283a 	ret
   2ea40:	a8800217 	ldw	r2,8(r21)
   2ea44:	8c63883a 	add	r17,r17,r17
   2ea48:	8c63883a 	add	r17,r17,r17
   2ea4c:	1445c83a 	sub	r2,r2,r17
   2ea50:	a8800215 	stw	r2,8(r21)
   2ea54:	b5800204 	addi	r22,r22,8
   2ea58:	bdc00204 	addi	r23,r23,8
   2ea5c:	103fdb1e 	bne	r2,zero,2e9cc <__alt_data_end+0xfffef5cc>
   2ea60:	0005883a 	mov	r2,zero
   2ea64:	003fe806 	br	2ea08 <__alt_data_end+0xfffef608>
   2ea68:	002bb9c0 	call	2bb9c <__sfvwrite_r>
   2ea6c:	003fe606 	br	2ea08 <__alt_data_end+0xfffef608>

0002ea70 <__sprint_r>:
   2ea70:	30c00217 	ldw	r3,8(r6)
   2ea74:	18000126 	beq	r3,zero,2ea7c <__sprint_r+0xc>
   2ea78:	002e9741 	jmpi	2e974 <__sprint_r.part.0>
   2ea7c:	30000115 	stw	zero,4(r6)
   2ea80:	0005883a 	mov	r2,zero
   2ea84:	f800283a 	ret

0002ea88 <___vfiprintf_internal_r>:
   2ea88:	deffc904 	addi	sp,sp,-220
   2ea8c:	df003515 	stw	fp,212(sp)
   2ea90:	dd003115 	stw	r20,196(sp)
   2ea94:	dfc03615 	stw	ra,216(sp)
   2ea98:	ddc03415 	stw	r23,208(sp)
   2ea9c:	dd803315 	stw	r22,204(sp)
   2eaa0:	dd403215 	stw	r21,200(sp)
   2eaa4:	dcc03015 	stw	r19,192(sp)
   2eaa8:	dc802f15 	stw	r18,188(sp)
   2eaac:	dc402e15 	stw	r17,184(sp)
   2eab0:	dc002d15 	stw	r16,180(sp)
   2eab4:	d9002015 	stw	r4,128(sp)
   2eab8:	d9c02215 	stw	r7,136(sp)
   2eabc:	2829883a 	mov	r20,r5
   2eac0:	3039883a 	mov	fp,r6
   2eac4:	20000226 	beq	r4,zero,2ead0 <___vfiprintf_internal_r+0x48>
   2eac8:	20800e17 	ldw	r2,56(r4)
   2eacc:	1000cf26 	beq	r2,zero,2ee0c <___vfiprintf_internal_r+0x384>
   2ead0:	a080030b 	ldhu	r2,12(r20)
   2ead4:	10c8000c 	andi	r3,r2,8192
   2ead8:	1800061e 	bne	r3,zero,2eaf4 <___vfiprintf_internal_r+0x6c>
   2eadc:	a1001917 	ldw	r4,100(r20)
   2eae0:	00f7ffc4 	movi	r3,-8193
   2eae4:	10880014 	ori	r2,r2,8192
   2eae8:	20c6703a 	and	r3,r4,r3
   2eaec:	a080030d 	sth	r2,12(r20)
   2eaf0:	a0c01915 	stw	r3,100(r20)
   2eaf4:	10c0020c 	andi	r3,r2,8
   2eaf8:	1800a926 	beq	r3,zero,2eda0 <___vfiprintf_internal_r+0x318>
   2eafc:	a0c00417 	ldw	r3,16(r20)
   2eb00:	1800a726 	beq	r3,zero,2eda0 <___vfiprintf_internal_r+0x318>
   2eb04:	1080068c 	andi	r2,r2,26
   2eb08:	00c00284 	movi	r3,10
   2eb0c:	10c0ac26 	beq	r2,r3,2edc0 <___vfiprintf_internal_r+0x338>
   2eb10:	da801a04 	addi	r10,sp,104
   2eb14:	da801e15 	stw	r10,120(sp)
   2eb18:	d8801e17 	ldw	r2,120(sp)
   2eb1c:	da8019c4 	addi	r10,sp,103
   2eb20:	058000f4 	movhi	r22,3
   2eb24:	05c000f4 	movhi	r23,3
   2eb28:	da801f15 	stw	r10,124(sp)
   2eb2c:	1295c83a 	sub	r10,r2,r10
   2eb30:	b592e004 	addi	r22,r22,19328
   2eb34:	bdd2dc04 	addi	r23,r23,19312
   2eb38:	dec01a15 	stw	sp,104(sp)
   2eb3c:	d8001c15 	stw	zero,112(sp)
   2eb40:	d8001b15 	stw	zero,108(sp)
   2eb44:	d8002615 	stw	zero,152(sp)
   2eb48:	d8002315 	stw	zero,140(sp)
   2eb4c:	da802715 	stw	r10,156(sp)
   2eb50:	d811883a 	mov	r8,sp
   2eb54:	dd002115 	stw	r20,132(sp)
   2eb58:	e021883a 	mov	r16,fp
   2eb5c:	80800007 	ldb	r2,0(r16)
   2eb60:	1003ea26 	beq	r2,zero,2fb0c <___vfiprintf_internal_r+0x1084>
   2eb64:	00c00944 	movi	r3,37
   2eb68:	8025883a 	mov	r18,r16
   2eb6c:	10c0021e 	bne	r2,r3,2eb78 <___vfiprintf_internal_r+0xf0>
   2eb70:	00001606 	br	2ebcc <___vfiprintf_internal_r+0x144>
   2eb74:	10c00326 	beq	r2,r3,2eb84 <___vfiprintf_internal_r+0xfc>
   2eb78:	94800044 	addi	r18,r18,1
   2eb7c:	90800007 	ldb	r2,0(r18)
   2eb80:	103ffc1e 	bne	r2,zero,2eb74 <__alt_data_end+0xfffef774>
   2eb84:	9423c83a 	sub	r17,r18,r16
   2eb88:	88001026 	beq	r17,zero,2ebcc <___vfiprintf_internal_r+0x144>
   2eb8c:	d8c01c17 	ldw	r3,112(sp)
   2eb90:	d8801b17 	ldw	r2,108(sp)
   2eb94:	44000015 	stw	r16,0(r8)
   2eb98:	88c7883a 	add	r3,r17,r3
   2eb9c:	10800044 	addi	r2,r2,1
   2eba0:	44400115 	stw	r17,4(r8)
   2eba4:	d8c01c15 	stw	r3,112(sp)
   2eba8:	d8801b15 	stw	r2,108(sp)
   2ebac:	010001c4 	movi	r4,7
   2ebb0:	2080760e 	bge	r4,r2,2ed8c <___vfiprintf_internal_r+0x304>
   2ebb4:	1803821e 	bne	r3,zero,2f9c0 <___vfiprintf_internal_r+0xf38>
   2ebb8:	da802317 	ldw	r10,140(sp)
   2ebbc:	d8001b15 	stw	zero,108(sp)
   2ebc0:	d811883a 	mov	r8,sp
   2ebc4:	5455883a 	add	r10,r10,r17
   2ebc8:	da802315 	stw	r10,140(sp)
   2ebcc:	90800007 	ldb	r2,0(r18)
   2ebd0:	10044626 	beq	r2,zero,2fcec <___vfiprintf_internal_r+0x1264>
   2ebd4:	90c00047 	ldb	r3,1(r18)
   2ebd8:	94000044 	addi	r16,r18,1
   2ebdc:	d8001d85 	stb	zero,118(sp)
   2ebe0:	0009883a 	mov	r4,zero
   2ebe4:	000f883a 	mov	r7,zero
   2ebe8:	027fffc4 	movi	r9,-1
   2ebec:	0023883a 	mov	r17,zero
   2ebf0:	0029883a 	mov	r20,zero
   2ebf4:	01401604 	movi	r5,88
   2ebf8:	01800244 	movi	r6,9
   2ebfc:	03400a84 	movi	r13,42
   2ec00:	03001b04 	movi	r12,108
   2ec04:	84000044 	addi	r16,r16,1
   2ec08:	18bff804 	addi	r2,r3,-32
   2ec0c:	28827336 	bltu	r5,r2,2f5dc <___vfiprintf_internal_r+0xb54>
   2ec10:	100490ba 	slli	r2,r2,2
   2ec14:	028000f4 	movhi	r10,3
   2ec18:	52bb0a04 	addi	r10,r10,-5080
   2ec1c:	1285883a 	add	r2,r2,r10
   2ec20:	10800017 	ldw	r2,0(r2)
   2ec24:	1000683a 	jmp	r2
   2ec28:	0002f310 	cmplti	zero,zero,3020
   2ec2c:	0002f5dc 	xori	zero,zero,3031
   2ec30:	0002f5dc 	xori	zero,zero,3031
   2ec34:	0002f330 	cmpltui	zero,zero,3020
   2ec38:	0002f5dc 	xori	zero,zero,3031
   2ec3c:	0002f5dc 	xori	zero,zero,3031
   2ec40:	0002f5dc 	xori	zero,zero,3031
   2ec44:	0002f5dc 	xori	zero,zero,3031
   2ec48:	0002f5dc 	xori	zero,zero,3031
   2ec4c:	0002f5dc 	xori	zero,zero,3031
   2ec50:	0002f518 	cmpnei	zero,zero,3028
   2ec54:	0002f534 	movhi	zero,3028
   2ec58:	0002f5dc 	xori	zero,zero,3031
   2ec5c:	0002ee1c 	xori	zero,zero,3000
   2ec60:	0002f544 	movi	zero,3029
   2ec64:	0002f5dc 	xori	zero,zero,3031
   2ec68:	0002f33c 	xorhi	zero,zero,3020
   2ec6c:	0002f348 	cmpgei	zero,zero,3021
   2ec70:	0002f348 	cmpgei	zero,zero,3021
   2ec74:	0002f348 	cmpgei	zero,zero,3021
   2ec78:	0002f348 	cmpgei	zero,zero,3021
   2ec7c:	0002f348 	cmpgei	zero,zero,3021
   2ec80:	0002f348 	cmpgei	zero,zero,3021
   2ec84:	0002f348 	cmpgei	zero,zero,3021
   2ec88:	0002f348 	cmpgei	zero,zero,3021
   2ec8c:	0002f348 	cmpgei	zero,zero,3021
   2ec90:	0002f5dc 	xori	zero,zero,3031
   2ec94:	0002f5dc 	xori	zero,zero,3031
   2ec98:	0002f5dc 	xori	zero,zero,3031
   2ec9c:	0002f5dc 	xori	zero,zero,3031
   2eca0:	0002f5dc 	xori	zero,zero,3031
   2eca4:	0002f5dc 	xori	zero,zero,3031
   2eca8:	0002f5dc 	xori	zero,zero,3031
   2ecac:	0002f5dc 	xori	zero,zero,3031
   2ecb0:	0002f5dc 	xori	zero,zero,3031
   2ecb4:	0002f5dc 	xori	zero,zero,3031
   2ecb8:	0002f374 	movhi	zero,3021
   2ecbc:	0002f5dc 	xori	zero,zero,3031
   2ecc0:	0002f5dc 	xori	zero,zero,3031
   2ecc4:	0002f5dc 	xori	zero,zero,3031
   2ecc8:	0002f5dc 	xori	zero,zero,3031
   2eccc:	0002f5dc 	xori	zero,zero,3031
   2ecd0:	0002f5dc 	xori	zero,zero,3031
   2ecd4:	0002f5dc 	xori	zero,zero,3031
   2ecd8:	0002f5dc 	xori	zero,zero,3031
   2ecdc:	0002f5dc 	xori	zero,zero,3031
   2ece0:	0002f5dc 	xori	zero,zero,3031
   2ece4:	0002f3ac 	andhi	zero,zero,3022
   2ece8:	0002f5dc 	xori	zero,zero,3031
   2ecec:	0002f5dc 	xori	zero,zero,3031
   2ecf0:	0002f5dc 	xori	zero,zero,3031
   2ecf4:	0002f5dc 	xori	zero,zero,3031
   2ecf8:	0002f5dc 	xori	zero,zero,3031
   2ecfc:	0002f404 	movi	zero,3024
   2ed00:	0002f5dc 	xori	zero,zero,3031
   2ed04:	0002f5dc 	xori	zero,zero,3031
   2ed08:	0002f474 	movhi	zero,3025
   2ed0c:	0002f5dc 	xori	zero,zero,3031
   2ed10:	0002f5dc 	xori	zero,zero,3031
   2ed14:	0002f5dc 	xori	zero,zero,3031
   2ed18:	0002f5dc 	xori	zero,zero,3031
   2ed1c:	0002f5dc 	xori	zero,zero,3031
   2ed20:	0002f5dc 	xori	zero,zero,3031
   2ed24:	0002f5dc 	xori	zero,zero,3031
   2ed28:	0002f5dc 	xori	zero,zero,3031
   2ed2c:	0002f5dc 	xori	zero,zero,3031
   2ed30:	0002f5dc 	xori	zero,zero,3031
   2ed34:	0002f220 	cmpeqi	zero,zero,3016
   2ed38:	0002f24c 	andi	zero,zero,3017
   2ed3c:	0002f5dc 	xori	zero,zero,3031
   2ed40:	0002f5dc 	xori	zero,zero,3031
   2ed44:	0002f5dc 	xori	zero,zero,3031
   2ed48:	0002f584 	movi	zero,3030
   2ed4c:	0002f24c 	andi	zero,zero,3017
   2ed50:	0002f5dc 	xori	zero,zero,3031
   2ed54:	0002f5dc 	xori	zero,zero,3031
   2ed58:	0002f0e0 	cmpeqi	zero,zero,3011
   2ed5c:	0002f5dc 	xori	zero,zero,3031
   2ed60:	0002f0f0 	cmpltui	zero,zero,3011
   2ed64:	0002f12c 	andhi	zero,zero,3012
   2ed68:	0002ee28 	cmpgeui	zero,zero,3000
   2ed6c:	0002f0d4 	movui	zero,3011
   2ed70:	0002f5dc 	xori	zero,zero,3031
   2ed74:	0002f4b0 	cmpltui	zero,zero,3026
   2ed78:	0002f5dc 	xori	zero,zero,3031
   2ed7c:	0002f508 	cmpgei	zero,zero,3028
   2ed80:	0002f5dc 	xori	zero,zero,3031
   2ed84:	0002f5dc 	xori	zero,zero,3031
   2ed88:	0002f1cc 	andi	zero,zero,3015
   2ed8c:	42000204 	addi	r8,r8,8
   2ed90:	da802317 	ldw	r10,140(sp)
   2ed94:	5455883a 	add	r10,r10,r17
   2ed98:	da802315 	stw	r10,140(sp)
   2ed9c:	003f8b06 	br	2ebcc <__alt_data_end+0xfffef7cc>
   2eda0:	d9002017 	ldw	r4,128(sp)
   2eda4:	a00b883a 	mov	r5,r20
   2eda8:	00297440 	call	29744 <__swsetup_r>
   2edac:	1003b11e 	bne	r2,zero,2fc74 <___vfiprintf_internal_r+0x11ec>
   2edb0:	a080030b 	ldhu	r2,12(r20)
   2edb4:	00c00284 	movi	r3,10
   2edb8:	1080068c 	andi	r2,r2,26
   2edbc:	10ff541e 	bne	r2,r3,2eb10 <__alt_data_end+0xfffef710>
   2edc0:	a080038f 	ldh	r2,14(r20)
   2edc4:	103f5216 	blt	r2,zero,2eb10 <__alt_data_end+0xfffef710>
   2edc8:	d9c02217 	ldw	r7,136(sp)
   2edcc:	d9002017 	ldw	r4,128(sp)
   2edd0:	e00d883a 	mov	r6,fp
   2edd4:	a00b883a 	mov	r5,r20
   2edd8:	002ff000 	call	2ff00 <__sbprintf>
   2eddc:	dfc03617 	ldw	ra,216(sp)
   2ede0:	df003517 	ldw	fp,212(sp)
   2ede4:	ddc03417 	ldw	r23,208(sp)
   2ede8:	dd803317 	ldw	r22,204(sp)
   2edec:	dd403217 	ldw	r21,200(sp)
   2edf0:	dd003117 	ldw	r20,196(sp)
   2edf4:	dcc03017 	ldw	r19,192(sp)
   2edf8:	dc802f17 	ldw	r18,188(sp)
   2edfc:	dc402e17 	ldw	r17,184(sp)
   2ee00:	dc002d17 	ldw	r16,180(sp)
   2ee04:	dec03704 	addi	sp,sp,220
   2ee08:	f800283a 	ret
   2ee0c:	002b7180 	call	2b718 <__sinit>
   2ee10:	003f2f06 	br	2ead0 <__alt_data_end+0xfffef6d0>
   2ee14:	0463c83a 	sub	r17,zero,r17
   2ee18:	d8802215 	stw	r2,136(sp)
   2ee1c:	a5000114 	ori	r20,r20,4
   2ee20:	80c00007 	ldb	r3,0(r16)
   2ee24:	003f7706 	br	2ec04 <__alt_data_end+0xfffef804>
   2ee28:	00800c04 	movi	r2,48
   2ee2c:	da802217 	ldw	r10,136(sp)
   2ee30:	d8801d05 	stb	r2,116(sp)
   2ee34:	00801e04 	movi	r2,120
   2ee38:	d8801d45 	stb	r2,117(sp)
   2ee3c:	d8001d85 	stb	zero,118(sp)
   2ee40:	50c00104 	addi	r3,r10,4
   2ee44:	54800017 	ldw	r18,0(r10)
   2ee48:	0027883a 	mov	r19,zero
   2ee4c:	a0800094 	ori	r2,r20,2
   2ee50:	48030b16 	blt	r9,zero,2fa80 <___vfiprintf_internal_r+0xff8>
   2ee54:	00bfdfc4 	movi	r2,-129
   2ee58:	a096703a 	and	r11,r20,r2
   2ee5c:	d8c02215 	stw	r3,136(sp)
   2ee60:	5d000094 	ori	r20,r11,2
   2ee64:	90032b1e 	bne	r18,zero,2fb14 <___vfiprintf_internal_r+0x108c>
   2ee68:	008000f4 	movhi	r2,3
   2ee6c:	10927b04 	addi	r2,r2,18924
   2ee70:	d8802615 	stw	r2,152(sp)
   2ee74:	0039883a 	mov	fp,zero
   2ee78:	48017b1e 	bne	r9,zero,2f468 <___vfiprintf_internal_r+0x9e0>
   2ee7c:	0013883a 	mov	r9,zero
   2ee80:	0027883a 	mov	r19,zero
   2ee84:	dd401a04 	addi	r21,sp,104
   2ee88:	4825883a 	mov	r18,r9
   2ee8c:	4cc0010e 	bge	r9,r19,2ee94 <___vfiprintf_internal_r+0x40c>
   2ee90:	9825883a 	mov	r18,r19
   2ee94:	e7003fcc 	andi	fp,fp,255
   2ee98:	e700201c 	xori	fp,fp,128
   2ee9c:	e73fe004 	addi	fp,fp,-128
   2eea0:	e0000126 	beq	fp,zero,2eea8 <___vfiprintf_internal_r+0x420>
   2eea4:	94800044 	addi	r18,r18,1
   2eea8:	a380008c 	andi	r14,r20,2
   2eeac:	70000126 	beq	r14,zero,2eeb4 <___vfiprintf_internal_r+0x42c>
   2eeb0:	94800084 	addi	r18,r18,2
   2eeb4:	a700210c 	andi	fp,r20,132
   2eeb8:	e001df1e 	bne	fp,zero,2f638 <___vfiprintf_internal_r+0xbb0>
   2eebc:	8c87c83a 	sub	r3,r17,r18
   2eec0:	00c1dd0e 	bge	zero,r3,2f638 <___vfiprintf_internal_r+0xbb0>
   2eec4:	01c00404 	movi	r7,16
   2eec8:	d8801c17 	ldw	r2,112(sp)
   2eecc:	38c3ad0e 	bge	r7,r3,2fd84 <___vfiprintf_internal_r+0x12fc>
   2eed0:	028000f4 	movhi	r10,3
   2eed4:	5292e004 	addi	r10,r10,19328
   2eed8:	dc002915 	stw	r16,164(sp)
   2eedc:	d9801b17 	ldw	r6,108(sp)
   2eee0:	da802415 	stw	r10,144(sp)
   2eee4:	03c001c4 	movi	r15,7
   2eee8:	da402515 	stw	r9,148(sp)
   2eeec:	db802815 	stw	r14,160(sp)
   2eef0:	1821883a 	mov	r16,r3
   2eef4:	00000506 	br	2ef0c <___vfiprintf_internal_r+0x484>
   2eef8:	31400084 	addi	r5,r6,2
   2eefc:	42000204 	addi	r8,r8,8
   2ef00:	200d883a 	mov	r6,r4
   2ef04:	843ffc04 	addi	r16,r16,-16
   2ef08:	3c000d0e 	bge	r7,r16,2ef40 <___vfiprintf_internal_r+0x4b8>
   2ef0c:	10800404 	addi	r2,r2,16
   2ef10:	31000044 	addi	r4,r6,1
   2ef14:	45800015 	stw	r22,0(r8)
   2ef18:	41c00115 	stw	r7,4(r8)
   2ef1c:	d8801c15 	stw	r2,112(sp)
   2ef20:	d9001b15 	stw	r4,108(sp)
   2ef24:	793ff40e 	bge	r15,r4,2eef8 <__alt_data_end+0xfffefaf8>
   2ef28:	1001b51e 	bne	r2,zero,2f600 <___vfiprintf_internal_r+0xb78>
   2ef2c:	843ffc04 	addi	r16,r16,-16
   2ef30:	000d883a 	mov	r6,zero
   2ef34:	01400044 	movi	r5,1
   2ef38:	d811883a 	mov	r8,sp
   2ef3c:	3c3ff316 	blt	r7,r16,2ef0c <__alt_data_end+0xfffefb0c>
   2ef40:	8007883a 	mov	r3,r16
   2ef44:	da402517 	ldw	r9,148(sp)
   2ef48:	db802817 	ldw	r14,160(sp)
   2ef4c:	dc002917 	ldw	r16,164(sp)
   2ef50:	da802417 	ldw	r10,144(sp)
   2ef54:	1885883a 	add	r2,r3,r2
   2ef58:	40c00115 	stw	r3,4(r8)
   2ef5c:	42800015 	stw	r10,0(r8)
   2ef60:	d8801c15 	stw	r2,112(sp)
   2ef64:	d9401b15 	stw	r5,108(sp)
   2ef68:	00c001c4 	movi	r3,7
   2ef6c:	19426016 	blt	r3,r5,2f8f0 <___vfiprintf_internal_r+0xe68>
   2ef70:	d8c01d87 	ldb	r3,118(sp)
   2ef74:	42000204 	addi	r8,r8,8
   2ef78:	29000044 	addi	r4,r5,1
   2ef7c:	1801b31e 	bne	r3,zero,2f64c <___vfiprintf_internal_r+0xbc4>
   2ef80:	7001c026 	beq	r14,zero,2f684 <___vfiprintf_internal_r+0xbfc>
   2ef84:	d8c01d04 	addi	r3,sp,116
   2ef88:	10800084 	addi	r2,r2,2
   2ef8c:	40c00015 	stw	r3,0(r8)
   2ef90:	00c00084 	movi	r3,2
   2ef94:	40c00115 	stw	r3,4(r8)
   2ef98:	d8801c15 	stw	r2,112(sp)
   2ef9c:	d9001b15 	stw	r4,108(sp)
   2efa0:	00c001c4 	movi	r3,7
   2efa4:	1902650e 	bge	r3,r4,2f93c <___vfiprintf_internal_r+0xeb4>
   2efa8:	10029a1e 	bne	r2,zero,2fa14 <___vfiprintf_internal_r+0xf8c>
   2efac:	00c02004 	movi	r3,128
   2efb0:	01000044 	movi	r4,1
   2efb4:	000b883a 	mov	r5,zero
   2efb8:	d811883a 	mov	r8,sp
   2efbc:	e0c1b31e 	bne	fp,r3,2f68c <___vfiprintf_internal_r+0xc04>
   2efc0:	8cb9c83a 	sub	fp,r17,r18
   2efc4:	0701b10e 	bge	zero,fp,2f68c <___vfiprintf_internal_r+0xc04>
   2efc8:	01c00404 	movi	r7,16
   2efcc:	3f03890e 	bge	r7,fp,2fdf4 <___vfiprintf_internal_r+0x136c>
   2efd0:	00c000f4 	movhi	r3,3
   2efd4:	18d2dc04 	addi	r3,r3,19312
   2efd8:	d8c02415 	stw	r3,144(sp)
   2efdc:	8007883a 	mov	r3,r16
   2efe0:	034001c4 	movi	r13,7
   2efe4:	e021883a 	mov	r16,fp
   2efe8:	da402515 	stw	r9,148(sp)
   2efec:	1839883a 	mov	fp,r3
   2eff0:	00000506 	br	2f008 <___vfiprintf_internal_r+0x580>
   2eff4:	29800084 	addi	r6,r5,2
   2eff8:	42000204 	addi	r8,r8,8
   2effc:	180b883a 	mov	r5,r3
   2f000:	843ffc04 	addi	r16,r16,-16
   2f004:	3c000d0e 	bge	r7,r16,2f03c <___vfiprintf_internal_r+0x5b4>
   2f008:	10800404 	addi	r2,r2,16
   2f00c:	28c00044 	addi	r3,r5,1
   2f010:	45c00015 	stw	r23,0(r8)
   2f014:	41c00115 	stw	r7,4(r8)
   2f018:	d8801c15 	stw	r2,112(sp)
   2f01c:	d8c01b15 	stw	r3,108(sp)
   2f020:	68fff40e 	bge	r13,r3,2eff4 <__alt_data_end+0xfffefbf4>
   2f024:	1002241e 	bne	r2,zero,2f8b8 <___vfiprintf_internal_r+0xe30>
   2f028:	843ffc04 	addi	r16,r16,-16
   2f02c:	01800044 	movi	r6,1
   2f030:	000b883a 	mov	r5,zero
   2f034:	d811883a 	mov	r8,sp
   2f038:	3c3ff316 	blt	r7,r16,2f008 <__alt_data_end+0xfffefc08>
   2f03c:	da402517 	ldw	r9,148(sp)
   2f040:	e007883a 	mov	r3,fp
   2f044:	8039883a 	mov	fp,r16
   2f048:	1821883a 	mov	r16,r3
   2f04c:	d8c02417 	ldw	r3,144(sp)
   2f050:	1705883a 	add	r2,r2,fp
   2f054:	47000115 	stw	fp,4(r8)
   2f058:	40c00015 	stw	r3,0(r8)
   2f05c:	d8801c15 	stw	r2,112(sp)
   2f060:	d9801b15 	stw	r6,108(sp)
   2f064:	00c001c4 	movi	r3,7
   2f068:	19827616 	blt	r3,r6,2fa44 <___vfiprintf_internal_r+0xfbc>
   2f06c:	4cf9c83a 	sub	fp,r9,r19
   2f070:	42000204 	addi	r8,r8,8
   2f074:	31000044 	addi	r4,r6,1
   2f078:	300b883a 	mov	r5,r6
   2f07c:	07018516 	blt	zero,fp,2f694 <___vfiprintf_internal_r+0xc0c>
   2f080:	9885883a 	add	r2,r19,r2
   2f084:	45400015 	stw	r21,0(r8)
   2f088:	44c00115 	stw	r19,4(r8)
   2f08c:	d8801c15 	stw	r2,112(sp)
   2f090:	d9001b15 	stw	r4,108(sp)
   2f094:	00c001c4 	movi	r3,7
   2f098:	1901dd0e 	bge	r3,r4,2f810 <___vfiprintf_internal_r+0xd88>
   2f09c:	1002401e 	bne	r2,zero,2f9a0 <___vfiprintf_internal_r+0xf18>
   2f0a0:	d8001b15 	stw	zero,108(sp)
   2f0a4:	a2c0010c 	andi	r11,r20,4
   2f0a8:	58000226 	beq	r11,zero,2f0b4 <___vfiprintf_internal_r+0x62c>
   2f0ac:	8ca7c83a 	sub	r19,r17,r18
   2f0b0:	04c2f216 	blt	zero,r19,2fc7c <___vfiprintf_internal_r+0x11f4>
   2f0b4:	8c80010e 	bge	r17,r18,2f0bc <___vfiprintf_internal_r+0x634>
   2f0b8:	9023883a 	mov	r17,r18
   2f0bc:	da802317 	ldw	r10,140(sp)
   2f0c0:	5455883a 	add	r10,r10,r17
   2f0c4:	da802315 	stw	r10,140(sp)
   2f0c8:	d8001b15 	stw	zero,108(sp)
   2f0cc:	d811883a 	mov	r8,sp
   2f0d0:	003ea206 	br	2eb5c <__alt_data_end+0xfffef75c>
   2f0d4:	a5000814 	ori	r20,r20,32
   2f0d8:	80c00007 	ldb	r3,0(r16)
   2f0dc:	003ec906 	br	2ec04 <__alt_data_end+0xfffef804>
   2f0e0:	80c00007 	ldb	r3,0(r16)
   2f0e4:	1b030926 	beq	r3,r12,2fd0c <___vfiprintf_internal_r+0x1284>
   2f0e8:	a5000414 	ori	r20,r20,16
   2f0ec:	003ec506 	br	2ec04 <__alt_data_end+0xfffef804>
   2f0f0:	21003fcc 	andi	r4,r4,255
   2f0f4:	20035e1e 	bne	r4,zero,2fe70 <___vfiprintf_internal_r+0x13e8>
   2f0f8:	a080080c 	andi	r2,r20,32
   2f0fc:	1002a526 	beq	r2,zero,2fb94 <___vfiprintf_internal_r+0x110c>
   2f100:	da802217 	ldw	r10,136(sp)
   2f104:	50800017 	ldw	r2,0(r10)
   2f108:	da802317 	ldw	r10,140(sp)
   2f10c:	5007d7fa 	srai	r3,r10,31
   2f110:	da802217 	ldw	r10,136(sp)
   2f114:	10c00115 	stw	r3,4(r2)
   2f118:	52800104 	addi	r10,r10,4
   2f11c:	da802215 	stw	r10,136(sp)
   2f120:	da802317 	ldw	r10,140(sp)
   2f124:	12800015 	stw	r10,0(r2)
   2f128:	003e8c06 	br	2eb5c <__alt_data_end+0xfffef75c>
   2f12c:	21003fcc 	andi	r4,r4,255
   2f130:	2003511e 	bne	r4,zero,2fe78 <___vfiprintf_internal_r+0x13f0>
   2f134:	a080080c 	andi	r2,r20,32
   2f138:	1000a126 	beq	r2,zero,2f3c0 <___vfiprintf_internal_r+0x938>
   2f13c:	da802217 	ldw	r10,136(sp)
   2f140:	d8001d85 	stb	zero,118(sp)
   2f144:	50800204 	addi	r2,r10,8
   2f148:	54800017 	ldw	r18,0(r10)
   2f14c:	54c00117 	ldw	r19,4(r10)
   2f150:	4802b416 	blt	r9,zero,2fc24 <___vfiprintf_internal_r+0x119c>
   2f154:	013fdfc4 	movi	r4,-129
   2f158:	94c6b03a 	or	r3,r18,r19
   2f15c:	d8802215 	stw	r2,136(sp)
   2f160:	a128703a 	and	r20,r20,r4
   2f164:	1800a226 	beq	r3,zero,2f3f0 <___vfiprintf_internal_r+0x968>
   2f168:	0039883a 	mov	fp,zero
   2f16c:	dd401a04 	addi	r21,sp,104
   2f170:	9006d0fa 	srli	r3,r18,3
   2f174:	9808977a 	slli	r4,r19,29
   2f178:	9826d0fa 	srli	r19,r19,3
   2f17c:	948001cc 	andi	r18,r18,7
   2f180:	90800c04 	addi	r2,r18,48
   2f184:	ad7fffc4 	addi	r21,r21,-1
   2f188:	20e4b03a 	or	r18,r4,r3
   2f18c:	a8800005 	stb	r2,0(r21)
   2f190:	94c6b03a 	or	r3,r18,r19
   2f194:	183ff61e 	bne	r3,zero,2f170 <__alt_data_end+0xfffefd70>
   2f198:	a0c0004c 	andi	r3,r20,1
   2f19c:	18005926 	beq	r3,zero,2f304 <___vfiprintf_internal_r+0x87c>
   2f1a0:	10803fcc 	andi	r2,r2,255
   2f1a4:	1080201c 	xori	r2,r2,128
   2f1a8:	10bfe004 	addi	r2,r2,-128
   2f1ac:	00c00c04 	movi	r3,48
   2f1b0:	10c05426 	beq	r2,r3,2f304 <___vfiprintf_internal_r+0x87c>
   2f1b4:	da801e17 	ldw	r10,120(sp)
   2f1b8:	a8bfffc4 	addi	r2,r21,-1
   2f1bc:	a8ffffc5 	stb	r3,-1(r21)
   2f1c0:	50a7c83a 	sub	r19,r10,r2
   2f1c4:	102b883a 	mov	r21,r2
   2f1c8:	003f2f06 	br	2ee88 <__alt_data_end+0xfffefa88>
   2f1cc:	21003fcc 	andi	r4,r4,255
   2f1d0:	2003421e 	bne	r4,zero,2fedc <___vfiprintf_internal_r+0x1454>
   2f1d4:	008000f4 	movhi	r2,3
   2f1d8:	10927b04 	addi	r2,r2,18924
   2f1dc:	d8802615 	stw	r2,152(sp)
   2f1e0:	a080080c 	andi	r2,r20,32
   2f1e4:	1000aa26 	beq	r2,zero,2f490 <___vfiprintf_internal_r+0xa08>
   2f1e8:	da802217 	ldw	r10,136(sp)
   2f1ec:	54800017 	ldw	r18,0(r10)
   2f1f0:	54c00117 	ldw	r19,4(r10)
   2f1f4:	52800204 	addi	r10,r10,8
   2f1f8:	da802215 	stw	r10,136(sp)
   2f1fc:	a080004c 	andi	r2,r20,1
   2f200:	1001d226 	beq	r2,zero,2f94c <___vfiprintf_internal_r+0xec4>
   2f204:	94c4b03a 	or	r2,r18,r19
   2f208:	1002351e 	bne	r2,zero,2fae0 <___vfiprintf_internal_r+0x1058>
   2f20c:	d8001d85 	stb	zero,118(sp)
   2f210:	48022216 	blt	r9,zero,2fa9c <___vfiprintf_internal_r+0x1014>
   2f214:	00bfdfc4 	movi	r2,-129
   2f218:	a0a8703a 	and	r20,r20,r2
   2f21c:	003f1506 	br	2ee74 <__alt_data_end+0xfffefa74>
   2f220:	da802217 	ldw	r10,136(sp)
   2f224:	04800044 	movi	r18,1
   2f228:	d8001d85 	stb	zero,118(sp)
   2f22c:	50800017 	ldw	r2,0(r10)
   2f230:	52800104 	addi	r10,r10,4
   2f234:	da802215 	stw	r10,136(sp)
   2f238:	d8801005 	stb	r2,64(sp)
   2f23c:	9027883a 	mov	r19,r18
   2f240:	dd401004 	addi	r21,sp,64
   2f244:	0013883a 	mov	r9,zero
   2f248:	003f1706 	br	2eea8 <__alt_data_end+0xfffefaa8>
   2f24c:	21003fcc 	andi	r4,r4,255
   2f250:	2003201e 	bne	r4,zero,2fed4 <___vfiprintf_internal_r+0x144c>
   2f254:	a080080c 	andi	r2,r20,32
   2f258:	10004b26 	beq	r2,zero,2f388 <___vfiprintf_internal_r+0x900>
   2f25c:	da802217 	ldw	r10,136(sp)
   2f260:	50800117 	ldw	r2,4(r10)
   2f264:	54800017 	ldw	r18,0(r10)
   2f268:	52800204 	addi	r10,r10,8
   2f26c:	da802215 	stw	r10,136(sp)
   2f270:	1027883a 	mov	r19,r2
   2f274:	10022c16 	blt	r2,zero,2fb28 <___vfiprintf_internal_r+0x10a0>
   2f278:	df001d83 	ldbu	fp,118(sp)
   2f27c:	48007216 	blt	r9,zero,2f448 <___vfiprintf_internal_r+0x9c0>
   2f280:	00ffdfc4 	movi	r3,-129
   2f284:	94c4b03a 	or	r2,r18,r19
   2f288:	a0e8703a 	and	r20,r20,r3
   2f28c:	1000cc26 	beq	r2,zero,2f5c0 <___vfiprintf_internal_r+0xb38>
   2f290:	98021026 	beq	r19,zero,2fad4 <___vfiprintf_internal_r+0x104c>
   2f294:	dc402415 	stw	r17,144(sp)
   2f298:	dc002515 	stw	r16,148(sp)
   2f29c:	9823883a 	mov	r17,r19
   2f2a0:	9021883a 	mov	r16,r18
   2f2a4:	dd401a04 	addi	r21,sp,104
   2f2a8:	4825883a 	mov	r18,r9
   2f2ac:	4027883a 	mov	r19,r8
   2f2b0:	8009883a 	mov	r4,r16
   2f2b4:	880b883a 	mov	r5,r17
   2f2b8:	01800284 	movi	r6,10
   2f2bc:	000f883a 	mov	r7,zero
   2f2c0:	0030e680 	call	30e68 <__umoddi3>
   2f2c4:	10800c04 	addi	r2,r2,48
   2f2c8:	ad7fffc4 	addi	r21,r21,-1
   2f2cc:	8009883a 	mov	r4,r16
   2f2d0:	880b883a 	mov	r5,r17
   2f2d4:	a8800005 	stb	r2,0(r21)
   2f2d8:	01800284 	movi	r6,10
   2f2dc:	000f883a 	mov	r7,zero
   2f2e0:	00308f00 	call	308f0 <__udivdi3>
   2f2e4:	1021883a 	mov	r16,r2
   2f2e8:	10c4b03a 	or	r2,r2,r3
   2f2ec:	1823883a 	mov	r17,r3
   2f2f0:	103fef1e 	bne	r2,zero,2f2b0 <__alt_data_end+0xfffefeb0>
   2f2f4:	dc402417 	ldw	r17,144(sp)
   2f2f8:	dc002517 	ldw	r16,148(sp)
   2f2fc:	9013883a 	mov	r9,r18
   2f300:	9811883a 	mov	r8,r19
   2f304:	da801e17 	ldw	r10,120(sp)
   2f308:	5567c83a 	sub	r19,r10,r21
   2f30c:	003ede06 	br	2ee88 <__alt_data_end+0xfffefa88>
   2f310:	38803fcc 	andi	r2,r7,255
   2f314:	1080201c 	xori	r2,r2,128
   2f318:	10bfe004 	addi	r2,r2,-128
   2f31c:	1002371e 	bne	r2,zero,2fbfc <___vfiprintf_internal_r+0x1174>
   2f320:	01000044 	movi	r4,1
   2f324:	01c00804 	movi	r7,32
   2f328:	80c00007 	ldb	r3,0(r16)
   2f32c:	003e3506 	br	2ec04 <__alt_data_end+0xfffef804>
   2f330:	a5000054 	ori	r20,r20,1
   2f334:	80c00007 	ldb	r3,0(r16)
   2f338:	003e3206 	br	2ec04 <__alt_data_end+0xfffef804>
   2f33c:	a5002014 	ori	r20,r20,128
   2f340:	80c00007 	ldb	r3,0(r16)
   2f344:	003e2f06 	br	2ec04 <__alt_data_end+0xfffef804>
   2f348:	8015883a 	mov	r10,r16
   2f34c:	0023883a 	mov	r17,zero
   2f350:	18bff404 	addi	r2,r3,-48
   2f354:	50c00007 	ldb	r3,0(r10)
   2f358:	8c4002a4 	muli	r17,r17,10
   2f35c:	84000044 	addi	r16,r16,1
   2f360:	8015883a 	mov	r10,r16
   2f364:	1463883a 	add	r17,r2,r17
   2f368:	18bff404 	addi	r2,r3,-48
   2f36c:	30bff92e 	bgeu	r6,r2,2f354 <__alt_data_end+0xfffeff54>
   2f370:	003e2506 	br	2ec08 <__alt_data_end+0xfffef808>
   2f374:	21003fcc 	andi	r4,r4,255
   2f378:	2002d41e 	bne	r4,zero,2fecc <___vfiprintf_internal_r+0x1444>
   2f37c:	a5000414 	ori	r20,r20,16
   2f380:	a080080c 	andi	r2,r20,32
   2f384:	103fb51e 	bne	r2,zero,2f25c <__alt_data_end+0xfffefe5c>
   2f388:	a080040c 	andi	r2,r20,16
   2f38c:	1001f826 	beq	r2,zero,2fb70 <___vfiprintf_internal_r+0x10e8>
   2f390:	da802217 	ldw	r10,136(sp)
   2f394:	54800017 	ldw	r18,0(r10)
   2f398:	52800104 	addi	r10,r10,4
   2f39c:	da802215 	stw	r10,136(sp)
   2f3a0:	9027d7fa 	srai	r19,r18,31
   2f3a4:	9805883a 	mov	r2,r19
   2f3a8:	003fb206 	br	2f274 <__alt_data_end+0xfffefe74>
   2f3ac:	21003fcc 	andi	r4,r4,255
   2f3b0:	2002c41e 	bne	r4,zero,2fec4 <___vfiprintf_internal_r+0x143c>
   2f3b4:	a5000414 	ori	r20,r20,16
   2f3b8:	a080080c 	andi	r2,r20,32
   2f3bc:	103f5f1e 	bne	r2,zero,2f13c <__alt_data_end+0xfffefd3c>
   2f3c0:	a080040c 	andi	r2,r20,16
   2f3c4:	10020f26 	beq	r2,zero,2fc04 <___vfiprintf_internal_r+0x117c>
   2f3c8:	da802217 	ldw	r10,136(sp)
   2f3cc:	d8001d85 	stb	zero,118(sp)
   2f3d0:	0027883a 	mov	r19,zero
   2f3d4:	50800104 	addi	r2,r10,4
   2f3d8:	54800017 	ldw	r18,0(r10)
   2f3dc:	48021116 	blt	r9,zero,2fc24 <___vfiprintf_internal_r+0x119c>
   2f3e0:	00ffdfc4 	movi	r3,-129
   2f3e4:	d8802215 	stw	r2,136(sp)
   2f3e8:	a0e8703a 	and	r20,r20,r3
   2f3ec:	903f5e1e 	bne	r18,zero,2f168 <__alt_data_end+0xfffefd68>
   2f3f0:	0039883a 	mov	fp,zero
   2f3f4:	4802a626 	beq	r9,zero,2fe90 <___vfiprintf_internal_r+0x1408>
   2f3f8:	0025883a 	mov	r18,zero
   2f3fc:	0027883a 	mov	r19,zero
   2f400:	003f5a06 	br	2f16c <__alt_data_end+0xfffefd6c>
   2f404:	21003fcc 	andi	r4,r4,255
   2f408:	20029f1e 	bne	r4,zero,2fe88 <___vfiprintf_internal_r+0x1400>
   2f40c:	a5000414 	ori	r20,r20,16
   2f410:	a080080c 	andi	r2,r20,32
   2f414:	10005e1e 	bne	r2,zero,2f590 <___vfiprintf_internal_r+0xb08>
   2f418:	a080040c 	andi	r2,r20,16
   2f41c:	1001a21e 	bne	r2,zero,2faa8 <___vfiprintf_internal_r+0x1020>
   2f420:	a080100c 	andi	r2,r20,64
   2f424:	d8001d85 	stb	zero,118(sp)
   2f428:	da802217 	ldw	r10,136(sp)
   2f42c:	1002231e 	bne	r2,zero,2fcbc <___vfiprintf_internal_r+0x1234>
   2f430:	50800104 	addi	r2,r10,4
   2f434:	54800017 	ldw	r18,0(r10)
   2f438:	0027883a 	mov	r19,zero
   2f43c:	4801a00e 	bge	r9,zero,2fac0 <___vfiprintf_internal_r+0x1038>
   2f440:	d8802215 	stw	r2,136(sp)
   2f444:	0039883a 	mov	fp,zero
   2f448:	94c4b03a 	or	r2,r18,r19
   2f44c:	103f901e 	bne	r2,zero,2f290 <__alt_data_end+0xfffefe90>
   2f450:	00800044 	movi	r2,1
   2f454:	10803fcc 	andi	r2,r2,255
   2f458:	00c00044 	movi	r3,1
   2f45c:	10c05926 	beq	r2,r3,2f5c4 <___vfiprintf_internal_r+0xb3c>
   2f460:	00c00084 	movi	r3,2
   2f464:	10ffe41e 	bne	r2,r3,2f3f8 <__alt_data_end+0xfffefff8>
   2f468:	0025883a 	mov	r18,zero
   2f46c:	0027883a 	mov	r19,zero
   2f470:	00013d06 	br	2f968 <___vfiprintf_internal_r+0xee0>
   2f474:	21003fcc 	andi	r4,r4,255
   2f478:	2002811e 	bne	r4,zero,2fe80 <___vfiprintf_internal_r+0x13f8>
   2f47c:	008000f4 	movhi	r2,3
   2f480:	10927604 	addi	r2,r2,18904
   2f484:	d8802615 	stw	r2,152(sp)
   2f488:	a080080c 	andi	r2,r20,32
   2f48c:	103f561e 	bne	r2,zero,2f1e8 <__alt_data_end+0xfffefde8>
   2f490:	a080040c 	andi	r2,r20,16
   2f494:	1001d126 	beq	r2,zero,2fbdc <___vfiprintf_internal_r+0x1154>
   2f498:	da802217 	ldw	r10,136(sp)
   2f49c:	0027883a 	mov	r19,zero
   2f4a0:	54800017 	ldw	r18,0(r10)
   2f4a4:	52800104 	addi	r10,r10,4
   2f4a8:	da802215 	stw	r10,136(sp)
   2f4ac:	003f5306 	br	2f1fc <__alt_data_end+0xfffefdfc>
   2f4b0:	da802217 	ldw	r10,136(sp)
   2f4b4:	d8001d85 	stb	zero,118(sp)
   2f4b8:	55400017 	ldw	r21,0(r10)
   2f4bc:	50c00104 	addi	r3,r10,4
   2f4c0:	a8024226 	beq	r21,zero,2fdcc <___vfiprintf_internal_r+0x1344>
   2f4c4:	48021816 	blt	r9,zero,2fd28 <___vfiprintf_internal_r+0x12a0>
   2f4c8:	480d883a 	mov	r6,r9
   2f4cc:	000b883a 	mov	r5,zero
   2f4d0:	a809883a 	mov	r4,r21
   2f4d4:	d8c02a15 	stw	r3,168(sp)
   2f4d8:	da002b15 	stw	r8,172(sp)
   2f4dc:	da402c15 	stw	r9,176(sp)
   2f4e0:	002cc840 	call	2cc84 <memchr>
   2f4e4:	d8c02a17 	ldw	r3,168(sp)
   2f4e8:	da002b17 	ldw	r8,172(sp)
   2f4ec:	da402c17 	ldw	r9,176(sp)
   2f4f0:	10024826 	beq	r2,zero,2fe14 <___vfiprintf_internal_r+0x138c>
   2f4f4:	1567c83a 	sub	r19,r2,r21
   2f4f8:	df001d83 	ldbu	fp,118(sp)
   2f4fc:	d8c02215 	stw	r3,136(sp)
   2f500:	0013883a 	mov	r9,zero
   2f504:	003e6006 	br	2ee88 <__alt_data_end+0xfffefa88>
   2f508:	21003fcc 	andi	r4,r4,255
   2f50c:	203fc026 	beq	r4,zero,2f410 <__alt_data_end+0xffff0010>
   2f510:	d9c01d85 	stb	r7,118(sp)
   2f514:	003fbe06 	br	2f410 <__alt_data_end+0xffff0010>
   2f518:	da802217 	ldw	r10,136(sp)
   2f51c:	54400017 	ldw	r17,0(r10)
   2f520:	50800104 	addi	r2,r10,4
   2f524:	883e3b16 	blt	r17,zero,2ee14 <__alt_data_end+0xfffefa14>
   2f528:	d8802215 	stw	r2,136(sp)
   2f52c:	80c00007 	ldb	r3,0(r16)
   2f530:	003db406 	br	2ec04 <__alt_data_end+0xfffef804>
   2f534:	01000044 	movi	r4,1
   2f538:	01c00ac4 	movi	r7,43
   2f53c:	80c00007 	ldb	r3,0(r16)
   2f540:	003db006 	br	2ec04 <__alt_data_end+0xfffef804>
   2f544:	80c00007 	ldb	r3,0(r16)
   2f548:	82800044 	addi	r10,r16,1
   2f54c:	1b423c26 	beq	r3,r13,2fe40 <___vfiprintf_internal_r+0x13b8>
   2f550:	18bff404 	addi	r2,r3,-48
   2f554:	0013883a 	mov	r9,zero
   2f558:	30822b36 	bltu	r6,r2,2fe08 <___vfiprintf_internal_r+0x1380>
   2f55c:	50c00007 	ldb	r3,0(r10)
   2f560:	4a4002a4 	muli	r9,r9,10
   2f564:	54000044 	addi	r16,r10,1
   2f568:	8015883a 	mov	r10,r16
   2f56c:	4893883a 	add	r9,r9,r2
   2f570:	18bff404 	addi	r2,r3,-48
   2f574:	30bff92e 	bgeu	r6,r2,2f55c <__alt_data_end+0xffff015c>
   2f578:	483da30e 	bge	r9,zero,2ec08 <__alt_data_end+0xfffef808>
   2f57c:	027fffc4 	movi	r9,-1
   2f580:	003da106 	br	2ec08 <__alt_data_end+0xfffef808>
   2f584:	a5001014 	ori	r20,r20,64
   2f588:	80c00007 	ldb	r3,0(r16)
   2f58c:	003d9d06 	br	2ec04 <__alt_data_end+0xfffef804>
   2f590:	da802217 	ldw	r10,136(sp)
   2f594:	d8001d85 	stb	zero,118(sp)
   2f598:	50c00204 	addi	r3,r10,8
   2f59c:	54800017 	ldw	r18,0(r10)
   2f5a0:	54c00117 	ldw	r19,4(r10)
   2f5a4:	4801ca16 	blt	r9,zero,2fcd0 <___vfiprintf_internal_r+0x1248>
   2f5a8:	013fdfc4 	movi	r4,-129
   2f5ac:	94c4b03a 	or	r2,r18,r19
   2f5b0:	d8c02215 	stw	r3,136(sp)
   2f5b4:	a128703a 	and	r20,r20,r4
   2f5b8:	0039883a 	mov	fp,zero
   2f5bc:	103f341e 	bne	r2,zero,2f290 <__alt_data_end+0xfffefe90>
   2f5c0:	483e2e26 	beq	r9,zero,2ee7c <__alt_data_end+0xfffefa7c>
   2f5c4:	0025883a 	mov	r18,zero
   2f5c8:	94800c04 	addi	r18,r18,48
   2f5cc:	dc8019c5 	stb	r18,103(sp)
   2f5d0:	dcc02717 	ldw	r19,156(sp)
   2f5d4:	dd4019c4 	addi	r21,sp,103
   2f5d8:	003e2b06 	br	2ee88 <__alt_data_end+0xfffefa88>
   2f5dc:	21003fcc 	andi	r4,r4,255
   2f5e0:	2002361e 	bne	r4,zero,2febc <___vfiprintf_internal_r+0x1434>
   2f5e4:	1801c126 	beq	r3,zero,2fcec <___vfiprintf_internal_r+0x1264>
   2f5e8:	04800044 	movi	r18,1
   2f5ec:	d8c01005 	stb	r3,64(sp)
   2f5f0:	d8001d85 	stb	zero,118(sp)
   2f5f4:	9027883a 	mov	r19,r18
   2f5f8:	dd401004 	addi	r21,sp,64
   2f5fc:	003f1106 	br	2f244 <__alt_data_end+0xfffefe44>
   2f600:	d9402117 	ldw	r5,132(sp)
   2f604:	d9002017 	ldw	r4,128(sp)
   2f608:	d9801a04 	addi	r6,sp,104
   2f60c:	d9c02b15 	stw	r7,172(sp)
   2f610:	dbc02a15 	stw	r15,168(sp)
   2f614:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f618:	d9c02b17 	ldw	r7,172(sp)
   2f61c:	dbc02a17 	ldw	r15,168(sp)
   2f620:	10006d1e 	bne	r2,zero,2f7d8 <___vfiprintf_internal_r+0xd50>
   2f624:	d9801b17 	ldw	r6,108(sp)
   2f628:	d8801c17 	ldw	r2,112(sp)
   2f62c:	d811883a 	mov	r8,sp
   2f630:	31400044 	addi	r5,r6,1
   2f634:	003e3306 	br	2ef04 <__alt_data_end+0xfffefb04>
   2f638:	d9401b17 	ldw	r5,108(sp)
   2f63c:	d8801c17 	ldw	r2,112(sp)
   2f640:	29000044 	addi	r4,r5,1
   2f644:	d8c01d87 	ldb	r3,118(sp)
   2f648:	183e4d26 	beq	r3,zero,2ef80 <__alt_data_end+0xfffefb80>
   2f64c:	00c00044 	movi	r3,1
   2f650:	d9401d84 	addi	r5,sp,118
   2f654:	10c5883a 	add	r2,r2,r3
   2f658:	41400015 	stw	r5,0(r8)
   2f65c:	40c00115 	stw	r3,4(r8)
   2f660:	d8801c15 	stw	r2,112(sp)
   2f664:	d9001b15 	stw	r4,108(sp)
   2f668:	014001c4 	movi	r5,7
   2f66c:	2900a90e 	bge	r5,r4,2f914 <___vfiprintf_internal_r+0xe8c>
   2f670:	1000da1e 	bne	r2,zero,2f9dc <___vfiprintf_internal_r+0xf54>
   2f674:	7000ab1e 	bne	r14,zero,2f924 <___vfiprintf_internal_r+0xe9c>
   2f678:	000b883a 	mov	r5,zero
   2f67c:	1809883a 	mov	r4,r3
   2f680:	d811883a 	mov	r8,sp
   2f684:	00c02004 	movi	r3,128
   2f688:	e0fe4d26 	beq	fp,r3,2efc0 <__alt_data_end+0xfffefbc0>
   2f68c:	4cf9c83a 	sub	fp,r9,r19
   2f690:	073e7b0e 	bge	zero,fp,2f080 <__alt_data_end+0xfffefc80>
   2f694:	01c00404 	movi	r7,16
   2f698:	3f01900e 	bge	r7,fp,2fcdc <___vfiprintf_internal_r+0x1254>
   2f69c:	00c000f4 	movhi	r3,3
   2f6a0:	18d2dc04 	addi	r3,r3,19312
   2f6a4:	d8c02415 	stw	r3,144(sp)
   2f6a8:	034001c4 	movi	r13,7
   2f6ac:	00000506 	br	2f6c4 <___vfiprintf_internal_r+0xc3c>
   2f6b0:	29000084 	addi	r4,r5,2
   2f6b4:	42000204 	addi	r8,r8,8
   2f6b8:	180b883a 	mov	r5,r3
   2f6bc:	e73ffc04 	addi	fp,fp,-16
   2f6c0:	3f000d0e 	bge	r7,fp,2f6f8 <___vfiprintf_internal_r+0xc70>
   2f6c4:	10800404 	addi	r2,r2,16
   2f6c8:	28c00044 	addi	r3,r5,1
   2f6cc:	45c00015 	stw	r23,0(r8)
   2f6d0:	41c00115 	stw	r7,4(r8)
   2f6d4:	d8801c15 	stw	r2,112(sp)
   2f6d8:	d8c01b15 	stw	r3,108(sp)
   2f6dc:	68fff40e 	bge	r13,r3,2f6b0 <__alt_data_end+0xffff02b0>
   2f6e0:	1000101e 	bne	r2,zero,2f724 <___vfiprintf_internal_r+0xc9c>
   2f6e4:	e73ffc04 	addi	fp,fp,-16
   2f6e8:	01000044 	movi	r4,1
   2f6ec:	000b883a 	mov	r5,zero
   2f6f0:	d811883a 	mov	r8,sp
   2f6f4:	3f3ff316 	blt	r7,fp,2f6c4 <__alt_data_end+0xffff02c4>
   2f6f8:	da802417 	ldw	r10,144(sp)
   2f6fc:	1705883a 	add	r2,r2,fp
   2f700:	47000115 	stw	fp,4(r8)
   2f704:	42800015 	stw	r10,0(r8)
   2f708:	d8801c15 	stw	r2,112(sp)
   2f70c:	d9001b15 	stw	r4,108(sp)
   2f710:	00c001c4 	movi	r3,7
   2f714:	19003616 	blt	r3,r4,2f7f0 <___vfiprintf_internal_r+0xd68>
   2f718:	42000204 	addi	r8,r8,8
   2f71c:	21000044 	addi	r4,r4,1
   2f720:	003e5706 	br	2f080 <__alt_data_end+0xfffefc80>
   2f724:	d9402117 	ldw	r5,132(sp)
   2f728:	d9002017 	ldw	r4,128(sp)
   2f72c:	d9801a04 	addi	r6,sp,104
   2f730:	d9c02b15 	stw	r7,172(sp)
   2f734:	db402a15 	stw	r13,168(sp)
   2f738:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f73c:	d9c02b17 	ldw	r7,172(sp)
   2f740:	db402a17 	ldw	r13,168(sp)
   2f744:	1000241e 	bne	r2,zero,2f7d8 <___vfiprintf_internal_r+0xd50>
   2f748:	d9401b17 	ldw	r5,108(sp)
   2f74c:	d8801c17 	ldw	r2,112(sp)
   2f750:	d811883a 	mov	r8,sp
   2f754:	29000044 	addi	r4,r5,1
   2f758:	003fd806 	br	2f6bc <__alt_data_end+0xffff02bc>
   2f75c:	d9401b17 	ldw	r5,108(sp)
   2f760:	00c000f4 	movhi	r3,3
   2f764:	18d2e004 	addi	r3,r3,19328
   2f768:	d8c02415 	stw	r3,144(sp)
   2f76c:	29400044 	addi	r5,r5,1
   2f770:	d8c02417 	ldw	r3,144(sp)
   2f774:	14c5883a 	add	r2,r2,r19
   2f778:	44c00115 	stw	r19,4(r8)
   2f77c:	40c00015 	stw	r3,0(r8)
   2f780:	d8801c15 	stw	r2,112(sp)
   2f784:	d9401b15 	stw	r5,108(sp)
   2f788:	00c001c4 	movi	r3,7
   2f78c:	1940070e 	bge	r3,r5,2f7ac <___vfiprintf_internal_r+0xd24>
   2f790:	103e4826 	beq	r2,zero,2f0b4 <__alt_data_end+0xfffefcb4>
   2f794:	d9402117 	ldw	r5,132(sp)
   2f798:	d9002017 	ldw	r4,128(sp)
   2f79c:	d9801a04 	addi	r6,sp,104
   2f7a0:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f7a4:	10000c1e 	bne	r2,zero,2f7d8 <___vfiprintf_internal_r+0xd50>
   2f7a8:	d8801c17 	ldw	r2,112(sp)
   2f7ac:	8c80010e 	bge	r17,r18,2f7b4 <___vfiprintf_internal_r+0xd2c>
   2f7b0:	9023883a 	mov	r17,r18
   2f7b4:	da802317 	ldw	r10,140(sp)
   2f7b8:	5455883a 	add	r10,r10,r17
   2f7bc:	da802315 	stw	r10,140(sp)
   2f7c0:	103e4126 	beq	r2,zero,2f0c8 <__alt_data_end+0xfffefcc8>
   2f7c4:	d9402117 	ldw	r5,132(sp)
   2f7c8:	d9002017 	ldw	r4,128(sp)
   2f7cc:	d9801a04 	addi	r6,sp,104
   2f7d0:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f7d4:	103e3c26 	beq	r2,zero,2f0c8 <__alt_data_end+0xfffefcc8>
   2f7d8:	dd002117 	ldw	r20,132(sp)
   2f7dc:	a080030b 	ldhu	r2,12(r20)
   2f7e0:	1080100c 	andi	r2,r2,64
   2f7e4:	1001231e 	bne	r2,zero,2fc74 <___vfiprintf_internal_r+0x11ec>
   2f7e8:	d8802317 	ldw	r2,140(sp)
   2f7ec:	003d7b06 	br	2eddc <__alt_data_end+0xfffef9dc>
   2f7f0:	1000991e 	bne	r2,zero,2fa58 <___vfiprintf_internal_r+0xfd0>
   2f7f4:	00c00044 	movi	r3,1
   2f7f8:	9805883a 	mov	r2,r19
   2f7fc:	dd400015 	stw	r21,0(sp)
   2f800:	dcc00115 	stw	r19,4(sp)
   2f804:	dcc01c15 	stw	r19,112(sp)
   2f808:	d8c01b15 	stw	r3,108(sp)
   2f80c:	d811883a 	mov	r8,sp
   2f810:	42000204 	addi	r8,r8,8
   2f814:	a2c0010c 	andi	r11,r20,4
   2f818:	583fe426 	beq	r11,zero,2f7ac <__alt_data_end+0xffff03ac>
   2f81c:	8ca7c83a 	sub	r19,r17,r18
   2f820:	04ffe20e 	bge	zero,r19,2f7ac <__alt_data_end+0xffff03ac>
   2f824:	01c00404 	movi	r7,16
   2f828:	3cffcc0e 	bge	r7,r19,2f75c <__alt_data_end+0xffff035c>
   2f82c:	028000f4 	movhi	r10,3
   2f830:	5292e004 	addi	r10,r10,19328
   2f834:	d9001b17 	ldw	r4,108(sp)
   2f838:	da802415 	stw	r10,144(sp)
   2f83c:	382b883a 	mov	r21,r7
   2f840:	050001c4 	movi	r20,7
   2f844:	df002017 	ldw	fp,128(sp)
   2f848:	00000506 	br	2f860 <___vfiprintf_internal_r+0xdd8>
   2f84c:	21400084 	addi	r5,r4,2
   2f850:	42000204 	addi	r8,r8,8
   2f854:	1809883a 	mov	r4,r3
   2f858:	9cfffc04 	addi	r19,r19,-16
   2f85c:	acffc40e 	bge	r21,r19,2f770 <__alt_data_end+0xffff0370>
   2f860:	10800404 	addi	r2,r2,16
   2f864:	20c00044 	addi	r3,r4,1
   2f868:	45800015 	stw	r22,0(r8)
   2f86c:	45400115 	stw	r21,4(r8)
   2f870:	d8801c15 	stw	r2,112(sp)
   2f874:	d8c01b15 	stw	r3,108(sp)
   2f878:	a0fff40e 	bge	r20,r3,2f84c <__alt_data_end+0xffff044c>
   2f87c:	1000041e 	bne	r2,zero,2f890 <___vfiprintf_internal_r+0xe08>
   2f880:	01400044 	movi	r5,1
   2f884:	0009883a 	mov	r4,zero
   2f888:	d811883a 	mov	r8,sp
   2f88c:	003ff206 	br	2f858 <__alt_data_end+0xffff0458>
   2f890:	d9402117 	ldw	r5,132(sp)
   2f894:	d9801a04 	addi	r6,sp,104
   2f898:	e009883a 	mov	r4,fp
   2f89c:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f8a0:	103fcd1e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2f8a4:	d9001b17 	ldw	r4,108(sp)
   2f8a8:	d8801c17 	ldw	r2,112(sp)
   2f8ac:	d811883a 	mov	r8,sp
   2f8b0:	21400044 	addi	r5,r4,1
   2f8b4:	003fe806 	br	2f858 <__alt_data_end+0xffff0458>
   2f8b8:	d9402117 	ldw	r5,132(sp)
   2f8bc:	d9002017 	ldw	r4,128(sp)
   2f8c0:	d9801a04 	addi	r6,sp,104
   2f8c4:	d9c02b15 	stw	r7,172(sp)
   2f8c8:	db402a15 	stw	r13,168(sp)
   2f8cc:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f8d0:	d9c02b17 	ldw	r7,172(sp)
   2f8d4:	db402a17 	ldw	r13,168(sp)
   2f8d8:	103fbf1e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2f8dc:	d9401b17 	ldw	r5,108(sp)
   2f8e0:	d8801c17 	ldw	r2,112(sp)
   2f8e4:	d811883a 	mov	r8,sp
   2f8e8:	29800044 	addi	r6,r5,1
   2f8ec:	003dc406 	br	2f000 <__alt_data_end+0xfffefc00>
   2f8f0:	1000d21e 	bne	r2,zero,2fc3c <___vfiprintf_internal_r+0x11b4>
   2f8f4:	d8c01d87 	ldb	r3,118(sp)
   2f8f8:	18009526 	beq	r3,zero,2fb50 <___vfiprintf_internal_r+0x10c8>
   2f8fc:	00800044 	movi	r2,1
   2f900:	d8c01d84 	addi	r3,sp,118
   2f904:	1009883a 	mov	r4,r2
   2f908:	d8c00015 	stw	r3,0(sp)
   2f90c:	d8800115 	stw	r2,4(sp)
   2f910:	d811883a 	mov	r8,sp
   2f914:	200b883a 	mov	r5,r4
   2f918:	42000204 	addi	r8,r8,8
   2f91c:	21000044 	addi	r4,r4,1
   2f920:	003d9706 	br	2ef80 <__alt_data_end+0xfffefb80>
   2f924:	d9001d04 	addi	r4,sp,116
   2f928:	00800084 	movi	r2,2
   2f92c:	d9000015 	stw	r4,0(sp)
   2f930:	d8800115 	stw	r2,4(sp)
   2f934:	1809883a 	mov	r4,r3
   2f938:	d811883a 	mov	r8,sp
   2f93c:	200b883a 	mov	r5,r4
   2f940:	42000204 	addi	r8,r8,8
   2f944:	21000044 	addi	r4,r4,1
   2f948:	003f4e06 	br	2f684 <__alt_data_end+0xffff0284>
   2f94c:	d8001d85 	stb	zero,118(sp)
   2f950:	48005016 	blt	r9,zero,2fa94 <___vfiprintf_internal_r+0x100c>
   2f954:	00ffdfc4 	movi	r3,-129
   2f958:	94c4b03a 	or	r2,r18,r19
   2f95c:	a0e8703a 	and	r20,r20,r3
   2f960:	103d4426 	beq	r2,zero,2ee74 <__alt_data_end+0xfffefa74>
   2f964:	0039883a 	mov	fp,zero
   2f968:	d9002617 	ldw	r4,152(sp)
   2f96c:	dd401a04 	addi	r21,sp,104
   2f970:	908003cc 	andi	r2,r18,15
   2f974:	9806973a 	slli	r3,r19,28
   2f978:	2085883a 	add	r2,r4,r2
   2f97c:	9024d13a 	srli	r18,r18,4
   2f980:	10800003 	ldbu	r2,0(r2)
   2f984:	9826d13a 	srli	r19,r19,4
   2f988:	ad7fffc4 	addi	r21,r21,-1
   2f98c:	1ca4b03a 	or	r18,r3,r18
   2f990:	a8800005 	stb	r2,0(r21)
   2f994:	94c4b03a 	or	r2,r18,r19
   2f998:	103ff51e 	bne	r2,zero,2f970 <__alt_data_end+0xffff0570>
   2f99c:	003e5906 	br	2f304 <__alt_data_end+0xfffeff04>
   2f9a0:	d9402117 	ldw	r5,132(sp)
   2f9a4:	d9002017 	ldw	r4,128(sp)
   2f9a8:	d9801a04 	addi	r6,sp,104
   2f9ac:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f9b0:	103f891e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2f9b4:	d8801c17 	ldw	r2,112(sp)
   2f9b8:	d811883a 	mov	r8,sp
   2f9bc:	003f9506 	br	2f814 <__alt_data_end+0xffff0414>
   2f9c0:	d9402117 	ldw	r5,132(sp)
   2f9c4:	d9002017 	ldw	r4,128(sp)
   2f9c8:	d9801a04 	addi	r6,sp,104
   2f9cc:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f9d0:	103f811e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2f9d4:	d811883a 	mov	r8,sp
   2f9d8:	003ced06 	br	2ed90 <__alt_data_end+0xfffef990>
   2f9dc:	d9402117 	ldw	r5,132(sp)
   2f9e0:	d9002017 	ldw	r4,128(sp)
   2f9e4:	d9801a04 	addi	r6,sp,104
   2f9e8:	da402c15 	stw	r9,176(sp)
   2f9ec:	db802a15 	stw	r14,168(sp)
   2f9f0:	002e9740 	call	2e974 <__sprint_r.part.0>
   2f9f4:	da402c17 	ldw	r9,176(sp)
   2f9f8:	db802a17 	ldw	r14,168(sp)
   2f9fc:	103f761e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2fa00:	d9401b17 	ldw	r5,108(sp)
   2fa04:	d8801c17 	ldw	r2,112(sp)
   2fa08:	d811883a 	mov	r8,sp
   2fa0c:	29000044 	addi	r4,r5,1
   2fa10:	003d5b06 	br	2ef80 <__alt_data_end+0xfffefb80>
   2fa14:	d9402117 	ldw	r5,132(sp)
   2fa18:	d9002017 	ldw	r4,128(sp)
   2fa1c:	d9801a04 	addi	r6,sp,104
   2fa20:	da402c15 	stw	r9,176(sp)
   2fa24:	002e9740 	call	2e974 <__sprint_r.part.0>
   2fa28:	da402c17 	ldw	r9,176(sp)
   2fa2c:	103f6a1e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2fa30:	d9401b17 	ldw	r5,108(sp)
   2fa34:	d8801c17 	ldw	r2,112(sp)
   2fa38:	d811883a 	mov	r8,sp
   2fa3c:	29000044 	addi	r4,r5,1
   2fa40:	003f1006 	br	2f684 <__alt_data_end+0xffff0284>
   2fa44:	1000c31e 	bne	r2,zero,2fd54 <___vfiprintf_internal_r+0x12cc>
   2fa48:	01000044 	movi	r4,1
   2fa4c:	000b883a 	mov	r5,zero
   2fa50:	d811883a 	mov	r8,sp
   2fa54:	003f0d06 	br	2f68c <__alt_data_end+0xffff028c>
   2fa58:	d9402117 	ldw	r5,132(sp)
   2fa5c:	d9002017 	ldw	r4,128(sp)
   2fa60:	d9801a04 	addi	r6,sp,104
   2fa64:	002e9740 	call	2e974 <__sprint_r.part.0>
   2fa68:	103f5b1e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2fa6c:	d9001b17 	ldw	r4,108(sp)
   2fa70:	d8801c17 	ldw	r2,112(sp)
   2fa74:	d811883a 	mov	r8,sp
   2fa78:	21000044 	addi	r4,r4,1
   2fa7c:	003d8006 	br	2f080 <__alt_data_end+0xfffefc80>
   2fa80:	010000f4 	movhi	r4,3
   2fa84:	21127b04 	addi	r4,r4,18924
   2fa88:	d9002615 	stw	r4,152(sp)
   2fa8c:	d8c02215 	stw	r3,136(sp)
   2fa90:	1029883a 	mov	r20,r2
   2fa94:	94c4b03a 	or	r2,r18,r19
   2fa98:	103fb21e 	bne	r2,zero,2f964 <__alt_data_end+0xffff0564>
   2fa9c:	0039883a 	mov	fp,zero
   2faa0:	00800084 	movi	r2,2
   2faa4:	003e6b06 	br	2f454 <__alt_data_end+0xffff0054>
   2faa8:	da802217 	ldw	r10,136(sp)
   2faac:	d8001d85 	stb	zero,118(sp)
   2fab0:	0027883a 	mov	r19,zero
   2fab4:	50800104 	addi	r2,r10,4
   2fab8:	54800017 	ldw	r18,0(r10)
   2fabc:	483e6016 	blt	r9,zero,2f440 <__alt_data_end+0xffff0040>
   2fac0:	00ffdfc4 	movi	r3,-129
   2fac4:	d8802215 	stw	r2,136(sp)
   2fac8:	a0e8703a 	and	r20,r20,r3
   2facc:	0039883a 	mov	fp,zero
   2fad0:	903ebb26 	beq	r18,zero,2f5c0 <__alt_data_end+0xffff01c0>
   2fad4:	00800244 	movi	r2,9
   2fad8:	14bdee36 	bltu	r2,r18,2f294 <__alt_data_end+0xfffefe94>
   2fadc:	003eba06 	br	2f5c8 <__alt_data_end+0xffff01c8>
   2fae0:	00800c04 	movi	r2,48
   2fae4:	d8c01d45 	stb	r3,117(sp)
   2fae8:	d8801d05 	stb	r2,116(sp)
   2faec:	d8001d85 	stb	zero,118(sp)
   2faf0:	a0c00094 	ori	r3,r20,2
   2faf4:	4800a916 	blt	r9,zero,2fd9c <___vfiprintf_internal_r+0x1314>
   2faf8:	00bfdfc4 	movi	r2,-129
   2fafc:	a096703a 	and	r11,r20,r2
   2fb00:	5d000094 	ori	r20,r11,2
   2fb04:	0039883a 	mov	fp,zero
   2fb08:	003f9706 	br	2f968 <__alt_data_end+0xffff0568>
   2fb0c:	8025883a 	mov	r18,r16
   2fb10:	003c2e06 	br	2ebcc <__alt_data_end+0xfffef7cc>
   2fb14:	008000f4 	movhi	r2,3
   2fb18:	10927b04 	addi	r2,r2,18924
   2fb1c:	0039883a 	mov	fp,zero
   2fb20:	d8802615 	stw	r2,152(sp)
   2fb24:	003f9006 	br	2f968 <__alt_data_end+0xffff0568>
   2fb28:	04a5c83a 	sub	r18,zero,r18
   2fb2c:	07000b44 	movi	fp,45
   2fb30:	9004c03a 	cmpne	r2,r18,zero
   2fb34:	04e7c83a 	sub	r19,zero,r19
   2fb38:	df001d85 	stb	fp,118(sp)
   2fb3c:	98a7c83a 	sub	r19,r19,r2
   2fb40:	48009f16 	blt	r9,zero,2fdc0 <___vfiprintf_internal_r+0x1338>
   2fb44:	00bfdfc4 	movi	r2,-129
   2fb48:	a0a8703a 	and	r20,r20,r2
   2fb4c:	003dd006 	br	2f290 <__alt_data_end+0xfffefe90>
   2fb50:	70004c26 	beq	r14,zero,2fc84 <___vfiprintf_internal_r+0x11fc>
   2fb54:	00800084 	movi	r2,2
   2fb58:	d8c01d04 	addi	r3,sp,116
   2fb5c:	d8c00015 	stw	r3,0(sp)
   2fb60:	d8800115 	stw	r2,4(sp)
   2fb64:	01000044 	movi	r4,1
   2fb68:	d811883a 	mov	r8,sp
   2fb6c:	003f7306 	br	2f93c <__alt_data_end+0xffff053c>
   2fb70:	a080100c 	andi	r2,r20,64
   2fb74:	da802217 	ldw	r10,136(sp)
   2fb78:	103e0626 	beq	r2,zero,2f394 <__alt_data_end+0xfffeff94>
   2fb7c:	5480000f 	ldh	r18,0(r10)
   2fb80:	52800104 	addi	r10,r10,4
   2fb84:	da802215 	stw	r10,136(sp)
   2fb88:	9027d7fa 	srai	r19,r18,31
   2fb8c:	9805883a 	mov	r2,r19
   2fb90:	003db806 	br	2f274 <__alt_data_end+0xfffefe74>
   2fb94:	a080040c 	andi	r2,r20,16
   2fb98:	1000091e 	bne	r2,zero,2fbc0 <___vfiprintf_internal_r+0x1138>
   2fb9c:	a2c0100c 	andi	r11,r20,64
   2fba0:	58000726 	beq	r11,zero,2fbc0 <___vfiprintf_internal_r+0x1138>
   2fba4:	da802217 	ldw	r10,136(sp)
   2fba8:	50800017 	ldw	r2,0(r10)
   2fbac:	52800104 	addi	r10,r10,4
   2fbb0:	da802215 	stw	r10,136(sp)
   2fbb4:	da802317 	ldw	r10,140(sp)
   2fbb8:	1280000d 	sth	r10,0(r2)
   2fbbc:	003be706 	br	2eb5c <__alt_data_end+0xfffef75c>
   2fbc0:	da802217 	ldw	r10,136(sp)
   2fbc4:	50800017 	ldw	r2,0(r10)
   2fbc8:	52800104 	addi	r10,r10,4
   2fbcc:	da802215 	stw	r10,136(sp)
   2fbd0:	da802317 	ldw	r10,140(sp)
   2fbd4:	12800015 	stw	r10,0(r2)
   2fbd8:	003be006 	br	2eb5c <__alt_data_end+0xfffef75c>
   2fbdc:	a080100c 	andi	r2,r20,64
   2fbe0:	da802217 	ldw	r10,136(sp)
   2fbe4:	10003026 	beq	r2,zero,2fca8 <___vfiprintf_internal_r+0x1220>
   2fbe8:	5480000b 	ldhu	r18,0(r10)
   2fbec:	52800104 	addi	r10,r10,4
   2fbf0:	0027883a 	mov	r19,zero
   2fbf4:	da802215 	stw	r10,136(sp)
   2fbf8:	003d8006 	br	2f1fc <__alt_data_end+0xfffefdfc>
   2fbfc:	80c00007 	ldb	r3,0(r16)
   2fc00:	003c0006 	br	2ec04 <__alt_data_end+0xfffef804>
   2fc04:	a080100c 	andi	r2,r20,64
   2fc08:	d8001d85 	stb	zero,118(sp)
   2fc0c:	da802217 	ldw	r10,136(sp)
   2fc10:	1000201e 	bne	r2,zero,2fc94 <___vfiprintf_internal_r+0x120c>
   2fc14:	50800104 	addi	r2,r10,4
   2fc18:	54800017 	ldw	r18,0(r10)
   2fc1c:	0027883a 	mov	r19,zero
   2fc20:	483def0e 	bge	r9,zero,2f3e0 <__alt_data_end+0xfffeffe0>
   2fc24:	94c6b03a 	or	r3,r18,r19
   2fc28:	d8802215 	stw	r2,136(sp)
   2fc2c:	183d4e1e 	bne	r3,zero,2f168 <__alt_data_end+0xfffefd68>
   2fc30:	0039883a 	mov	fp,zero
   2fc34:	0005883a 	mov	r2,zero
   2fc38:	003e0606 	br	2f454 <__alt_data_end+0xffff0054>
   2fc3c:	d9402117 	ldw	r5,132(sp)
   2fc40:	d9002017 	ldw	r4,128(sp)
   2fc44:	d9801a04 	addi	r6,sp,104
   2fc48:	da402c15 	stw	r9,176(sp)
   2fc4c:	db802a15 	stw	r14,168(sp)
   2fc50:	002e9740 	call	2e974 <__sprint_r.part.0>
   2fc54:	da402c17 	ldw	r9,176(sp)
   2fc58:	db802a17 	ldw	r14,168(sp)
   2fc5c:	103ede1e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2fc60:	d9401b17 	ldw	r5,108(sp)
   2fc64:	d8801c17 	ldw	r2,112(sp)
   2fc68:	d811883a 	mov	r8,sp
   2fc6c:	29000044 	addi	r4,r5,1
   2fc70:	003e7406 	br	2f644 <__alt_data_end+0xffff0244>
   2fc74:	00bfffc4 	movi	r2,-1
   2fc78:	003c5806 	br	2eddc <__alt_data_end+0xfffef9dc>
   2fc7c:	d811883a 	mov	r8,sp
   2fc80:	003ee806 	br	2f824 <__alt_data_end+0xffff0424>
   2fc84:	000b883a 	mov	r5,zero
   2fc88:	01000044 	movi	r4,1
   2fc8c:	d811883a 	mov	r8,sp
   2fc90:	003e7c06 	br	2f684 <__alt_data_end+0xffff0284>
   2fc94:	50800104 	addi	r2,r10,4
   2fc98:	5480000b 	ldhu	r18,0(r10)
   2fc9c:	0027883a 	mov	r19,zero
   2fca0:	483dcf0e 	bge	r9,zero,2f3e0 <__alt_data_end+0xfffeffe0>
   2fca4:	003fdf06 	br	2fc24 <__alt_data_end+0xffff0824>
   2fca8:	54800017 	ldw	r18,0(r10)
   2fcac:	52800104 	addi	r10,r10,4
   2fcb0:	0027883a 	mov	r19,zero
   2fcb4:	da802215 	stw	r10,136(sp)
   2fcb8:	003d5006 	br	2f1fc <__alt_data_end+0xfffefdfc>
   2fcbc:	50800104 	addi	r2,r10,4
   2fcc0:	5480000b 	ldhu	r18,0(r10)
   2fcc4:	0027883a 	mov	r19,zero
   2fcc8:	483f7d0e 	bge	r9,zero,2fac0 <__alt_data_end+0xffff06c0>
   2fccc:	003ddc06 	br	2f440 <__alt_data_end+0xffff0040>
   2fcd0:	d8c02215 	stw	r3,136(sp)
   2fcd4:	0039883a 	mov	fp,zero
   2fcd8:	003ddb06 	br	2f448 <__alt_data_end+0xffff0048>
   2fcdc:	028000f4 	movhi	r10,3
   2fce0:	5292dc04 	addi	r10,r10,19312
   2fce4:	da802415 	stw	r10,144(sp)
   2fce8:	003e8306 	br	2f6f8 <__alt_data_end+0xffff02f8>
   2fcec:	d8801c17 	ldw	r2,112(sp)
   2fcf0:	dd002117 	ldw	r20,132(sp)
   2fcf4:	103eb926 	beq	r2,zero,2f7dc <__alt_data_end+0xffff03dc>
   2fcf8:	d9002017 	ldw	r4,128(sp)
   2fcfc:	d9801a04 	addi	r6,sp,104
   2fd00:	a00b883a 	mov	r5,r20
   2fd04:	002e9740 	call	2e974 <__sprint_r.part.0>
   2fd08:	003eb406 	br	2f7dc <__alt_data_end+0xffff03dc>
   2fd0c:	80c00043 	ldbu	r3,1(r16)
   2fd10:	a5000814 	ori	r20,r20,32
   2fd14:	84000044 	addi	r16,r16,1
   2fd18:	18c03fcc 	andi	r3,r3,255
   2fd1c:	18c0201c 	xori	r3,r3,128
   2fd20:	18ffe004 	addi	r3,r3,-128
   2fd24:	003bb706 	br	2ec04 <__alt_data_end+0xfffef804>
   2fd28:	a809883a 	mov	r4,r21
   2fd2c:	d8c02a15 	stw	r3,168(sp)
   2fd30:	da002b15 	stw	r8,172(sp)
   2fd34:	00273dc0 	call	273dc <strlen>
   2fd38:	d8c02a17 	ldw	r3,168(sp)
   2fd3c:	1027883a 	mov	r19,r2
   2fd40:	df001d83 	ldbu	fp,118(sp)
   2fd44:	d8c02215 	stw	r3,136(sp)
   2fd48:	0013883a 	mov	r9,zero
   2fd4c:	da002b17 	ldw	r8,172(sp)
   2fd50:	003c4d06 	br	2ee88 <__alt_data_end+0xfffefa88>
   2fd54:	d9402117 	ldw	r5,132(sp)
   2fd58:	d9002017 	ldw	r4,128(sp)
   2fd5c:	d9801a04 	addi	r6,sp,104
   2fd60:	da402c15 	stw	r9,176(sp)
   2fd64:	002e9740 	call	2e974 <__sprint_r.part.0>
   2fd68:	da402c17 	ldw	r9,176(sp)
   2fd6c:	103e9a1e 	bne	r2,zero,2f7d8 <__alt_data_end+0xffff03d8>
   2fd70:	d9401b17 	ldw	r5,108(sp)
   2fd74:	d8801c17 	ldw	r2,112(sp)
   2fd78:	d811883a 	mov	r8,sp
   2fd7c:	29000044 	addi	r4,r5,1
   2fd80:	003e4206 	br	2f68c <__alt_data_end+0xffff028c>
   2fd84:	d9401b17 	ldw	r5,108(sp)
   2fd88:	010000f4 	movhi	r4,3
   2fd8c:	2112e004 	addi	r4,r4,19328
   2fd90:	d9002415 	stw	r4,144(sp)
   2fd94:	29400044 	addi	r5,r5,1
   2fd98:	003c6d06 	br	2ef50 <__alt_data_end+0xfffefb50>
   2fd9c:	0039883a 	mov	fp,zero
   2fda0:	00800084 	movi	r2,2
   2fda4:	10803fcc 	andi	r2,r2,255
   2fda8:	01000044 	movi	r4,1
   2fdac:	11001e26 	beq	r2,r4,2fe28 <___vfiprintf_internal_r+0x13a0>
   2fdb0:	01000084 	movi	r4,2
   2fdb4:	11001e1e 	bne	r2,r4,2fe30 <___vfiprintf_internal_r+0x13a8>
   2fdb8:	1829883a 	mov	r20,r3
   2fdbc:	003eea06 	br	2f968 <__alt_data_end+0xffff0568>
   2fdc0:	a007883a 	mov	r3,r20
   2fdc4:	00800044 	movi	r2,1
   2fdc8:	003ff606 	br	2fda4 <__alt_data_end+0xffff09a4>
   2fdcc:	00800184 	movi	r2,6
   2fdd0:	1240012e 	bgeu	r2,r9,2fdd8 <___vfiprintf_internal_r+0x1350>
   2fdd4:	1013883a 	mov	r9,r2
   2fdd8:	4827883a 	mov	r19,r9
   2fddc:	4825883a 	mov	r18,r9
   2fde0:	48001516 	blt	r9,zero,2fe38 <___vfiprintf_internal_r+0x13b0>
   2fde4:	054000f4 	movhi	r21,3
   2fde8:	d8c02215 	stw	r3,136(sp)
   2fdec:	ad528004 	addi	r21,r21,18944
   2fdf0:	003d1406 	br	2f244 <__alt_data_end+0xfffefe44>
   2fdf4:	028000f4 	movhi	r10,3
   2fdf8:	5292dc04 	addi	r10,r10,19312
   2fdfc:	da802415 	stw	r10,144(sp)
   2fe00:	200d883a 	mov	r6,r4
   2fe04:	003c9106 	br	2f04c <__alt_data_end+0xfffefc4c>
   2fe08:	5021883a 	mov	r16,r10
   2fe0c:	0013883a 	mov	r9,zero
   2fe10:	003b7d06 	br	2ec08 <__alt_data_end+0xfffef808>
   2fe14:	4827883a 	mov	r19,r9
   2fe18:	df001d83 	ldbu	fp,118(sp)
   2fe1c:	d8c02215 	stw	r3,136(sp)
   2fe20:	0013883a 	mov	r9,zero
   2fe24:	003c1806 	br	2ee88 <__alt_data_end+0xfffefa88>
   2fe28:	1829883a 	mov	r20,r3
   2fe2c:	003d1806 	br	2f290 <__alt_data_end+0xfffefe90>
   2fe30:	1829883a 	mov	r20,r3
   2fe34:	003ccd06 	br	2f16c <__alt_data_end+0xfffefd6c>
   2fe38:	0025883a 	mov	r18,zero
   2fe3c:	003fe906 	br	2fde4 <__alt_data_end+0xffff09e4>
   2fe40:	d8802217 	ldw	r2,136(sp)
   2fe44:	80c00043 	ldbu	r3,1(r16)
   2fe48:	5021883a 	mov	r16,r10
   2fe4c:	12400017 	ldw	r9,0(r2)
   2fe50:	10800104 	addi	r2,r2,4
   2fe54:	d8802215 	stw	r2,136(sp)
   2fe58:	483faf0e 	bge	r9,zero,2fd18 <__alt_data_end+0xffff0918>
   2fe5c:	18c03fcc 	andi	r3,r3,255
   2fe60:	18c0201c 	xori	r3,r3,128
   2fe64:	027fffc4 	movi	r9,-1
   2fe68:	18ffe004 	addi	r3,r3,-128
   2fe6c:	003b6506 	br	2ec04 <__alt_data_end+0xfffef804>
   2fe70:	d9c01d85 	stb	r7,118(sp)
   2fe74:	003ca006 	br	2f0f8 <__alt_data_end+0xfffefcf8>
   2fe78:	d9c01d85 	stb	r7,118(sp)
   2fe7c:	003cad06 	br	2f134 <__alt_data_end+0xfffefd34>
   2fe80:	d9c01d85 	stb	r7,118(sp)
   2fe84:	003d7d06 	br	2f47c <__alt_data_end+0xffff007c>
   2fe88:	d9c01d85 	stb	r7,118(sp)
   2fe8c:	003d5f06 	br	2f40c <__alt_data_end+0xffff000c>
   2fe90:	a080004c 	andi	r2,r20,1
   2fe94:	0039883a 	mov	fp,zero
   2fe98:	10000526 	beq	r2,zero,2feb0 <___vfiprintf_internal_r+0x1428>
   2fe9c:	00800c04 	movi	r2,48
   2fea0:	d88019c5 	stb	r2,103(sp)
   2fea4:	dcc02717 	ldw	r19,156(sp)
   2fea8:	dd4019c4 	addi	r21,sp,103
   2feac:	003bf606 	br	2ee88 <__alt_data_end+0xfffefa88>
   2feb0:	0027883a 	mov	r19,zero
   2feb4:	dd401a04 	addi	r21,sp,104
   2feb8:	003bf306 	br	2ee88 <__alt_data_end+0xfffefa88>
   2febc:	d9c01d85 	stb	r7,118(sp)
   2fec0:	003dc806 	br	2f5e4 <__alt_data_end+0xffff01e4>
   2fec4:	d9c01d85 	stb	r7,118(sp)
   2fec8:	003d3a06 	br	2f3b4 <__alt_data_end+0xfffeffb4>
   2fecc:	d9c01d85 	stb	r7,118(sp)
   2fed0:	003d2a06 	br	2f37c <__alt_data_end+0xfffeff7c>
   2fed4:	d9c01d85 	stb	r7,118(sp)
   2fed8:	003cde06 	br	2f254 <__alt_data_end+0xfffefe54>
   2fedc:	d9c01d85 	stb	r7,118(sp)
   2fee0:	003cbc06 	br	2f1d4 <__alt_data_end+0xfffefdd4>

0002fee4 <__vfiprintf_internal>:
   2fee4:	008000f4 	movhi	r2,3
   2fee8:	10999c04 	addi	r2,r2,26224
   2feec:	300f883a 	mov	r7,r6
   2fef0:	280d883a 	mov	r6,r5
   2fef4:	200b883a 	mov	r5,r4
   2fef8:	11000017 	ldw	r4,0(r2)
   2fefc:	002ea881 	jmpi	2ea88 <___vfiprintf_internal_r>

0002ff00 <__sbprintf>:
   2ff00:	2880030b 	ldhu	r2,12(r5)
   2ff04:	2ac01917 	ldw	r11,100(r5)
   2ff08:	2a80038b 	ldhu	r10,14(r5)
   2ff0c:	2a400717 	ldw	r9,28(r5)
   2ff10:	2a000917 	ldw	r8,36(r5)
   2ff14:	defee204 	addi	sp,sp,-1144
   2ff18:	00c10004 	movi	r3,1024
   2ff1c:	dc011a15 	stw	r16,1128(sp)
   2ff20:	10bfff4c 	andi	r2,r2,65533
   2ff24:	2821883a 	mov	r16,r5
   2ff28:	d8cb883a 	add	r5,sp,r3
   2ff2c:	dc811c15 	stw	r18,1136(sp)
   2ff30:	dc411b15 	stw	r17,1132(sp)
   2ff34:	dfc11d15 	stw	ra,1140(sp)
   2ff38:	2025883a 	mov	r18,r4
   2ff3c:	d881030d 	sth	r2,1036(sp)
   2ff40:	dac11915 	stw	r11,1124(sp)
   2ff44:	da81038d 	sth	r10,1038(sp)
   2ff48:	da410715 	stw	r9,1052(sp)
   2ff4c:	da010915 	stw	r8,1060(sp)
   2ff50:	dec10015 	stw	sp,1024(sp)
   2ff54:	dec10415 	stw	sp,1040(sp)
   2ff58:	d8c10215 	stw	r3,1032(sp)
   2ff5c:	d8c10515 	stw	r3,1044(sp)
   2ff60:	d8010615 	stw	zero,1048(sp)
   2ff64:	002ea880 	call	2ea88 <___vfiprintf_internal_r>
   2ff68:	1023883a 	mov	r17,r2
   2ff6c:	10000416 	blt	r2,zero,2ff80 <__sbprintf+0x80>
   2ff70:	d9410004 	addi	r5,sp,1024
   2ff74:	9009883a 	mov	r4,r18
   2ff78:	002b33c0 	call	2b33c <_fflush_r>
   2ff7c:	10000d1e 	bne	r2,zero,2ffb4 <__sbprintf+0xb4>
   2ff80:	d881030b 	ldhu	r2,1036(sp)
   2ff84:	1080100c 	andi	r2,r2,64
   2ff88:	10000326 	beq	r2,zero,2ff98 <__sbprintf+0x98>
   2ff8c:	8080030b 	ldhu	r2,12(r16)
   2ff90:	10801014 	ori	r2,r2,64
   2ff94:	8080030d 	sth	r2,12(r16)
   2ff98:	8805883a 	mov	r2,r17
   2ff9c:	dfc11d17 	ldw	ra,1140(sp)
   2ffa0:	dc811c17 	ldw	r18,1136(sp)
   2ffa4:	dc411b17 	ldw	r17,1132(sp)
   2ffa8:	dc011a17 	ldw	r16,1128(sp)
   2ffac:	dec11e04 	addi	sp,sp,1144
   2ffb0:	f800283a 	ret
   2ffb4:	047fffc4 	movi	r17,-1
   2ffb8:	003ff106 	br	2ff80 <__alt_data_end+0xffff0b80>

0002ffbc <_write_r>:
   2ffbc:	defffd04 	addi	sp,sp,-12
   2ffc0:	2805883a 	mov	r2,r5
   2ffc4:	dc000015 	stw	r16,0(sp)
   2ffc8:	04000134 	movhi	r16,4
   2ffcc:	dc400115 	stw	r17,4(sp)
   2ffd0:	300b883a 	mov	r5,r6
   2ffd4:	84207004 	addi	r16,r16,-32320
   2ffd8:	2023883a 	mov	r17,r4
   2ffdc:	380d883a 	mov	r6,r7
   2ffe0:	1009883a 	mov	r4,r2
   2ffe4:	dfc00215 	stw	ra,8(sp)
   2ffe8:	80000015 	stw	zero,0(r16)
   2ffec:	003221c0 	call	3221c <write>
   2fff0:	00ffffc4 	movi	r3,-1
   2fff4:	10c00526 	beq	r2,r3,3000c <_write_r+0x50>
   2fff8:	dfc00217 	ldw	ra,8(sp)
   2fffc:	dc400117 	ldw	r17,4(sp)
   30000:	dc000017 	ldw	r16,0(sp)
   30004:	dec00304 	addi	sp,sp,12
   30008:	f800283a 	ret
   3000c:	80c00017 	ldw	r3,0(r16)
   30010:	183ff926 	beq	r3,zero,2fff8 <__alt_data_end+0xffff0bf8>
   30014:	88c00015 	stw	r3,0(r17)
   30018:	003ff706 	br	2fff8 <__alt_data_end+0xffff0bf8>

0003001c <_close_r>:
   3001c:	defffd04 	addi	sp,sp,-12
   30020:	dc000015 	stw	r16,0(sp)
   30024:	04000134 	movhi	r16,4
   30028:	dc400115 	stw	r17,4(sp)
   3002c:	84207004 	addi	r16,r16,-32320
   30030:	2023883a 	mov	r17,r4
   30034:	2809883a 	mov	r4,r5
   30038:	dfc00215 	stw	ra,8(sp)
   3003c:	80000015 	stw	zero,0(r16)
   30040:	00318380 	call	31838 <close>
   30044:	00ffffc4 	movi	r3,-1
   30048:	10c00526 	beq	r2,r3,30060 <_close_r+0x44>
   3004c:	dfc00217 	ldw	ra,8(sp)
   30050:	dc400117 	ldw	r17,4(sp)
   30054:	dc000017 	ldw	r16,0(sp)
   30058:	dec00304 	addi	sp,sp,12
   3005c:	f800283a 	ret
   30060:	80c00017 	ldw	r3,0(r16)
   30064:	183ff926 	beq	r3,zero,3004c <__alt_data_end+0xffff0c4c>
   30068:	88c00015 	stw	r3,0(r17)
   3006c:	003ff706 	br	3004c <__alt_data_end+0xffff0c4c>

00030070 <_calloc_r>:
   30070:	298b383a 	mul	r5,r5,r6
   30074:	defffe04 	addi	sp,sp,-8
   30078:	dfc00115 	stw	ra,4(sp)
   3007c:	dc000015 	stw	r16,0(sp)
   30080:	002c4780 	call	2c478 <_malloc_r>
   30084:	10002926 	beq	r2,zero,3012c <_calloc_r+0xbc>
   30088:	11bfff17 	ldw	r6,-4(r2)
   3008c:	1021883a 	mov	r16,r2
   30090:	00bfff04 	movi	r2,-4
   30094:	308c703a 	and	r6,r6,r2
   30098:	00c00904 	movi	r3,36
   3009c:	308d883a 	add	r6,r6,r2
   300a0:	19801636 	bltu	r3,r6,300fc <_calloc_r+0x8c>
   300a4:	008004c4 	movi	r2,19
   300a8:	11800b2e 	bgeu	r2,r6,300d8 <_calloc_r+0x68>
   300ac:	80000015 	stw	zero,0(r16)
   300b0:	80000115 	stw	zero,4(r16)
   300b4:	008006c4 	movi	r2,27
   300b8:	11801a2e 	bgeu	r2,r6,30124 <_calloc_r+0xb4>
   300bc:	80000215 	stw	zero,8(r16)
   300c0:	80000315 	stw	zero,12(r16)
   300c4:	30c0151e 	bne	r6,r3,3011c <_calloc_r+0xac>
   300c8:	80000415 	stw	zero,16(r16)
   300cc:	80800604 	addi	r2,r16,24
   300d0:	80000515 	stw	zero,20(r16)
   300d4:	00000106 	br	300dc <_calloc_r+0x6c>
   300d8:	8005883a 	mov	r2,r16
   300dc:	10000015 	stw	zero,0(r2)
   300e0:	10000115 	stw	zero,4(r2)
   300e4:	10000215 	stw	zero,8(r2)
   300e8:	8005883a 	mov	r2,r16
   300ec:	dfc00117 	ldw	ra,4(sp)
   300f0:	dc000017 	ldw	r16,0(sp)
   300f4:	dec00204 	addi	sp,sp,8
   300f8:	f800283a 	ret
   300fc:	000b883a 	mov	r5,zero
   30100:	8009883a 	mov	r4,r16
   30104:	002d00c0 	call	2d00c <memset>
   30108:	8005883a 	mov	r2,r16
   3010c:	dfc00117 	ldw	ra,4(sp)
   30110:	dc000017 	ldw	r16,0(sp)
   30114:	dec00204 	addi	sp,sp,8
   30118:	f800283a 	ret
   3011c:	80800404 	addi	r2,r16,16
   30120:	003fee06 	br	300dc <__alt_data_end+0xffff0cdc>
   30124:	80800204 	addi	r2,r16,8
   30128:	003fec06 	br	300dc <__alt_data_end+0xffff0cdc>
   3012c:	0005883a 	mov	r2,zero
   30130:	003fee06 	br	300ec <__alt_data_end+0xffff0cec>

00030134 <_fclose_r>:
   30134:	28003926 	beq	r5,zero,3021c <_fclose_r+0xe8>
   30138:	defffc04 	addi	sp,sp,-16
   3013c:	dc400115 	stw	r17,4(sp)
   30140:	dc000015 	stw	r16,0(sp)
   30144:	dfc00315 	stw	ra,12(sp)
   30148:	dc800215 	stw	r18,8(sp)
   3014c:	2023883a 	mov	r17,r4
   30150:	2821883a 	mov	r16,r5
   30154:	20000226 	beq	r4,zero,30160 <_fclose_r+0x2c>
   30158:	20800e17 	ldw	r2,56(r4)
   3015c:	10002726 	beq	r2,zero,301fc <_fclose_r+0xc8>
   30160:	8080030f 	ldh	r2,12(r16)
   30164:	1000071e 	bne	r2,zero,30184 <_fclose_r+0x50>
   30168:	0005883a 	mov	r2,zero
   3016c:	dfc00317 	ldw	ra,12(sp)
   30170:	dc800217 	ldw	r18,8(sp)
   30174:	dc400117 	ldw	r17,4(sp)
   30178:	dc000017 	ldw	r16,0(sp)
   3017c:	dec00404 	addi	sp,sp,16
   30180:	f800283a 	ret
   30184:	800b883a 	mov	r5,r16
   30188:	8809883a 	mov	r4,r17
   3018c:	002b1200 	call	2b120 <__sflush_r>
   30190:	1025883a 	mov	r18,r2
   30194:	80800b17 	ldw	r2,44(r16)
   30198:	10000426 	beq	r2,zero,301ac <_fclose_r+0x78>
   3019c:	81400717 	ldw	r5,28(r16)
   301a0:	8809883a 	mov	r4,r17
   301a4:	103ee83a 	callr	r2
   301a8:	10001616 	blt	r2,zero,30204 <_fclose_r+0xd0>
   301ac:	8080030b 	ldhu	r2,12(r16)
   301b0:	1080200c 	andi	r2,r2,128
   301b4:	1000151e 	bne	r2,zero,3020c <_fclose_r+0xd8>
   301b8:	81400c17 	ldw	r5,48(r16)
   301bc:	28000526 	beq	r5,zero,301d4 <_fclose_r+0xa0>
   301c0:	80801004 	addi	r2,r16,64
   301c4:	28800226 	beq	r5,r2,301d0 <_fclose_r+0x9c>
   301c8:	8809883a 	mov	r4,r17
   301cc:	002b88c0 	call	2b88c <_free_r>
   301d0:	80000c15 	stw	zero,48(r16)
   301d4:	81401117 	ldw	r5,68(r16)
   301d8:	28000326 	beq	r5,zero,301e8 <_fclose_r+0xb4>
   301dc:	8809883a 	mov	r4,r17
   301e0:	002b88c0 	call	2b88c <_free_r>
   301e4:	80001115 	stw	zero,68(r16)
   301e8:	002b7280 	call	2b728 <__sfp_lock_acquire>
   301ec:	8000030d 	sth	zero,12(r16)
   301f0:	002b72c0 	call	2b72c <__sfp_lock_release>
   301f4:	9005883a 	mov	r2,r18
   301f8:	003fdc06 	br	3016c <__alt_data_end+0xffff0d6c>
   301fc:	002b7180 	call	2b718 <__sinit>
   30200:	003fd706 	br	30160 <__alt_data_end+0xffff0d60>
   30204:	04bfffc4 	movi	r18,-1
   30208:	003fe806 	br	301ac <__alt_data_end+0xffff0dac>
   3020c:	81400417 	ldw	r5,16(r16)
   30210:	8809883a 	mov	r4,r17
   30214:	002b88c0 	call	2b88c <_free_r>
   30218:	003fe706 	br	301b8 <__alt_data_end+0xffff0db8>
   3021c:	0005883a 	mov	r2,zero
   30220:	f800283a 	ret

00030224 <fclose>:
   30224:	008000f4 	movhi	r2,3
   30228:	10999c04 	addi	r2,r2,26224
   3022c:	200b883a 	mov	r5,r4
   30230:	11000017 	ldw	r4,0(r2)
   30234:	00301341 	jmpi	30134 <_fclose_r>

00030238 <__fputwc>:
   30238:	defff804 	addi	sp,sp,-32
   3023c:	dcc00415 	stw	r19,16(sp)
   30240:	dc800315 	stw	r18,12(sp)
   30244:	dc000115 	stw	r16,4(sp)
   30248:	dfc00715 	stw	ra,28(sp)
   3024c:	dd400615 	stw	r21,24(sp)
   30250:	dd000515 	stw	r20,20(sp)
   30254:	dc400215 	stw	r17,8(sp)
   30258:	2027883a 	mov	r19,r4
   3025c:	2825883a 	mov	r18,r5
   30260:	3021883a 	mov	r16,r6
   30264:	002c2680 	call	2c268 <__locale_mb_cur_max>
   30268:	00c00044 	movi	r3,1
   3026c:	10c03e26 	beq	r2,r3,30368 <__fputwc+0x130>
   30270:	81c01704 	addi	r7,r16,92
   30274:	900d883a 	mov	r6,r18
   30278:	d80b883a 	mov	r5,sp
   3027c:	9809883a 	mov	r4,r19
   30280:	00307080 	call	30708 <_wcrtomb_r>
   30284:	1029883a 	mov	r20,r2
   30288:	00bfffc4 	movi	r2,-1
   3028c:	a0802026 	beq	r20,r2,30310 <__fputwc+0xd8>
   30290:	d9400003 	ldbu	r5,0(sp)
   30294:	a0001c26 	beq	r20,zero,30308 <__fputwc+0xd0>
   30298:	0023883a 	mov	r17,zero
   3029c:	05400284 	movi	r21,10
   302a0:	00000906 	br	302c8 <__fputwc+0x90>
   302a4:	80800017 	ldw	r2,0(r16)
   302a8:	11400005 	stb	r5,0(r2)
   302ac:	80c00017 	ldw	r3,0(r16)
   302b0:	18c00044 	addi	r3,r3,1
   302b4:	80c00015 	stw	r3,0(r16)
   302b8:	8c400044 	addi	r17,r17,1
   302bc:	dc45883a 	add	r2,sp,r17
   302c0:	8d00112e 	bgeu	r17,r20,30308 <__fputwc+0xd0>
   302c4:	11400003 	ldbu	r5,0(r2)
   302c8:	80c00217 	ldw	r3,8(r16)
   302cc:	18ffffc4 	addi	r3,r3,-1
   302d0:	80c00215 	stw	r3,8(r16)
   302d4:	183ff30e 	bge	r3,zero,302a4 <__alt_data_end+0xffff0ea4>
   302d8:	80800617 	ldw	r2,24(r16)
   302dc:	18801916 	blt	r3,r2,30344 <__fputwc+0x10c>
   302e0:	80800017 	ldw	r2,0(r16)
   302e4:	11400005 	stb	r5,0(r2)
   302e8:	80800017 	ldw	r2,0(r16)
   302ec:	10c00003 	ldbu	r3,0(r2)
   302f0:	10800044 	addi	r2,r2,1
   302f4:	1d402326 	beq	r3,r21,30384 <__fputwc+0x14c>
   302f8:	80800015 	stw	r2,0(r16)
   302fc:	8c400044 	addi	r17,r17,1
   30300:	dc45883a 	add	r2,sp,r17
   30304:	8d3fef36 	bltu	r17,r20,302c4 <__alt_data_end+0xffff0ec4>
   30308:	9005883a 	mov	r2,r18
   3030c:	00000406 	br	30320 <__fputwc+0xe8>
   30310:	80c0030b 	ldhu	r3,12(r16)
   30314:	a005883a 	mov	r2,r20
   30318:	18c01014 	ori	r3,r3,64
   3031c:	80c0030d 	sth	r3,12(r16)
   30320:	dfc00717 	ldw	ra,28(sp)
   30324:	dd400617 	ldw	r21,24(sp)
   30328:	dd000517 	ldw	r20,20(sp)
   3032c:	dcc00417 	ldw	r19,16(sp)
   30330:	dc800317 	ldw	r18,12(sp)
   30334:	dc400217 	ldw	r17,8(sp)
   30338:	dc000117 	ldw	r16,4(sp)
   3033c:	dec00804 	addi	sp,sp,32
   30340:	f800283a 	ret
   30344:	800d883a 	mov	r6,r16
   30348:	29403fcc 	andi	r5,r5,255
   3034c:	9809883a 	mov	r4,r19
   30350:	00305b00 	call	305b0 <__swbuf_r>
   30354:	10bfffe0 	cmpeqi	r2,r2,-1
   30358:	10803fcc 	andi	r2,r2,255
   3035c:	103fd626 	beq	r2,zero,302b8 <__alt_data_end+0xffff0eb8>
   30360:	00bfffc4 	movi	r2,-1
   30364:	003fee06 	br	30320 <__alt_data_end+0xffff0f20>
   30368:	90ffffc4 	addi	r3,r18,-1
   3036c:	01003f84 	movi	r4,254
   30370:	20ffbf36 	bltu	r4,r3,30270 <__alt_data_end+0xffff0e70>
   30374:	900b883a 	mov	r5,r18
   30378:	dc800005 	stb	r18,0(sp)
   3037c:	1029883a 	mov	r20,r2
   30380:	003fc506 	br	30298 <__alt_data_end+0xffff0e98>
   30384:	800d883a 	mov	r6,r16
   30388:	a80b883a 	mov	r5,r21
   3038c:	9809883a 	mov	r4,r19
   30390:	00305b00 	call	305b0 <__swbuf_r>
   30394:	10bfffe0 	cmpeqi	r2,r2,-1
   30398:	003fef06 	br	30358 <__alt_data_end+0xffff0f58>

0003039c <_fputwc_r>:
   3039c:	3080030b 	ldhu	r2,12(r6)
   303a0:	10c8000c 	andi	r3,r2,8192
   303a4:	1800051e 	bne	r3,zero,303bc <_fputwc_r+0x20>
   303a8:	30c01917 	ldw	r3,100(r6)
   303ac:	10880014 	ori	r2,r2,8192
   303b0:	3080030d 	sth	r2,12(r6)
   303b4:	18880014 	ori	r2,r3,8192
   303b8:	30801915 	stw	r2,100(r6)
   303bc:	00302381 	jmpi	30238 <__fputwc>

000303c0 <fputwc>:
   303c0:	008000f4 	movhi	r2,3
   303c4:	defffc04 	addi	sp,sp,-16
   303c8:	10999c04 	addi	r2,r2,26224
   303cc:	dc000115 	stw	r16,4(sp)
   303d0:	14000017 	ldw	r16,0(r2)
   303d4:	dc400215 	stw	r17,8(sp)
   303d8:	dfc00315 	stw	ra,12(sp)
   303dc:	2023883a 	mov	r17,r4
   303e0:	80000226 	beq	r16,zero,303ec <fputwc+0x2c>
   303e4:	80800e17 	ldw	r2,56(r16)
   303e8:	10001026 	beq	r2,zero,3042c <fputwc+0x6c>
   303ec:	2880030b 	ldhu	r2,12(r5)
   303f0:	10c8000c 	andi	r3,r2,8192
   303f4:	1800051e 	bne	r3,zero,3040c <fputwc+0x4c>
   303f8:	28c01917 	ldw	r3,100(r5)
   303fc:	10880014 	ori	r2,r2,8192
   30400:	2880030d 	sth	r2,12(r5)
   30404:	18880014 	ori	r2,r3,8192
   30408:	28801915 	stw	r2,100(r5)
   3040c:	280d883a 	mov	r6,r5
   30410:	8009883a 	mov	r4,r16
   30414:	880b883a 	mov	r5,r17
   30418:	dfc00317 	ldw	ra,12(sp)
   3041c:	dc400217 	ldw	r17,8(sp)
   30420:	dc000117 	ldw	r16,4(sp)
   30424:	dec00404 	addi	sp,sp,16
   30428:	00302381 	jmpi	30238 <__fputwc>
   3042c:	8009883a 	mov	r4,r16
   30430:	d9400015 	stw	r5,0(sp)
   30434:	002b7180 	call	2b718 <__sinit>
   30438:	d9400017 	ldw	r5,0(sp)
   3043c:	003feb06 	br	303ec <__alt_data_end+0xffff0fec>

00030440 <_fstat_r>:
   30440:	defffd04 	addi	sp,sp,-12
   30444:	2805883a 	mov	r2,r5
   30448:	dc000015 	stw	r16,0(sp)
   3044c:	04000134 	movhi	r16,4
   30450:	dc400115 	stw	r17,4(sp)
   30454:	84207004 	addi	r16,r16,-32320
   30458:	2023883a 	mov	r17,r4
   3045c:	300b883a 	mov	r5,r6
   30460:	1009883a 	mov	r4,r2
   30464:	dfc00215 	stw	ra,8(sp)
   30468:	80000015 	stw	zero,0(r16)
   3046c:	00319700 	call	31970 <fstat>
   30470:	00ffffc4 	movi	r3,-1
   30474:	10c00526 	beq	r2,r3,3048c <_fstat_r+0x4c>
   30478:	dfc00217 	ldw	ra,8(sp)
   3047c:	dc400117 	ldw	r17,4(sp)
   30480:	dc000017 	ldw	r16,0(sp)
   30484:	dec00304 	addi	sp,sp,12
   30488:	f800283a 	ret
   3048c:	80c00017 	ldw	r3,0(r16)
   30490:	183ff926 	beq	r3,zero,30478 <__alt_data_end+0xffff1078>
   30494:	88c00015 	stw	r3,0(r17)
   30498:	003ff706 	br	30478 <__alt_data_end+0xffff1078>

0003049c <_isatty_r>:
   3049c:	defffd04 	addi	sp,sp,-12
   304a0:	dc000015 	stw	r16,0(sp)
   304a4:	04000134 	movhi	r16,4
   304a8:	dc400115 	stw	r17,4(sp)
   304ac:	84207004 	addi	r16,r16,-32320
   304b0:	2023883a 	mov	r17,r4
   304b4:	2809883a 	mov	r4,r5
   304b8:	dfc00215 	stw	ra,8(sp)
   304bc:	80000015 	stw	zero,0(r16)
   304c0:	0031a5c0 	call	31a5c <isatty>
   304c4:	00ffffc4 	movi	r3,-1
   304c8:	10c00526 	beq	r2,r3,304e0 <_isatty_r+0x44>
   304cc:	dfc00217 	ldw	ra,8(sp)
   304d0:	dc400117 	ldw	r17,4(sp)
   304d4:	dc000017 	ldw	r16,0(sp)
   304d8:	dec00304 	addi	sp,sp,12
   304dc:	f800283a 	ret
   304e0:	80c00017 	ldw	r3,0(r16)
   304e4:	183ff926 	beq	r3,zero,304cc <__alt_data_end+0xffff10cc>
   304e8:	88c00015 	stw	r3,0(r17)
   304ec:	003ff706 	br	304cc <__alt_data_end+0xffff10cc>

000304f0 <_lseek_r>:
   304f0:	defffd04 	addi	sp,sp,-12
   304f4:	2805883a 	mov	r2,r5
   304f8:	dc000015 	stw	r16,0(sp)
   304fc:	04000134 	movhi	r16,4
   30500:	dc400115 	stw	r17,4(sp)
   30504:	300b883a 	mov	r5,r6
   30508:	84207004 	addi	r16,r16,-32320
   3050c:	2023883a 	mov	r17,r4
   30510:	380d883a 	mov	r6,r7
   30514:	1009883a 	mov	r4,r2
   30518:	dfc00215 	stw	ra,8(sp)
   3051c:	80000015 	stw	zero,0(r16)
   30520:	0031c280 	call	31c28 <lseek>
   30524:	00ffffc4 	movi	r3,-1
   30528:	10c00526 	beq	r2,r3,30540 <_lseek_r+0x50>
   3052c:	dfc00217 	ldw	ra,8(sp)
   30530:	dc400117 	ldw	r17,4(sp)
   30534:	dc000017 	ldw	r16,0(sp)
   30538:	dec00304 	addi	sp,sp,12
   3053c:	f800283a 	ret
   30540:	80c00017 	ldw	r3,0(r16)
   30544:	183ff926 	beq	r3,zero,3052c <__alt_data_end+0xffff112c>
   30548:	88c00015 	stw	r3,0(r17)
   3054c:	003ff706 	br	3052c <__alt_data_end+0xffff112c>

00030550 <_read_r>:
   30550:	defffd04 	addi	sp,sp,-12
   30554:	2805883a 	mov	r2,r5
   30558:	dc000015 	stw	r16,0(sp)
   3055c:	04000134 	movhi	r16,4
   30560:	dc400115 	stw	r17,4(sp)
   30564:	300b883a 	mov	r5,r6
   30568:	84207004 	addi	r16,r16,-32320
   3056c:	2023883a 	mov	r17,r4
   30570:	380d883a 	mov	r6,r7
   30574:	1009883a 	mov	r4,r2
   30578:	dfc00215 	stw	ra,8(sp)
   3057c:	80000015 	stw	zero,0(r16)
   30580:	0031dfc0 	call	31dfc <read>
   30584:	00ffffc4 	movi	r3,-1
   30588:	10c00526 	beq	r2,r3,305a0 <_read_r+0x50>
   3058c:	dfc00217 	ldw	ra,8(sp)
   30590:	dc400117 	ldw	r17,4(sp)
   30594:	dc000017 	ldw	r16,0(sp)
   30598:	dec00304 	addi	sp,sp,12
   3059c:	f800283a 	ret
   305a0:	80c00017 	ldw	r3,0(r16)
   305a4:	183ff926 	beq	r3,zero,3058c <__alt_data_end+0xffff118c>
   305a8:	88c00015 	stw	r3,0(r17)
   305ac:	003ff706 	br	3058c <__alt_data_end+0xffff118c>

000305b0 <__swbuf_r>:
   305b0:	defffb04 	addi	sp,sp,-20
   305b4:	dcc00315 	stw	r19,12(sp)
   305b8:	dc800215 	stw	r18,8(sp)
   305bc:	dc000015 	stw	r16,0(sp)
   305c0:	dfc00415 	stw	ra,16(sp)
   305c4:	dc400115 	stw	r17,4(sp)
   305c8:	2025883a 	mov	r18,r4
   305cc:	2827883a 	mov	r19,r5
   305d0:	3021883a 	mov	r16,r6
   305d4:	20000226 	beq	r4,zero,305e0 <__swbuf_r+0x30>
   305d8:	20800e17 	ldw	r2,56(r4)
   305dc:	10004226 	beq	r2,zero,306e8 <__swbuf_r+0x138>
   305e0:	80800617 	ldw	r2,24(r16)
   305e4:	8100030b 	ldhu	r4,12(r16)
   305e8:	80800215 	stw	r2,8(r16)
   305ec:	2080020c 	andi	r2,r4,8
   305f0:	10003626 	beq	r2,zero,306cc <__swbuf_r+0x11c>
   305f4:	80c00417 	ldw	r3,16(r16)
   305f8:	18003426 	beq	r3,zero,306cc <__swbuf_r+0x11c>
   305fc:	2088000c 	andi	r2,r4,8192
   30600:	9c403fcc 	andi	r17,r19,255
   30604:	10001a26 	beq	r2,zero,30670 <__swbuf_r+0xc0>
   30608:	80800017 	ldw	r2,0(r16)
   3060c:	81000517 	ldw	r4,20(r16)
   30610:	10c7c83a 	sub	r3,r2,r3
   30614:	1900200e 	bge	r3,r4,30698 <__swbuf_r+0xe8>
   30618:	18c00044 	addi	r3,r3,1
   3061c:	81000217 	ldw	r4,8(r16)
   30620:	11400044 	addi	r5,r2,1
   30624:	81400015 	stw	r5,0(r16)
   30628:	213fffc4 	addi	r4,r4,-1
   3062c:	81000215 	stw	r4,8(r16)
   30630:	14c00005 	stb	r19,0(r2)
   30634:	80800517 	ldw	r2,20(r16)
   30638:	10c01e26 	beq	r2,r3,306b4 <__swbuf_r+0x104>
   3063c:	8080030b 	ldhu	r2,12(r16)
   30640:	1080004c 	andi	r2,r2,1
   30644:	10000226 	beq	r2,zero,30650 <__swbuf_r+0xa0>
   30648:	00800284 	movi	r2,10
   3064c:	88801926 	beq	r17,r2,306b4 <__swbuf_r+0x104>
   30650:	8805883a 	mov	r2,r17
   30654:	dfc00417 	ldw	ra,16(sp)
   30658:	dcc00317 	ldw	r19,12(sp)
   3065c:	dc800217 	ldw	r18,8(sp)
   30660:	dc400117 	ldw	r17,4(sp)
   30664:	dc000017 	ldw	r16,0(sp)
   30668:	dec00504 	addi	sp,sp,20
   3066c:	f800283a 	ret
   30670:	81401917 	ldw	r5,100(r16)
   30674:	00b7ffc4 	movi	r2,-8193
   30678:	21080014 	ori	r4,r4,8192
   3067c:	2884703a 	and	r2,r5,r2
   30680:	80801915 	stw	r2,100(r16)
   30684:	80800017 	ldw	r2,0(r16)
   30688:	8100030d 	sth	r4,12(r16)
   3068c:	81000517 	ldw	r4,20(r16)
   30690:	10c7c83a 	sub	r3,r2,r3
   30694:	193fe016 	blt	r3,r4,30618 <__alt_data_end+0xffff1218>
   30698:	800b883a 	mov	r5,r16
   3069c:	9009883a 	mov	r4,r18
   306a0:	002b33c0 	call	2b33c <_fflush_r>
   306a4:	1000071e 	bne	r2,zero,306c4 <__swbuf_r+0x114>
   306a8:	80800017 	ldw	r2,0(r16)
   306ac:	00c00044 	movi	r3,1
   306b0:	003fda06 	br	3061c <__alt_data_end+0xffff121c>
   306b4:	800b883a 	mov	r5,r16
   306b8:	9009883a 	mov	r4,r18
   306bc:	002b33c0 	call	2b33c <_fflush_r>
   306c0:	103fe326 	beq	r2,zero,30650 <__alt_data_end+0xffff1250>
   306c4:	00bfffc4 	movi	r2,-1
   306c8:	003fe206 	br	30654 <__alt_data_end+0xffff1254>
   306cc:	800b883a 	mov	r5,r16
   306d0:	9009883a 	mov	r4,r18
   306d4:	00297440 	call	29744 <__swsetup_r>
   306d8:	103ffa1e 	bne	r2,zero,306c4 <__alt_data_end+0xffff12c4>
   306dc:	8100030b 	ldhu	r4,12(r16)
   306e0:	80c00417 	ldw	r3,16(r16)
   306e4:	003fc506 	br	305fc <__alt_data_end+0xffff11fc>
   306e8:	002b7180 	call	2b718 <__sinit>
   306ec:	003fbc06 	br	305e0 <__alt_data_end+0xffff11e0>

000306f0 <__swbuf>:
   306f0:	008000f4 	movhi	r2,3
   306f4:	10999c04 	addi	r2,r2,26224
   306f8:	280d883a 	mov	r6,r5
   306fc:	200b883a 	mov	r5,r4
   30700:	11000017 	ldw	r4,0(r2)
   30704:	00305b01 	jmpi	305b0 <__swbuf_r>

00030708 <_wcrtomb_r>:
   30708:	defff604 	addi	sp,sp,-40
   3070c:	008000f4 	movhi	r2,3
   30710:	dc800815 	stw	r18,32(sp)
   30714:	dc400715 	stw	r17,28(sp)
   30718:	dc000615 	stw	r16,24(sp)
   3071c:	1099a004 	addi	r2,r2,26240
   30720:	dfc00915 	stw	ra,36(sp)
   30724:	2021883a 	mov	r16,r4
   30728:	3823883a 	mov	r17,r7
   3072c:	14800017 	ldw	r18,0(r2)
   30730:	28001426 	beq	r5,zero,30784 <_wcrtomb_r+0x7c>
   30734:	d9400415 	stw	r5,16(sp)
   30738:	d9800515 	stw	r6,20(sp)
   3073c:	002c25c0 	call	2c25c <__locale_charset>
   30740:	d9800517 	ldw	r6,20(sp)
   30744:	d9400417 	ldw	r5,16(sp)
   30748:	100f883a 	mov	r7,r2
   3074c:	dc400015 	stw	r17,0(sp)
   30750:	8009883a 	mov	r4,r16
   30754:	903ee83a 	callr	r18
   30758:	00ffffc4 	movi	r3,-1
   3075c:	10c0031e 	bne	r2,r3,3076c <_wcrtomb_r+0x64>
   30760:	88000015 	stw	zero,0(r17)
   30764:	00c02284 	movi	r3,138
   30768:	80c00015 	stw	r3,0(r16)
   3076c:	dfc00917 	ldw	ra,36(sp)
   30770:	dc800817 	ldw	r18,32(sp)
   30774:	dc400717 	ldw	r17,28(sp)
   30778:	dc000617 	ldw	r16,24(sp)
   3077c:	dec00a04 	addi	sp,sp,40
   30780:	f800283a 	ret
   30784:	002c25c0 	call	2c25c <__locale_charset>
   30788:	100f883a 	mov	r7,r2
   3078c:	dc400015 	stw	r17,0(sp)
   30790:	000d883a 	mov	r6,zero
   30794:	d9400104 	addi	r5,sp,4
   30798:	8009883a 	mov	r4,r16
   3079c:	903ee83a 	callr	r18
   307a0:	003fed06 	br	30758 <__alt_data_end+0xffff1358>

000307a4 <wcrtomb>:
   307a4:	defff604 	addi	sp,sp,-40
   307a8:	008000f4 	movhi	r2,3
   307ac:	dc800615 	stw	r18,24(sp)
   307b0:	dc400515 	stw	r17,20(sp)
   307b4:	10999c04 	addi	r2,r2,26224
   307b8:	dfc00915 	stw	ra,36(sp)
   307bc:	dd000815 	stw	r20,32(sp)
   307c0:	dcc00715 	stw	r19,28(sp)
   307c4:	dc000415 	stw	r16,16(sp)
   307c8:	3025883a 	mov	r18,r6
   307cc:	14400017 	ldw	r17,0(r2)
   307d0:	20001926 	beq	r4,zero,30838 <wcrtomb+0x94>
   307d4:	008000f4 	movhi	r2,3
   307d8:	1099a004 	addi	r2,r2,26240
   307dc:	15000017 	ldw	r20,0(r2)
   307e0:	2021883a 	mov	r16,r4
   307e4:	2827883a 	mov	r19,r5
   307e8:	002c25c0 	call	2c25c <__locale_charset>
   307ec:	100f883a 	mov	r7,r2
   307f0:	dc800015 	stw	r18,0(sp)
   307f4:	980d883a 	mov	r6,r19
   307f8:	800b883a 	mov	r5,r16
   307fc:	8809883a 	mov	r4,r17
   30800:	a03ee83a 	callr	r20
   30804:	00ffffc4 	movi	r3,-1
   30808:	10c0031e 	bne	r2,r3,30818 <wcrtomb+0x74>
   3080c:	90000015 	stw	zero,0(r18)
   30810:	00c02284 	movi	r3,138
   30814:	88c00015 	stw	r3,0(r17)
   30818:	dfc00917 	ldw	ra,36(sp)
   3081c:	dd000817 	ldw	r20,32(sp)
   30820:	dcc00717 	ldw	r19,28(sp)
   30824:	dc800617 	ldw	r18,24(sp)
   30828:	dc400517 	ldw	r17,20(sp)
   3082c:	dc000417 	ldw	r16,16(sp)
   30830:	dec00a04 	addi	sp,sp,40
   30834:	f800283a 	ret
   30838:	008000f4 	movhi	r2,3
   3083c:	1099a004 	addi	r2,r2,26240
   30840:	14000017 	ldw	r16,0(r2)
   30844:	002c25c0 	call	2c25c <__locale_charset>
   30848:	100f883a 	mov	r7,r2
   3084c:	dc800015 	stw	r18,0(sp)
   30850:	000d883a 	mov	r6,zero
   30854:	d9400104 	addi	r5,sp,4
   30858:	8809883a 	mov	r4,r17
   3085c:	803ee83a 	callr	r16
   30860:	003fe806 	br	30804 <__alt_data_end+0xffff1404>

00030864 <__ascii_wctomb>:
   30864:	28000526 	beq	r5,zero,3087c <__ascii_wctomb+0x18>
   30868:	00803fc4 	movi	r2,255
   3086c:	11800536 	bltu	r2,r6,30884 <__ascii_wctomb+0x20>
   30870:	29800005 	stb	r6,0(r5)
   30874:	00800044 	movi	r2,1
   30878:	f800283a 	ret
   3087c:	0005883a 	mov	r2,zero
   30880:	f800283a 	ret
   30884:	00802284 	movi	r2,138
   30888:	20800015 	stw	r2,0(r4)
   3088c:	00bfffc4 	movi	r2,-1
   30890:	f800283a 	ret

00030894 <_wctomb_r>:
   30894:	008000f4 	movhi	r2,3
   30898:	defff904 	addi	sp,sp,-28
   3089c:	1099a004 	addi	r2,r2,26240
   308a0:	dfc00615 	stw	ra,24(sp)
   308a4:	dc400515 	stw	r17,20(sp)
   308a8:	dc000415 	stw	r16,16(sp)
   308ac:	3823883a 	mov	r17,r7
   308b0:	14000017 	ldw	r16,0(r2)
   308b4:	d9000115 	stw	r4,4(sp)
   308b8:	d9400215 	stw	r5,8(sp)
   308bc:	d9800315 	stw	r6,12(sp)
   308c0:	002c25c0 	call	2c25c <__locale_charset>
   308c4:	d9800317 	ldw	r6,12(sp)
   308c8:	d9400217 	ldw	r5,8(sp)
   308cc:	d9000117 	ldw	r4,4(sp)
   308d0:	100f883a 	mov	r7,r2
   308d4:	dc400015 	stw	r17,0(sp)
   308d8:	803ee83a 	callr	r16
   308dc:	dfc00617 	ldw	ra,24(sp)
   308e0:	dc400517 	ldw	r17,20(sp)
   308e4:	dc000417 	ldw	r16,16(sp)
   308e8:	dec00704 	addi	sp,sp,28
   308ec:	f800283a 	ret

000308f0 <__udivdi3>:
   308f0:	defff504 	addi	sp,sp,-44
   308f4:	dcc00415 	stw	r19,16(sp)
   308f8:	dc000115 	stw	r16,4(sp)
   308fc:	dfc00a15 	stw	ra,40(sp)
   30900:	df000915 	stw	fp,36(sp)
   30904:	ddc00815 	stw	r23,32(sp)
   30908:	dd800715 	stw	r22,28(sp)
   3090c:	dd400615 	stw	r21,24(sp)
   30910:	dd000515 	stw	r20,20(sp)
   30914:	dc800315 	stw	r18,12(sp)
   30918:	dc400215 	stw	r17,8(sp)
   3091c:	2027883a 	mov	r19,r4
   30920:	2821883a 	mov	r16,r5
   30924:	3800411e 	bne	r7,zero,30a2c <__udivdi3+0x13c>
   30928:	3023883a 	mov	r17,r6
   3092c:	2025883a 	mov	r18,r4
   30930:	2980522e 	bgeu	r5,r6,30a7c <__udivdi3+0x18c>
   30934:	00bfffd4 	movui	r2,65535
   30938:	282d883a 	mov	r22,r5
   3093c:	1180a836 	bltu	r2,r6,30be0 <__udivdi3+0x2f0>
   30940:	00803fc4 	movi	r2,255
   30944:	1185803a 	cmpltu	r2,r2,r6
   30948:	100490fa 	slli	r2,r2,3
   3094c:	3086d83a 	srl	r3,r6,r2
   30950:	010000f4 	movhi	r4,3
   30954:	211230c4 	addi	r4,r4,18627
   30958:	20c7883a 	add	r3,r4,r3
   3095c:	18c00003 	ldbu	r3,0(r3)
   30960:	1885883a 	add	r2,r3,r2
   30964:	00c00804 	movi	r3,32
   30968:	1887c83a 	sub	r3,r3,r2
   3096c:	18000526 	beq	r3,zero,30984 <__udivdi3+0x94>
   30970:	80e0983a 	sll	r16,r16,r3
   30974:	9884d83a 	srl	r2,r19,r2
   30978:	30e2983a 	sll	r17,r6,r3
   3097c:	98e4983a 	sll	r18,r19,r3
   30980:	142cb03a 	or	r22,r2,r16
   30984:	882ad43a 	srli	r21,r17,16
   30988:	b009883a 	mov	r4,r22
   3098c:	8d3fffcc 	andi	r20,r17,65535
   30990:	a80b883a 	mov	r5,r21
   30994:	00239840 	call	23984 <__umodsi3>
   30998:	b009883a 	mov	r4,r22
   3099c:	a80b883a 	mov	r5,r21
   309a0:	1027883a 	mov	r19,r2
   309a4:	00239200 	call	23920 <__udivsi3>
   309a8:	102d883a 	mov	r22,r2
   309ac:	9826943a 	slli	r19,r19,16
   309b0:	9004d43a 	srli	r2,r18,16
   309b4:	a5a1383a 	mul	r16,r20,r22
   309b8:	14c4b03a 	or	r2,r2,r19
   309bc:	1400052e 	bgeu	r2,r16,309d4 <__udivdi3+0xe4>
   309c0:	1445883a 	add	r2,r2,r17
   309c4:	b0ffffc4 	addi	r3,r22,-1
   309c8:	14400136 	bltu	r2,r17,309d0 <__udivdi3+0xe0>
   309cc:	14012336 	bltu	r2,r16,30e5c <__udivdi3+0x56c>
   309d0:	182d883a 	mov	r22,r3
   309d4:	1421c83a 	sub	r16,r2,r16
   309d8:	a80b883a 	mov	r5,r21
   309dc:	8009883a 	mov	r4,r16
   309e0:	00239840 	call	23984 <__umodsi3>
   309e4:	1027883a 	mov	r19,r2
   309e8:	a80b883a 	mov	r5,r21
   309ec:	8009883a 	mov	r4,r16
   309f0:	00239200 	call	23920 <__udivsi3>
   309f4:	9826943a 	slli	r19,r19,16
   309f8:	a0a9383a 	mul	r20,r20,r2
   309fc:	94bfffcc 	andi	r18,r18,65535
   30a00:	94e4b03a 	or	r18,r18,r19
   30a04:	9500052e 	bgeu	r18,r20,30a1c <__udivdi3+0x12c>
   30a08:	8ca5883a 	add	r18,r17,r18
   30a0c:	10ffffc4 	addi	r3,r2,-1
   30a10:	9440f136 	bltu	r18,r17,30dd8 <__udivdi3+0x4e8>
   30a14:	9500f02e 	bgeu	r18,r20,30dd8 <__udivdi3+0x4e8>
   30a18:	10bfff84 	addi	r2,r2,-2
   30a1c:	b00c943a 	slli	r6,r22,16
   30a20:	0007883a 	mov	r3,zero
   30a24:	3084b03a 	or	r2,r6,r2
   30a28:	00005906 	br	30b90 <__udivdi3+0x2a0>
   30a2c:	29c05636 	bltu	r5,r7,30b88 <__udivdi3+0x298>
   30a30:	00bfffd4 	movui	r2,65535
   30a34:	11c0622e 	bgeu	r2,r7,30bc0 <__udivdi3+0x2d0>
   30a38:	00804034 	movhi	r2,256
   30a3c:	10bfffc4 	addi	r2,r2,-1
   30a40:	11c0ee36 	bltu	r2,r7,30dfc <__udivdi3+0x50c>
   30a44:	00800404 	movi	r2,16
   30a48:	3886d83a 	srl	r3,r7,r2
   30a4c:	010000f4 	movhi	r4,3
   30a50:	211230c4 	addi	r4,r4,18627
   30a54:	20c7883a 	add	r3,r4,r3
   30a58:	18c00003 	ldbu	r3,0(r3)
   30a5c:	05400804 	movi	r21,32
   30a60:	1885883a 	add	r2,r3,r2
   30a64:	a8abc83a 	sub	r21,r21,r2
   30a68:	a800621e 	bne	r21,zero,30bf4 <__udivdi3+0x304>
   30a6c:	3c00e936 	bltu	r7,r16,30e14 <__udivdi3+0x524>
   30a70:	9985403a 	cmpgeu	r2,r19,r6
   30a74:	0007883a 	mov	r3,zero
   30a78:	00004506 	br	30b90 <__udivdi3+0x2a0>
   30a7c:	3000041e 	bne	r6,zero,30a90 <__udivdi3+0x1a0>
   30a80:	000b883a 	mov	r5,zero
   30a84:	01000044 	movi	r4,1
   30a88:	00239200 	call	23920 <__udivsi3>
   30a8c:	1023883a 	mov	r17,r2
   30a90:	00bfffd4 	movui	r2,65535
   30a94:	14404e2e 	bgeu	r2,r17,30bd0 <__udivdi3+0x2e0>
   30a98:	00804034 	movhi	r2,256
   30a9c:	10bfffc4 	addi	r2,r2,-1
   30aa0:	1440d836 	bltu	r2,r17,30e04 <__udivdi3+0x514>
   30aa4:	00800404 	movi	r2,16
   30aa8:	8886d83a 	srl	r3,r17,r2
   30aac:	010000f4 	movhi	r4,3
   30ab0:	211230c4 	addi	r4,r4,18627
   30ab4:	20c7883a 	add	r3,r4,r3
   30ab8:	18c00003 	ldbu	r3,0(r3)
   30abc:	1885883a 	add	r2,r3,r2
   30ac0:	00c00804 	movi	r3,32
   30ac4:	1887c83a 	sub	r3,r3,r2
   30ac8:	18008f1e 	bne	r3,zero,30d08 <__udivdi3+0x418>
   30acc:	882ad43a 	srli	r21,r17,16
   30ad0:	8461c83a 	sub	r16,r16,r17
   30ad4:	8d3fffcc 	andi	r20,r17,65535
   30ad8:	00c00044 	movi	r3,1
   30adc:	8009883a 	mov	r4,r16
   30ae0:	a80b883a 	mov	r5,r21
   30ae4:	d8c00015 	stw	r3,0(sp)
   30ae8:	00239840 	call	23984 <__umodsi3>
   30aec:	8009883a 	mov	r4,r16
   30af0:	a80b883a 	mov	r5,r21
   30af4:	1027883a 	mov	r19,r2
   30af8:	00239200 	call	23920 <__udivsi3>
   30afc:	9826943a 	slli	r19,r19,16
   30b00:	9008d43a 	srli	r4,r18,16
   30b04:	1521383a 	mul	r16,r2,r20
   30b08:	102d883a 	mov	r22,r2
   30b0c:	24c8b03a 	or	r4,r4,r19
   30b10:	d8c00017 	ldw	r3,0(sp)
   30b14:	2400052e 	bgeu	r4,r16,30b2c <__udivdi3+0x23c>
   30b18:	2449883a 	add	r4,r4,r17
   30b1c:	b0bfffc4 	addi	r2,r22,-1
   30b20:	24400136 	bltu	r4,r17,30b28 <__udivdi3+0x238>
   30b24:	2400ca36 	bltu	r4,r16,30e50 <__udivdi3+0x560>
   30b28:	102d883a 	mov	r22,r2
   30b2c:	2421c83a 	sub	r16,r4,r16
   30b30:	a80b883a 	mov	r5,r21
   30b34:	8009883a 	mov	r4,r16
   30b38:	d8c00015 	stw	r3,0(sp)
   30b3c:	00239840 	call	23984 <__umodsi3>
   30b40:	1027883a 	mov	r19,r2
   30b44:	a80b883a 	mov	r5,r21
   30b48:	8009883a 	mov	r4,r16
   30b4c:	00239200 	call	23920 <__udivsi3>
   30b50:	9826943a 	slli	r19,r19,16
   30b54:	1529383a 	mul	r20,r2,r20
   30b58:	94bfffcc 	andi	r18,r18,65535
   30b5c:	94e4b03a 	or	r18,r18,r19
   30b60:	d8c00017 	ldw	r3,0(sp)
   30b64:	9500052e 	bgeu	r18,r20,30b7c <__udivdi3+0x28c>
   30b68:	8ca5883a 	add	r18,r17,r18
   30b6c:	113fffc4 	addi	r4,r2,-1
   30b70:	94409736 	bltu	r18,r17,30dd0 <__udivdi3+0x4e0>
   30b74:	9500962e 	bgeu	r18,r20,30dd0 <__udivdi3+0x4e0>
   30b78:	10bfff84 	addi	r2,r2,-2
   30b7c:	b00c943a 	slli	r6,r22,16
   30b80:	3084b03a 	or	r2,r6,r2
   30b84:	00000206 	br	30b90 <__udivdi3+0x2a0>
   30b88:	0007883a 	mov	r3,zero
   30b8c:	0005883a 	mov	r2,zero
   30b90:	dfc00a17 	ldw	ra,40(sp)
   30b94:	df000917 	ldw	fp,36(sp)
   30b98:	ddc00817 	ldw	r23,32(sp)
   30b9c:	dd800717 	ldw	r22,28(sp)
   30ba0:	dd400617 	ldw	r21,24(sp)
   30ba4:	dd000517 	ldw	r20,20(sp)
   30ba8:	dcc00417 	ldw	r19,16(sp)
   30bac:	dc800317 	ldw	r18,12(sp)
   30bb0:	dc400217 	ldw	r17,8(sp)
   30bb4:	dc000117 	ldw	r16,4(sp)
   30bb8:	dec00b04 	addi	sp,sp,44
   30bbc:	f800283a 	ret
   30bc0:	00803fc4 	movi	r2,255
   30bc4:	11c5803a 	cmpltu	r2,r2,r7
   30bc8:	100490fa 	slli	r2,r2,3
   30bcc:	003f9e06 	br	30a48 <__alt_data_end+0xffff1648>
   30bd0:	00803fc4 	movi	r2,255
   30bd4:	1445803a 	cmpltu	r2,r2,r17
   30bd8:	100490fa 	slli	r2,r2,3
   30bdc:	003fb206 	br	30aa8 <__alt_data_end+0xffff16a8>
   30be0:	00804034 	movhi	r2,256
   30be4:	10bfffc4 	addi	r2,r2,-1
   30be8:	11808836 	bltu	r2,r6,30e0c <__udivdi3+0x51c>
   30bec:	00800404 	movi	r2,16
   30bf0:	003f5606 	br	3094c <__alt_data_end+0xffff154c>
   30bf4:	30aed83a 	srl	r23,r6,r2
   30bf8:	3d4e983a 	sll	r7,r7,r21
   30bfc:	80acd83a 	srl	r22,r16,r2
   30c00:	9884d83a 	srl	r2,r19,r2
   30c04:	3deeb03a 	or	r23,r7,r23
   30c08:	b824d43a 	srli	r18,r23,16
   30c0c:	8560983a 	sll	r16,r16,r21
   30c10:	b009883a 	mov	r4,r22
   30c14:	900b883a 	mov	r5,r18
   30c18:	3568983a 	sll	r20,r6,r21
   30c1c:	1420b03a 	or	r16,r2,r16
   30c20:	00239840 	call	23984 <__umodsi3>
   30c24:	b009883a 	mov	r4,r22
   30c28:	900b883a 	mov	r5,r18
   30c2c:	1023883a 	mov	r17,r2
   30c30:	00239200 	call	23920 <__udivsi3>
   30c34:	8808943a 	slli	r4,r17,16
   30c38:	bf3fffcc 	andi	fp,r23,65535
   30c3c:	8006d43a 	srli	r3,r16,16
   30c40:	e0a3383a 	mul	r17,fp,r2
   30c44:	100d883a 	mov	r6,r2
   30c48:	1906b03a 	or	r3,r3,r4
   30c4c:	1c40042e 	bgeu	r3,r17,30c60 <__udivdi3+0x370>
   30c50:	1dc7883a 	add	r3,r3,r23
   30c54:	10bfffc4 	addi	r2,r2,-1
   30c58:	1dc0752e 	bgeu	r3,r23,30e30 <__udivdi3+0x540>
   30c5c:	100d883a 	mov	r6,r2
   30c60:	1c63c83a 	sub	r17,r3,r17
   30c64:	900b883a 	mov	r5,r18
   30c68:	8809883a 	mov	r4,r17
   30c6c:	d9800015 	stw	r6,0(sp)
   30c70:	00239840 	call	23984 <__umodsi3>
   30c74:	102d883a 	mov	r22,r2
   30c78:	8809883a 	mov	r4,r17
   30c7c:	900b883a 	mov	r5,r18
   30c80:	00239200 	call	23920 <__udivsi3>
   30c84:	b02c943a 	slli	r22,r22,16
   30c88:	e089383a 	mul	r4,fp,r2
   30c8c:	843fffcc 	andi	r16,r16,65535
   30c90:	85a0b03a 	or	r16,r16,r22
   30c94:	d9800017 	ldw	r6,0(sp)
   30c98:	8100042e 	bgeu	r16,r4,30cac <__udivdi3+0x3bc>
   30c9c:	85e1883a 	add	r16,r16,r23
   30ca0:	10ffffc4 	addi	r3,r2,-1
   30ca4:	85c05e2e 	bgeu	r16,r23,30e20 <__udivdi3+0x530>
   30ca8:	1805883a 	mov	r2,r3
   30cac:	300c943a 	slli	r6,r6,16
   30cb0:	a17fffcc 	andi	r5,r20,65535
   30cb4:	a028d43a 	srli	r20,r20,16
   30cb8:	3084b03a 	or	r2,r6,r2
   30cbc:	10ffffcc 	andi	r3,r2,65535
   30cc0:	100cd43a 	srli	r6,r2,16
   30cc4:	194f383a 	mul	r7,r3,r5
   30cc8:	1d07383a 	mul	r3,r3,r20
   30ccc:	314b383a 	mul	r5,r6,r5
   30cd0:	3810d43a 	srli	r8,r7,16
   30cd4:	8121c83a 	sub	r16,r16,r4
   30cd8:	1947883a 	add	r3,r3,r5
   30cdc:	40c7883a 	add	r3,r8,r3
   30ce0:	350d383a 	mul	r6,r6,r20
   30ce4:	1940022e 	bgeu	r3,r5,30cf0 <__udivdi3+0x400>
   30ce8:	01000074 	movhi	r4,1
   30cec:	310d883a 	add	r6,r6,r4
   30cf0:	1828d43a 	srli	r20,r3,16
   30cf4:	a18d883a 	add	r6,r20,r6
   30cf8:	81803e36 	bltu	r16,r6,30df4 <__udivdi3+0x504>
   30cfc:	81803826 	beq	r16,r6,30de0 <__udivdi3+0x4f0>
   30d00:	0007883a 	mov	r3,zero
   30d04:	003fa206 	br	30b90 <__alt_data_end+0xffff1790>
   30d08:	88e2983a 	sll	r17,r17,r3
   30d0c:	80a8d83a 	srl	r20,r16,r2
   30d10:	80e0983a 	sll	r16,r16,r3
   30d14:	882ad43a 	srli	r21,r17,16
   30d18:	9884d83a 	srl	r2,r19,r2
   30d1c:	a009883a 	mov	r4,r20
   30d20:	a80b883a 	mov	r5,r21
   30d24:	142eb03a 	or	r23,r2,r16
   30d28:	98e4983a 	sll	r18,r19,r3
   30d2c:	00239840 	call	23984 <__umodsi3>
   30d30:	a009883a 	mov	r4,r20
   30d34:	a80b883a 	mov	r5,r21
   30d38:	1021883a 	mov	r16,r2
   30d3c:	00239200 	call	23920 <__udivsi3>
   30d40:	1039883a 	mov	fp,r2
   30d44:	8d3fffcc 	andi	r20,r17,65535
   30d48:	8020943a 	slli	r16,r16,16
   30d4c:	b804d43a 	srli	r2,r23,16
   30d50:	a72d383a 	mul	r22,r20,fp
   30d54:	1404b03a 	or	r2,r2,r16
   30d58:	1580062e 	bgeu	r2,r22,30d74 <__udivdi3+0x484>
   30d5c:	1445883a 	add	r2,r2,r17
   30d60:	e0ffffc4 	addi	r3,fp,-1
   30d64:	14403836 	bltu	r2,r17,30e48 <__udivdi3+0x558>
   30d68:	1580372e 	bgeu	r2,r22,30e48 <__udivdi3+0x558>
   30d6c:	e73fff84 	addi	fp,fp,-2
   30d70:	1445883a 	add	r2,r2,r17
   30d74:	15adc83a 	sub	r22,r2,r22
   30d78:	a80b883a 	mov	r5,r21
   30d7c:	b009883a 	mov	r4,r22
   30d80:	00239840 	call	23984 <__umodsi3>
   30d84:	1027883a 	mov	r19,r2
   30d88:	b009883a 	mov	r4,r22
   30d8c:	a80b883a 	mov	r5,r21
   30d90:	00239200 	call	23920 <__udivsi3>
   30d94:	9826943a 	slli	r19,r19,16
   30d98:	a0a1383a 	mul	r16,r20,r2
   30d9c:	b93fffcc 	andi	r4,r23,65535
   30da0:	24c8b03a 	or	r4,r4,r19
   30da4:	2400062e 	bgeu	r4,r16,30dc0 <__udivdi3+0x4d0>
   30da8:	2449883a 	add	r4,r4,r17
   30dac:	10ffffc4 	addi	r3,r2,-1
   30db0:	24402336 	bltu	r4,r17,30e40 <__udivdi3+0x550>
   30db4:	2400222e 	bgeu	r4,r16,30e40 <__udivdi3+0x550>
   30db8:	10bfff84 	addi	r2,r2,-2
   30dbc:	2449883a 	add	r4,r4,r17
   30dc0:	e038943a 	slli	fp,fp,16
   30dc4:	2421c83a 	sub	r16,r4,r16
   30dc8:	e086b03a 	or	r3,fp,r2
   30dcc:	003f4306 	br	30adc <__alt_data_end+0xffff16dc>
   30dd0:	2005883a 	mov	r2,r4
   30dd4:	003f6906 	br	30b7c <__alt_data_end+0xffff177c>
   30dd8:	1805883a 	mov	r2,r3
   30ddc:	003f0f06 	br	30a1c <__alt_data_end+0xffff161c>
   30de0:	1806943a 	slli	r3,r3,16
   30de4:	9d66983a 	sll	r19,r19,r21
   30de8:	39ffffcc 	andi	r7,r7,65535
   30dec:	19c7883a 	add	r3,r3,r7
   30df0:	98ffc32e 	bgeu	r19,r3,30d00 <__alt_data_end+0xffff1900>
   30df4:	10bfffc4 	addi	r2,r2,-1
   30df8:	003fc106 	br	30d00 <__alt_data_end+0xffff1900>
   30dfc:	00800604 	movi	r2,24
   30e00:	003f1106 	br	30a48 <__alt_data_end+0xffff1648>
   30e04:	00800604 	movi	r2,24
   30e08:	003f2706 	br	30aa8 <__alt_data_end+0xffff16a8>
   30e0c:	00800604 	movi	r2,24
   30e10:	003ece06 	br	3094c <__alt_data_end+0xffff154c>
   30e14:	0007883a 	mov	r3,zero
   30e18:	00800044 	movi	r2,1
   30e1c:	003f5c06 	br	30b90 <__alt_data_end+0xffff1790>
   30e20:	813fa12e 	bgeu	r16,r4,30ca8 <__alt_data_end+0xffff18a8>
   30e24:	10bfff84 	addi	r2,r2,-2
   30e28:	85e1883a 	add	r16,r16,r23
   30e2c:	003f9f06 	br	30cac <__alt_data_end+0xffff18ac>
   30e30:	1c7f8a2e 	bgeu	r3,r17,30c5c <__alt_data_end+0xffff185c>
   30e34:	31bfff84 	addi	r6,r6,-2
   30e38:	1dc7883a 	add	r3,r3,r23
   30e3c:	003f8806 	br	30c60 <__alt_data_end+0xffff1860>
   30e40:	1805883a 	mov	r2,r3
   30e44:	003fde06 	br	30dc0 <__alt_data_end+0xffff19c0>
   30e48:	1839883a 	mov	fp,r3
   30e4c:	003fc906 	br	30d74 <__alt_data_end+0xffff1974>
   30e50:	b5bfff84 	addi	r22,r22,-2
   30e54:	2449883a 	add	r4,r4,r17
   30e58:	003f3406 	br	30b2c <__alt_data_end+0xffff172c>
   30e5c:	b5bfff84 	addi	r22,r22,-2
   30e60:	1445883a 	add	r2,r2,r17
   30e64:	003edb06 	br	309d4 <__alt_data_end+0xffff15d4>

00030e68 <__umoddi3>:
   30e68:	defff404 	addi	sp,sp,-48
   30e6c:	df000a15 	stw	fp,40(sp)
   30e70:	dc400315 	stw	r17,12(sp)
   30e74:	dc000215 	stw	r16,8(sp)
   30e78:	dfc00b15 	stw	ra,44(sp)
   30e7c:	ddc00915 	stw	r23,36(sp)
   30e80:	dd800815 	stw	r22,32(sp)
   30e84:	dd400715 	stw	r21,28(sp)
   30e88:	dd000615 	stw	r20,24(sp)
   30e8c:	dcc00515 	stw	r19,20(sp)
   30e90:	dc800415 	stw	r18,16(sp)
   30e94:	2021883a 	mov	r16,r4
   30e98:	2823883a 	mov	r17,r5
   30e9c:	2839883a 	mov	fp,r5
   30ea0:	38003c1e 	bne	r7,zero,30f94 <__umoddi3+0x12c>
   30ea4:	3027883a 	mov	r19,r6
   30ea8:	2029883a 	mov	r20,r4
   30eac:	2980512e 	bgeu	r5,r6,30ff4 <__umoddi3+0x18c>
   30eb0:	00bfffd4 	movui	r2,65535
   30eb4:	11809a36 	bltu	r2,r6,31120 <__umoddi3+0x2b8>
   30eb8:	01003fc4 	movi	r4,255
   30ebc:	2189803a 	cmpltu	r4,r4,r6
   30ec0:	200890fa 	slli	r4,r4,3
   30ec4:	3104d83a 	srl	r2,r6,r4
   30ec8:	00c000f4 	movhi	r3,3
   30ecc:	18d230c4 	addi	r3,r3,18627
   30ed0:	1885883a 	add	r2,r3,r2
   30ed4:	10c00003 	ldbu	r3,0(r2)
   30ed8:	00800804 	movi	r2,32
   30edc:	1909883a 	add	r4,r3,r4
   30ee0:	1125c83a 	sub	r18,r2,r4
   30ee4:	90000526 	beq	r18,zero,30efc <__umoddi3+0x94>
   30ee8:	8ca2983a 	sll	r17,r17,r18
   30eec:	8108d83a 	srl	r4,r16,r4
   30ef0:	34a6983a 	sll	r19,r6,r18
   30ef4:	84a8983a 	sll	r20,r16,r18
   30ef8:	2478b03a 	or	fp,r4,r17
   30efc:	982ed43a 	srli	r23,r19,16
   30f00:	e009883a 	mov	r4,fp
   30f04:	9dbfffcc 	andi	r22,r19,65535
   30f08:	b80b883a 	mov	r5,r23
   30f0c:	00239840 	call	23984 <__umodsi3>
   30f10:	e009883a 	mov	r4,fp
   30f14:	b80b883a 	mov	r5,r23
   30f18:	102b883a 	mov	r21,r2
   30f1c:	00239200 	call	23920 <__udivsi3>
   30f20:	a806943a 	slli	r3,r21,16
   30f24:	a008d43a 	srli	r4,r20,16
   30f28:	b085383a 	mul	r2,r22,r2
   30f2c:	20c8b03a 	or	r4,r4,r3
   30f30:	2080032e 	bgeu	r4,r2,30f40 <__umoddi3+0xd8>
   30f34:	24c9883a 	add	r4,r4,r19
   30f38:	24c00136 	bltu	r4,r19,30f40 <__umoddi3+0xd8>
   30f3c:	20811036 	bltu	r4,r2,31380 <__umoddi3+0x518>
   30f40:	20abc83a 	sub	r21,r4,r2
   30f44:	b80b883a 	mov	r5,r23
   30f48:	a809883a 	mov	r4,r21
   30f4c:	00239840 	call	23984 <__umodsi3>
   30f50:	1023883a 	mov	r17,r2
   30f54:	b80b883a 	mov	r5,r23
   30f58:	a809883a 	mov	r4,r21
   30f5c:	00239200 	call	23920 <__udivsi3>
   30f60:	8822943a 	slli	r17,r17,16
   30f64:	b085383a 	mul	r2,r22,r2
   30f68:	a0ffffcc 	andi	r3,r20,65535
   30f6c:	1c46b03a 	or	r3,r3,r17
   30f70:	1880042e 	bgeu	r3,r2,30f84 <__umoddi3+0x11c>
   30f74:	1cc7883a 	add	r3,r3,r19
   30f78:	1cc00236 	bltu	r3,r19,30f84 <__umoddi3+0x11c>
   30f7c:	1880012e 	bgeu	r3,r2,30f84 <__umoddi3+0x11c>
   30f80:	1cc7883a 	add	r3,r3,r19
   30f84:	1885c83a 	sub	r2,r3,r2
   30f88:	1484d83a 	srl	r2,r2,r18
   30f8c:	0007883a 	mov	r3,zero
   30f90:	00004f06 	br	310d0 <__umoddi3+0x268>
   30f94:	29c04c36 	bltu	r5,r7,310c8 <__umoddi3+0x260>
   30f98:	00bfffd4 	movui	r2,65535
   30f9c:	11c0582e 	bgeu	r2,r7,31100 <__umoddi3+0x298>
   30fa0:	00804034 	movhi	r2,256
   30fa4:	10bfffc4 	addi	r2,r2,-1
   30fa8:	11c0e736 	bltu	r2,r7,31348 <__umoddi3+0x4e0>
   30fac:	01000404 	movi	r4,16
   30fb0:	3904d83a 	srl	r2,r7,r4
   30fb4:	00c000f4 	movhi	r3,3
   30fb8:	18d230c4 	addi	r3,r3,18627
   30fbc:	1885883a 	add	r2,r3,r2
   30fc0:	14c00003 	ldbu	r19,0(r2)
   30fc4:	00c00804 	movi	r3,32
   30fc8:	9927883a 	add	r19,r19,r4
   30fcc:	1ce9c83a 	sub	r20,r3,r19
   30fd0:	a000581e 	bne	r20,zero,31134 <__umoddi3+0x2cc>
   30fd4:	3c400136 	bltu	r7,r17,30fdc <__umoddi3+0x174>
   30fd8:	8180eb36 	bltu	r16,r6,31388 <__umoddi3+0x520>
   30fdc:	8185c83a 	sub	r2,r16,r6
   30fe0:	89e3c83a 	sub	r17,r17,r7
   30fe4:	8089803a 	cmpltu	r4,r16,r2
   30fe8:	8939c83a 	sub	fp,r17,r4
   30fec:	e007883a 	mov	r3,fp
   30ff0:	00003706 	br	310d0 <__umoddi3+0x268>
   30ff4:	3000041e 	bne	r6,zero,31008 <__umoddi3+0x1a0>
   30ff8:	000b883a 	mov	r5,zero
   30ffc:	01000044 	movi	r4,1
   31000:	00239200 	call	23920 <__udivsi3>
   31004:	1027883a 	mov	r19,r2
   31008:	00bfffd4 	movui	r2,65535
   3100c:	14c0402e 	bgeu	r2,r19,31110 <__umoddi3+0x2a8>
   31010:	00804034 	movhi	r2,256
   31014:	10bfffc4 	addi	r2,r2,-1
   31018:	14c0cd36 	bltu	r2,r19,31350 <__umoddi3+0x4e8>
   3101c:	00800404 	movi	r2,16
   31020:	9886d83a 	srl	r3,r19,r2
   31024:	010000f4 	movhi	r4,3
   31028:	211230c4 	addi	r4,r4,18627
   3102c:	20c7883a 	add	r3,r4,r3
   31030:	18c00003 	ldbu	r3,0(r3)
   31034:	1887883a 	add	r3,r3,r2
   31038:	00800804 	movi	r2,32
   3103c:	10e5c83a 	sub	r18,r2,r3
   31040:	9000901e 	bne	r18,zero,31284 <__umoddi3+0x41c>
   31044:	982cd43a 	srli	r22,r19,16
   31048:	8ce3c83a 	sub	r17,r17,r19
   3104c:	9d7fffcc 	andi	r21,r19,65535
   31050:	b00b883a 	mov	r5,r22
   31054:	8809883a 	mov	r4,r17
   31058:	00239840 	call	23984 <__umodsi3>
   3105c:	8809883a 	mov	r4,r17
   31060:	b00b883a 	mov	r5,r22
   31064:	1021883a 	mov	r16,r2
   31068:	00239200 	call	23920 <__udivsi3>
   3106c:	8006943a 	slli	r3,r16,16
   31070:	a008d43a 	srli	r4,r20,16
   31074:	1545383a 	mul	r2,r2,r21
   31078:	20c8b03a 	or	r4,r4,r3
   3107c:	2080042e 	bgeu	r4,r2,31090 <__umoddi3+0x228>
   31080:	24c9883a 	add	r4,r4,r19
   31084:	24c00236 	bltu	r4,r19,31090 <__umoddi3+0x228>
   31088:	2080012e 	bgeu	r4,r2,31090 <__umoddi3+0x228>
   3108c:	24c9883a 	add	r4,r4,r19
   31090:	20a1c83a 	sub	r16,r4,r2
   31094:	b00b883a 	mov	r5,r22
   31098:	8009883a 	mov	r4,r16
   3109c:	00239840 	call	23984 <__umodsi3>
   310a0:	1023883a 	mov	r17,r2
   310a4:	b00b883a 	mov	r5,r22
   310a8:	8009883a 	mov	r4,r16
   310ac:	00239200 	call	23920 <__udivsi3>
   310b0:	8822943a 	slli	r17,r17,16
   310b4:	1545383a 	mul	r2,r2,r21
   310b8:	a53fffcc 	andi	r20,r20,65535
   310bc:	a446b03a 	or	r3,r20,r17
   310c0:	18bfb02e 	bgeu	r3,r2,30f84 <__alt_data_end+0xffff1b84>
   310c4:	003fab06 	br	30f74 <__alt_data_end+0xffff1b74>
   310c8:	2005883a 	mov	r2,r4
   310cc:	2807883a 	mov	r3,r5
   310d0:	dfc00b17 	ldw	ra,44(sp)
   310d4:	df000a17 	ldw	fp,40(sp)
   310d8:	ddc00917 	ldw	r23,36(sp)
   310dc:	dd800817 	ldw	r22,32(sp)
   310e0:	dd400717 	ldw	r21,28(sp)
   310e4:	dd000617 	ldw	r20,24(sp)
   310e8:	dcc00517 	ldw	r19,20(sp)
   310ec:	dc800417 	ldw	r18,16(sp)
   310f0:	dc400317 	ldw	r17,12(sp)
   310f4:	dc000217 	ldw	r16,8(sp)
   310f8:	dec00c04 	addi	sp,sp,48
   310fc:	f800283a 	ret
   31100:	04c03fc4 	movi	r19,255
   31104:	99c9803a 	cmpltu	r4,r19,r7
   31108:	200890fa 	slli	r4,r4,3
   3110c:	003fa806 	br	30fb0 <__alt_data_end+0xffff1bb0>
   31110:	00803fc4 	movi	r2,255
   31114:	14c5803a 	cmpltu	r2,r2,r19
   31118:	100490fa 	slli	r2,r2,3
   3111c:	003fc006 	br	31020 <__alt_data_end+0xffff1c20>
   31120:	00804034 	movhi	r2,256
   31124:	10bfffc4 	addi	r2,r2,-1
   31128:	11808b36 	bltu	r2,r6,31358 <__umoddi3+0x4f0>
   3112c:	01000404 	movi	r4,16
   31130:	003f6406 	br	30ec4 <__alt_data_end+0xffff1ac4>
   31134:	34c4d83a 	srl	r2,r6,r19
   31138:	3d0e983a 	sll	r7,r7,r20
   3113c:	8cf8d83a 	srl	fp,r17,r19
   31140:	8d10983a 	sll	r8,r17,r20
   31144:	38aab03a 	or	r21,r7,r2
   31148:	a82cd43a 	srli	r22,r21,16
   3114c:	84e2d83a 	srl	r17,r16,r19
   31150:	e009883a 	mov	r4,fp
   31154:	b00b883a 	mov	r5,r22
   31158:	8a22b03a 	or	r17,r17,r8
   3115c:	3524983a 	sll	r18,r6,r20
   31160:	00239840 	call	23984 <__umodsi3>
   31164:	e009883a 	mov	r4,fp
   31168:	b00b883a 	mov	r5,r22
   3116c:	102f883a 	mov	r23,r2
   31170:	00239200 	call	23920 <__udivsi3>
   31174:	100d883a 	mov	r6,r2
   31178:	b808943a 	slli	r4,r23,16
   3117c:	aa3fffcc 	andi	r8,r21,65535
   31180:	8804d43a 	srli	r2,r17,16
   31184:	41af383a 	mul	r23,r8,r6
   31188:	8520983a 	sll	r16,r16,r20
   3118c:	1104b03a 	or	r2,r2,r4
   31190:	15c0042e 	bgeu	r2,r23,311a4 <__umoddi3+0x33c>
   31194:	1545883a 	add	r2,r2,r21
   31198:	30ffffc4 	addi	r3,r6,-1
   3119c:	1540742e 	bgeu	r2,r21,31370 <__umoddi3+0x508>
   311a0:	180d883a 	mov	r6,r3
   311a4:	15efc83a 	sub	r23,r2,r23
   311a8:	b00b883a 	mov	r5,r22
   311ac:	b809883a 	mov	r4,r23
   311b0:	d9800115 	stw	r6,4(sp)
   311b4:	da000015 	stw	r8,0(sp)
   311b8:	00239840 	call	23984 <__umodsi3>
   311bc:	b00b883a 	mov	r5,r22
   311c0:	b809883a 	mov	r4,r23
   311c4:	1039883a 	mov	fp,r2
   311c8:	00239200 	call	23920 <__udivsi3>
   311cc:	da000017 	ldw	r8,0(sp)
   311d0:	e038943a 	slli	fp,fp,16
   311d4:	100b883a 	mov	r5,r2
   311d8:	4089383a 	mul	r4,r8,r2
   311dc:	8a3fffcc 	andi	r8,r17,65535
   311e0:	4710b03a 	or	r8,r8,fp
   311e4:	d9800117 	ldw	r6,4(sp)
   311e8:	4100042e 	bgeu	r8,r4,311fc <__umoddi3+0x394>
   311ec:	4551883a 	add	r8,r8,r21
   311f0:	10bfffc4 	addi	r2,r2,-1
   311f4:	45405a2e 	bgeu	r8,r21,31360 <__umoddi3+0x4f8>
   311f8:	100b883a 	mov	r5,r2
   311fc:	300c943a 	slli	r6,r6,16
   31200:	91ffffcc 	andi	r7,r18,65535
   31204:	9004d43a 	srli	r2,r18,16
   31208:	314cb03a 	or	r6,r6,r5
   3120c:	317fffcc 	andi	r5,r6,65535
   31210:	300cd43a 	srli	r6,r6,16
   31214:	29d3383a 	mul	r9,r5,r7
   31218:	288b383a 	mul	r5,r5,r2
   3121c:	31cf383a 	mul	r7,r6,r7
   31220:	4806d43a 	srli	r3,r9,16
   31224:	4111c83a 	sub	r8,r8,r4
   31228:	29cb883a 	add	r5,r5,r7
   3122c:	194b883a 	add	r5,r3,r5
   31230:	3085383a 	mul	r2,r6,r2
   31234:	29c0022e 	bgeu	r5,r7,31240 <__umoddi3+0x3d8>
   31238:	00c00074 	movhi	r3,1
   3123c:	10c5883a 	add	r2,r2,r3
   31240:	2808d43a 	srli	r4,r5,16
   31244:	280a943a 	slli	r5,r5,16
   31248:	4a7fffcc 	andi	r9,r9,65535
   3124c:	2085883a 	add	r2,r4,r2
   31250:	2a4b883a 	add	r5,r5,r9
   31254:	40803636 	bltu	r8,r2,31330 <__umoddi3+0x4c8>
   31258:	40804d26 	beq	r8,r2,31390 <__umoddi3+0x528>
   3125c:	4089c83a 	sub	r4,r8,r2
   31260:	280f883a 	mov	r7,r5
   31264:	81cfc83a 	sub	r7,r16,r7
   31268:	81c7803a 	cmpltu	r3,r16,r7
   3126c:	20c7c83a 	sub	r3,r4,r3
   31270:	1cc4983a 	sll	r2,r3,r19
   31274:	3d0ed83a 	srl	r7,r7,r20
   31278:	1d06d83a 	srl	r3,r3,r20
   3127c:	11c4b03a 	or	r2,r2,r7
   31280:	003f9306 	br	310d0 <__alt_data_end+0xffff1cd0>
   31284:	9ca6983a 	sll	r19,r19,r18
   31288:	88e8d83a 	srl	r20,r17,r3
   3128c:	80c4d83a 	srl	r2,r16,r3
   31290:	982cd43a 	srli	r22,r19,16
   31294:	8ca2983a 	sll	r17,r17,r18
   31298:	a009883a 	mov	r4,r20
   3129c:	b00b883a 	mov	r5,r22
   312a0:	1478b03a 	or	fp,r2,r17
   312a4:	00239840 	call	23984 <__umodsi3>
   312a8:	a009883a 	mov	r4,r20
   312ac:	b00b883a 	mov	r5,r22
   312b0:	1023883a 	mov	r17,r2
   312b4:	00239200 	call	23920 <__udivsi3>
   312b8:	9d7fffcc 	andi	r21,r19,65535
   312bc:	880a943a 	slli	r5,r17,16
   312c0:	e008d43a 	srli	r4,fp,16
   312c4:	a885383a 	mul	r2,r21,r2
   312c8:	84a8983a 	sll	r20,r16,r18
   312cc:	2148b03a 	or	r4,r4,r5
   312d0:	2080042e 	bgeu	r4,r2,312e4 <__umoddi3+0x47c>
   312d4:	24c9883a 	add	r4,r4,r19
   312d8:	24c00236 	bltu	r4,r19,312e4 <__umoddi3+0x47c>
   312dc:	2080012e 	bgeu	r4,r2,312e4 <__umoddi3+0x47c>
   312e0:	24c9883a 	add	r4,r4,r19
   312e4:	20a3c83a 	sub	r17,r4,r2
   312e8:	b00b883a 	mov	r5,r22
   312ec:	8809883a 	mov	r4,r17
   312f0:	00239840 	call	23984 <__umodsi3>
   312f4:	102f883a 	mov	r23,r2
   312f8:	8809883a 	mov	r4,r17
   312fc:	b00b883a 	mov	r5,r22
   31300:	00239200 	call	23920 <__udivsi3>
   31304:	b82e943a 	slli	r23,r23,16
   31308:	a885383a 	mul	r2,r21,r2
   3130c:	e13fffcc 	andi	r4,fp,65535
   31310:	25c8b03a 	or	r4,r4,r23
   31314:	2080042e 	bgeu	r4,r2,31328 <__umoddi3+0x4c0>
   31318:	24c9883a 	add	r4,r4,r19
   3131c:	24c00236 	bltu	r4,r19,31328 <__umoddi3+0x4c0>
   31320:	2080012e 	bgeu	r4,r2,31328 <__umoddi3+0x4c0>
   31324:	24c9883a 	add	r4,r4,r19
   31328:	20a3c83a 	sub	r17,r4,r2
   3132c:	003f4806 	br	31050 <__alt_data_end+0xffff1c50>
   31330:	2c8fc83a 	sub	r7,r5,r18
   31334:	1545c83a 	sub	r2,r2,r21
   31338:	29cb803a 	cmpltu	r5,r5,r7
   3133c:	1145c83a 	sub	r2,r2,r5
   31340:	4089c83a 	sub	r4,r8,r2
   31344:	003fc706 	br	31264 <__alt_data_end+0xffff1e64>
   31348:	01000604 	movi	r4,24
   3134c:	003f1806 	br	30fb0 <__alt_data_end+0xffff1bb0>
   31350:	00800604 	movi	r2,24
   31354:	003f3206 	br	31020 <__alt_data_end+0xffff1c20>
   31358:	01000604 	movi	r4,24
   3135c:	003ed906 	br	30ec4 <__alt_data_end+0xffff1ac4>
   31360:	413fa52e 	bgeu	r8,r4,311f8 <__alt_data_end+0xffff1df8>
   31364:	297fff84 	addi	r5,r5,-2
   31368:	4551883a 	add	r8,r8,r21
   3136c:	003fa306 	br	311fc <__alt_data_end+0xffff1dfc>
   31370:	15ff8b2e 	bgeu	r2,r23,311a0 <__alt_data_end+0xffff1da0>
   31374:	31bfff84 	addi	r6,r6,-2
   31378:	1545883a 	add	r2,r2,r21
   3137c:	003f8906 	br	311a4 <__alt_data_end+0xffff1da4>
   31380:	24c9883a 	add	r4,r4,r19
   31384:	003eee06 	br	30f40 <__alt_data_end+0xffff1b40>
   31388:	8005883a 	mov	r2,r16
   3138c:	003f1706 	br	30fec <__alt_data_end+0xffff1bec>
   31390:	817fe736 	bltu	r16,r5,31330 <__alt_data_end+0xffff1f30>
   31394:	280f883a 	mov	r7,r5
   31398:	0009883a 	mov	r4,zero
   3139c:	003fb106 	br	31264 <__alt_data_end+0xffff1e64>

000313a0 <__eqdf2>:
   313a0:	2804d53a 	srli	r2,r5,20
   313a4:	3806d53a 	srli	r3,r7,20
   313a8:	02000434 	movhi	r8,16
   313ac:	423fffc4 	addi	r8,r8,-1
   313b0:	1081ffcc 	andi	r2,r2,2047
   313b4:	0281ffc4 	movi	r10,2047
   313b8:	2a12703a 	and	r9,r5,r8
   313bc:	18c1ffcc 	andi	r3,r3,2047
   313c0:	3a10703a 	and	r8,r7,r8
   313c4:	280ad7fa 	srli	r5,r5,31
   313c8:	380ed7fa 	srli	r7,r7,31
   313cc:	12801026 	beq	r2,r10,31410 <__eqdf2+0x70>
   313d0:	0281ffc4 	movi	r10,2047
   313d4:	1a800a26 	beq	r3,r10,31400 <__eqdf2+0x60>
   313d8:	10c00226 	beq	r2,r3,313e4 <__eqdf2+0x44>
   313dc:	00800044 	movi	r2,1
   313e0:	f800283a 	ret
   313e4:	4a3ffd1e 	bne	r9,r8,313dc <__alt_data_end+0xffff1fdc>
   313e8:	21bffc1e 	bne	r4,r6,313dc <__alt_data_end+0xffff1fdc>
   313ec:	29c00c26 	beq	r5,r7,31420 <__eqdf2+0x80>
   313f0:	103ffa1e 	bne	r2,zero,313dc <__alt_data_end+0xffff1fdc>
   313f4:	2244b03a 	or	r2,r4,r9
   313f8:	1004c03a 	cmpne	r2,r2,zero
   313fc:	f800283a 	ret
   31400:	3214b03a 	or	r10,r6,r8
   31404:	503ff426 	beq	r10,zero,313d8 <__alt_data_end+0xffff1fd8>
   31408:	00800044 	movi	r2,1
   3140c:	f800283a 	ret
   31410:	2254b03a 	or	r10,r4,r9
   31414:	503fee26 	beq	r10,zero,313d0 <__alt_data_end+0xffff1fd0>
   31418:	00800044 	movi	r2,1
   3141c:	f800283a 	ret
   31420:	0005883a 	mov	r2,zero
   31424:	f800283a 	ret

00031428 <__gedf2>:
   31428:	2804d53a 	srli	r2,r5,20
   3142c:	3806d53a 	srli	r3,r7,20
   31430:	02000434 	movhi	r8,16
   31434:	423fffc4 	addi	r8,r8,-1
   31438:	1081ffcc 	andi	r2,r2,2047
   3143c:	0241ffc4 	movi	r9,2047
   31440:	2a14703a 	and	r10,r5,r8
   31444:	18c1ffcc 	andi	r3,r3,2047
   31448:	3a10703a 	and	r8,r7,r8
   3144c:	280ad7fa 	srli	r5,r5,31
   31450:	380ed7fa 	srli	r7,r7,31
   31454:	12401d26 	beq	r2,r9,314cc <__gedf2+0xa4>
   31458:	0241ffc4 	movi	r9,2047
   3145c:	1a401226 	beq	r3,r9,314a8 <__gedf2+0x80>
   31460:	1000081e 	bne	r2,zero,31484 <__gedf2+0x5c>
   31464:	2296b03a 	or	r11,r4,r10
   31468:	5813003a 	cmpeq	r9,r11,zero
   3146c:	1800091e 	bne	r3,zero,31494 <__gedf2+0x6c>
   31470:	3218b03a 	or	r12,r6,r8
   31474:	6000071e 	bne	r12,zero,31494 <__gedf2+0x6c>
   31478:	0005883a 	mov	r2,zero
   3147c:	5800101e 	bne	r11,zero,314c0 <__gedf2+0x98>
   31480:	f800283a 	ret
   31484:	18000c1e 	bne	r3,zero,314b8 <__gedf2+0x90>
   31488:	3212b03a 	or	r9,r6,r8
   3148c:	48000c26 	beq	r9,zero,314c0 <__gedf2+0x98>
   31490:	0013883a 	mov	r9,zero
   31494:	39c03fcc 	andi	r7,r7,255
   31498:	48000826 	beq	r9,zero,314bc <__gedf2+0x94>
   3149c:	38000926 	beq	r7,zero,314c4 <__gedf2+0x9c>
   314a0:	00800044 	movi	r2,1
   314a4:	f800283a 	ret
   314a8:	3212b03a 	or	r9,r6,r8
   314ac:	483fec26 	beq	r9,zero,31460 <__alt_data_end+0xffff2060>
   314b0:	00bfff84 	movi	r2,-2
   314b4:	f800283a 	ret
   314b8:	39c03fcc 	andi	r7,r7,255
   314bc:	29c00626 	beq	r5,r7,314d8 <__gedf2+0xb0>
   314c0:	283ff726 	beq	r5,zero,314a0 <__alt_data_end+0xffff20a0>
   314c4:	00bfffc4 	movi	r2,-1
   314c8:	f800283a 	ret
   314cc:	2292b03a 	or	r9,r4,r10
   314d0:	483fe126 	beq	r9,zero,31458 <__alt_data_end+0xffff2058>
   314d4:	003ff606 	br	314b0 <__alt_data_end+0xffff20b0>
   314d8:	18bff916 	blt	r3,r2,314c0 <__alt_data_end+0xffff20c0>
   314dc:	10c00316 	blt	r2,r3,314ec <__gedf2+0xc4>
   314e0:	42bff736 	bltu	r8,r10,314c0 <__alt_data_end+0xffff20c0>
   314e4:	52000326 	beq	r10,r8,314f4 <__gedf2+0xcc>
   314e8:	5200042e 	bgeu	r10,r8,314fc <__gedf2+0xd4>
   314ec:	283fec1e 	bne	r5,zero,314a0 <__alt_data_end+0xffff20a0>
   314f0:	003ff406 	br	314c4 <__alt_data_end+0xffff20c4>
   314f4:	313ff236 	bltu	r6,r4,314c0 <__alt_data_end+0xffff20c0>
   314f8:	21bffc36 	bltu	r4,r6,314ec <__alt_data_end+0xffff20ec>
   314fc:	0005883a 	mov	r2,zero
   31500:	f800283a 	ret

00031504 <__ledf2>:
   31504:	2804d53a 	srli	r2,r5,20
   31508:	3810d53a 	srli	r8,r7,20
   3150c:	00c00434 	movhi	r3,16
   31510:	18ffffc4 	addi	r3,r3,-1
   31514:	1081ffcc 	andi	r2,r2,2047
   31518:	0241ffc4 	movi	r9,2047
   3151c:	28d4703a 	and	r10,r5,r3
   31520:	4201ffcc 	andi	r8,r8,2047
   31524:	38c6703a 	and	r3,r7,r3
   31528:	280ad7fa 	srli	r5,r5,31
   3152c:	380ed7fa 	srli	r7,r7,31
   31530:	12401f26 	beq	r2,r9,315b0 <__ledf2+0xac>
   31534:	0241ffc4 	movi	r9,2047
   31538:	42401426 	beq	r8,r9,3158c <__ledf2+0x88>
   3153c:	1000091e 	bne	r2,zero,31564 <__ledf2+0x60>
   31540:	2296b03a 	or	r11,r4,r10
   31544:	5813003a 	cmpeq	r9,r11,zero
   31548:	29403fcc 	andi	r5,r5,255
   3154c:	40000a1e 	bne	r8,zero,31578 <__ledf2+0x74>
   31550:	30d8b03a 	or	r12,r6,r3
   31554:	6000081e 	bne	r12,zero,31578 <__ledf2+0x74>
   31558:	0005883a 	mov	r2,zero
   3155c:	5800111e 	bne	r11,zero,315a4 <__ledf2+0xa0>
   31560:	f800283a 	ret
   31564:	29403fcc 	andi	r5,r5,255
   31568:	40000c1e 	bne	r8,zero,3159c <__ledf2+0x98>
   3156c:	30d2b03a 	or	r9,r6,r3
   31570:	48000c26 	beq	r9,zero,315a4 <__ledf2+0xa0>
   31574:	0013883a 	mov	r9,zero
   31578:	39c03fcc 	andi	r7,r7,255
   3157c:	48000826 	beq	r9,zero,315a0 <__ledf2+0x9c>
   31580:	38001126 	beq	r7,zero,315c8 <__ledf2+0xc4>
   31584:	00800044 	movi	r2,1
   31588:	f800283a 	ret
   3158c:	30d2b03a 	or	r9,r6,r3
   31590:	483fea26 	beq	r9,zero,3153c <__alt_data_end+0xffff213c>
   31594:	00800084 	movi	r2,2
   31598:	f800283a 	ret
   3159c:	39c03fcc 	andi	r7,r7,255
   315a0:	39400726 	beq	r7,r5,315c0 <__ledf2+0xbc>
   315a4:	2800081e 	bne	r5,zero,315c8 <__ledf2+0xc4>
   315a8:	00800044 	movi	r2,1
   315ac:	f800283a 	ret
   315b0:	2292b03a 	or	r9,r4,r10
   315b4:	483fdf26 	beq	r9,zero,31534 <__alt_data_end+0xffff2134>
   315b8:	00800084 	movi	r2,2
   315bc:	f800283a 	ret
   315c0:	4080030e 	bge	r8,r2,315d0 <__ledf2+0xcc>
   315c4:	383fef26 	beq	r7,zero,31584 <__alt_data_end+0xffff2184>
   315c8:	00bfffc4 	movi	r2,-1
   315cc:	f800283a 	ret
   315d0:	123feb16 	blt	r2,r8,31580 <__alt_data_end+0xffff2180>
   315d4:	1abff336 	bltu	r3,r10,315a4 <__alt_data_end+0xffff21a4>
   315d8:	50c00326 	beq	r10,r3,315e8 <__ledf2+0xe4>
   315dc:	50c0042e 	bgeu	r10,r3,315f0 <__ledf2+0xec>
   315e0:	283fe81e 	bne	r5,zero,31584 <__alt_data_end+0xffff2184>
   315e4:	003ff806 	br	315c8 <__alt_data_end+0xffff21c8>
   315e8:	313fee36 	bltu	r6,r4,315a4 <__alt_data_end+0xffff21a4>
   315ec:	21bffc36 	bltu	r4,r6,315e0 <__alt_data_end+0xffff21e0>
   315f0:	0005883a 	mov	r2,zero
   315f4:	f800283a 	ret

000315f8 <__fixdfsi>:
   315f8:	280cd53a 	srli	r6,r5,20
   315fc:	00c00434 	movhi	r3,16
   31600:	18ffffc4 	addi	r3,r3,-1
   31604:	3181ffcc 	andi	r6,r6,2047
   31608:	01c0ff84 	movi	r7,1022
   3160c:	28c6703a 	and	r3,r5,r3
   31610:	280ad7fa 	srli	r5,r5,31
   31614:	3980120e 	bge	r7,r6,31660 <__fixdfsi+0x68>
   31618:	00810744 	movi	r2,1053
   3161c:	11800c16 	blt	r2,r6,31650 <__fixdfsi+0x58>
   31620:	00810cc4 	movi	r2,1075
   31624:	1185c83a 	sub	r2,r2,r6
   31628:	01c007c4 	movi	r7,31
   3162c:	18c00434 	orhi	r3,r3,16
   31630:	38800d16 	blt	r7,r2,31668 <__fixdfsi+0x70>
   31634:	31befb44 	addi	r6,r6,-1043
   31638:	2084d83a 	srl	r2,r4,r2
   3163c:	1986983a 	sll	r3,r3,r6
   31640:	1884b03a 	or	r2,r3,r2
   31644:	28000726 	beq	r5,zero,31664 <__fixdfsi+0x6c>
   31648:	0085c83a 	sub	r2,zero,r2
   3164c:	f800283a 	ret
   31650:	00a00034 	movhi	r2,32768
   31654:	10bfffc4 	addi	r2,r2,-1
   31658:	2885883a 	add	r2,r5,r2
   3165c:	f800283a 	ret
   31660:	0005883a 	mov	r2,zero
   31664:	f800283a 	ret
   31668:	008104c4 	movi	r2,1043
   3166c:	1185c83a 	sub	r2,r2,r6
   31670:	1884d83a 	srl	r2,r3,r2
   31674:	003ff306 	br	31644 <__alt_data_end+0xffff2244>

00031678 <__floatsidf>:
   31678:	defffd04 	addi	sp,sp,-12
   3167c:	dfc00215 	stw	ra,8(sp)
   31680:	dc400115 	stw	r17,4(sp)
   31684:	dc000015 	stw	r16,0(sp)
   31688:	20002b26 	beq	r4,zero,31738 <__floatsidf+0xc0>
   3168c:	2023883a 	mov	r17,r4
   31690:	2020d7fa 	srli	r16,r4,31
   31694:	20002d16 	blt	r4,zero,3174c <__floatsidf+0xd4>
   31698:	8809883a 	mov	r4,r17
   3169c:	00272380 	call	27238 <__clzsi2>
   316a0:	01410784 	movi	r5,1054
   316a4:	288bc83a 	sub	r5,r5,r2
   316a8:	01010cc4 	movi	r4,1075
   316ac:	2149c83a 	sub	r4,r4,r5
   316b0:	00c007c4 	movi	r3,31
   316b4:	1900160e 	bge	r3,r4,31710 <__floatsidf+0x98>
   316b8:	00c104c4 	movi	r3,1043
   316bc:	1947c83a 	sub	r3,r3,r5
   316c0:	88c6983a 	sll	r3,r17,r3
   316c4:	00800434 	movhi	r2,16
   316c8:	10bfffc4 	addi	r2,r2,-1
   316cc:	1886703a 	and	r3,r3,r2
   316d0:	2941ffcc 	andi	r5,r5,2047
   316d4:	800d883a 	mov	r6,r16
   316d8:	0005883a 	mov	r2,zero
   316dc:	280a953a 	slli	r5,r5,20
   316e0:	31803fcc 	andi	r6,r6,255
   316e4:	01000434 	movhi	r4,16
   316e8:	300c97fa 	slli	r6,r6,31
   316ec:	213fffc4 	addi	r4,r4,-1
   316f0:	1906703a 	and	r3,r3,r4
   316f4:	1946b03a 	or	r3,r3,r5
   316f8:	1986b03a 	or	r3,r3,r6
   316fc:	dfc00217 	ldw	ra,8(sp)
   31700:	dc400117 	ldw	r17,4(sp)
   31704:	dc000017 	ldw	r16,0(sp)
   31708:	dec00304 	addi	sp,sp,12
   3170c:	f800283a 	ret
   31710:	00c002c4 	movi	r3,11
   31714:	1887c83a 	sub	r3,r3,r2
   31718:	88c6d83a 	srl	r3,r17,r3
   3171c:	8904983a 	sll	r2,r17,r4
   31720:	01000434 	movhi	r4,16
   31724:	213fffc4 	addi	r4,r4,-1
   31728:	2941ffcc 	andi	r5,r5,2047
   3172c:	1906703a 	and	r3,r3,r4
   31730:	800d883a 	mov	r6,r16
   31734:	003fe906 	br	316dc <__alt_data_end+0xffff22dc>
   31738:	000d883a 	mov	r6,zero
   3173c:	000b883a 	mov	r5,zero
   31740:	0007883a 	mov	r3,zero
   31744:	0005883a 	mov	r2,zero
   31748:	003fe406 	br	316dc <__alt_data_end+0xffff22dc>
   3174c:	0123c83a 	sub	r17,zero,r4
   31750:	003fd106 	br	31698 <__alt_data_end+0xffff2298>

00031754 <__floatunsidf>:
   31754:	defffe04 	addi	sp,sp,-8
   31758:	dc000015 	stw	r16,0(sp)
   3175c:	dfc00115 	stw	ra,4(sp)
   31760:	2021883a 	mov	r16,r4
   31764:	20002226 	beq	r4,zero,317f0 <__floatunsidf+0x9c>
   31768:	00272380 	call	27238 <__clzsi2>
   3176c:	01010784 	movi	r4,1054
   31770:	2089c83a 	sub	r4,r4,r2
   31774:	01810cc4 	movi	r6,1075
   31778:	310dc83a 	sub	r6,r6,r4
   3177c:	00c007c4 	movi	r3,31
   31780:	1980120e 	bge	r3,r6,317cc <__floatunsidf+0x78>
   31784:	00c104c4 	movi	r3,1043
   31788:	1907c83a 	sub	r3,r3,r4
   3178c:	80ca983a 	sll	r5,r16,r3
   31790:	00800434 	movhi	r2,16
   31794:	10bfffc4 	addi	r2,r2,-1
   31798:	2101ffcc 	andi	r4,r4,2047
   3179c:	0021883a 	mov	r16,zero
   317a0:	288a703a 	and	r5,r5,r2
   317a4:	2008953a 	slli	r4,r4,20
   317a8:	00c00434 	movhi	r3,16
   317ac:	18ffffc4 	addi	r3,r3,-1
   317b0:	28c6703a 	and	r3,r5,r3
   317b4:	8005883a 	mov	r2,r16
   317b8:	1906b03a 	or	r3,r3,r4
   317bc:	dfc00117 	ldw	ra,4(sp)
   317c0:	dc000017 	ldw	r16,0(sp)
   317c4:	dec00204 	addi	sp,sp,8
   317c8:	f800283a 	ret
   317cc:	00c002c4 	movi	r3,11
   317d0:	188bc83a 	sub	r5,r3,r2
   317d4:	814ad83a 	srl	r5,r16,r5
   317d8:	00c00434 	movhi	r3,16
   317dc:	18ffffc4 	addi	r3,r3,-1
   317e0:	81a0983a 	sll	r16,r16,r6
   317e4:	2101ffcc 	andi	r4,r4,2047
   317e8:	28ca703a 	and	r5,r5,r3
   317ec:	003fed06 	br	317a4 <__alt_data_end+0xffff23a4>
   317f0:	0009883a 	mov	r4,zero
   317f4:	000b883a 	mov	r5,zero
   317f8:	003fea06 	br	317a4 <__alt_data_end+0xffff23a4>

000317fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   317fc:	defffe04 	addi	sp,sp,-8
   31800:	dfc00115 	stw	ra,4(sp)
   31804:	df000015 	stw	fp,0(sp)
   31808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3180c:	d0a00c17 	ldw	r2,-32720(gp)
   31810:	10000326 	beq	r2,zero,31820 <alt_get_errno+0x24>
   31814:	d0a00c17 	ldw	r2,-32720(gp)
   31818:	103ee83a 	callr	r2
   3181c:	00000106 	br	31824 <alt_get_errno+0x28>
   31820:	d0a6d604 	addi	r2,gp,-25768
}
   31824:	e037883a 	mov	sp,fp
   31828:	dfc00117 	ldw	ra,4(sp)
   3182c:	df000017 	ldw	fp,0(sp)
   31830:	dec00204 	addi	sp,sp,8
   31834:	f800283a 	ret

00031838 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   31838:	defffb04 	addi	sp,sp,-20
   3183c:	dfc00415 	stw	ra,16(sp)
   31840:	df000315 	stw	fp,12(sp)
   31844:	df000304 	addi	fp,sp,12
   31848:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   3184c:	e0bfff17 	ldw	r2,-4(fp)
   31850:	10000616 	blt	r2,zero,3186c <close+0x34>
   31854:	e0bfff17 	ldw	r2,-4(fp)
   31858:	10c00324 	muli	r3,r2,12
   3185c:	008000f4 	movhi	r2,3
   31860:	10952204 	addi	r2,r2,21640
   31864:	1885883a 	add	r2,r3,r2
   31868:	00000106 	br	31870 <close+0x38>
   3186c:	0005883a 	mov	r2,zero
   31870:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   31874:	e0bffd17 	ldw	r2,-12(fp)
   31878:	10001926 	beq	r2,zero,318e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   3187c:	e0bffd17 	ldw	r2,-12(fp)
   31880:	10800017 	ldw	r2,0(r2)
   31884:	10800417 	ldw	r2,16(r2)
   31888:	10000626 	beq	r2,zero,318a4 <close+0x6c>
   3188c:	e0bffd17 	ldw	r2,-12(fp)
   31890:	10800017 	ldw	r2,0(r2)
   31894:	10800417 	ldw	r2,16(r2)
   31898:	e13ffd17 	ldw	r4,-12(fp)
   3189c:	103ee83a 	callr	r2
   318a0:	00000106 	br	318a8 <close+0x70>
   318a4:	0005883a 	mov	r2,zero
   318a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   318ac:	e13fff17 	ldw	r4,-4(fp)
   318b0:	0031ef80 	call	31ef8 <alt_release_fd>
    if (rval < 0)
   318b4:	e0bffe17 	ldw	r2,-8(fp)
   318b8:	1000070e 	bge	r2,zero,318d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   318bc:	00317fc0 	call	317fc <alt_get_errno>
   318c0:	1007883a 	mov	r3,r2
   318c4:	e0bffe17 	ldw	r2,-8(fp)
   318c8:	0085c83a 	sub	r2,zero,r2
   318cc:	18800015 	stw	r2,0(r3)
      return -1;
   318d0:	00bfffc4 	movi	r2,-1
   318d4:	00000706 	br	318f4 <close+0xbc>
    }
    return 0;
   318d8:	0005883a 	mov	r2,zero
   318dc:	00000506 	br	318f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   318e0:	00317fc0 	call	317fc <alt_get_errno>
   318e4:	1007883a 	mov	r3,r2
   318e8:	00801444 	movi	r2,81
   318ec:	18800015 	stw	r2,0(r3)
    return -1;
   318f0:	00bfffc4 	movi	r2,-1
  }
}
   318f4:	e037883a 	mov	sp,fp
   318f8:	dfc00117 	ldw	ra,4(sp)
   318fc:	df000017 	ldw	fp,0(sp)
   31900:	dec00204 	addi	sp,sp,8
   31904:	f800283a 	ret

00031908 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   31908:	defffc04 	addi	sp,sp,-16
   3190c:	df000315 	stw	fp,12(sp)
   31910:	df000304 	addi	fp,sp,12
   31914:	e13ffd15 	stw	r4,-12(fp)
   31918:	e17ffe15 	stw	r5,-8(fp)
   3191c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   31920:	e0bfff17 	ldw	r2,-4(fp)
}
   31924:	e037883a 	mov	sp,fp
   31928:	df000017 	ldw	fp,0(sp)
   3192c:	dec00104 	addi	sp,sp,4
   31930:	f800283a 	ret

00031934 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31934:	defffe04 	addi	sp,sp,-8
   31938:	dfc00115 	stw	ra,4(sp)
   3193c:	df000015 	stw	fp,0(sp)
   31940:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31944:	d0a00c17 	ldw	r2,-32720(gp)
   31948:	10000326 	beq	r2,zero,31958 <alt_get_errno+0x24>
   3194c:	d0a00c17 	ldw	r2,-32720(gp)
   31950:	103ee83a 	callr	r2
   31954:	00000106 	br	3195c <alt_get_errno+0x28>
   31958:	d0a6d604 	addi	r2,gp,-25768
}
   3195c:	e037883a 	mov	sp,fp
   31960:	dfc00117 	ldw	ra,4(sp)
   31964:	df000017 	ldw	fp,0(sp)
   31968:	dec00204 	addi	sp,sp,8
   3196c:	f800283a 	ret

00031970 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   31970:	defffb04 	addi	sp,sp,-20
   31974:	dfc00415 	stw	ra,16(sp)
   31978:	df000315 	stw	fp,12(sp)
   3197c:	df000304 	addi	fp,sp,12
   31980:	e13ffe15 	stw	r4,-8(fp)
   31984:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31988:	e0bffe17 	ldw	r2,-8(fp)
   3198c:	10000616 	blt	r2,zero,319a8 <fstat+0x38>
   31990:	e0bffe17 	ldw	r2,-8(fp)
   31994:	10c00324 	muli	r3,r2,12
   31998:	008000f4 	movhi	r2,3
   3199c:	10952204 	addi	r2,r2,21640
   319a0:	1885883a 	add	r2,r3,r2
   319a4:	00000106 	br	319ac <fstat+0x3c>
   319a8:	0005883a 	mov	r2,zero
   319ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   319b0:	e0bffd17 	ldw	r2,-12(fp)
   319b4:	10001026 	beq	r2,zero,319f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   319b8:	e0bffd17 	ldw	r2,-12(fp)
   319bc:	10800017 	ldw	r2,0(r2)
   319c0:	10800817 	ldw	r2,32(r2)
   319c4:	10000726 	beq	r2,zero,319e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   319c8:	e0bffd17 	ldw	r2,-12(fp)
   319cc:	10800017 	ldw	r2,0(r2)
   319d0:	10800817 	ldw	r2,32(r2)
   319d4:	e17fff17 	ldw	r5,-4(fp)
   319d8:	e13ffd17 	ldw	r4,-12(fp)
   319dc:	103ee83a 	callr	r2
   319e0:	00000a06 	br	31a0c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   319e4:	e0bfff17 	ldw	r2,-4(fp)
   319e8:	00c80004 	movi	r3,8192
   319ec:	10c00115 	stw	r3,4(r2)
      return 0;
   319f0:	0005883a 	mov	r2,zero
   319f4:	00000506 	br	31a0c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   319f8:	00319340 	call	31934 <alt_get_errno>
   319fc:	1007883a 	mov	r3,r2
   31a00:	00801444 	movi	r2,81
   31a04:	18800015 	stw	r2,0(r3)
    return -1;
   31a08:	00bfffc4 	movi	r2,-1
  }
}
   31a0c:	e037883a 	mov	sp,fp
   31a10:	dfc00117 	ldw	ra,4(sp)
   31a14:	df000017 	ldw	fp,0(sp)
   31a18:	dec00204 	addi	sp,sp,8
   31a1c:	f800283a 	ret

00031a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31a20:	defffe04 	addi	sp,sp,-8
   31a24:	dfc00115 	stw	ra,4(sp)
   31a28:	df000015 	stw	fp,0(sp)
   31a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31a30:	d0a00c17 	ldw	r2,-32720(gp)
   31a34:	10000326 	beq	r2,zero,31a44 <alt_get_errno+0x24>
   31a38:	d0a00c17 	ldw	r2,-32720(gp)
   31a3c:	103ee83a 	callr	r2
   31a40:	00000106 	br	31a48 <alt_get_errno+0x28>
   31a44:	d0a6d604 	addi	r2,gp,-25768
}
   31a48:	e037883a 	mov	sp,fp
   31a4c:	dfc00117 	ldw	ra,4(sp)
   31a50:	df000017 	ldw	fp,0(sp)
   31a54:	dec00204 	addi	sp,sp,8
   31a58:	f800283a 	ret

00031a5c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   31a5c:	deffed04 	addi	sp,sp,-76
   31a60:	dfc01215 	stw	ra,72(sp)
   31a64:	df001115 	stw	fp,68(sp)
   31a68:	df001104 	addi	fp,sp,68
   31a6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31a70:	e0bfff17 	ldw	r2,-4(fp)
   31a74:	10000616 	blt	r2,zero,31a90 <isatty+0x34>
   31a78:	e0bfff17 	ldw	r2,-4(fp)
   31a7c:	10c00324 	muli	r3,r2,12
   31a80:	008000f4 	movhi	r2,3
   31a84:	10952204 	addi	r2,r2,21640
   31a88:	1885883a 	add	r2,r3,r2
   31a8c:	00000106 	br	31a94 <isatty+0x38>
   31a90:	0005883a 	mov	r2,zero
   31a94:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   31a98:	e0bfef17 	ldw	r2,-68(fp)
   31a9c:	10000e26 	beq	r2,zero,31ad8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   31aa0:	e0bfef17 	ldw	r2,-68(fp)
   31aa4:	10800017 	ldw	r2,0(r2)
   31aa8:	10800817 	ldw	r2,32(r2)
   31aac:	1000021e 	bne	r2,zero,31ab8 <isatty+0x5c>
    {
      return 1;
   31ab0:	00800044 	movi	r2,1
   31ab4:	00000d06 	br	31aec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   31ab8:	e0bff004 	addi	r2,fp,-64
   31abc:	100b883a 	mov	r5,r2
   31ac0:	e13fff17 	ldw	r4,-4(fp)
   31ac4:	00319700 	call	31970 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   31ac8:	e0bff117 	ldw	r2,-60(fp)
   31acc:	10880020 	cmpeqi	r2,r2,8192
   31ad0:	10803fcc 	andi	r2,r2,255
   31ad4:	00000506 	br	31aec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   31ad8:	0031a200 	call	31a20 <alt_get_errno>
   31adc:	1007883a 	mov	r3,r2
   31ae0:	00801444 	movi	r2,81
   31ae4:	18800015 	stw	r2,0(r3)
    return 0;
   31ae8:	0005883a 	mov	r2,zero
  }
}
   31aec:	e037883a 	mov	sp,fp
   31af0:	dfc00117 	ldw	ra,4(sp)
   31af4:	df000017 	ldw	fp,0(sp)
   31af8:	dec00204 	addi	sp,sp,8
   31afc:	f800283a 	ret

00031b00 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   31b00:	defffc04 	addi	sp,sp,-16
   31b04:	df000315 	stw	fp,12(sp)
   31b08:	df000304 	addi	fp,sp,12
   31b0c:	e13ffd15 	stw	r4,-12(fp)
   31b10:	e17ffe15 	stw	r5,-8(fp)
   31b14:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   31b18:	e0fffe17 	ldw	r3,-8(fp)
   31b1c:	e0bffd17 	ldw	r2,-12(fp)
   31b20:	18800c26 	beq	r3,r2,31b54 <alt_load_section+0x54>
  {
    while( to != end )
   31b24:	00000806 	br	31b48 <alt_load_section+0x48>
    {
      *to++ = *from++;
   31b28:	e0bffe17 	ldw	r2,-8(fp)
   31b2c:	10c00104 	addi	r3,r2,4
   31b30:	e0fffe15 	stw	r3,-8(fp)
   31b34:	e0fffd17 	ldw	r3,-12(fp)
   31b38:	19000104 	addi	r4,r3,4
   31b3c:	e13ffd15 	stw	r4,-12(fp)
   31b40:	18c00017 	ldw	r3,0(r3)
   31b44:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   31b48:	e0fffe17 	ldw	r3,-8(fp)
   31b4c:	e0bfff17 	ldw	r2,-4(fp)
   31b50:	18bff51e 	bne	r3,r2,31b28 <__alt_data_end+0xffff2728>
    {
      *to++ = *from++;
    }
  }
}
   31b54:	0001883a 	nop
   31b58:	e037883a 	mov	sp,fp
   31b5c:	df000017 	ldw	fp,0(sp)
   31b60:	dec00104 	addi	sp,sp,4
   31b64:	f800283a 	ret

00031b68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   31b68:	defffe04 	addi	sp,sp,-8
   31b6c:	dfc00115 	stw	ra,4(sp)
   31b70:	df000015 	stw	fp,0(sp)
   31b74:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   31b78:	018000f4 	movhi	r6,3
   31b7c:	3199ab04 	addi	r6,r6,26284
   31b80:	014000f4 	movhi	r5,3
   31b84:	2952ef04 	addi	r5,r5,19388
   31b88:	010000f4 	movhi	r4,3
   31b8c:	2119ab04 	addi	r4,r4,26284
   31b90:	0031b000 	call	31b00 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   31b94:	018000b4 	movhi	r6,2
   31b98:	31809104 	addi	r6,r6,580
   31b9c:	014000b4 	movhi	r5,2
   31ba0:	29400804 	addi	r5,r5,32
   31ba4:	010000b4 	movhi	r4,2
   31ba8:	21000804 	addi	r4,r4,32
   31bac:	0031b000 	call	31b00 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   31bb0:	018000f4 	movhi	r6,3
   31bb4:	3192ef04 	addi	r6,r6,19388
   31bb8:	014000f4 	movhi	r5,3
   31bbc:	29504d04 	addi	r5,r5,16692
   31bc0:	010000f4 	movhi	r4,3
   31bc4:	21104d04 	addi	r4,r4,16692
   31bc8:	0031b000 	call	31b00 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   31bcc:	00331c40 	call	331c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   31bd0:	00333ac0 	call	333ac <alt_icache_flush_all>
}
   31bd4:	0001883a 	nop
   31bd8:	e037883a 	mov	sp,fp
   31bdc:	dfc00117 	ldw	ra,4(sp)
   31be0:	df000017 	ldw	fp,0(sp)
   31be4:	dec00204 	addi	sp,sp,8
   31be8:	f800283a 	ret

00031bec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31bec:	defffe04 	addi	sp,sp,-8
   31bf0:	dfc00115 	stw	ra,4(sp)
   31bf4:	df000015 	stw	fp,0(sp)
   31bf8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31bfc:	d0a00c17 	ldw	r2,-32720(gp)
   31c00:	10000326 	beq	r2,zero,31c10 <alt_get_errno+0x24>
   31c04:	d0a00c17 	ldw	r2,-32720(gp)
   31c08:	103ee83a 	callr	r2
   31c0c:	00000106 	br	31c14 <alt_get_errno+0x28>
   31c10:	d0a6d604 	addi	r2,gp,-25768
}
   31c14:	e037883a 	mov	sp,fp
   31c18:	dfc00117 	ldw	ra,4(sp)
   31c1c:	df000017 	ldw	fp,0(sp)
   31c20:	dec00204 	addi	sp,sp,8
   31c24:	f800283a 	ret

00031c28 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   31c28:	defff904 	addi	sp,sp,-28
   31c2c:	dfc00615 	stw	ra,24(sp)
   31c30:	df000515 	stw	fp,20(sp)
   31c34:	df000504 	addi	fp,sp,20
   31c38:	e13ffd15 	stw	r4,-12(fp)
   31c3c:	e17ffe15 	stw	r5,-8(fp)
   31c40:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   31c44:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31c48:	e0bffd17 	ldw	r2,-12(fp)
   31c4c:	10000616 	blt	r2,zero,31c68 <lseek+0x40>
   31c50:	e0bffd17 	ldw	r2,-12(fp)
   31c54:	10c00324 	muli	r3,r2,12
   31c58:	008000f4 	movhi	r2,3
   31c5c:	10952204 	addi	r2,r2,21640
   31c60:	1885883a 	add	r2,r3,r2
   31c64:	00000106 	br	31c6c <lseek+0x44>
   31c68:	0005883a 	mov	r2,zero
   31c6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   31c70:	e0bffc17 	ldw	r2,-16(fp)
   31c74:	10001026 	beq	r2,zero,31cb8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   31c78:	e0bffc17 	ldw	r2,-16(fp)
   31c7c:	10800017 	ldw	r2,0(r2)
   31c80:	10800717 	ldw	r2,28(r2)
   31c84:	10000926 	beq	r2,zero,31cac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   31c88:	e0bffc17 	ldw	r2,-16(fp)
   31c8c:	10800017 	ldw	r2,0(r2)
   31c90:	10800717 	ldw	r2,28(r2)
   31c94:	e1bfff17 	ldw	r6,-4(fp)
   31c98:	e17ffe17 	ldw	r5,-8(fp)
   31c9c:	e13ffc17 	ldw	r4,-16(fp)
   31ca0:	103ee83a 	callr	r2
   31ca4:	e0bffb15 	stw	r2,-20(fp)
   31ca8:	00000506 	br	31cc0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   31cac:	00bfde84 	movi	r2,-134
   31cb0:	e0bffb15 	stw	r2,-20(fp)
   31cb4:	00000206 	br	31cc0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   31cb8:	00bfebc4 	movi	r2,-81
   31cbc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   31cc0:	e0bffb17 	ldw	r2,-20(fp)
   31cc4:	1000070e 	bge	r2,zero,31ce4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   31cc8:	0031bec0 	call	31bec <alt_get_errno>
   31ccc:	1007883a 	mov	r3,r2
   31cd0:	e0bffb17 	ldw	r2,-20(fp)
   31cd4:	0085c83a 	sub	r2,zero,r2
   31cd8:	18800015 	stw	r2,0(r3)
    rc = -1;
   31cdc:	00bfffc4 	movi	r2,-1
   31ce0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   31ce4:	e0bffb17 	ldw	r2,-20(fp)
}
   31ce8:	e037883a 	mov	sp,fp
   31cec:	dfc00117 	ldw	ra,4(sp)
   31cf0:	df000017 	ldw	fp,0(sp)
   31cf4:	dec00204 	addi	sp,sp,8
   31cf8:	f800283a 	ret

00031cfc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   31cfc:	defffd04 	addi	sp,sp,-12
   31d00:	dfc00215 	stw	ra,8(sp)
   31d04:	df000115 	stw	fp,4(sp)
   31d08:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   31d0c:	0009883a 	mov	r4,zero
   31d10:	00323480 	call	32348 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   31d14:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   31d18:	00323800 	call	32380 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   31d1c:	018000f4 	movhi	r6,3
   31d20:	3192e704 	addi	r6,r6,19356
   31d24:	014000f4 	movhi	r5,3
   31d28:	2952e704 	addi	r5,r5,19356
   31d2c:	010000f4 	movhi	r4,3
   31d30:	2112e704 	addi	r4,r4,19356
   31d34:	00337440 	call	33744 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   31d38:	00332ec0 	call	332ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   31d3c:	010000f4 	movhi	r4,3
   31d40:	210cd304 	addi	r4,r4,13132
   31d44:	0033da00 	call	33da0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   31d48:	d0a6d717 	ldw	r2,-25764(gp)
   31d4c:	d0e6d817 	ldw	r3,-25760(gp)
   31d50:	d126d917 	ldw	r4,-25756(gp)
   31d54:	200d883a 	mov	r6,r4
   31d58:	180b883a 	mov	r5,r3
   31d5c:	1009883a 	mov	r4,r2
   31d60:	0021cc00 	call	21cc0 <main>
   31d64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   31d68:	01000044 	movi	r4,1
   31d6c:	00318380 	call	31838 <close>
  exit (result);
   31d70:	e13fff17 	ldw	r4,-4(fp)
   31d74:	0033db40 	call	33db4 <exit>

00031d78 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   31d78:	defffe04 	addi	sp,sp,-8
   31d7c:	df000115 	stw	fp,4(sp)
   31d80:	df000104 	addi	fp,sp,4
   31d84:	e13fff15 	stw	r4,-4(fp)
}
   31d88:	0001883a 	nop
   31d8c:	e037883a 	mov	sp,fp
   31d90:	df000017 	ldw	fp,0(sp)
   31d94:	dec00104 	addi	sp,sp,4
   31d98:	f800283a 	ret

00031d9c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   31d9c:	defffe04 	addi	sp,sp,-8
   31da0:	df000115 	stw	fp,4(sp)
   31da4:	df000104 	addi	fp,sp,4
   31da8:	e13fff15 	stw	r4,-4(fp)
}
   31dac:	0001883a 	nop
   31db0:	e037883a 	mov	sp,fp
   31db4:	df000017 	ldw	fp,0(sp)
   31db8:	dec00104 	addi	sp,sp,4
   31dbc:	f800283a 	ret

00031dc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   31dc0:	defffe04 	addi	sp,sp,-8
   31dc4:	dfc00115 	stw	ra,4(sp)
   31dc8:	df000015 	stw	fp,0(sp)
   31dcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   31dd0:	d0a00c17 	ldw	r2,-32720(gp)
   31dd4:	10000326 	beq	r2,zero,31de4 <alt_get_errno+0x24>
   31dd8:	d0a00c17 	ldw	r2,-32720(gp)
   31ddc:	103ee83a 	callr	r2
   31de0:	00000106 	br	31de8 <alt_get_errno+0x28>
   31de4:	d0a6d604 	addi	r2,gp,-25768
}
   31de8:	e037883a 	mov	sp,fp
   31dec:	dfc00117 	ldw	ra,4(sp)
   31df0:	df000017 	ldw	fp,0(sp)
   31df4:	dec00204 	addi	sp,sp,8
   31df8:	f800283a 	ret

00031dfc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   31dfc:	defff904 	addi	sp,sp,-28
   31e00:	dfc00615 	stw	ra,24(sp)
   31e04:	df000515 	stw	fp,20(sp)
   31e08:	df000504 	addi	fp,sp,20
   31e0c:	e13ffd15 	stw	r4,-12(fp)
   31e10:	e17ffe15 	stw	r5,-8(fp)
   31e14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   31e18:	e0bffd17 	ldw	r2,-12(fp)
   31e1c:	10000616 	blt	r2,zero,31e38 <read+0x3c>
   31e20:	e0bffd17 	ldw	r2,-12(fp)
   31e24:	10c00324 	muli	r3,r2,12
   31e28:	008000f4 	movhi	r2,3
   31e2c:	10952204 	addi	r2,r2,21640
   31e30:	1885883a 	add	r2,r3,r2
   31e34:	00000106 	br	31e3c <read+0x40>
   31e38:	0005883a 	mov	r2,zero
   31e3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   31e40:	e0bffb17 	ldw	r2,-20(fp)
   31e44:	10002226 	beq	r2,zero,31ed0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31e48:	e0bffb17 	ldw	r2,-20(fp)
   31e4c:	10800217 	ldw	r2,8(r2)
   31e50:	108000cc 	andi	r2,r2,3
   31e54:	10800060 	cmpeqi	r2,r2,1
   31e58:	1000181e 	bne	r2,zero,31ebc <read+0xc0>
        (fd->dev->read))
   31e5c:	e0bffb17 	ldw	r2,-20(fp)
   31e60:	10800017 	ldw	r2,0(r2)
   31e64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   31e68:	10001426 	beq	r2,zero,31ebc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   31e6c:	e0bffb17 	ldw	r2,-20(fp)
   31e70:	10800017 	ldw	r2,0(r2)
   31e74:	10800517 	ldw	r2,20(r2)
   31e78:	e0ffff17 	ldw	r3,-4(fp)
   31e7c:	180d883a 	mov	r6,r3
   31e80:	e17ffe17 	ldw	r5,-8(fp)
   31e84:	e13ffb17 	ldw	r4,-20(fp)
   31e88:	103ee83a 	callr	r2
   31e8c:	e0bffc15 	stw	r2,-16(fp)
   31e90:	e0bffc17 	ldw	r2,-16(fp)
   31e94:	1000070e 	bge	r2,zero,31eb4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   31e98:	0031dc00 	call	31dc0 <alt_get_errno>
   31e9c:	1007883a 	mov	r3,r2
   31ea0:	e0bffc17 	ldw	r2,-16(fp)
   31ea4:	0085c83a 	sub	r2,zero,r2
   31ea8:	18800015 	stw	r2,0(r3)
          return -1;
   31eac:	00bfffc4 	movi	r2,-1
   31eb0:	00000c06 	br	31ee4 <read+0xe8>
        }
        return rval;
   31eb4:	e0bffc17 	ldw	r2,-16(fp)
   31eb8:	00000a06 	br	31ee4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   31ebc:	0031dc00 	call	31dc0 <alt_get_errno>
   31ec0:	1007883a 	mov	r3,r2
   31ec4:	00800344 	movi	r2,13
   31ec8:	18800015 	stw	r2,0(r3)
   31ecc:	00000406 	br	31ee0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   31ed0:	0031dc00 	call	31dc0 <alt_get_errno>
   31ed4:	1007883a 	mov	r3,r2
   31ed8:	00801444 	movi	r2,81
   31edc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   31ee0:	00bfffc4 	movi	r2,-1
}
   31ee4:	e037883a 	mov	sp,fp
   31ee8:	dfc00117 	ldw	ra,4(sp)
   31eec:	df000017 	ldw	fp,0(sp)
   31ef0:	dec00204 	addi	sp,sp,8
   31ef4:	f800283a 	ret

00031ef8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   31ef8:	defffe04 	addi	sp,sp,-8
   31efc:	df000115 	stw	fp,4(sp)
   31f00:	df000104 	addi	fp,sp,4
   31f04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   31f08:	e0bfff17 	ldw	r2,-4(fp)
   31f0c:	108000d0 	cmplti	r2,r2,3
   31f10:	10000d1e 	bne	r2,zero,31f48 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   31f14:	008000f4 	movhi	r2,3
   31f18:	10952204 	addi	r2,r2,21640
   31f1c:	e0ffff17 	ldw	r3,-4(fp)
   31f20:	18c00324 	muli	r3,r3,12
   31f24:	10c5883a 	add	r2,r2,r3
   31f28:	10800204 	addi	r2,r2,8
   31f2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   31f30:	008000f4 	movhi	r2,3
   31f34:	10952204 	addi	r2,r2,21640
   31f38:	e0ffff17 	ldw	r3,-4(fp)
   31f3c:	18c00324 	muli	r3,r3,12
   31f40:	10c5883a 	add	r2,r2,r3
   31f44:	10000015 	stw	zero,0(r2)
  }
}
   31f48:	0001883a 	nop
   31f4c:	e037883a 	mov	sp,fp
   31f50:	df000017 	ldw	fp,0(sp)
   31f54:	dec00104 	addi	sp,sp,4
   31f58:	f800283a 	ret

00031f5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   31f5c:	defff904 	addi	sp,sp,-28
   31f60:	df000615 	stw	fp,24(sp)
   31f64:	df000604 	addi	fp,sp,24
   31f68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   31f6c:	0005303a 	rdctl	r2,status
   31f70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   31f74:	e0fffe17 	ldw	r3,-8(fp)
   31f78:	00bfff84 	movi	r2,-2
   31f7c:	1884703a 	and	r2,r3,r2
   31f80:	1001703a 	wrctl	status,r2
  
  return context;
   31f84:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   31f88:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   31f8c:	d0a00d17 	ldw	r2,-32716(gp)
   31f90:	10c000c4 	addi	r3,r2,3
   31f94:	00bfff04 	movi	r2,-4
   31f98:	1884703a 	and	r2,r3,r2
   31f9c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   31fa0:	d0e00d17 	ldw	r3,-32716(gp)
   31fa4:	e0bfff17 	ldw	r2,-4(fp)
   31fa8:	1887883a 	add	r3,r3,r2
   31fac:	00800134 	movhi	r2,4
   31fb0:	10bd0004 	addi	r2,r2,-3072
   31fb4:	10c0062e 	bgeu	r2,r3,31fd0 <sbrk+0x74>
   31fb8:	e0bffb17 	ldw	r2,-20(fp)
   31fbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   31fc0:	e0bffa17 	ldw	r2,-24(fp)
   31fc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   31fc8:	00bfffc4 	movi	r2,-1
   31fcc:	00000b06 	br	31ffc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   31fd0:	d0a00d17 	ldw	r2,-32716(gp)
   31fd4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   31fd8:	d0e00d17 	ldw	r3,-32716(gp)
   31fdc:	e0bfff17 	ldw	r2,-4(fp)
   31fe0:	1885883a 	add	r2,r3,r2
   31fe4:	d0a00d15 	stw	r2,-32716(gp)
   31fe8:	e0bffb17 	ldw	r2,-20(fp)
   31fec:	e0bffc15 	stw	r2,-16(fp)
   31ff0:	e0bffc17 	ldw	r2,-16(fp)
   31ff4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   31ff8:	e0bffd17 	ldw	r2,-12(fp)
} 
   31ffc:	e037883a 	mov	sp,fp
   32000:	df000017 	ldw	fp,0(sp)
   32004:	dec00104 	addi	sp,sp,4
   32008:	f800283a 	ret

0003200c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   3200c:	defffa04 	addi	sp,sp,-24
   32010:	df000515 	stw	fp,20(sp)
   32014:	df000504 	addi	fp,sp,20
   32018:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3201c:	0005303a 	rdctl	r2,status
   32020:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32024:	e0fffc17 	ldw	r3,-16(fp)
   32028:	00bfff84 	movi	r2,-2
   3202c:	1884703a 	and	r2,r3,r2
   32030:	1001703a 	wrctl	status,r2
  
  return context;
   32034:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   32038:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   3203c:	e0bfff17 	ldw	r2,-4(fp)
   32040:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   32044:	e0bffd17 	ldw	r2,-12(fp)
   32048:	10800017 	ldw	r2,0(r2)
   3204c:	e0fffd17 	ldw	r3,-12(fp)
   32050:	18c00117 	ldw	r3,4(r3)
   32054:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   32058:	e0bffd17 	ldw	r2,-12(fp)
   3205c:	10800117 	ldw	r2,4(r2)
   32060:	e0fffd17 	ldw	r3,-12(fp)
   32064:	18c00017 	ldw	r3,0(r3)
   32068:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   3206c:	e0bffd17 	ldw	r2,-12(fp)
   32070:	e0fffd17 	ldw	r3,-12(fp)
   32074:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   32078:	e0bffd17 	ldw	r2,-12(fp)
   3207c:	e0fffd17 	ldw	r3,-12(fp)
   32080:	10c00015 	stw	r3,0(r2)
   32084:	e0bffb17 	ldw	r2,-20(fp)
   32088:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   3208c:	e0bffe17 	ldw	r2,-8(fp)
   32090:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   32094:	0001883a 	nop
   32098:	e037883a 	mov	sp,fp
   3209c:	df000017 	ldw	fp,0(sp)
   320a0:	dec00104 	addi	sp,sp,4
   320a4:	f800283a 	ret

000320a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   320a8:	defffb04 	addi	sp,sp,-20
   320ac:	dfc00415 	stw	ra,16(sp)
   320b0:	df000315 	stw	fp,12(sp)
   320b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   320b8:	d0a00e17 	ldw	r2,-32712(gp)
   320bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   320c0:	d0a6db17 	ldw	r2,-25748(gp)
   320c4:	10800044 	addi	r2,r2,1
   320c8:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   320cc:	00002e06 	br	32188 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   320d0:	e0bffd17 	ldw	r2,-12(fp)
   320d4:	10800017 	ldw	r2,0(r2)
   320d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   320dc:	e0bffd17 	ldw	r2,-12(fp)
   320e0:	10800403 	ldbu	r2,16(r2)
   320e4:	10803fcc 	andi	r2,r2,255
   320e8:	10000426 	beq	r2,zero,320fc <alt_tick+0x54>
   320ec:	d0a6db17 	ldw	r2,-25748(gp)
   320f0:	1000021e 	bne	r2,zero,320fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   320f4:	e0bffd17 	ldw	r2,-12(fp)
   320f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   320fc:	e0bffd17 	ldw	r2,-12(fp)
   32100:	10800217 	ldw	r2,8(r2)
   32104:	d0e6db17 	ldw	r3,-25748(gp)
   32108:	18801d36 	bltu	r3,r2,32180 <alt_tick+0xd8>
   3210c:	e0bffd17 	ldw	r2,-12(fp)
   32110:	10800403 	ldbu	r2,16(r2)
   32114:	10803fcc 	andi	r2,r2,255
   32118:	1000191e 	bne	r2,zero,32180 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   3211c:	e0bffd17 	ldw	r2,-12(fp)
   32120:	10800317 	ldw	r2,12(r2)
   32124:	e0fffd17 	ldw	r3,-12(fp)
   32128:	18c00517 	ldw	r3,20(r3)
   3212c:	1809883a 	mov	r4,r3
   32130:	103ee83a 	callr	r2
   32134:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   32138:	e0bfff17 	ldw	r2,-4(fp)
   3213c:	1000031e 	bne	r2,zero,3214c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   32140:	e13ffd17 	ldw	r4,-12(fp)
   32144:	003200c0 	call	3200c <alt_alarm_stop>
   32148:	00000d06 	br	32180 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   3214c:	e0bffd17 	ldw	r2,-12(fp)
   32150:	10c00217 	ldw	r3,8(r2)
   32154:	e0bfff17 	ldw	r2,-4(fp)
   32158:	1887883a 	add	r3,r3,r2
   3215c:	e0bffd17 	ldw	r2,-12(fp)
   32160:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   32164:	e0bffd17 	ldw	r2,-12(fp)
   32168:	10c00217 	ldw	r3,8(r2)
   3216c:	d0a6db17 	ldw	r2,-25748(gp)
   32170:	1880032e 	bgeu	r3,r2,32180 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   32174:	e0bffd17 	ldw	r2,-12(fp)
   32178:	00c00044 	movi	r3,1
   3217c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   32180:	e0bffe17 	ldw	r2,-8(fp)
   32184:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   32188:	e0fffd17 	ldw	r3,-12(fp)
   3218c:	d0a00e04 	addi	r2,gp,-32712
   32190:	18bfcf1e 	bne	r3,r2,320d0 <__alt_data_end+0xffff2cd0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   32194:	0001883a 	nop
}
   32198:	0001883a 	nop
   3219c:	e037883a 	mov	sp,fp
   321a0:	dfc00117 	ldw	ra,4(sp)
   321a4:	df000017 	ldw	fp,0(sp)
   321a8:	dec00204 	addi	sp,sp,8
   321ac:	f800283a 	ret

000321b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   321b0:	defffd04 	addi	sp,sp,-12
   321b4:	dfc00215 	stw	ra,8(sp)
   321b8:	df000115 	stw	fp,4(sp)
   321bc:	df000104 	addi	fp,sp,4
   321c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   321c4:	e13fff17 	ldw	r4,-4(fp)
   321c8:	003306c0 	call	3306c <alt_busy_sleep>
}
   321cc:	e037883a 	mov	sp,fp
   321d0:	dfc00117 	ldw	ra,4(sp)
   321d4:	df000017 	ldw	fp,0(sp)
   321d8:	dec00204 	addi	sp,sp,8
   321dc:	f800283a 	ret

000321e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   321e0:	defffe04 	addi	sp,sp,-8
   321e4:	dfc00115 	stw	ra,4(sp)
   321e8:	df000015 	stw	fp,0(sp)
   321ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   321f0:	d0a00c17 	ldw	r2,-32720(gp)
   321f4:	10000326 	beq	r2,zero,32204 <alt_get_errno+0x24>
   321f8:	d0a00c17 	ldw	r2,-32720(gp)
   321fc:	103ee83a 	callr	r2
   32200:	00000106 	br	32208 <alt_get_errno+0x28>
   32204:	d0a6d604 	addi	r2,gp,-25768
}
   32208:	e037883a 	mov	sp,fp
   3220c:	dfc00117 	ldw	ra,4(sp)
   32210:	df000017 	ldw	fp,0(sp)
   32214:	dec00204 	addi	sp,sp,8
   32218:	f800283a 	ret

0003221c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   3221c:	defff904 	addi	sp,sp,-28
   32220:	dfc00615 	stw	ra,24(sp)
   32224:	df000515 	stw	fp,20(sp)
   32228:	df000504 	addi	fp,sp,20
   3222c:	e13ffd15 	stw	r4,-12(fp)
   32230:	e17ffe15 	stw	r5,-8(fp)
   32234:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   32238:	e0bffd17 	ldw	r2,-12(fp)
   3223c:	10000616 	blt	r2,zero,32258 <write+0x3c>
   32240:	e0bffd17 	ldw	r2,-12(fp)
   32244:	10c00324 	muli	r3,r2,12
   32248:	008000f4 	movhi	r2,3
   3224c:	10952204 	addi	r2,r2,21640
   32250:	1885883a 	add	r2,r3,r2
   32254:	00000106 	br	3225c <write+0x40>
   32258:	0005883a 	mov	r2,zero
   3225c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   32260:	e0bffb17 	ldw	r2,-20(fp)
   32264:	10002126 	beq	r2,zero,322ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   32268:	e0bffb17 	ldw	r2,-20(fp)
   3226c:	10800217 	ldw	r2,8(r2)
   32270:	108000cc 	andi	r2,r2,3
   32274:	10001826 	beq	r2,zero,322d8 <write+0xbc>
   32278:	e0bffb17 	ldw	r2,-20(fp)
   3227c:	10800017 	ldw	r2,0(r2)
   32280:	10800617 	ldw	r2,24(r2)
   32284:	10001426 	beq	r2,zero,322d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   32288:	e0bffb17 	ldw	r2,-20(fp)
   3228c:	10800017 	ldw	r2,0(r2)
   32290:	10800617 	ldw	r2,24(r2)
   32294:	e0ffff17 	ldw	r3,-4(fp)
   32298:	180d883a 	mov	r6,r3
   3229c:	e17ffe17 	ldw	r5,-8(fp)
   322a0:	e13ffb17 	ldw	r4,-20(fp)
   322a4:	103ee83a 	callr	r2
   322a8:	e0bffc15 	stw	r2,-16(fp)
   322ac:	e0bffc17 	ldw	r2,-16(fp)
   322b0:	1000070e 	bge	r2,zero,322d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   322b4:	00321e00 	call	321e0 <alt_get_errno>
   322b8:	1007883a 	mov	r3,r2
   322bc:	e0bffc17 	ldw	r2,-16(fp)
   322c0:	0085c83a 	sub	r2,zero,r2
   322c4:	18800015 	stw	r2,0(r3)
        return -1;
   322c8:	00bfffc4 	movi	r2,-1
   322cc:	00000c06 	br	32300 <write+0xe4>
      }
      return rval;
   322d0:	e0bffc17 	ldw	r2,-16(fp)
   322d4:	00000a06 	br	32300 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   322d8:	00321e00 	call	321e0 <alt_get_errno>
   322dc:	1007883a 	mov	r3,r2
   322e0:	00800344 	movi	r2,13
   322e4:	18800015 	stw	r2,0(r3)
   322e8:	00000406 	br	322fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   322ec:	00321e00 	call	321e0 <alt_get_errno>
   322f0:	1007883a 	mov	r3,r2
   322f4:	00801444 	movi	r2,81
   322f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   322fc:	00bfffc4 	movi	r2,-1
}
   32300:	e037883a 	mov	sp,fp
   32304:	dfc00117 	ldw	ra,4(sp)
   32308:	df000017 	ldw	fp,0(sp)
   3230c:	dec00204 	addi	sp,sp,8
   32310:	f800283a 	ret

00032314 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   32314:	defffd04 	addi	sp,sp,-12
   32318:	dfc00215 	stw	ra,8(sp)
   3231c:	df000115 	stw	fp,4(sp)
   32320:	df000104 	addi	fp,sp,4
   32324:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   32328:	d1600904 	addi	r5,gp,-32732
   3232c:	e13fff17 	ldw	r4,-4(fp)
   32330:	00332480 	call	33248 <alt_dev_llist_insert>
}
   32334:	e037883a 	mov	sp,fp
   32338:	dfc00117 	ldw	ra,4(sp)
   3233c:	df000017 	ldw	fp,0(sp)
   32340:	dec00204 	addi	sp,sp,8
   32344:	f800283a 	ret

00032348 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   32348:	defffd04 	addi	sp,sp,-12
   3234c:	dfc00215 	stw	ra,8(sp)
   32350:	df000115 	stw	fp,4(sp)
   32354:	df000104 	addi	fp,sp,4
   32358:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   3235c:	0033a140 	call	33a14 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   32360:	00800044 	movi	r2,1
   32364:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   32368:	0001883a 	nop
   3236c:	e037883a 	mov	sp,fp
   32370:	dfc00117 	ldw	ra,4(sp)
   32374:	df000017 	ldw	fp,0(sp)
   32378:	dec00204 	addi	sp,sp,8
   3237c:	f800283a 	ret

00032380 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   32380:	defffe04 	addi	sp,sp,-8
   32384:	dfc00115 	stw	ra,4(sp)
   32388:	df000015 	stw	fp,0(sp)
   3238c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   32390:	01c0fa04 	movi	r7,1000
   32394:	01800044 	movi	r6,1
   32398:	000b883a 	mov	r5,zero
   3239c:	01000134 	movhi	r4,4
   323a0:	21041804 	addi	r4,r4,4192
   323a4:	0032ec40 	call	32ec4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   323a8:	000d883a 	mov	r6,zero
   323ac:	000b883a 	mov	r5,zero
   323b0:	010000f4 	movhi	r4,3
   323b4:	21158c04 	addi	r4,r4,22064
   323b8:	00325480 	call	32548 <altera_avalon_jtag_uart_init>
   323bc:	010000f4 	movhi	r4,3
   323c0:	21158204 	addi	r4,r4,22024
   323c4:	00323140 	call	32314 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   323c8:	0001883a 	nop
}
   323cc:	0001883a 	nop
   323d0:	e037883a 	mov	sp,fp
   323d4:	dfc00117 	ldw	ra,4(sp)
   323d8:	df000017 	ldw	fp,0(sp)
   323dc:	dec00204 	addi	sp,sp,8
   323e0:	f800283a 	ret

000323e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   323e4:	defffa04 	addi	sp,sp,-24
   323e8:	dfc00515 	stw	ra,20(sp)
   323ec:	df000415 	stw	fp,16(sp)
   323f0:	df000404 	addi	fp,sp,16
   323f4:	e13ffd15 	stw	r4,-12(fp)
   323f8:	e17ffe15 	stw	r5,-8(fp)
   323fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   32400:	e0bffd17 	ldw	r2,-12(fp)
   32404:	10800017 	ldw	r2,0(r2)
   32408:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   3240c:	e0bffc17 	ldw	r2,-16(fp)
   32410:	10c00a04 	addi	r3,r2,40
   32414:	e0bffd17 	ldw	r2,-12(fp)
   32418:	10800217 	ldw	r2,8(r2)
   3241c:	100f883a 	mov	r7,r2
   32420:	e1bfff17 	ldw	r6,-4(fp)
   32424:	e17ffe17 	ldw	r5,-8(fp)
   32428:	1809883a 	mov	r4,r3
   3242c:	0032a0c0 	call	32a0c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   32430:	e037883a 	mov	sp,fp
   32434:	dfc00117 	ldw	ra,4(sp)
   32438:	df000017 	ldw	fp,0(sp)
   3243c:	dec00204 	addi	sp,sp,8
   32440:	f800283a 	ret

00032444 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   32444:	defffa04 	addi	sp,sp,-24
   32448:	dfc00515 	stw	ra,20(sp)
   3244c:	df000415 	stw	fp,16(sp)
   32450:	df000404 	addi	fp,sp,16
   32454:	e13ffd15 	stw	r4,-12(fp)
   32458:	e17ffe15 	stw	r5,-8(fp)
   3245c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   32460:	e0bffd17 	ldw	r2,-12(fp)
   32464:	10800017 	ldw	r2,0(r2)
   32468:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   3246c:	e0bffc17 	ldw	r2,-16(fp)
   32470:	10c00a04 	addi	r3,r2,40
   32474:	e0bffd17 	ldw	r2,-12(fp)
   32478:	10800217 	ldw	r2,8(r2)
   3247c:	100f883a 	mov	r7,r2
   32480:	e1bfff17 	ldw	r6,-4(fp)
   32484:	e17ffe17 	ldw	r5,-8(fp)
   32488:	1809883a 	mov	r4,r3
   3248c:	0032c280 	call	32c28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   32490:	e037883a 	mov	sp,fp
   32494:	dfc00117 	ldw	ra,4(sp)
   32498:	df000017 	ldw	fp,0(sp)
   3249c:	dec00204 	addi	sp,sp,8
   324a0:	f800283a 	ret

000324a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   324a4:	defffc04 	addi	sp,sp,-16
   324a8:	dfc00315 	stw	ra,12(sp)
   324ac:	df000215 	stw	fp,8(sp)
   324b0:	df000204 	addi	fp,sp,8
   324b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   324b8:	e0bfff17 	ldw	r2,-4(fp)
   324bc:	10800017 	ldw	r2,0(r2)
   324c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   324c4:	e0bffe17 	ldw	r2,-8(fp)
   324c8:	10c00a04 	addi	r3,r2,40
   324cc:	e0bfff17 	ldw	r2,-4(fp)
   324d0:	10800217 	ldw	r2,8(r2)
   324d4:	100b883a 	mov	r5,r2
   324d8:	1809883a 	mov	r4,r3
   324dc:	00328b40 	call	328b4 <altera_avalon_jtag_uart_close>
}
   324e0:	e037883a 	mov	sp,fp
   324e4:	dfc00117 	ldw	ra,4(sp)
   324e8:	df000017 	ldw	fp,0(sp)
   324ec:	dec00204 	addi	sp,sp,8
   324f0:	f800283a 	ret

000324f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   324f4:	defffa04 	addi	sp,sp,-24
   324f8:	dfc00515 	stw	ra,20(sp)
   324fc:	df000415 	stw	fp,16(sp)
   32500:	df000404 	addi	fp,sp,16
   32504:	e13ffd15 	stw	r4,-12(fp)
   32508:	e17ffe15 	stw	r5,-8(fp)
   3250c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   32510:	e0bffd17 	ldw	r2,-12(fp)
   32514:	10800017 	ldw	r2,0(r2)
   32518:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   3251c:	e0bffc17 	ldw	r2,-16(fp)
   32520:	10800a04 	addi	r2,r2,40
   32524:	e1bfff17 	ldw	r6,-4(fp)
   32528:	e17ffe17 	ldw	r5,-8(fp)
   3252c:	1009883a 	mov	r4,r2
   32530:	003291c0 	call	3291c <altera_avalon_jtag_uart_ioctl>
}
   32534:	e037883a 	mov	sp,fp
   32538:	dfc00117 	ldw	ra,4(sp)
   3253c:	df000017 	ldw	fp,0(sp)
   32540:	dec00204 	addi	sp,sp,8
   32544:	f800283a 	ret

00032548 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   32548:	defffa04 	addi	sp,sp,-24
   3254c:	dfc00515 	stw	ra,20(sp)
   32550:	df000415 	stw	fp,16(sp)
   32554:	df000404 	addi	fp,sp,16
   32558:	e13ffd15 	stw	r4,-12(fp)
   3255c:	e17ffe15 	stw	r5,-8(fp)
   32560:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   32564:	e0bffd17 	ldw	r2,-12(fp)
   32568:	00c00044 	movi	r3,1
   3256c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   32570:	e0bffd17 	ldw	r2,-12(fp)
   32574:	10800017 	ldw	r2,0(r2)
   32578:	10800104 	addi	r2,r2,4
   3257c:	1007883a 	mov	r3,r2
   32580:	e0bffd17 	ldw	r2,-12(fp)
   32584:	10800817 	ldw	r2,32(r2)
   32588:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   3258c:	e0bffe17 	ldw	r2,-8(fp)
   32590:	e0ffff17 	ldw	r3,-4(fp)
   32594:	d8000015 	stw	zero,0(sp)
   32598:	e1fffd17 	ldw	r7,-12(fp)
   3259c:	018000f4 	movhi	r6,3
   325a0:	31898204 	addi	r6,r6,9736
   325a4:	180b883a 	mov	r5,r3
   325a8:	1009883a 	mov	r4,r2
   325ac:	00333e00 	call	333e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   325b0:	e0bffd17 	ldw	r2,-12(fp)
   325b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   325b8:	e0bffd17 	ldw	r2,-12(fp)
   325bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   325c0:	d0e6da17 	ldw	r3,-25752(gp)
   325c4:	e1fffd17 	ldw	r7,-12(fp)
   325c8:	018000f4 	movhi	r6,3
   325cc:	318a0504 	addi	r6,r6,10260
   325d0:	180b883a 	mov	r5,r3
   325d4:	1009883a 	mov	r4,r2
   325d8:	0032f400 	call	32f40 <alt_alarm_start>
   325dc:	1000040e 	bge	r2,zero,325f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   325e0:	e0fffd17 	ldw	r3,-12(fp)
   325e4:	00a00034 	movhi	r2,32768
   325e8:	10bfffc4 	addi	r2,r2,-1
   325ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   325f0:	0001883a 	nop
   325f4:	e037883a 	mov	sp,fp
   325f8:	dfc00117 	ldw	ra,4(sp)
   325fc:	df000017 	ldw	fp,0(sp)
   32600:	dec00204 	addi	sp,sp,8
   32604:	f800283a 	ret

00032608 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   32608:	defff804 	addi	sp,sp,-32
   3260c:	df000715 	stw	fp,28(sp)
   32610:	df000704 	addi	fp,sp,28
   32614:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   32618:	e0bfff17 	ldw	r2,-4(fp)
   3261c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   32620:	e0bffb17 	ldw	r2,-20(fp)
   32624:	10800017 	ldw	r2,0(r2)
   32628:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3262c:	e0bffc17 	ldw	r2,-16(fp)
   32630:	10800104 	addi	r2,r2,4
   32634:	10800037 	ldwio	r2,0(r2)
   32638:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   3263c:	e0bffd17 	ldw	r2,-12(fp)
   32640:	1080c00c 	andi	r2,r2,768
   32644:	10006d26 	beq	r2,zero,327fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   32648:	e0bffd17 	ldw	r2,-12(fp)
   3264c:	1080400c 	andi	r2,r2,256
   32650:	10003526 	beq	r2,zero,32728 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   32654:	00800074 	movhi	r2,1
   32658:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   3265c:	e0bffb17 	ldw	r2,-20(fp)
   32660:	10800a17 	ldw	r2,40(r2)
   32664:	10800044 	addi	r2,r2,1
   32668:	1081ffcc 	andi	r2,r2,2047
   3266c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   32670:	e0bffb17 	ldw	r2,-20(fp)
   32674:	10c00b17 	ldw	r3,44(r2)
   32678:	e0bffe17 	ldw	r2,-8(fp)
   3267c:	18801526 	beq	r3,r2,326d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   32680:	e0bffc17 	ldw	r2,-16(fp)
   32684:	10800037 	ldwio	r2,0(r2)
   32688:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   3268c:	e0bff917 	ldw	r2,-28(fp)
   32690:	10a0000c 	andi	r2,r2,32768
   32694:	10001126 	beq	r2,zero,326dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   32698:	e0bffb17 	ldw	r2,-20(fp)
   3269c:	10800a17 	ldw	r2,40(r2)
   326a0:	e0fff917 	ldw	r3,-28(fp)
   326a4:	1809883a 	mov	r4,r3
   326a8:	e0fffb17 	ldw	r3,-20(fp)
   326ac:	1885883a 	add	r2,r3,r2
   326b0:	10800e04 	addi	r2,r2,56
   326b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   326b8:	e0bffb17 	ldw	r2,-20(fp)
   326bc:	10800a17 	ldw	r2,40(r2)
   326c0:	10800044 	addi	r2,r2,1
   326c4:	10c1ffcc 	andi	r3,r2,2047
   326c8:	e0bffb17 	ldw	r2,-20(fp)
   326cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   326d0:	003fe206 	br	3265c <__alt_data_end+0xffff325c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   326d4:	0001883a 	nop
   326d8:	00000106 	br	326e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   326dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   326e0:	e0bff917 	ldw	r2,-28(fp)
   326e4:	10bfffec 	andhi	r2,r2,65535
   326e8:	10000f26 	beq	r2,zero,32728 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   326ec:	e0bffb17 	ldw	r2,-20(fp)
   326f0:	10c00817 	ldw	r3,32(r2)
   326f4:	00bfff84 	movi	r2,-2
   326f8:	1886703a 	and	r3,r3,r2
   326fc:	e0bffb17 	ldw	r2,-20(fp)
   32700:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   32704:	e0bffc17 	ldw	r2,-16(fp)
   32708:	10800104 	addi	r2,r2,4
   3270c:	1007883a 	mov	r3,r2
   32710:	e0bffb17 	ldw	r2,-20(fp)
   32714:	10800817 	ldw	r2,32(r2)
   32718:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   3271c:	e0bffc17 	ldw	r2,-16(fp)
   32720:	10800104 	addi	r2,r2,4
   32724:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   32728:	e0bffd17 	ldw	r2,-12(fp)
   3272c:	1080800c 	andi	r2,r2,512
   32730:	103fbe26 	beq	r2,zero,3262c <__alt_data_end+0xffff322c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   32734:	e0bffd17 	ldw	r2,-12(fp)
   32738:	1004d43a 	srli	r2,r2,16
   3273c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   32740:	00001406 	br	32794 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   32744:	e0bffc17 	ldw	r2,-16(fp)
   32748:	e0fffb17 	ldw	r3,-20(fp)
   3274c:	18c00d17 	ldw	r3,52(r3)
   32750:	e13ffb17 	ldw	r4,-20(fp)
   32754:	20c7883a 	add	r3,r4,r3
   32758:	18c20e04 	addi	r3,r3,2104
   3275c:	18c00003 	ldbu	r3,0(r3)
   32760:	18c03fcc 	andi	r3,r3,255
   32764:	18c0201c 	xori	r3,r3,128
   32768:	18ffe004 	addi	r3,r3,-128
   3276c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32770:	e0bffb17 	ldw	r2,-20(fp)
   32774:	10800d17 	ldw	r2,52(r2)
   32778:	10800044 	addi	r2,r2,1
   3277c:	10c1ffcc 	andi	r3,r2,2047
   32780:	e0bffb17 	ldw	r2,-20(fp)
   32784:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   32788:	e0bffa17 	ldw	r2,-24(fp)
   3278c:	10bfffc4 	addi	r2,r2,-1
   32790:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   32794:	e0bffa17 	ldw	r2,-24(fp)
   32798:	10000526 	beq	r2,zero,327b0 <altera_avalon_jtag_uart_irq+0x1a8>
   3279c:	e0bffb17 	ldw	r2,-20(fp)
   327a0:	10c00d17 	ldw	r3,52(r2)
   327a4:	e0bffb17 	ldw	r2,-20(fp)
   327a8:	10800c17 	ldw	r2,48(r2)
   327ac:	18bfe51e 	bne	r3,r2,32744 <__alt_data_end+0xffff3344>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   327b0:	e0bffa17 	ldw	r2,-24(fp)
   327b4:	103f9d26 	beq	r2,zero,3262c <__alt_data_end+0xffff322c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   327b8:	e0bffb17 	ldw	r2,-20(fp)
   327bc:	10c00817 	ldw	r3,32(r2)
   327c0:	00bfff44 	movi	r2,-3
   327c4:	1886703a 	and	r3,r3,r2
   327c8:	e0bffb17 	ldw	r2,-20(fp)
   327cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   327d0:	e0bffb17 	ldw	r2,-20(fp)
   327d4:	10800017 	ldw	r2,0(r2)
   327d8:	10800104 	addi	r2,r2,4
   327dc:	1007883a 	mov	r3,r2
   327e0:	e0bffb17 	ldw	r2,-20(fp)
   327e4:	10800817 	ldw	r2,32(r2)
   327e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   327ec:	e0bffc17 	ldw	r2,-16(fp)
   327f0:	10800104 	addi	r2,r2,4
   327f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   327f8:	003f8c06 	br	3262c <__alt_data_end+0xffff322c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   327fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   32800:	0001883a 	nop
   32804:	e037883a 	mov	sp,fp
   32808:	df000017 	ldw	fp,0(sp)
   3280c:	dec00104 	addi	sp,sp,4
   32810:	f800283a 	ret

00032814 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   32814:	defff804 	addi	sp,sp,-32
   32818:	df000715 	stw	fp,28(sp)
   3281c:	df000704 	addi	fp,sp,28
   32820:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   32824:	e0bffb17 	ldw	r2,-20(fp)
   32828:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   3282c:	e0bff917 	ldw	r2,-28(fp)
   32830:	10800017 	ldw	r2,0(r2)
   32834:	10800104 	addi	r2,r2,4
   32838:	10800037 	ldwio	r2,0(r2)
   3283c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   32840:	e0bffa17 	ldw	r2,-24(fp)
   32844:	1081000c 	andi	r2,r2,1024
   32848:	10000b26 	beq	r2,zero,32878 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   3284c:	e0bff917 	ldw	r2,-28(fp)
   32850:	10800017 	ldw	r2,0(r2)
   32854:	10800104 	addi	r2,r2,4
   32858:	1007883a 	mov	r3,r2
   3285c:	e0bff917 	ldw	r2,-28(fp)
   32860:	10800817 	ldw	r2,32(r2)
   32864:	10810014 	ori	r2,r2,1024
   32868:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   3286c:	e0bff917 	ldw	r2,-28(fp)
   32870:	10000915 	stw	zero,36(r2)
   32874:	00000a06 	br	328a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   32878:	e0bff917 	ldw	r2,-28(fp)
   3287c:	10c00917 	ldw	r3,36(r2)
   32880:	00a00034 	movhi	r2,32768
   32884:	10bfff04 	addi	r2,r2,-4
   32888:	10c00536 	bltu	r2,r3,328a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   3288c:	e0bff917 	ldw	r2,-28(fp)
   32890:	10800917 	ldw	r2,36(r2)
   32894:	10c00044 	addi	r3,r2,1
   32898:	e0bff917 	ldw	r2,-28(fp)
   3289c:	10c00915 	stw	r3,36(r2)
   328a0:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   328a4:	e037883a 	mov	sp,fp
   328a8:	df000017 	ldw	fp,0(sp)
   328ac:	dec00104 	addi	sp,sp,4
   328b0:	f800283a 	ret

000328b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   328b4:	defffd04 	addi	sp,sp,-12
   328b8:	df000215 	stw	fp,8(sp)
   328bc:	df000204 	addi	fp,sp,8
   328c0:	e13ffe15 	stw	r4,-8(fp)
   328c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   328c8:	00000506 	br	328e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   328cc:	e0bfff17 	ldw	r2,-4(fp)
   328d0:	1090000c 	andi	r2,r2,16384
   328d4:	10000226 	beq	r2,zero,328e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   328d8:	00bffd44 	movi	r2,-11
   328dc:	00000b06 	br	3290c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   328e0:	e0bffe17 	ldw	r2,-8(fp)
   328e4:	10c00d17 	ldw	r3,52(r2)
   328e8:	e0bffe17 	ldw	r2,-8(fp)
   328ec:	10800c17 	ldw	r2,48(r2)
   328f0:	18800526 	beq	r3,r2,32908 <altera_avalon_jtag_uart_close+0x54>
   328f4:	e0bffe17 	ldw	r2,-8(fp)
   328f8:	10c00917 	ldw	r3,36(r2)
   328fc:	e0bffe17 	ldw	r2,-8(fp)
   32900:	10800117 	ldw	r2,4(r2)
   32904:	18bff136 	bltu	r3,r2,328cc <__alt_data_end+0xffff34cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   32908:	0005883a 	mov	r2,zero
}
   3290c:	e037883a 	mov	sp,fp
   32910:	df000017 	ldw	fp,0(sp)
   32914:	dec00104 	addi	sp,sp,4
   32918:	f800283a 	ret

0003291c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   3291c:	defffa04 	addi	sp,sp,-24
   32920:	df000515 	stw	fp,20(sp)
   32924:	df000504 	addi	fp,sp,20
   32928:	e13ffd15 	stw	r4,-12(fp)
   3292c:	e17ffe15 	stw	r5,-8(fp)
   32930:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   32934:	00bff9c4 	movi	r2,-25
   32938:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   3293c:	e0bffe17 	ldw	r2,-8(fp)
   32940:	10da8060 	cmpeqi	r3,r2,27137
   32944:	1800031e 	bne	r3,zero,32954 <altera_avalon_jtag_uart_ioctl+0x38>
   32948:	109a80a0 	cmpeqi	r2,r2,27138
   3294c:	1000181e 	bne	r2,zero,329b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   32950:	00002906 	br	329f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   32954:	e0bffd17 	ldw	r2,-12(fp)
   32958:	10c00117 	ldw	r3,4(r2)
   3295c:	00a00034 	movhi	r2,32768
   32960:	10bfffc4 	addi	r2,r2,-1
   32964:	18802126 	beq	r3,r2,329ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   32968:	e0bfff17 	ldw	r2,-4(fp)
   3296c:	10800017 	ldw	r2,0(r2)
   32970:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   32974:	e0bffc17 	ldw	r2,-16(fp)
   32978:	10800090 	cmplti	r2,r2,2
   3297c:	1000061e 	bne	r2,zero,32998 <altera_avalon_jtag_uart_ioctl+0x7c>
   32980:	e0fffc17 	ldw	r3,-16(fp)
   32984:	00a00034 	movhi	r2,32768
   32988:	10bfffc4 	addi	r2,r2,-1
   3298c:	18800226 	beq	r3,r2,32998 <altera_avalon_jtag_uart_ioctl+0x7c>
   32990:	e0bffc17 	ldw	r2,-16(fp)
   32994:	00000206 	br	329a0 <altera_avalon_jtag_uart_ioctl+0x84>
   32998:	00a00034 	movhi	r2,32768
   3299c:	10bfff84 	addi	r2,r2,-2
   329a0:	e0fffd17 	ldw	r3,-12(fp)
   329a4:	18800115 	stw	r2,4(r3)
      rc = 0;
   329a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   329ac:	00000f06 	br	329ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   329b0:	e0bffd17 	ldw	r2,-12(fp)
   329b4:	10c00117 	ldw	r3,4(r2)
   329b8:	00a00034 	movhi	r2,32768
   329bc:	10bfffc4 	addi	r2,r2,-1
   329c0:	18800c26 	beq	r3,r2,329f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   329c4:	e0bffd17 	ldw	r2,-12(fp)
   329c8:	10c00917 	ldw	r3,36(r2)
   329cc:	e0bffd17 	ldw	r2,-12(fp)
   329d0:	10800117 	ldw	r2,4(r2)
   329d4:	1885803a 	cmpltu	r2,r3,r2
   329d8:	10c03fcc 	andi	r3,r2,255
   329dc:	e0bfff17 	ldw	r2,-4(fp)
   329e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   329e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   329e8:	00000206 	br	329f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   329ec:	0001883a 	nop
   329f0:	00000106 	br	329f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   329f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   329f8:	e0bffb17 	ldw	r2,-20(fp)
}
   329fc:	e037883a 	mov	sp,fp
   32a00:	df000017 	ldw	fp,0(sp)
   32a04:	dec00104 	addi	sp,sp,4
   32a08:	f800283a 	ret

00032a0c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   32a0c:	defff304 	addi	sp,sp,-52
   32a10:	dfc00c15 	stw	ra,48(sp)
   32a14:	df000b15 	stw	fp,44(sp)
   32a18:	df000b04 	addi	fp,sp,44
   32a1c:	e13ffc15 	stw	r4,-16(fp)
   32a20:	e17ffd15 	stw	r5,-12(fp)
   32a24:	e1bffe15 	stw	r6,-8(fp)
   32a28:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   32a2c:	e0bffd17 	ldw	r2,-12(fp)
   32a30:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   32a34:	00004706 	br	32b54 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   32a38:	e0bffc17 	ldw	r2,-16(fp)
   32a3c:	10800a17 	ldw	r2,40(r2)
   32a40:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   32a44:	e0bffc17 	ldw	r2,-16(fp)
   32a48:	10800b17 	ldw	r2,44(r2)
   32a4c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   32a50:	e0fff717 	ldw	r3,-36(fp)
   32a54:	e0bff817 	ldw	r2,-32(fp)
   32a58:	18800536 	bltu	r3,r2,32a70 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   32a5c:	e0fff717 	ldw	r3,-36(fp)
   32a60:	e0bff817 	ldw	r2,-32(fp)
   32a64:	1885c83a 	sub	r2,r3,r2
   32a68:	e0bff615 	stw	r2,-40(fp)
   32a6c:	00000406 	br	32a80 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   32a70:	00c20004 	movi	r3,2048
   32a74:	e0bff817 	ldw	r2,-32(fp)
   32a78:	1885c83a 	sub	r2,r3,r2
   32a7c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   32a80:	e0bff617 	ldw	r2,-40(fp)
   32a84:	10001e26 	beq	r2,zero,32b00 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   32a88:	e0fffe17 	ldw	r3,-8(fp)
   32a8c:	e0bff617 	ldw	r2,-40(fp)
   32a90:	1880022e 	bgeu	r3,r2,32a9c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   32a94:	e0bffe17 	ldw	r2,-8(fp)
   32a98:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   32a9c:	e0bffc17 	ldw	r2,-16(fp)
   32aa0:	10c00e04 	addi	r3,r2,56
   32aa4:	e0bff817 	ldw	r2,-32(fp)
   32aa8:	1885883a 	add	r2,r3,r2
   32aac:	e1bff617 	ldw	r6,-40(fp)
   32ab0:	100b883a 	mov	r5,r2
   32ab4:	e13ff517 	ldw	r4,-44(fp)
   32ab8:	002cd680 	call	2cd68 <memcpy>
      ptr   += n;
   32abc:	e0fff517 	ldw	r3,-44(fp)
   32ac0:	e0bff617 	ldw	r2,-40(fp)
   32ac4:	1885883a 	add	r2,r3,r2
   32ac8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   32acc:	e0fffe17 	ldw	r3,-8(fp)
   32ad0:	e0bff617 	ldw	r2,-40(fp)
   32ad4:	1885c83a 	sub	r2,r3,r2
   32ad8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32adc:	e0fff817 	ldw	r3,-32(fp)
   32ae0:	e0bff617 	ldw	r2,-40(fp)
   32ae4:	1885883a 	add	r2,r3,r2
   32ae8:	10c1ffcc 	andi	r3,r2,2047
   32aec:	e0bffc17 	ldw	r2,-16(fp)
   32af0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   32af4:	e0bffe17 	ldw	r2,-8(fp)
   32af8:	00bfcf16 	blt	zero,r2,32a38 <__alt_data_end+0xffff3638>
   32afc:	00000106 	br	32b04 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   32b00:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   32b04:	e0fff517 	ldw	r3,-44(fp)
   32b08:	e0bffd17 	ldw	r2,-12(fp)
   32b0c:	1880141e 	bne	r3,r2,32b60 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   32b10:	e0bfff17 	ldw	r2,-4(fp)
   32b14:	1090000c 	andi	r2,r2,16384
   32b18:	1000131e 	bne	r2,zero,32b68 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   32b1c:	0001883a 	nop
   32b20:	e0bffc17 	ldw	r2,-16(fp)
   32b24:	10c00a17 	ldw	r3,40(r2)
   32b28:	e0bff717 	ldw	r2,-36(fp)
   32b2c:	1880051e 	bne	r3,r2,32b44 <altera_avalon_jtag_uart_read+0x138>
   32b30:	e0bffc17 	ldw	r2,-16(fp)
   32b34:	10c00917 	ldw	r3,36(r2)
   32b38:	e0bffc17 	ldw	r2,-16(fp)
   32b3c:	10800117 	ldw	r2,4(r2)
   32b40:	18bff736 	bltu	r3,r2,32b20 <__alt_data_end+0xffff3720>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   32b44:	e0bffc17 	ldw	r2,-16(fp)
   32b48:	10c00a17 	ldw	r3,40(r2)
   32b4c:	e0bff717 	ldw	r2,-36(fp)
   32b50:	18800726 	beq	r3,r2,32b70 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   32b54:	e0bffe17 	ldw	r2,-8(fp)
   32b58:	00bfb716 	blt	zero,r2,32a38 <__alt_data_end+0xffff3638>
   32b5c:	00000506 	br	32b74 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   32b60:	0001883a 	nop
   32b64:	00000306 	br	32b74 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   32b68:	0001883a 	nop
   32b6c:	00000106 	br	32b74 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   32b70:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   32b74:	e0fff517 	ldw	r3,-44(fp)
   32b78:	e0bffd17 	ldw	r2,-12(fp)
   32b7c:	18801826 	beq	r3,r2,32be0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32b80:	0005303a 	rdctl	r2,status
   32b84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32b88:	e0fffb17 	ldw	r3,-20(fp)
   32b8c:	00bfff84 	movi	r2,-2
   32b90:	1884703a 	and	r2,r3,r2
   32b94:	1001703a 	wrctl	status,r2
  
  return context;
   32b98:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   32b9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   32ba0:	e0bffc17 	ldw	r2,-16(fp)
   32ba4:	10800817 	ldw	r2,32(r2)
   32ba8:	10c00054 	ori	r3,r2,1
   32bac:	e0bffc17 	ldw	r2,-16(fp)
   32bb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32bb4:	e0bffc17 	ldw	r2,-16(fp)
   32bb8:	10800017 	ldw	r2,0(r2)
   32bbc:	10800104 	addi	r2,r2,4
   32bc0:	1007883a 	mov	r3,r2
   32bc4:	e0bffc17 	ldw	r2,-16(fp)
   32bc8:	10800817 	ldw	r2,32(r2)
   32bcc:	18800035 	stwio	r2,0(r3)
   32bd0:	e0bffa17 	ldw	r2,-24(fp)
   32bd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32bd8:	e0bff917 	ldw	r2,-28(fp)
   32bdc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   32be0:	e0fff517 	ldw	r3,-44(fp)
   32be4:	e0bffd17 	ldw	r2,-12(fp)
   32be8:	18800426 	beq	r3,r2,32bfc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   32bec:	e0fff517 	ldw	r3,-44(fp)
   32bf0:	e0bffd17 	ldw	r2,-12(fp)
   32bf4:	1885c83a 	sub	r2,r3,r2
   32bf8:	00000606 	br	32c14 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   32bfc:	e0bfff17 	ldw	r2,-4(fp)
   32c00:	1090000c 	andi	r2,r2,16384
   32c04:	10000226 	beq	r2,zero,32c10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   32c08:	00bffd44 	movi	r2,-11
   32c0c:	00000106 	br	32c14 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   32c10:	00bffec4 	movi	r2,-5
}
   32c14:	e037883a 	mov	sp,fp
   32c18:	dfc00117 	ldw	ra,4(sp)
   32c1c:	df000017 	ldw	fp,0(sp)
   32c20:	dec00204 	addi	sp,sp,8
   32c24:	f800283a 	ret

00032c28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   32c28:	defff304 	addi	sp,sp,-52
   32c2c:	dfc00c15 	stw	ra,48(sp)
   32c30:	df000b15 	stw	fp,44(sp)
   32c34:	df000b04 	addi	fp,sp,44
   32c38:	e13ffc15 	stw	r4,-16(fp)
   32c3c:	e17ffd15 	stw	r5,-12(fp)
   32c40:	e1bffe15 	stw	r6,-8(fp)
   32c44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   32c48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   32c4c:	e0bffd17 	ldw	r2,-12(fp)
   32c50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32c54:	00003706 	br	32d34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   32c58:	e0bffc17 	ldw	r2,-16(fp)
   32c5c:	10800c17 	ldw	r2,48(r2)
   32c60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   32c64:	e0bffc17 	ldw	r2,-16(fp)
   32c68:	10800d17 	ldw	r2,52(r2)
   32c6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   32c70:	e0fff917 	ldw	r3,-28(fp)
   32c74:	e0bff517 	ldw	r2,-44(fp)
   32c78:	1880062e 	bgeu	r3,r2,32c94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   32c7c:	e0fff517 	ldw	r3,-44(fp)
   32c80:	e0bff917 	ldw	r2,-28(fp)
   32c84:	1885c83a 	sub	r2,r3,r2
   32c88:	10bfffc4 	addi	r2,r2,-1
   32c8c:	e0bff615 	stw	r2,-40(fp)
   32c90:	00000b06 	br	32cc0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   32c94:	e0bff517 	ldw	r2,-44(fp)
   32c98:	10000526 	beq	r2,zero,32cb0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   32c9c:	00c20004 	movi	r3,2048
   32ca0:	e0bff917 	ldw	r2,-28(fp)
   32ca4:	1885c83a 	sub	r2,r3,r2
   32ca8:	e0bff615 	stw	r2,-40(fp)
   32cac:	00000406 	br	32cc0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   32cb0:	00c1ffc4 	movi	r3,2047
   32cb4:	e0bff917 	ldw	r2,-28(fp)
   32cb8:	1885c83a 	sub	r2,r3,r2
   32cbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   32cc0:	e0bff617 	ldw	r2,-40(fp)
   32cc4:	10001e26 	beq	r2,zero,32d40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   32cc8:	e0fffe17 	ldw	r3,-8(fp)
   32ccc:	e0bff617 	ldw	r2,-40(fp)
   32cd0:	1880022e 	bgeu	r3,r2,32cdc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   32cd4:	e0bffe17 	ldw	r2,-8(fp)
   32cd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   32cdc:	e0bffc17 	ldw	r2,-16(fp)
   32ce0:	10c20e04 	addi	r3,r2,2104
   32ce4:	e0bff917 	ldw	r2,-28(fp)
   32ce8:	1885883a 	add	r2,r3,r2
   32cec:	e1bff617 	ldw	r6,-40(fp)
   32cf0:	e17ffd17 	ldw	r5,-12(fp)
   32cf4:	1009883a 	mov	r4,r2
   32cf8:	002cd680 	call	2cd68 <memcpy>
      ptr   += n;
   32cfc:	e0fffd17 	ldw	r3,-12(fp)
   32d00:	e0bff617 	ldw	r2,-40(fp)
   32d04:	1885883a 	add	r2,r3,r2
   32d08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   32d0c:	e0fffe17 	ldw	r3,-8(fp)
   32d10:	e0bff617 	ldw	r2,-40(fp)
   32d14:	1885c83a 	sub	r2,r3,r2
   32d18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   32d1c:	e0fff917 	ldw	r3,-28(fp)
   32d20:	e0bff617 	ldw	r2,-40(fp)
   32d24:	1885883a 	add	r2,r3,r2
   32d28:	10c1ffcc 	andi	r3,r2,2047
   32d2c:	e0bffc17 	ldw	r2,-16(fp)
   32d30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   32d34:	e0bffe17 	ldw	r2,-8(fp)
   32d38:	00bfc716 	blt	zero,r2,32c58 <__alt_data_end+0xffff3858>
   32d3c:	00000106 	br	32d44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   32d40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32d44:	0005303a 	rdctl	r2,status
   32d48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32d4c:	e0fffb17 	ldw	r3,-20(fp)
   32d50:	00bfff84 	movi	r2,-2
   32d54:	1884703a 	and	r2,r3,r2
   32d58:	1001703a 	wrctl	status,r2
  
  return context;
   32d5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   32d60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   32d64:	e0bffc17 	ldw	r2,-16(fp)
   32d68:	10800817 	ldw	r2,32(r2)
   32d6c:	10c00094 	ori	r3,r2,2
   32d70:	e0bffc17 	ldw	r2,-16(fp)
   32d74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   32d78:	e0bffc17 	ldw	r2,-16(fp)
   32d7c:	10800017 	ldw	r2,0(r2)
   32d80:	10800104 	addi	r2,r2,4
   32d84:	1007883a 	mov	r3,r2
   32d88:	e0bffc17 	ldw	r2,-16(fp)
   32d8c:	10800817 	ldw	r2,32(r2)
   32d90:	18800035 	stwio	r2,0(r3)
   32d94:	e0bffa17 	ldw	r2,-24(fp)
   32d98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32d9c:	e0bff817 	ldw	r2,-32(fp)
   32da0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   32da4:	e0bffe17 	ldw	r2,-8(fp)
   32da8:	0080100e 	bge	zero,r2,32dec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   32dac:	e0bfff17 	ldw	r2,-4(fp)
   32db0:	1090000c 	andi	r2,r2,16384
   32db4:	1000101e 	bne	r2,zero,32df8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   32db8:	0001883a 	nop
   32dbc:	e0bffc17 	ldw	r2,-16(fp)
   32dc0:	10c00d17 	ldw	r3,52(r2)
   32dc4:	e0bff517 	ldw	r2,-44(fp)
   32dc8:	1880051e 	bne	r3,r2,32de0 <altera_avalon_jtag_uart_write+0x1b8>
   32dcc:	e0bffc17 	ldw	r2,-16(fp)
   32dd0:	10c00917 	ldw	r3,36(r2)
   32dd4:	e0bffc17 	ldw	r2,-16(fp)
   32dd8:	10800117 	ldw	r2,4(r2)
   32ddc:	18bff736 	bltu	r3,r2,32dbc <__alt_data_end+0xffff39bc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   32de0:	e0bffc17 	ldw	r2,-16(fp)
   32de4:	10800917 	ldw	r2,36(r2)
   32de8:	1000051e 	bne	r2,zero,32e00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   32dec:	e0bffe17 	ldw	r2,-8(fp)
   32df0:	00bfd016 	blt	zero,r2,32d34 <__alt_data_end+0xffff3934>
   32df4:	00000306 	br	32e04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   32df8:	0001883a 	nop
   32dfc:	00000106 	br	32e04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   32e00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   32e04:	e0fffd17 	ldw	r3,-12(fp)
   32e08:	e0bff717 	ldw	r2,-36(fp)
   32e0c:	18800426 	beq	r3,r2,32e20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   32e10:	e0fffd17 	ldw	r3,-12(fp)
   32e14:	e0bff717 	ldw	r2,-36(fp)
   32e18:	1885c83a 	sub	r2,r3,r2
   32e1c:	00000606 	br	32e38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   32e20:	e0bfff17 	ldw	r2,-4(fp)
   32e24:	1090000c 	andi	r2,r2,16384
   32e28:	10000226 	beq	r2,zero,32e34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   32e2c:	00bffd44 	movi	r2,-11
   32e30:	00000106 	br	32e38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   32e34:	00bffec4 	movi	r2,-5
}
   32e38:	e037883a 	mov	sp,fp
   32e3c:	dfc00117 	ldw	ra,4(sp)
   32e40:	df000017 	ldw	fp,0(sp)
   32e44:	dec00204 	addi	sp,sp,8
   32e48:	f800283a 	ret

00032e4c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   32e4c:	defffa04 	addi	sp,sp,-24
   32e50:	dfc00515 	stw	ra,20(sp)
   32e54:	df000415 	stw	fp,16(sp)
   32e58:	df000404 	addi	fp,sp,16
   32e5c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   32e60:	0007883a 	mov	r3,zero
   32e64:	e0bfff17 	ldw	r2,-4(fp)
   32e68:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   32e6c:	e0bfff17 	ldw	r2,-4(fp)
   32e70:	10800104 	addi	r2,r2,4
   32e74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32e78:	0005303a 	rdctl	r2,status
   32e7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32e80:	e0fffd17 	ldw	r3,-12(fp)
   32e84:	00bfff84 	movi	r2,-2
   32e88:	1884703a 	and	r2,r3,r2
   32e8c:	1001703a 	wrctl	status,r2
  
  return context;
   32e90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   32e94:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   32e98:	00320a80 	call	320a8 <alt_tick>
   32e9c:	e0bffc17 	ldw	r2,-16(fp)
   32ea0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   32ea4:	e0bffe17 	ldw	r2,-8(fp)
   32ea8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   32eac:	0001883a 	nop
   32eb0:	e037883a 	mov	sp,fp
   32eb4:	dfc00117 	ldw	ra,4(sp)
   32eb8:	df000017 	ldw	fp,0(sp)
   32ebc:	dec00204 	addi	sp,sp,8
   32ec0:	f800283a 	ret

00032ec4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   32ec4:	defff804 	addi	sp,sp,-32
   32ec8:	dfc00715 	stw	ra,28(sp)
   32ecc:	df000615 	stw	fp,24(sp)
   32ed0:	df000604 	addi	fp,sp,24
   32ed4:	e13ffc15 	stw	r4,-16(fp)
   32ed8:	e17ffd15 	stw	r5,-12(fp)
   32edc:	e1bffe15 	stw	r6,-8(fp)
   32ee0:	e1ffff15 	stw	r7,-4(fp)
   32ee4:	e0bfff17 	ldw	r2,-4(fp)
   32ee8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   32eec:	d0a6da17 	ldw	r2,-25752(gp)
   32ef0:	1000021e 	bne	r2,zero,32efc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   32ef4:	e0bffb17 	ldw	r2,-20(fp)
   32ef8:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   32efc:	e0bffc17 	ldw	r2,-16(fp)
   32f00:	10800104 	addi	r2,r2,4
   32f04:	00c001c4 	movi	r3,7
   32f08:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   32f0c:	d8000015 	stw	zero,0(sp)
   32f10:	e1fffc17 	ldw	r7,-16(fp)
   32f14:	018000f4 	movhi	r6,3
   32f18:	318b9304 	addi	r6,r6,11852
   32f1c:	e17ffe17 	ldw	r5,-8(fp)
   32f20:	e13ffd17 	ldw	r4,-12(fp)
   32f24:	00333e00 	call	333e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   32f28:	0001883a 	nop
   32f2c:	e037883a 	mov	sp,fp
   32f30:	dfc00117 	ldw	ra,4(sp)
   32f34:	df000017 	ldw	fp,0(sp)
   32f38:	dec00204 	addi	sp,sp,8
   32f3c:	f800283a 	ret

00032f40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   32f40:	defff504 	addi	sp,sp,-44
   32f44:	df000a15 	stw	fp,40(sp)
   32f48:	df000a04 	addi	fp,sp,40
   32f4c:	e13ffc15 	stw	r4,-16(fp)
   32f50:	e17ffd15 	stw	r5,-12(fp)
   32f54:	e1bffe15 	stw	r6,-8(fp)
   32f58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   32f5c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   32f60:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
   32f64:	10003c26 	beq	r2,zero,33058 <alt_alarm_start+0x118>
  {
    if (alarm)
   32f68:	e0bffc17 	ldw	r2,-16(fp)
   32f6c:	10003826 	beq	r2,zero,33050 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   32f70:	e0bffc17 	ldw	r2,-16(fp)
   32f74:	e0fffe17 	ldw	r3,-8(fp)
   32f78:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   32f7c:	e0bffc17 	ldw	r2,-16(fp)
   32f80:	e0ffff17 	ldw	r3,-4(fp)
   32f84:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   32f88:	0005303a 	rdctl	r2,status
   32f8c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   32f90:	e0fff917 	ldw	r3,-28(fp)
   32f94:	00bfff84 	movi	r2,-2
   32f98:	1884703a 	and	r2,r3,r2
   32f9c:	1001703a 	wrctl	status,r2
  
  return context;
   32fa0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   32fa4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   32fa8:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
   32fac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   32fb0:	e0fffd17 	ldw	r3,-12(fp)
   32fb4:	e0bff617 	ldw	r2,-40(fp)
   32fb8:	1885883a 	add	r2,r3,r2
   32fbc:	10c00044 	addi	r3,r2,1
   32fc0:	e0bffc17 	ldw	r2,-16(fp)
   32fc4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   32fc8:	e0bffc17 	ldw	r2,-16(fp)
   32fcc:	10c00217 	ldw	r3,8(r2)
   32fd0:	e0bff617 	ldw	r2,-40(fp)
   32fd4:	1880042e 	bgeu	r3,r2,32fe8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   32fd8:	e0bffc17 	ldw	r2,-16(fp)
   32fdc:	00c00044 	movi	r3,1
   32fe0:	10c00405 	stb	r3,16(r2)
   32fe4:	00000206 	br	32ff0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   32fe8:	e0bffc17 	ldw	r2,-16(fp)
   32fec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   32ff0:	e0bffc17 	ldw	r2,-16(fp)
   32ff4:	d0e00e04 	addi	r3,gp,-32712
   32ff8:	e0fffa15 	stw	r3,-24(fp)
   32ffc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   33000:	e0bffb17 	ldw	r2,-20(fp)
   33004:	e0fffa17 	ldw	r3,-24(fp)
   33008:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   3300c:	e0bffa17 	ldw	r2,-24(fp)
   33010:	10c00017 	ldw	r3,0(r2)
   33014:	e0bffb17 	ldw	r2,-20(fp)
   33018:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   3301c:	e0bffa17 	ldw	r2,-24(fp)
   33020:	10800017 	ldw	r2,0(r2)
   33024:	e0fffb17 	ldw	r3,-20(fp)
   33028:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   3302c:	e0bffa17 	ldw	r2,-24(fp)
   33030:	e0fffb17 	ldw	r3,-20(fp)
   33034:	10c00015 	stw	r3,0(r2)
   33038:	e0bff817 	ldw	r2,-32(fp)
   3303c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33040:	e0bff717 	ldw	r2,-36(fp)
   33044:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   33048:	0005883a 	mov	r2,zero
   3304c:	00000306 	br	3305c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   33050:	00bffa84 	movi	r2,-22
   33054:	00000106 	br	3305c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   33058:	00bfde84 	movi	r2,-134
  }
}
   3305c:	e037883a 	mov	sp,fp
   33060:	df000017 	ldw	fp,0(sp)
   33064:	dec00104 	addi	sp,sp,4
   33068:	f800283a 	ret

0003306c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   3306c:	defffa04 	addi	sp,sp,-24
   33070:	dfc00515 	stw	ra,20(sp)
   33074:	df000415 	stw	fp,16(sp)
   33078:	df000404 	addi	fp,sp,16
   3307c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   33080:	008000c4 	movi	r2,3
   33084:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   33088:	e0fffd17 	ldw	r3,-12(fp)
   3308c:	008003f4 	movhi	r2,15
   33090:	10909004 	addi	r2,r2,16960
   33094:	1885383a 	mul	r2,r3,r2
   33098:	100b883a 	mov	r5,r2
   3309c:	0100bef4 	movhi	r4,763
   330a0:	213c2004 	addi	r4,r4,-3968
   330a4:	00239200 	call	23920 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   330a8:	100b883a 	mov	r5,r2
   330ac:	01200034 	movhi	r4,32768
   330b0:	213fffc4 	addi	r4,r4,-1
   330b4:	00239200 	call	23920 <__udivsi3>
   330b8:	100b883a 	mov	r5,r2
   330bc:	e13fff17 	ldw	r4,-4(fp)
   330c0:	00239200 	call	23920 <__udivsi3>
   330c4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   330c8:	e0bffe17 	ldw	r2,-8(fp)
   330cc:	10002a26 	beq	r2,zero,33178 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   330d0:	e03ffc15 	stw	zero,-16(fp)
   330d4:	00001706 	br	33134 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   330d8:	00a00034 	movhi	r2,32768
   330dc:	10bfffc4 	addi	r2,r2,-1
   330e0:	10bfffc4 	addi	r2,r2,-1
   330e4:	103ffe1e 	bne	r2,zero,330e0 <__alt_data_end+0xffff3ce0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   330e8:	e0fffd17 	ldw	r3,-12(fp)
   330ec:	008003f4 	movhi	r2,15
   330f0:	10909004 	addi	r2,r2,16960
   330f4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   330f8:	100b883a 	mov	r5,r2
   330fc:	0100bef4 	movhi	r4,763
   33100:	213c2004 	addi	r4,r4,-3968
   33104:	00239200 	call	23920 <__udivsi3>
   33108:	100b883a 	mov	r5,r2
   3310c:	01200034 	movhi	r4,32768
   33110:	213fffc4 	addi	r4,r4,-1
   33114:	00239200 	call	23920 <__udivsi3>
   33118:	1007883a 	mov	r3,r2
   3311c:	e0bfff17 	ldw	r2,-4(fp)
   33120:	10c5c83a 	sub	r2,r2,r3
   33124:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   33128:	e0bffc17 	ldw	r2,-16(fp)
   3312c:	10800044 	addi	r2,r2,1
   33130:	e0bffc15 	stw	r2,-16(fp)
   33134:	e0fffc17 	ldw	r3,-16(fp)
   33138:	e0bffe17 	ldw	r2,-8(fp)
   3313c:	18bfe616 	blt	r3,r2,330d8 <__alt_data_end+0xffff3cd8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   33140:	e0fffd17 	ldw	r3,-12(fp)
   33144:	008003f4 	movhi	r2,15
   33148:	10909004 	addi	r2,r2,16960
   3314c:	1885383a 	mul	r2,r3,r2
   33150:	100b883a 	mov	r5,r2
   33154:	0100bef4 	movhi	r4,763
   33158:	213c2004 	addi	r4,r4,-3968
   3315c:	00239200 	call	23920 <__udivsi3>
   33160:	1007883a 	mov	r3,r2
   33164:	e0bfff17 	ldw	r2,-4(fp)
   33168:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   3316c:	10bfffc4 	addi	r2,r2,-1
   33170:	103ffe1e 	bne	r2,zero,3316c <__alt_data_end+0xffff3d6c>
   33174:	00000d06 	br	331ac <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   33178:	e0fffd17 	ldw	r3,-12(fp)
   3317c:	008003f4 	movhi	r2,15
   33180:	10909004 	addi	r2,r2,16960
   33184:	1885383a 	mul	r2,r3,r2
   33188:	100b883a 	mov	r5,r2
   3318c:	0100bef4 	movhi	r4,763
   33190:	213c2004 	addi	r4,r4,-3968
   33194:	00239200 	call	23920 <__udivsi3>
   33198:	1007883a 	mov	r3,r2
   3319c:	e0bfff17 	ldw	r2,-4(fp)
   331a0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   331a4:	10bfffc4 	addi	r2,r2,-1
   331a8:	00bffe16 	blt	zero,r2,331a4 <__alt_data_end+0xffff3da4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   331ac:	0005883a 	mov	r2,zero
}
   331b0:	e037883a 	mov	sp,fp
   331b4:	dfc00117 	ldw	ra,4(sp)
   331b8:	df000017 	ldw	fp,0(sp)
   331bc:	dec00204 	addi	sp,sp,8
   331c0:	f800283a 	ret

000331c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   331c4:	defffe04 	addi	sp,sp,-8
   331c8:	df000115 	stw	fp,4(sp)
   331cc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   331d0:	e03fff15 	stw	zero,-4(fp)
   331d4:	00000506 	br	331ec <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   331d8:	e0bfff17 	ldw	r2,-4(fp)
   331dc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   331e0:	e0bfff17 	ldw	r2,-4(fp)
   331e4:	10800804 	addi	r2,r2,32
   331e8:	e0bfff15 	stw	r2,-4(fp)
   331ec:	e0bfff17 	ldw	r2,-4(fp)
   331f0:	10820030 	cmpltui	r2,r2,2048
   331f4:	103ff81e 	bne	r2,zero,331d8 <__alt_data_end+0xffff3dd8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   331f8:	0001883a 	nop
   331fc:	e037883a 	mov	sp,fp
   33200:	df000017 	ldw	fp,0(sp)
   33204:	dec00104 	addi	sp,sp,4
   33208:	f800283a 	ret

0003320c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   3320c:	defffe04 	addi	sp,sp,-8
   33210:	dfc00115 	stw	ra,4(sp)
   33214:	df000015 	stw	fp,0(sp)
   33218:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   3321c:	d0a00c17 	ldw	r2,-32720(gp)
   33220:	10000326 	beq	r2,zero,33230 <alt_get_errno+0x24>
   33224:	d0a00c17 	ldw	r2,-32720(gp)
   33228:	103ee83a 	callr	r2
   3322c:	00000106 	br	33234 <alt_get_errno+0x28>
   33230:	d0a6d604 	addi	r2,gp,-25768
}
   33234:	e037883a 	mov	sp,fp
   33238:	dfc00117 	ldw	ra,4(sp)
   3323c:	df000017 	ldw	fp,0(sp)
   33240:	dec00204 	addi	sp,sp,8
   33244:	f800283a 	ret

00033248 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   33248:	defffa04 	addi	sp,sp,-24
   3324c:	dfc00515 	stw	ra,20(sp)
   33250:	df000415 	stw	fp,16(sp)
   33254:	df000404 	addi	fp,sp,16
   33258:	e13ffe15 	stw	r4,-8(fp)
   3325c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   33260:	e0bffe17 	ldw	r2,-8(fp)
   33264:	10000326 	beq	r2,zero,33274 <alt_dev_llist_insert+0x2c>
   33268:	e0bffe17 	ldw	r2,-8(fp)
   3326c:	10800217 	ldw	r2,8(r2)
   33270:	1000061e 	bne	r2,zero,3328c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   33274:	003320c0 	call	3320c <alt_get_errno>
   33278:	1007883a 	mov	r3,r2
   3327c:	00800584 	movi	r2,22
   33280:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   33284:	00bffa84 	movi	r2,-22
   33288:	00001306 	br	332d8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   3328c:	e0bffe17 	ldw	r2,-8(fp)
   33290:	e0ffff17 	ldw	r3,-4(fp)
   33294:	e0fffc15 	stw	r3,-16(fp)
   33298:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   3329c:	e0bffd17 	ldw	r2,-12(fp)
   332a0:	e0fffc17 	ldw	r3,-16(fp)
   332a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   332a8:	e0bffc17 	ldw	r2,-16(fp)
   332ac:	10c00017 	ldw	r3,0(r2)
   332b0:	e0bffd17 	ldw	r2,-12(fp)
   332b4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   332b8:	e0bffc17 	ldw	r2,-16(fp)
   332bc:	10800017 	ldw	r2,0(r2)
   332c0:	e0fffd17 	ldw	r3,-12(fp)
   332c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   332c8:	e0bffc17 	ldw	r2,-16(fp)
   332cc:	e0fffd17 	ldw	r3,-12(fp)
   332d0:	10c00015 	stw	r3,0(r2)

  return 0;  
   332d4:	0005883a 	mov	r2,zero
}
   332d8:	e037883a 	mov	sp,fp
   332dc:	dfc00117 	ldw	ra,4(sp)
   332e0:	df000017 	ldw	fp,0(sp)
   332e4:	dec00204 	addi	sp,sp,8
   332e8:	f800283a 	ret

000332ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   332ec:	defffd04 	addi	sp,sp,-12
   332f0:	dfc00215 	stw	ra,8(sp)
   332f4:	df000115 	stw	fp,4(sp)
   332f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   332fc:	008000f4 	movhi	r2,3
   33300:	10904c04 	addi	r2,r2,16688
   33304:	e0bfff15 	stw	r2,-4(fp)
   33308:	00000606 	br	33324 <_do_ctors+0x38>
        (*ctor) (); 
   3330c:	e0bfff17 	ldw	r2,-4(fp)
   33310:	10800017 	ldw	r2,0(r2)
   33314:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   33318:	e0bfff17 	ldw	r2,-4(fp)
   3331c:	10bfff04 	addi	r2,r2,-4
   33320:	e0bfff15 	stw	r2,-4(fp)
   33324:	e0ffff17 	ldw	r3,-4(fp)
   33328:	008000f4 	movhi	r2,3
   3332c:	10904d04 	addi	r2,r2,16692
   33330:	18bff62e 	bgeu	r3,r2,3330c <__alt_data_end+0xffff3f0c>
        (*ctor) (); 
}
   33334:	0001883a 	nop
   33338:	e037883a 	mov	sp,fp
   3333c:	dfc00117 	ldw	ra,4(sp)
   33340:	df000017 	ldw	fp,0(sp)
   33344:	dec00204 	addi	sp,sp,8
   33348:	f800283a 	ret

0003334c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   3334c:	defffd04 	addi	sp,sp,-12
   33350:	dfc00215 	stw	ra,8(sp)
   33354:	df000115 	stw	fp,4(sp)
   33358:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   3335c:	008000f4 	movhi	r2,3
   33360:	10904c04 	addi	r2,r2,16688
   33364:	e0bfff15 	stw	r2,-4(fp)
   33368:	00000606 	br	33384 <_do_dtors+0x38>
        (*dtor) (); 
   3336c:	e0bfff17 	ldw	r2,-4(fp)
   33370:	10800017 	ldw	r2,0(r2)
   33374:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   33378:	e0bfff17 	ldw	r2,-4(fp)
   3337c:	10bfff04 	addi	r2,r2,-4
   33380:	e0bfff15 	stw	r2,-4(fp)
   33384:	e0ffff17 	ldw	r3,-4(fp)
   33388:	008000f4 	movhi	r2,3
   3338c:	10904d04 	addi	r2,r2,16692
   33390:	18bff62e 	bgeu	r3,r2,3336c <__alt_data_end+0xffff3f6c>
        (*dtor) (); 
}
   33394:	0001883a 	nop
   33398:	e037883a 	mov	sp,fp
   3339c:	dfc00117 	ldw	ra,4(sp)
   333a0:	df000017 	ldw	fp,0(sp)
   333a4:	dec00204 	addi	sp,sp,8
   333a8:	f800283a 	ret

000333ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   333ac:	defffe04 	addi	sp,sp,-8
   333b0:	dfc00115 	stw	ra,4(sp)
   333b4:	df000015 	stw	fp,0(sp)
   333b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   333bc:	01440004 	movi	r5,4096
   333c0:	0009883a 	mov	r4,zero
   333c4:	0033c740 	call	33c74 <alt_icache_flush>
#endif
}
   333c8:	0001883a 	nop
   333cc:	e037883a 	mov	sp,fp
   333d0:	dfc00117 	ldw	ra,4(sp)
   333d4:	df000017 	ldw	fp,0(sp)
   333d8:	dec00204 	addi	sp,sp,8
   333dc:	f800283a 	ret

000333e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   333e0:	defff904 	addi	sp,sp,-28
   333e4:	dfc00615 	stw	ra,24(sp)
   333e8:	df000515 	stw	fp,20(sp)
   333ec:	df000504 	addi	fp,sp,20
   333f0:	e13ffc15 	stw	r4,-16(fp)
   333f4:	e17ffd15 	stw	r5,-12(fp)
   333f8:	e1bffe15 	stw	r6,-8(fp)
   333fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   33400:	e0800217 	ldw	r2,8(fp)
   33404:	d8800015 	stw	r2,0(sp)
   33408:	e1ffff17 	ldw	r7,-4(fp)
   3340c:	e1bffe17 	ldw	r6,-8(fp)
   33410:	e17ffd17 	ldw	r5,-12(fp)
   33414:	e13ffc17 	ldw	r4,-16(fp)
   33418:	00335900 	call	33590 <alt_iic_isr_register>
}  
   3341c:	e037883a 	mov	sp,fp
   33420:	dfc00117 	ldw	ra,4(sp)
   33424:	df000017 	ldw	fp,0(sp)
   33428:	dec00204 	addi	sp,sp,8
   3342c:	f800283a 	ret

00033430 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   33430:	defff904 	addi	sp,sp,-28
   33434:	df000615 	stw	fp,24(sp)
   33438:	df000604 	addi	fp,sp,24
   3343c:	e13ffe15 	stw	r4,-8(fp)
   33440:	e17fff15 	stw	r5,-4(fp)
   33444:	e0bfff17 	ldw	r2,-4(fp)
   33448:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   3344c:	0005303a 	rdctl	r2,status
   33450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   33454:	e0fffb17 	ldw	r3,-20(fp)
   33458:	00bfff84 	movi	r2,-2
   3345c:	1884703a 	and	r2,r3,r2
   33460:	1001703a 	wrctl	status,r2
  
  return context;
   33464:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   33468:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   3346c:	00c00044 	movi	r3,1
   33470:	e0bffa17 	ldw	r2,-24(fp)
   33474:	1884983a 	sll	r2,r3,r2
   33478:	1007883a 	mov	r3,r2
   3347c:	d0a6dc17 	ldw	r2,-25744(gp)
   33480:	1884b03a 	or	r2,r3,r2
   33484:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   33488:	d0a6dc17 	ldw	r2,-25744(gp)
   3348c:	100170fa 	wrctl	ienable,r2
   33490:	e0bffc17 	ldw	r2,-16(fp)
   33494:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33498:	e0bffd17 	ldw	r2,-12(fp)
   3349c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   334a0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   334a4:	0001883a 	nop
}
   334a8:	e037883a 	mov	sp,fp
   334ac:	df000017 	ldw	fp,0(sp)
   334b0:	dec00104 	addi	sp,sp,4
   334b4:	f800283a 	ret

000334b8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   334b8:	defff904 	addi	sp,sp,-28
   334bc:	df000615 	stw	fp,24(sp)
   334c0:	df000604 	addi	fp,sp,24
   334c4:	e13ffe15 	stw	r4,-8(fp)
   334c8:	e17fff15 	stw	r5,-4(fp)
   334cc:	e0bfff17 	ldw	r2,-4(fp)
   334d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   334d4:	0005303a 	rdctl	r2,status
   334d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   334dc:	e0fffb17 	ldw	r3,-20(fp)
   334e0:	00bfff84 	movi	r2,-2
   334e4:	1884703a 	and	r2,r3,r2
   334e8:	1001703a 	wrctl	status,r2
  
  return context;
   334ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   334f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   334f4:	00c00044 	movi	r3,1
   334f8:	e0bffa17 	ldw	r2,-24(fp)
   334fc:	1884983a 	sll	r2,r3,r2
   33500:	0084303a 	nor	r2,zero,r2
   33504:	1007883a 	mov	r3,r2
   33508:	d0a6dc17 	ldw	r2,-25744(gp)
   3350c:	1884703a 	and	r2,r3,r2
   33510:	d0a6dc15 	stw	r2,-25744(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   33514:	d0a6dc17 	ldw	r2,-25744(gp)
   33518:	100170fa 	wrctl	ienable,r2
   3351c:	e0bffc17 	ldw	r2,-16(fp)
   33520:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33524:	e0bffd17 	ldw	r2,-12(fp)
   33528:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   3352c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   33530:	0001883a 	nop
}
   33534:	e037883a 	mov	sp,fp
   33538:	df000017 	ldw	fp,0(sp)
   3353c:	dec00104 	addi	sp,sp,4
   33540:	f800283a 	ret

00033544 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   33544:	defffc04 	addi	sp,sp,-16
   33548:	df000315 	stw	fp,12(sp)
   3354c:	df000304 	addi	fp,sp,12
   33550:	e13ffe15 	stw	r4,-8(fp)
   33554:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   33558:	000530fa 	rdctl	r2,ienable
   3355c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   33560:	00c00044 	movi	r3,1
   33564:	e0bfff17 	ldw	r2,-4(fp)
   33568:	1884983a 	sll	r2,r3,r2
   3356c:	1007883a 	mov	r3,r2
   33570:	e0bffd17 	ldw	r2,-12(fp)
   33574:	1884703a 	and	r2,r3,r2
   33578:	1004c03a 	cmpne	r2,r2,zero
   3357c:	10803fcc 	andi	r2,r2,255
}
   33580:	e037883a 	mov	sp,fp
   33584:	df000017 	ldw	fp,0(sp)
   33588:	dec00104 	addi	sp,sp,4
   3358c:	f800283a 	ret

00033590 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   33590:	defff504 	addi	sp,sp,-44
   33594:	dfc00a15 	stw	ra,40(sp)
   33598:	df000915 	stw	fp,36(sp)
   3359c:	df000904 	addi	fp,sp,36
   335a0:	e13ffc15 	stw	r4,-16(fp)
   335a4:	e17ffd15 	stw	r5,-12(fp)
   335a8:	e1bffe15 	stw	r6,-8(fp)
   335ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   335b0:	00bffa84 	movi	r2,-22
   335b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   335b8:	e0bffd17 	ldw	r2,-12(fp)
   335bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   335c0:	e0bff817 	ldw	r2,-32(fp)
   335c4:	10800808 	cmpgei	r2,r2,32
   335c8:	1000271e 	bne	r2,zero,33668 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   335cc:	0005303a 	rdctl	r2,status
   335d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   335d4:	e0fffb17 	ldw	r3,-20(fp)
   335d8:	00bfff84 	movi	r2,-2
   335dc:	1884703a 	and	r2,r3,r2
   335e0:	1001703a 	wrctl	status,r2
  
  return context;
   335e4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   335e8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   335ec:	00800134 	movhi	r2,4
   335f0:	10a09104 	addi	r2,r2,-32188
   335f4:	e0fff817 	ldw	r3,-32(fp)
   335f8:	180690fa 	slli	r3,r3,3
   335fc:	10c5883a 	add	r2,r2,r3
   33600:	e0fffe17 	ldw	r3,-8(fp)
   33604:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   33608:	00800134 	movhi	r2,4
   3360c:	10a09104 	addi	r2,r2,-32188
   33610:	e0fff817 	ldw	r3,-32(fp)
   33614:	180690fa 	slli	r3,r3,3
   33618:	10c5883a 	add	r2,r2,r3
   3361c:	10800104 	addi	r2,r2,4
   33620:	e0ffff17 	ldw	r3,-4(fp)
   33624:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   33628:	e0bffe17 	ldw	r2,-8(fp)
   3362c:	10000526 	beq	r2,zero,33644 <alt_iic_isr_register+0xb4>
   33630:	e0bff817 	ldw	r2,-32(fp)
   33634:	100b883a 	mov	r5,r2
   33638:	e13ffc17 	ldw	r4,-16(fp)
   3363c:	00334300 	call	33430 <alt_ic_irq_enable>
   33640:	00000406 	br	33654 <alt_iic_isr_register+0xc4>
   33644:	e0bff817 	ldw	r2,-32(fp)
   33648:	100b883a 	mov	r5,r2
   3364c:	e13ffc17 	ldw	r4,-16(fp)
   33650:	00334b80 	call	334b8 <alt_ic_irq_disable>
   33654:	e0bff715 	stw	r2,-36(fp)
   33658:	e0bffa17 	ldw	r2,-24(fp)
   3365c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   33660:	e0bff917 	ldw	r2,-28(fp)
   33664:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   33668:	e0bff717 	ldw	r2,-36(fp)
}
   3366c:	e037883a 	mov	sp,fp
   33670:	dfc00117 	ldw	ra,4(sp)
   33674:	df000017 	ldw	fp,0(sp)
   33678:	dec00204 	addi	sp,sp,8
   3367c:	f800283a 	ret

00033680 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   33680:	defff904 	addi	sp,sp,-28
   33684:	dfc00615 	stw	ra,24(sp)
   33688:	df000515 	stw	fp,20(sp)
   3368c:	df000504 	addi	fp,sp,20
   33690:	e13ffc15 	stw	r4,-16(fp)
   33694:	e17ffd15 	stw	r5,-12(fp)
   33698:	e1bffe15 	stw	r6,-8(fp)
   3369c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   336a0:	e1bfff17 	ldw	r6,-4(fp)
   336a4:	e17ffe17 	ldw	r5,-8(fp)
   336a8:	e13ffd17 	ldw	r4,-12(fp)
   336ac:	00338c00 	call	338c0 <open>
   336b0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   336b4:	e0bffb17 	ldw	r2,-20(fp)
   336b8:	10001c16 	blt	r2,zero,3372c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   336bc:	008000f4 	movhi	r2,3
   336c0:	10952204 	addi	r2,r2,21640
   336c4:	e0fffb17 	ldw	r3,-20(fp)
   336c8:	18c00324 	muli	r3,r3,12
   336cc:	10c5883a 	add	r2,r2,r3
   336d0:	10c00017 	ldw	r3,0(r2)
   336d4:	e0bffc17 	ldw	r2,-16(fp)
   336d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   336dc:	008000f4 	movhi	r2,3
   336e0:	10952204 	addi	r2,r2,21640
   336e4:	e0fffb17 	ldw	r3,-20(fp)
   336e8:	18c00324 	muli	r3,r3,12
   336ec:	10c5883a 	add	r2,r2,r3
   336f0:	10800104 	addi	r2,r2,4
   336f4:	10c00017 	ldw	r3,0(r2)
   336f8:	e0bffc17 	ldw	r2,-16(fp)
   336fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   33700:	008000f4 	movhi	r2,3
   33704:	10952204 	addi	r2,r2,21640
   33708:	e0fffb17 	ldw	r3,-20(fp)
   3370c:	18c00324 	muli	r3,r3,12
   33710:	10c5883a 	add	r2,r2,r3
   33714:	10800204 	addi	r2,r2,8
   33718:	10c00017 	ldw	r3,0(r2)
   3371c:	e0bffc17 	ldw	r2,-16(fp)
   33720:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   33724:	e13ffb17 	ldw	r4,-20(fp)
   33728:	0031ef80 	call	31ef8 <alt_release_fd>
  }
} 
   3372c:	0001883a 	nop
   33730:	e037883a 	mov	sp,fp
   33734:	dfc00117 	ldw	ra,4(sp)
   33738:	df000017 	ldw	fp,0(sp)
   3373c:	dec00204 	addi	sp,sp,8
   33740:	f800283a 	ret

00033744 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   33744:	defffb04 	addi	sp,sp,-20
   33748:	dfc00415 	stw	ra,16(sp)
   3374c:	df000315 	stw	fp,12(sp)
   33750:	df000304 	addi	fp,sp,12
   33754:	e13ffd15 	stw	r4,-12(fp)
   33758:	e17ffe15 	stw	r5,-8(fp)
   3375c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   33760:	01c07fc4 	movi	r7,511
   33764:	01800044 	movi	r6,1
   33768:	e17ffd17 	ldw	r5,-12(fp)
   3376c:	010000f4 	movhi	r4,3
   33770:	21152504 	addi	r4,r4,21652
   33774:	00336800 	call	33680 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   33778:	01c07fc4 	movi	r7,511
   3377c:	000d883a 	mov	r6,zero
   33780:	e17ffe17 	ldw	r5,-8(fp)
   33784:	010000f4 	movhi	r4,3
   33788:	21152204 	addi	r4,r4,21640
   3378c:	00336800 	call	33680 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   33790:	01c07fc4 	movi	r7,511
   33794:	01800044 	movi	r6,1
   33798:	e17fff17 	ldw	r5,-4(fp)
   3379c:	010000f4 	movhi	r4,3
   337a0:	21152804 	addi	r4,r4,21664
   337a4:	00336800 	call	33680 <alt_open_fd>
}  
   337a8:	0001883a 	nop
   337ac:	e037883a 	mov	sp,fp
   337b0:	dfc00117 	ldw	ra,4(sp)
   337b4:	df000017 	ldw	fp,0(sp)
   337b8:	dec00204 	addi	sp,sp,8
   337bc:	f800283a 	ret

000337c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   337c0:	defffe04 	addi	sp,sp,-8
   337c4:	dfc00115 	stw	ra,4(sp)
   337c8:	df000015 	stw	fp,0(sp)
   337cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   337d0:	d0a00c17 	ldw	r2,-32720(gp)
   337d4:	10000326 	beq	r2,zero,337e4 <alt_get_errno+0x24>
   337d8:	d0a00c17 	ldw	r2,-32720(gp)
   337dc:	103ee83a 	callr	r2
   337e0:	00000106 	br	337e8 <alt_get_errno+0x28>
   337e4:	d0a6d604 	addi	r2,gp,-25768
}
   337e8:	e037883a 	mov	sp,fp
   337ec:	dfc00117 	ldw	ra,4(sp)
   337f0:	df000017 	ldw	fp,0(sp)
   337f4:	dec00204 	addi	sp,sp,8
   337f8:	f800283a 	ret

000337fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   337fc:	defffd04 	addi	sp,sp,-12
   33800:	df000215 	stw	fp,8(sp)
   33804:	df000204 	addi	fp,sp,8
   33808:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   3380c:	e0bfff17 	ldw	r2,-4(fp)
   33810:	10800217 	ldw	r2,8(r2)
   33814:	10d00034 	orhi	r3,r2,16384
   33818:	e0bfff17 	ldw	r2,-4(fp)
   3381c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   33820:	e03ffe15 	stw	zero,-8(fp)
   33824:	00001d06 	br	3389c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   33828:	008000f4 	movhi	r2,3
   3382c:	10952204 	addi	r2,r2,21640
   33830:	e0fffe17 	ldw	r3,-8(fp)
   33834:	18c00324 	muli	r3,r3,12
   33838:	10c5883a 	add	r2,r2,r3
   3383c:	10c00017 	ldw	r3,0(r2)
   33840:	e0bfff17 	ldw	r2,-4(fp)
   33844:	10800017 	ldw	r2,0(r2)
   33848:	1880111e 	bne	r3,r2,33890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   3384c:	008000f4 	movhi	r2,3
   33850:	10952204 	addi	r2,r2,21640
   33854:	e0fffe17 	ldw	r3,-8(fp)
   33858:	18c00324 	muli	r3,r3,12
   3385c:	10c5883a 	add	r2,r2,r3
   33860:	10800204 	addi	r2,r2,8
   33864:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   33868:	1000090e 	bge	r2,zero,33890 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   3386c:	e0bffe17 	ldw	r2,-8(fp)
   33870:	10c00324 	muli	r3,r2,12
   33874:	008000f4 	movhi	r2,3
   33878:	10952204 	addi	r2,r2,21640
   3387c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   33880:	e0bfff17 	ldw	r2,-4(fp)
   33884:	18800226 	beq	r3,r2,33890 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   33888:	00bffcc4 	movi	r2,-13
   3388c:	00000806 	br	338b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   33890:	e0bffe17 	ldw	r2,-8(fp)
   33894:	10800044 	addi	r2,r2,1
   33898:	e0bffe15 	stw	r2,-8(fp)
   3389c:	d0a00b17 	ldw	r2,-32724(gp)
   338a0:	1007883a 	mov	r3,r2
   338a4:	e0bffe17 	ldw	r2,-8(fp)
   338a8:	18bfdf2e 	bgeu	r3,r2,33828 <__alt_data_end+0xffff4428>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   338ac:	0005883a 	mov	r2,zero
}
   338b0:	e037883a 	mov	sp,fp
   338b4:	df000017 	ldw	fp,0(sp)
   338b8:	dec00104 	addi	sp,sp,4
   338bc:	f800283a 	ret

000338c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   338c0:	defff604 	addi	sp,sp,-40
   338c4:	dfc00915 	stw	ra,36(sp)
   338c8:	df000815 	stw	fp,32(sp)
   338cc:	df000804 	addi	fp,sp,32
   338d0:	e13ffd15 	stw	r4,-12(fp)
   338d4:	e17ffe15 	stw	r5,-8(fp)
   338d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   338dc:	00bfffc4 	movi	r2,-1
   338e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   338e4:	00bffb44 	movi	r2,-19
   338e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   338ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   338f0:	d1600904 	addi	r5,gp,-32732
   338f4:	e13ffd17 	ldw	r4,-12(fp)
   338f8:	0033a380 	call	33a38 <alt_find_dev>
   338fc:	e0bff815 	stw	r2,-32(fp)
   33900:	e0bff817 	ldw	r2,-32(fp)
   33904:	1000051e 	bne	r2,zero,3391c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   33908:	e13ffd17 	ldw	r4,-12(fp)
   3390c:	0033ac80 	call	33ac8 <alt_find_file>
   33910:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   33914:	00800044 	movi	r2,1
   33918:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   3391c:	e0bff817 	ldw	r2,-32(fp)
   33920:	10002926 	beq	r2,zero,339c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   33924:	e13ff817 	ldw	r4,-32(fp)
   33928:	0033bd00 	call	33bd0 <alt_get_fd>
   3392c:	e0bff915 	stw	r2,-28(fp)
   33930:	e0bff917 	ldw	r2,-28(fp)
   33934:	1000030e 	bge	r2,zero,33944 <open+0x84>
    {
      status = index;
   33938:	e0bff917 	ldw	r2,-28(fp)
   3393c:	e0bffa15 	stw	r2,-24(fp)
   33940:	00002306 	br	339d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   33944:	e0bff917 	ldw	r2,-28(fp)
   33948:	10c00324 	muli	r3,r2,12
   3394c:	008000f4 	movhi	r2,3
   33950:	10952204 	addi	r2,r2,21640
   33954:	1885883a 	add	r2,r3,r2
   33958:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   3395c:	e0fffe17 	ldw	r3,-8(fp)
   33960:	00900034 	movhi	r2,16384
   33964:	10bfffc4 	addi	r2,r2,-1
   33968:	1886703a 	and	r3,r3,r2
   3396c:	e0bffc17 	ldw	r2,-16(fp)
   33970:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   33974:	e0bffb17 	ldw	r2,-20(fp)
   33978:	1000051e 	bne	r2,zero,33990 <open+0xd0>
   3397c:	e13ffc17 	ldw	r4,-16(fp)
   33980:	00337fc0 	call	337fc <alt_file_locked>
   33984:	e0bffa15 	stw	r2,-24(fp)
   33988:	e0bffa17 	ldw	r2,-24(fp)
   3398c:	10001016 	blt	r2,zero,339d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   33990:	e0bff817 	ldw	r2,-32(fp)
   33994:	10800317 	ldw	r2,12(r2)
   33998:	10000826 	beq	r2,zero,339bc <open+0xfc>
   3399c:	e0bff817 	ldw	r2,-32(fp)
   339a0:	10800317 	ldw	r2,12(r2)
   339a4:	e1ffff17 	ldw	r7,-4(fp)
   339a8:	e1bffe17 	ldw	r6,-8(fp)
   339ac:	e17ffd17 	ldw	r5,-12(fp)
   339b0:	e13ffc17 	ldw	r4,-16(fp)
   339b4:	103ee83a 	callr	r2
   339b8:	00000106 	br	339c0 <open+0x100>
   339bc:	0005883a 	mov	r2,zero
   339c0:	e0bffa15 	stw	r2,-24(fp)
   339c4:	00000206 	br	339d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   339c8:	00bffb44 	movi	r2,-19
   339cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   339d0:	e0bffa17 	ldw	r2,-24(fp)
   339d4:	1000090e 	bge	r2,zero,339fc <open+0x13c>
  {
    alt_release_fd (index);  
   339d8:	e13ff917 	ldw	r4,-28(fp)
   339dc:	0031ef80 	call	31ef8 <alt_release_fd>
    ALT_ERRNO = -status;
   339e0:	00337c00 	call	337c0 <alt_get_errno>
   339e4:	1007883a 	mov	r3,r2
   339e8:	e0bffa17 	ldw	r2,-24(fp)
   339ec:	0085c83a 	sub	r2,zero,r2
   339f0:	18800015 	stw	r2,0(r3)
    return -1;
   339f4:	00bfffc4 	movi	r2,-1
   339f8:	00000106 	br	33a00 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   339fc:	e0bff917 	ldw	r2,-28(fp)
}
   33a00:	e037883a 	mov	sp,fp
   33a04:	dfc00117 	ldw	ra,4(sp)
   33a08:	df000017 	ldw	fp,0(sp)
   33a0c:	dec00204 	addi	sp,sp,8
   33a10:	f800283a 	ret

00033a14 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   33a14:	deffff04 	addi	sp,sp,-4
   33a18:	df000015 	stw	fp,0(sp)
   33a1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   33a20:	000170fa 	wrctl	ienable,zero
}
   33a24:	0001883a 	nop
   33a28:	e037883a 	mov	sp,fp
   33a2c:	df000017 	ldw	fp,0(sp)
   33a30:	dec00104 	addi	sp,sp,4
   33a34:	f800283a 	ret

00033a38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   33a38:	defffa04 	addi	sp,sp,-24
   33a3c:	dfc00515 	stw	ra,20(sp)
   33a40:	df000415 	stw	fp,16(sp)
   33a44:	df000404 	addi	fp,sp,16
   33a48:	e13ffe15 	stw	r4,-8(fp)
   33a4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   33a50:	e0bfff17 	ldw	r2,-4(fp)
   33a54:	10800017 	ldw	r2,0(r2)
   33a58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   33a5c:	e13ffe17 	ldw	r4,-8(fp)
   33a60:	00273dc0 	call	273dc <strlen>
   33a64:	10800044 	addi	r2,r2,1
   33a68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   33a6c:	00000d06 	br	33aa4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   33a70:	e0bffc17 	ldw	r2,-16(fp)
   33a74:	10800217 	ldw	r2,8(r2)
   33a78:	e0fffd17 	ldw	r3,-12(fp)
   33a7c:	180d883a 	mov	r6,r3
   33a80:	e17ffe17 	ldw	r5,-8(fp)
   33a84:	1009883a 	mov	r4,r2
   33a88:	0033dec0 	call	33dec <memcmp>
   33a8c:	1000021e 	bne	r2,zero,33a98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   33a90:	e0bffc17 	ldw	r2,-16(fp)
   33a94:	00000706 	br	33ab4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   33a98:	e0bffc17 	ldw	r2,-16(fp)
   33a9c:	10800017 	ldw	r2,0(r2)
   33aa0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   33aa4:	e0fffc17 	ldw	r3,-16(fp)
   33aa8:	e0bfff17 	ldw	r2,-4(fp)
   33aac:	18bff01e 	bne	r3,r2,33a70 <__alt_data_end+0xffff4670>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   33ab0:	0005883a 	mov	r2,zero
}
   33ab4:	e037883a 	mov	sp,fp
   33ab8:	dfc00117 	ldw	ra,4(sp)
   33abc:	df000017 	ldw	fp,0(sp)
   33ac0:	dec00204 	addi	sp,sp,8
   33ac4:	f800283a 	ret

00033ac8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   33ac8:	defffb04 	addi	sp,sp,-20
   33acc:	dfc00415 	stw	ra,16(sp)
   33ad0:	df000315 	stw	fp,12(sp)
   33ad4:	df000304 	addi	fp,sp,12
   33ad8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   33adc:	d0a00717 	ldw	r2,-32740(gp)
   33ae0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   33ae4:	00003106 	br	33bac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   33ae8:	e0bffd17 	ldw	r2,-12(fp)
   33aec:	10800217 	ldw	r2,8(r2)
   33af0:	1009883a 	mov	r4,r2
   33af4:	00273dc0 	call	273dc <strlen>
   33af8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   33afc:	e0bffd17 	ldw	r2,-12(fp)
   33b00:	10c00217 	ldw	r3,8(r2)
   33b04:	e0bffe17 	ldw	r2,-8(fp)
   33b08:	10bfffc4 	addi	r2,r2,-1
   33b0c:	1885883a 	add	r2,r3,r2
   33b10:	10800003 	ldbu	r2,0(r2)
   33b14:	10803fcc 	andi	r2,r2,255
   33b18:	1080201c 	xori	r2,r2,128
   33b1c:	10bfe004 	addi	r2,r2,-128
   33b20:	10800bd8 	cmpnei	r2,r2,47
   33b24:	1000031e 	bne	r2,zero,33b34 <alt_find_file+0x6c>
    {
      len -= 1;
   33b28:	e0bffe17 	ldw	r2,-8(fp)
   33b2c:	10bfffc4 	addi	r2,r2,-1
   33b30:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   33b34:	e0bffe17 	ldw	r2,-8(fp)
   33b38:	e0ffff17 	ldw	r3,-4(fp)
   33b3c:	1885883a 	add	r2,r3,r2
   33b40:	10800003 	ldbu	r2,0(r2)
   33b44:	10803fcc 	andi	r2,r2,255
   33b48:	1080201c 	xori	r2,r2,128
   33b4c:	10bfe004 	addi	r2,r2,-128
   33b50:	10800be0 	cmpeqi	r2,r2,47
   33b54:	1000081e 	bne	r2,zero,33b78 <alt_find_file+0xb0>
   33b58:	e0bffe17 	ldw	r2,-8(fp)
   33b5c:	e0ffff17 	ldw	r3,-4(fp)
   33b60:	1885883a 	add	r2,r3,r2
   33b64:	10800003 	ldbu	r2,0(r2)
   33b68:	10803fcc 	andi	r2,r2,255
   33b6c:	1080201c 	xori	r2,r2,128
   33b70:	10bfe004 	addi	r2,r2,-128
   33b74:	10000a1e 	bne	r2,zero,33ba0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   33b78:	e0bffd17 	ldw	r2,-12(fp)
   33b7c:	10800217 	ldw	r2,8(r2)
   33b80:	e0fffe17 	ldw	r3,-8(fp)
   33b84:	180d883a 	mov	r6,r3
   33b88:	e17fff17 	ldw	r5,-4(fp)
   33b8c:	1009883a 	mov	r4,r2
   33b90:	0033dec0 	call	33dec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   33b94:	1000021e 	bne	r2,zero,33ba0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   33b98:	e0bffd17 	ldw	r2,-12(fp)
   33b9c:	00000706 	br	33bbc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   33ba0:	e0bffd17 	ldw	r2,-12(fp)
   33ba4:	10800017 	ldw	r2,0(r2)
   33ba8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   33bac:	e0fffd17 	ldw	r3,-12(fp)
   33bb0:	d0a00704 	addi	r2,gp,-32740
   33bb4:	18bfcc1e 	bne	r3,r2,33ae8 <__alt_data_end+0xffff46e8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   33bb8:	0005883a 	mov	r2,zero
}
   33bbc:	e037883a 	mov	sp,fp
   33bc0:	dfc00117 	ldw	ra,4(sp)
   33bc4:	df000017 	ldw	fp,0(sp)
   33bc8:	dec00204 	addi	sp,sp,8
   33bcc:	f800283a 	ret

00033bd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   33bd0:	defffc04 	addi	sp,sp,-16
   33bd4:	df000315 	stw	fp,12(sp)
   33bd8:	df000304 	addi	fp,sp,12
   33bdc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   33be0:	00bffa04 	movi	r2,-24
   33be4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   33be8:	e03ffd15 	stw	zero,-12(fp)
   33bec:	00001906 	br	33c54 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   33bf0:	008000f4 	movhi	r2,3
   33bf4:	10952204 	addi	r2,r2,21640
   33bf8:	e0fffd17 	ldw	r3,-12(fp)
   33bfc:	18c00324 	muli	r3,r3,12
   33c00:	10c5883a 	add	r2,r2,r3
   33c04:	10800017 	ldw	r2,0(r2)
   33c08:	10000f1e 	bne	r2,zero,33c48 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   33c0c:	008000f4 	movhi	r2,3
   33c10:	10952204 	addi	r2,r2,21640
   33c14:	e0fffd17 	ldw	r3,-12(fp)
   33c18:	18c00324 	muli	r3,r3,12
   33c1c:	10c5883a 	add	r2,r2,r3
   33c20:	e0ffff17 	ldw	r3,-4(fp)
   33c24:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   33c28:	d0e00b17 	ldw	r3,-32724(gp)
   33c2c:	e0bffd17 	ldw	r2,-12(fp)
   33c30:	1880020e 	bge	r3,r2,33c3c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   33c34:	e0bffd17 	ldw	r2,-12(fp)
   33c38:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   33c3c:	e0bffd17 	ldw	r2,-12(fp)
   33c40:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   33c44:	00000606 	br	33c60 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   33c48:	e0bffd17 	ldw	r2,-12(fp)
   33c4c:	10800044 	addi	r2,r2,1
   33c50:	e0bffd15 	stw	r2,-12(fp)
   33c54:	e0bffd17 	ldw	r2,-12(fp)
   33c58:	10800810 	cmplti	r2,r2,32
   33c5c:	103fe41e 	bne	r2,zero,33bf0 <__alt_data_end+0xffff47f0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   33c60:	e0bffe17 	ldw	r2,-8(fp)
}
   33c64:	e037883a 	mov	sp,fp
   33c68:	df000017 	ldw	fp,0(sp)
   33c6c:	dec00104 	addi	sp,sp,4
   33c70:	f800283a 	ret

00033c74 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   33c74:	defffb04 	addi	sp,sp,-20
   33c78:	df000415 	stw	fp,16(sp)
   33c7c:	df000404 	addi	fp,sp,16
   33c80:	e13ffe15 	stw	r4,-8(fp)
   33c84:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   33c88:	e0bfff17 	ldw	r2,-4(fp)
   33c8c:	10840070 	cmpltui	r2,r2,4097
   33c90:	1000021e 	bne	r2,zero,33c9c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   33c94:	00840004 	movi	r2,4096
   33c98:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   33c9c:	e0fffe17 	ldw	r3,-8(fp)
   33ca0:	e0bfff17 	ldw	r2,-4(fp)
   33ca4:	1885883a 	add	r2,r3,r2
   33ca8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   33cac:	e0bffe17 	ldw	r2,-8(fp)
   33cb0:	e0bffc15 	stw	r2,-16(fp)
   33cb4:	00000506 	br	33ccc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   33cb8:	e0bffc17 	ldw	r2,-16(fp)
   33cbc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   33cc0:	e0bffc17 	ldw	r2,-16(fp)
   33cc4:	10800804 	addi	r2,r2,32
   33cc8:	e0bffc15 	stw	r2,-16(fp)
   33ccc:	e0fffc17 	ldw	r3,-16(fp)
   33cd0:	e0bffd17 	ldw	r2,-12(fp)
   33cd4:	18bff836 	bltu	r3,r2,33cb8 <__alt_data_end+0xffff48b8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   33cd8:	e0bffe17 	ldw	r2,-8(fp)
   33cdc:	108007cc 	andi	r2,r2,31
   33ce0:	10000226 	beq	r2,zero,33cec <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   33ce4:	e0bffc17 	ldw	r2,-16(fp)
   33ce8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   33cec:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   33cf0:	0001883a 	nop
   33cf4:	e037883a 	mov	sp,fp
   33cf8:	df000017 	ldw	fp,0(sp)
   33cfc:	dec00104 	addi	sp,sp,4
   33d00:	f800283a 	ret

00033d04 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   33d04:	defffe04 	addi	sp,sp,-8
   33d08:	df000115 	stw	fp,4(sp)
   33d0c:	df000104 	addi	fp,sp,4
   33d10:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   33d14:	e0bfff17 	ldw	r2,-4(fp)
   33d18:	10bffe84 	addi	r2,r2,-6
   33d1c:	10c00428 	cmpgeui	r3,r2,16
   33d20:	18001a1e 	bne	r3,zero,33d8c <alt_exception_cause_generated_bad_addr+0x88>
   33d24:	100690ba 	slli	r3,r2,2
   33d28:	008000f4 	movhi	r2,3
   33d2c:	108f4f04 	addi	r2,r2,15676
   33d30:	1885883a 	add	r2,r3,r2
   33d34:	10800017 	ldw	r2,0(r2)
   33d38:	1000683a 	jmp	r2
   33d3c:	00033d7c 	xorhi	zero,zero,3317
   33d40:	00033d7c 	xorhi	zero,zero,3317
   33d44:	00033d8c 	andi	zero,zero,3318
   33d48:	00033d8c 	andi	zero,zero,3318
   33d4c:	00033d8c 	andi	zero,zero,3318
   33d50:	00033d7c 	xorhi	zero,zero,3317
   33d54:	00033d84 	movi	zero,3318
   33d58:	00033d8c 	andi	zero,zero,3318
   33d5c:	00033d7c 	xorhi	zero,zero,3317
   33d60:	00033d7c 	xorhi	zero,zero,3317
   33d64:	00033d8c 	andi	zero,zero,3318
   33d68:	00033d7c 	xorhi	zero,zero,3317
   33d6c:	00033d84 	movi	zero,3318
   33d70:	00033d8c 	andi	zero,zero,3318
   33d74:	00033d8c 	andi	zero,zero,3318
   33d78:	00033d7c 	xorhi	zero,zero,3317
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   33d7c:	00800044 	movi	r2,1
   33d80:	00000306 	br	33d90 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   33d84:	0005883a 	mov	r2,zero
   33d88:	00000106 	br	33d90 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   33d8c:	0005883a 	mov	r2,zero
  }
}
   33d90:	e037883a 	mov	sp,fp
   33d94:	df000017 	ldw	fp,0(sp)
   33d98:	dec00104 	addi	sp,sp,4
   33d9c:	f800283a 	ret

00033da0 <atexit>:
   33da0:	200b883a 	mov	r5,r4
   33da4:	000f883a 	mov	r7,zero
   33da8:	000d883a 	mov	r6,zero
   33dac:	0009883a 	mov	r4,zero
   33db0:	0033e681 	jmpi	33e68 <__register_exitproc>

00033db4 <exit>:
   33db4:	defffe04 	addi	sp,sp,-8
   33db8:	000b883a 	mov	r5,zero
   33dbc:	dc000015 	stw	r16,0(sp)
   33dc0:	dfc00115 	stw	ra,4(sp)
   33dc4:	2021883a 	mov	r16,r4
   33dc8:	0033f800 	call	33f80 <__call_exitprocs>
   33dcc:	008000f4 	movhi	r2,3
   33dd0:	10999b04 	addi	r2,r2,26220
   33dd4:	11000017 	ldw	r4,0(r2)
   33dd8:	20800f17 	ldw	r2,60(r4)
   33ddc:	10000126 	beq	r2,zero,33de4 <exit+0x30>
   33de0:	103ee83a 	callr	r2
   33de4:	8009883a 	mov	r4,r16
   33de8:	00341000 	call	34100 <_exit>

00033dec <memcmp>:
   33dec:	01c000c4 	movi	r7,3
   33df0:	3980192e 	bgeu	r7,r6,33e58 <memcmp+0x6c>
   33df4:	2144b03a 	or	r2,r4,r5
   33df8:	11c4703a 	and	r2,r2,r7
   33dfc:	10000f26 	beq	r2,zero,33e3c <memcmp+0x50>
   33e00:	20800003 	ldbu	r2,0(r4)
   33e04:	28c00003 	ldbu	r3,0(r5)
   33e08:	10c0151e 	bne	r2,r3,33e60 <memcmp+0x74>
   33e0c:	31bfff84 	addi	r6,r6,-2
   33e10:	01ffffc4 	movi	r7,-1
   33e14:	00000406 	br	33e28 <memcmp+0x3c>
   33e18:	20800003 	ldbu	r2,0(r4)
   33e1c:	28c00003 	ldbu	r3,0(r5)
   33e20:	31bfffc4 	addi	r6,r6,-1
   33e24:	10c00e1e 	bne	r2,r3,33e60 <memcmp+0x74>
   33e28:	21000044 	addi	r4,r4,1
   33e2c:	29400044 	addi	r5,r5,1
   33e30:	31fff91e 	bne	r6,r7,33e18 <__alt_data_end+0xffff4a18>
   33e34:	0005883a 	mov	r2,zero
   33e38:	f800283a 	ret
   33e3c:	20c00017 	ldw	r3,0(r4)
   33e40:	28800017 	ldw	r2,0(r5)
   33e44:	18bfee1e 	bne	r3,r2,33e00 <__alt_data_end+0xffff4a00>
   33e48:	31bfff04 	addi	r6,r6,-4
   33e4c:	21000104 	addi	r4,r4,4
   33e50:	29400104 	addi	r5,r5,4
   33e54:	39bff936 	bltu	r7,r6,33e3c <__alt_data_end+0xffff4a3c>
   33e58:	303fe91e 	bne	r6,zero,33e00 <__alt_data_end+0xffff4a00>
   33e5c:	003ff506 	br	33e34 <__alt_data_end+0xffff4a34>
   33e60:	10c5c83a 	sub	r2,r2,r3
   33e64:	f800283a 	ret

00033e68 <__register_exitproc>:
   33e68:	defffa04 	addi	sp,sp,-24
   33e6c:	dc000315 	stw	r16,12(sp)
   33e70:	040000f4 	movhi	r16,3
   33e74:	84199b04 	addi	r16,r16,26220
   33e78:	80c00017 	ldw	r3,0(r16)
   33e7c:	dc400415 	stw	r17,16(sp)
   33e80:	dfc00515 	stw	ra,20(sp)
   33e84:	18805217 	ldw	r2,328(r3)
   33e88:	2023883a 	mov	r17,r4
   33e8c:	10003726 	beq	r2,zero,33f6c <__register_exitproc+0x104>
   33e90:	10c00117 	ldw	r3,4(r2)
   33e94:	010007c4 	movi	r4,31
   33e98:	20c00e16 	blt	r4,r3,33ed4 <__register_exitproc+0x6c>
   33e9c:	1a000044 	addi	r8,r3,1
   33ea0:	8800221e 	bne	r17,zero,33f2c <__register_exitproc+0xc4>
   33ea4:	18c00084 	addi	r3,r3,2
   33ea8:	18c7883a 	add	r3,r3,r3
   33eac:	18c7883a 	add	r3,r3,r3
   33eb0:	12000115 	stw	r8,4(r2)
   33eb4:	10c7883a 	add	r3,r2,r3
   33eb8:	19400015 	stw	r5,0(r3)
   33ebc:	0005883a 	mov	r2,zero
   33ec0:	dfc00517 	ldw	ra,20(sp)
   33ec4:	dc400417 	ldw	r17,16(sp)
   33ec8:	dc000317 	ldw	r16,12(sp)
   33ecc:	dec00604 	addi	sp,sp,24
   33ed0:	f800283a 	ret
   33ed4:	00800034 	movhi	r2,0
   33ed8:	10800004 	addi	r2,r2,0
   33edc:	10002626 	beq	r2,zero,33f78 <__register_exitproc+0x110>
   33ee0:	01006404 	movi	r4,400
   33ee4:	d9400015 	stw	r5,0(sp)
   33ee8:	d9800115 	stw	r6,4(sp)
   33eec:	d9c00215 	stw	r7,8(sp)
   33ef0:	00000000 	call	0 <__reset-0x20000>
   33ef4:	d9400017 	ldw	r5,0(sp)
   33ef8:	d9800117 	ldw	r6,4(sp)
   33efc:	d9c00217 	ldw	r7,8(sp)
   33f00:	10001d26 	beq	r2,zero,33f78 <__register_exitproc+0x110>
   33f04:	81000017 	ldw	r4,0(r16)
   33f08:	10000115 	stw	zero,4(r2)
   33f0c:	02000044 	movi	r8,1
   33f10:	22405217 	ldw	r9,328(r4)
   33f14:	0007883a 	mov	r3,zero
   33f18:	12400015 	stw	r9,0(r2)
   33f1c:	20805215 	stw	r2,328(r4)
   33f20:	10006215 	stw	zero,392(r2)
   33f24:	10006315 	stw	zero,396(r2)
   33f28:	883fde26 	beq	r17,zero,33ea4 <__alt_data_end+0xffff4aa4>
   33f2c:	18c9883a 	add	r4,r3,r3
   33f30:	2109883a 	add	r4,r4,r4
   33f34:	1109883a 	add	r4,r2,r4
   33f38:	21802215 	stw	r6,136(r4)
   33f3c:	01800044 	movi	r6,1
   33f40:	12406217 	ldw	r9,392(r2)
   33f44:	30cc983a 	sll	r6,r6,r3
   33f48:	4992b03a 	or	r9,r9,r6
   33f4c:	12406215 	stw	r9,392(r2)
   33f50:	21c04215 	stw	r7,264(r4)
   33f54:	01000084 	movi	r4,2
   33f58:	893fd21e 	bne	r17,r4,33ea4 <__alt_data_end+0xffff4aa4>
   33f5c:	11006317 	ldw	r4,396(r2)
   33f60:	218cb03a 	or	r6,r4,r6
   33f64:	11806315 	stw	r6,396(r2)
   33f68:	003fce06 	br	33ea4 <__alt_data_end+0xffff4aa4>
   33f6c:	18805304 	addi	r2,r3,332
   33f70:	18805215 	stw	r2,328(r3)
   33f74:	003fc606 	br	33e90 <__alt_data_end+0xffff4a90>
   33f78:	00bfffc4 	movi	r2,-1
   33f7c:	003fd006 	br	33ec0 <__alt_data_end+0xffff4ac0>

00033f80 <__call_exitprocs>:
   33f80:	defff504 	addi	sp,sp,-44
   33f84:	df000915 	stw	fp,36(sp)
   33f88:	dd400615 	stw	r21,24(sp)
   33f8c:	dc800315 	stw	r18,12(sp)
   33f90:	dfc00a15 	stw	ra,40(sp)
   33f94:	ddc00815 	stw	r23,32(sp)
   33f98:	dd800715 	stw	r22,28(sp)
   33f9c:	dd000515 	stw	r20,20(sp)
   33fa0:	dcc00415 	stw	r19,16(sp)
   33fa4:	dc400215 	stw	r17,8(sp)
   33fa8:	dc000115 	stw	r16,4(sp)
   33fac:	d9000015 	stw	r4,0(sp)
   33fb0:	2839883a 	mov	fp,r5
   33fb4:	04800044 	movi	r18,1
   33fb8:	057fffc4 	movi	r21,-1
   33fbc:	008000f4 	movhi	r2,3
   33fc0:	10999b04 	addi	r2,r2,26220
   33fc4:	12000017 	ldw	r8,0(r2)
   33fc8:	45005217 	ldw	r20,328(r8)
   33fcc:	44c05204 	addi	r19,r8,328
   33fd0:	a0001c26 	beq	r20,zero,34044 <__call_exitprocs+0xc4>
   33fd4:	a0800117 	ldw	r2,4(r20)
   33fd8:	15ffffc4 	addi	r23,r2,-1
   33fdc:	b8000d16 	blt	r23,zero,34014 <__call_exitprocs+0x94>
   33fe0:	14000044 	addi	r16,r2,1
   33fe4:	8421883a 	add	r16,r16,r16
   33fe8:	8421883a 	add	r16,r16,r16
   33fec:	84402004 	addi	r17,r16,128
   33ff0:	a463883a 	add	r17,r20,r17
   33ff4:	a421883a 	add	r16,r20,r16
   33ff8:	e0001e26 	beq	fp,zero,34074 <__call_exitprocs+0xf4>
   33ffc:	80804017 	ldw	r2,256(r16)
   34000:	e0801c26 	beq	fp,r2,34074 <__call_exitprocs+0xf4>
   34004:	bdffffc4 	addi	r23,r23,-1
   34008:	843fff04 	addi	r16,r16,-4
   3400c:	8c7fff04 	addi	r17,r17,-4
   34010:	bd7ff91e 	bne	r23,r21,33ff8 <__alt_data_end+0xffff4bf8>
   34014:	00800034 	movhi	r2,0
   34018:	10800004 	addi	r2,r2,0
   3401c:	10000926 	beq	r2,zero,34044 <__call_exitprocs+0xc4>
   34020:	a0800117 	ldw	r2,4(r20)
   34024:	1000301e 	bne	r2,zero,340e8 <__call_exitprocs+0x168>
   34028:	a0800017 	ldw	r2,0(r20)
   3402c:	10003226 	beq	r2,zero,340f8 <__call_exitprocs+0x178>
   34030:	a009883a 	mov	r4,r20
   34034:	98800015 	stw	r2,0(r19)
   34038:	00000000 	call	0 <__reset-0x20000>
   3403c:	9d000017 	ldw	r20,0(r19)
   34040:	a03fe41e 	bne	r20,zero,33fd4 <__alt_data_end+0xffff4bd4>
   34044:	dfc00a17 	ldw	ra,40(sp)
   34048:	df000917 	ldw	fp,36(sp)
   3404c:	ddc00817 	ldw	r23,32(sp)
   34050:	dd800717 	ldw	r22,28(sp)
   34054:	dd400617 	ldw	r21,24(sp)
   34058:	dd000517 	ldw	r20,20(sp)
   3405c:	dcc00417 	ldw	r19,16(sp)
   34060:	dc800317 	ldw	r18,12(sp)
   34064:	dc400217 	ldw	r17,8(sp)
   34068:	dc000117 	ldw	r16,4(sp)
   3406c:	dec00b04 	addi	sp,sp,44
   34070:	f800283a 	ret
   34074:	a0800117 	ldw	r2,4(r20)
   34078:	80c00017 	ldw	r3,0(r16)
   3407c:	10bfffc4 	addi	r2,r2,-1
   34080:	15c01426 	beq	r2,r23,340d4 <__call_exitprocs+0x154>
   34084:	80000015 	stw	zero,0(r16)
   34088:	183fde26 	beq	r3,zero,34004 <__alt_data_end+0xffff4c04>
   3408c:	95c8983a 	sll	r4,r18,r23
   34090:	a0806217 	ldw	r2,392(r20)
   34094:	a5800117 	ldw	r22,4(r20)
   34098:	2084703a 	and	r2,r4,r2
   3409c:	10000b26 	beq	r2,zero,340cc <__call_exitprocs+0x14c>
   340a0:	a0806317 	ldw	r2,396(r20)
   340a4:	2088703a 	and	r4,r4,r2
   340a8:	20000c1e 	bne	r4,zero,340dc <__call_exitprocs+0x15c>
   340ac:	89400017 	ldw	r5,0(r17)
   340b0:	d9000017 	ldw	r4,0(sp)
   340b4:	183ee83a 	callr	r3
   340b8:	a0800117 	ldw	r2,4(r20)
   340bc:	15bfbf1e 	bne	r2,r22,33fbc <__alt_data_end+0xffff4bbc>
   340c0:	98800017 	ldw	r2,0(r19)
   340c4:	153fcf26 	beq	r2,r20,34004 <__alt_data_end+0xffff4c04>
   340c8:	003fbc06 	br	33fbc <__alt_data_end+0xffff4bbc>
   340cc:	183ee83a 	callr	r3
   340d0:	003ff906 	br	340b8 <__alt_data_end+0xffff4cb8>
   340d4:	a5c00115 	stw	r23,4(r20)
   340d8:	003feb06 	br	34088 <__alt_data_end+0xffff4c88>
   340dc:	89000017 	ldw	r4,0(r17)
   340e0:	183ee83a 	callr	r3
   340e4:	003ff406 	br	340b8 <__alt_data_end+0xffff4cb8>
   340e8:	a0800017 	ldw	r2,0(r20)
   340ec:	a027883a 	mov	r19,r20
   340f0:	1029883a 	mov	r20,r2
   340f4:	003fb606 	br	33fd0 <__alt_data_end+0xffff4bd0>
   340f8:	0005883a 	mov	r2,zero
   340fc:	003ffb06 	br	340ec <__alt_data_end+0xffff4cec>

00034100 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   34100:	defffd04 	addi	sp,sp,-12
   34104:	df000215 	stw	fp,8(sp)
   34108:	df000204 	addi	fp,sp,8
   3410c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   34110:	0001883a 	nop
   34114:	e0bfff17 	ldw	r2,-4(fp)
   34118:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   3411c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   34120:	10000226 	beq	r2,zero,3412c <_exit+0x2c>
    ALT_SIM_FAIL();
   34124:	002af070 	cmpltui	zero,zero,43969
   34128:	00000106 	br	34130 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   3412c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   34130:	003fff06 	br	34130 <__alt_data_end+0xffff4d30>
